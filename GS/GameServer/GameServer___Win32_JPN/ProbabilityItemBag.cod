; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ProbabilityItemBag.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CItemBagAttrZt@@QAE@XZ			; CItemBagAttrZt::CItemBagAttrZt
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\gamblesystem.h
;	COMDAT ??0CItemBagAttrZt@@QAE@XZ
_TEXT	SEGMENT
??0CItemBagAttrZt@@QAE@XZ PROC				; CItemBagAttrZt::CItemBagAttrZt, COMDAT
; _this$ = ecx

; 23   : 	CItemBagAttrZt()

  00000	8b c1		 mov	 eax, ecx

; 24   : 	{
; 25   : 		this->m_type = 0;

  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 26   : 		this->m_index = 0;
; 27   : 		this->m_minLevel = 0;
; 28   : 		this->m_maxLevel = 0;
; 29   : 		this->m_isskill = 0;

  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 30   : 		this->m_isluck = 0;
; 31   : 		this->m_isoption = 0;
; 32   : 		this->m_isexitem = 0;
; 33   : 	}

  0000f	c3		 ret	 0
??0CItemBagAttrZt@@QAE@XZ ENDP				; CItemBagAttrZt::CItemBagAttrZt
_TEXT	ENDS
PUBLIC	?Init@CItemBagDropMapInfo@@QAEXXZ		; CItemBagDropMapInfo::Init
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\itembagzt.h
;	COMDAT ?Init@CItemBagDropMapInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@CItemBagDropMapInfo@@QAEXXZ PROC			; CItemBagDropMapInfo::Init, COMDAT
; _this$ = ecx

; 26   : 		this->m_bIsDrop = false;

  00000	32 c0		 xor	 al, al
  00002	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0

; 27   : 		this->m_MinMonsterLevel = 0;
; 28   : 		this->m_MaxMonsterLevel = 0;

  00007	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 29   : 	};

  0000a	c3		 ret	 0
?Init@CItemBagDropMapInfo@@QAEXXZ ENDP			; CItemBagDropMapInfo::Init
_TEXT	ENDS
PUBLIC	??0CProbabilityItemBagAttrZt@@QAE@XZ		; CProbabilityItemBagAttrZt::CProbabilityItemBagAttrZt
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
;	COMDAT ??0CProbabilityItemBagAttrZt@@QAE@XZ
_TEXT	SEGMENT
??0CProbabilityItemBagAttrZt@@QAE@XZ PROC		; CProbabilityItemBagAttrZt::CProbabilityItemBagAttrZt, COMDAT
; _this$ = ecx

; 22   : 	CProbabilityItemBagAttrZt() //season 4.5 changed

  00000	8b c1		 mov	 eax, ecx
  00002	32 c9		 xor	 cl, cl
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 23   : 	{
; 24   : 		this->m_issetitem = 0; //nice fix from 77 :)

  00011	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 25   : 	};

  00014	c3		 ret	 0
??0CProbabilityItemBagAttrZt@@QAE@XZ ENDP		; CProbabilityItemBagAttrZt::CProbabilityItemBagAttrZt
_TEXT	ENDS
PUBLIC	?GetBagCount@CProbabilityItemBag@@AAEHXZ	; CProbabilityItemBag::GetBagCount
; Function compile flags: /Ogtp
;	COMDAT ?GetBagCount@CProbabilityItemBag@@AAEHXZ
_TEXT	SEGMENT
?GetBagCount@CProbabilityItemBag@@AAEHXZ PROC		; CProbabilityItemBag::GetBagCount, COMDAT
; _this$ = ecx

; 63   : 	int GetBagCount(){return this->m_iBagObjectCount;}

  00000	8b 81 20 01 00
	00		 mov	 eax, DWORD PTR [ecx+288]
  00006	c3		 ret	 0
?GetBagCount@CProbabilityItemBag@@AAEHXZ ENDP		; CProbabilityItemBag::GetBagCount
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CProbabilityItemBag@@6B@			; CProbabilityItemBag::`vftable'
PUBLIC	??1CProbabilityItemBag@@UAE@XZ			; CProbabilityItemBag::~CProbabilityItemBag
PUBLIC	??_R4CProbabilityItemBag@@6B@			; CProbabilityItemBag::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCProbabilityItemBag@@@8			; CProbabilityItemBag `RTTI Type Descriptor'
PUBLIC	??_R3CProbabilityItemBag@@8			; CProbabilityItemBag::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProbabilityItemBag@@8			; CProbabilityItemBag::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CProbabilityItemBag@@8		; CProbabilityItemBag::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECProbabilityItemBag@@UAEPAXI@Z:PROC		; CProbabilityItemBag::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CProbabilityItemBag@@8
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CProbabilityItemBag@@8 DD FLAT:??_R0?AVCProbabilityItemBag@@@8 ; CProbabilityItemBag::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProbabilityItemBag@@8
rdata$r	ENDS
;	COMDAT ??_R2CProbabilityItemBag@@8
rdata$r	SEGMENT
??_R2CProbabilityItemBag@@8 DD FLAT:??_R1A@?0A@EA@CProbabilityItemBag@@8 ; CProbabilityItemBag::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CProbabilityItemBag@@8
rdata$r	SEGMENT
??_R3CProbabilityItemBag@@8 DD 00H			; CProbabilityItemBag::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CProbabilityItemBag@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCProbabilityItemBag@@@8
_DATA	SEGMENT
??_R0?AVCProbabilityItemBag@@@8 DD FLAT:??_7type_info@@6B@ ; CProbabilityItemBag `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCProbabilityItemBag@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CProbabilityItemBag@@6B@
rdata$r	SEGMENT
??_R4CProbabilityItemBag@@6B@ DD 00H			; CProbabilityItemBag::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCProbabilityItemBag@@@8
	DD	FLAT:??_R3CProbabilityItemBag@@8
rdata$r	ENDS
;	COMDAT ??_7CProbabilityItemBag@@6B@
CONST	SEGMENT
??_7CProbabilityItemBag@@6B@ DD FLAT:??_R4CProbabilityItemBag@@6B@ ; CProbabilityItemBag::`vftable'
	DD	FLAT:??_ECProbabilityItemBag@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CProbabilityItemBag@@UAE@XZ
_TEXT	SEGMENT
??1CProbabilityItemBag@@UAE@XZ PROC			; CProbabilityItemBag::~CProbabilityItemBag, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CProbabilityItemBag@@6B@

; 23   : 	return;
; 24   : }

  00006	c3		 ret	 0
??1CProbabilityItemBag@@UAE@XZ ENDP			; CProbabilityItemBag::~CProbabilityItemBag
_TEXT	ENDS
PUBLIC	??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BO@PLHOAEKH@ZtEvent?5ItemBag?5LoadFail?5?$FL?$CFs?$FN?$AA@ ; `string'
PUBLIC	??_C@_0GL@LIMNLNHJ@?$FL?$CFs?$FN?5Eventitemnum?5?$DN?5?$CFd?0EventItem@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	_script_file$GSCopy$
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadItem@CProbabilityItemBag@@QAEXPAD@Z	; CProbabilityItemBag::LoadItem
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fclose:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__wsprintfA:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ DB 'Load Script Error '
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PLHOAEKH@ZtEvent?5ItemBag?5LoadFail?5?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_0BO@PLHOAEKH@ZtEvent?5ItemBag?5LoadFail?5?$FL?$CFs?$FN?$AA@ DB 'ZtE'
	DB	'vent ItemBag LoadFail [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@LIMNLNHJ@?$FL?$CFs?$FN?5Eventitemnum?5?$DN?5?$CFd?0EventItem@
CONST	SEGMENT
??_C@_0GL@LIMNLNHJ@?$FL?$CFs?$FN?5Eventitemnum?5?$DN?5?$CFd?0EventItem@ DB '['
	DB	'%s] Eventitemnum = %d,EventItemLevel = %d, EventItemDropRate '
	DB	'= %d, ItemDropRate = %d, ExItemDropRate = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadItem@CProbabilityItemBag@@QAEXPAD@Z
_TEXT	SEGMENT
_script_file$GSCopy$ = -272				; size = 4
tv597 = -268						; size = 4
tv595 = -268						; size = 4
tv588 = -268						; size = 4
tv586 = -268						; size = 4
tv578 = -268						; size = 4
tv571 = -268						; size = 4
tv558 = -268						; size = 4
tv546 = -268						; size = 4
tv518 = -268						; size = 4
tv445 = -268						; size = 4
tv443 = -268						; size = 4
tv434 = -268						; size = 4
tv431 = -268						; size = 4
tv422 = -268						; size = 4
tv418 = -268						; size = 4
tv407 = -268						; size = 4
tv403 = -268						; size = 4
tv391 = -268						; size = 4
tv389 = -268						; size = 4
tv263 = -268						; size = 4
tv259 = -268						; size = 4
tv248 = -268						; size = 4
tv246 = -268						; size = 4
tv144 = -268						; size = 4
tv132 = -268						; size = 4
tv88 = -268						; size = 4
tv600 = -262						; size = 2
tv592 = -262						; size = 2
tv582 = -262						; size = 2
tv548 = -262						; size = 2
tv540 = -262						; size = 2
tv450 = -262						; size = 2
tv437 = -262						; size = 2
tv426 = -262						; size = 2
tv413 = -262						; size = 2
tv397 = -262						; size = 2
tv269 = -262						; size = 2
tv253 = -262						; size = 2
tv131 = -262						; size = 2
_szTemp$210268 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_script_file$ = 8					; size = 4
?LoadItem@CProbabilityItemBag@@QAEXPAD@Z PROC		; CProbabilityItemBag::LoadItem, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _script_file$[ebp]
  00018	8b f1		 mov	 esi, ecx

; 44   : 	int Token;
; 45   : 
; 46   : 	this->m_bLoad = FALSE;
; 47   : 	SMDFile = fopen(script_file, "r");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001f	57		 push	 edi

; 91   : 					}
; 92   : 
; 93   : 					Token = GetToken();

  00020	89 bd f0 fe ff
	ff		 mov	 DWORD PTR _script_file$GSCopy$[ebp], edi
  00026	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0002d	e8 00 00 00 00	 call	 _fopen
  00032	83 c4 08	 add	 esp, 8
  00035	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  0003a	85 c0		 test	 eax, eax
  0003c	75 2c		 jne	 SHORT $LN47@LoadItem

; 48   : 
; 49   : 	if ( SMDFile == NULL )
; 50   : 	{
; 51   : 		LogAdd(lMsg.Get(MSGGET(1, 197)), script_file);

  0003e	57		 push	 edi
  0003f	68 c5 01 00 00	 push	 453			; 000001c5H
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00049	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0004e	50		 push	 eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00055	83 c4 08	 add	 esp, 8
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 321  : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
$LN47@LoadItem:
  0006a	53		 push	 ebx

; 52   : 		return;
; 53   : 	}
; 54   : 
; 55   : 	int n=0;
; 56   : 	int	iProbability=0;
; 57   : 
; 58   : 	while ( true )
; 59   : 	{
; 60   : 		Token = GetToken();

  0006b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 61   : 
; 62   : 		if ( Token == 2 )

  00070	83 f8 02	 cmp	 eax, 2
  00073	0f 84 20 08 00
	00		 je	 $LN77@LoadItem
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL46@LoadItem:

; 63   : 		{
; 64   : 			break;
; 65   : 		}
; 66   : 
; 67   : 		if ( Token == 1 )

  00080	83 f8 01	 cmp	 eax, 1
  00083	0f 85 fc 07 00
	00		 jne	 $LN14@LoadItem

; 68   : 		{
; 69   : 			int st = (int)TokenNumber;	// script_type

  00089	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0008f	e8 00 00 00 00	 call	 __ftol2_sse

; 70   : 
; 71   : 			if ( st == 0 )

  00094	85 c0		 test	 eax, eax
  00096	0f 85 3c 01 00
	00		 jne	 $LN42@LoadItem
  0009c	8d 64 24 00	 npad	 4
$LL41@LoadItem:

; 72   : 			{
; 73   : 				while ( true )
; 74   : 				{
; 75   : 					Token = GetToken();

  000a0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 76   : 
; 77   : 					if ( Token == 0 )

  000a5	85 c0		 test	 eax, eax
  000a7	75 37		 jne	 SHORT $LN106@LoadItem

; 78   : 					{
; 79   : 						if ( strcmp("end", TokenString) == 0 )

  000a9	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000ae	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL79@LoadItem:
  000b3	8a 10		 mov	 dl, BYTE PTR [eax]
  000b5	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000b7	75 1a		 jne	 SHORT $LN80@LoadItem
  000b9	84 d2		 test	 dl, dl
  000bb	74 12		 je	 SHORT $LN81@LoadItem
  000bd	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000c0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c3	75 0e		 jne	 SHORT $LN80@LoadItem
  000c5	83 c0 02	 add	 eax, 2
  000c8	83 c1 02	 add	 ecx, 2
  000cb	84 d2		 test	 dl, dl
  000cd	75 e4		 jne	 SHORT $LL79@LoadItem
$LN81@LoadItem:
  000cf	33 c0		 xor	 eax, eax
  000d1	eb 05		 jmp	 SHORT $LN82@LoadItem
$LN80@LoadItem:
  000d3	1b c0		 sbb	 eax, eax
  000d5	83 d8 ff	 sbb	 eax, -1
$LN82@LoadItem:
  000d8	85 c0		 test	 eax, eax
  000da	0f 84 a5 07 00
	00		 je	 $LN14@LoadItem
$LN106@LoadItem:

; 80   : 						{
; 81   : 							break;
; 82   : 						}
; 83   : 					}
; 84   : 
; 85   : 					int map = (int)TokenNumber;

  000e0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e6	e8 00 00 00 00	 call	 __ftol2_sse
  000eb	8b f8		 mov	 edi, eax

; 86   : 
; 87   : 					if ( MAX_MAP_RANGE(map) == FALSE )

  000ed	85 ff		 test	 edi, edi
  000ef	0f 88 d2 07 00
	00		 js	 $LN65@LoadItem
  000f5	33 c0		 xor	 eax, eax
  000f7	83 ff 52	 cmp	 edi, 82			; 00000052H
  000fa	0f 9e c0	 setle	 al
  000fd	85 c0		 test	 eax, eax
  000ff	0f 84 c2 07 00
	00		 je	 $LN65@LoadItem

; 91   : 					}
; 92   : 
; 93   : 					Token = GetToken();

  00105	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 94   : 					this->DropMapInfo[map].m_bIsDrop = (BYTE)TokenNumber;

  0010a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00110	8d 04 7e	 lea	 eax, DWORD PTR [esi+edi*2]
  00113	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv600[ebp]
  00119	8d 1c 07	 lea	 ebx, DWORD PTR [edi+eax]
  0011c	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv600[ebp]
  00123	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00128	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv597[ebp], eax
  0012e	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv597[ebp]
  00134	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv595[ebp]
  0013a	8a 8d f4 fe ff
	ff		 mov	 cl, BYTE PTR tv595[ebp]
  00140	88 8b 24 01 00
	00		 mov	 BYTE PTR [ebx+292], cl
  00146	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv600[ebp]

; 95   : 
; 96   : 					Token = GetToken();

  0014c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 					this->DropMapInfo[map].m_MinMonsterLevel = (BYTE)TokenNumber;

  00151	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00157	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv592[ebp]
  0015d	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv592[ebp]
  00164	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00169	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv588[ebp], eax
  0016f	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv588[ebp]
  00175	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv586[ebp]
  0017b	8a 95 f4 fe ff
	ff		 mov	 dl, BYTE PTR tv586[ebp]
  00181	88 93 25 01 00
	00		 mov	 BYTE PTR [ebx+293], dl
  00187	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv592[ebp]

; 98   : 
; 99   : 					Token = GetToken();

  0018d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 100  : 					this->DropMapInfo[map].m_MaxMonsterLevel = (BYTE)TokenNumber;

  00192	8d 8c 7e c4 00
	00 00		 lea	 ecx, DWORD PTR [esi+edi*2+196]
  00199	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0019f	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv582[ebp]
  001a5	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv582[ebp]
  001ac	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001b1	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv578[ebp], eax
  001b7	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv578[ebp]
  001bd	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv571[ebp]
  001c3	8a 85 f4 fe ff
	ff		 mov	 al, BYTE PTR tv571[ebp]
  001c9	88 44 0f 62	 mov	 BYTE PTR [edi+ecx+98], al
  001cd	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv582[ebp]

; 101  : 				}

  001d3	e9 c8 fe ff ff	 jmp	 $LL41@LoadItem
$LN42@LoadItem:

; 102  : 			
; 103  : 			}
; 104  : 			else if ( st == 1 )

  001d8	83 f8 01	 cmp	 eax, 1
  001db	0f 85 39 01 00
	00		 jne	 $LN35@LoadItem
$LL34@LoadItem:

; 105  : 			{
; 106  : 				while ( true )
; 107  : 				{
; 108  : 					Token = GetToken();

  001e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 109  : 
; 110  : 					if ( Token == 0 )

  001e6	85 c0		 test	 eax, eax
  001e8	75 37		 jne	 SHORT $LN31@LoadItem

; 111  : 					{
; 112  : 						if ( strcmp("end", TokenString) == 0 )

  001ea	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001ef	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL83@LoadItem:
  001f4	8a 10		 mov	 dl, BYTE PTR [eax]
  001f6	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001f8	75 1a		 jne	 SHORT $LN84@LoadItem
  001fa	84 d2		 test	 dl, dl
  001fc	74 12		 je	 SHORT $LN85@LoadItem
  001fe	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00201	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00204	75 0e		 jne	 SHORT $LN84@LoadItem
  00206	83 c0 02	 add	 eax, 2
  00209	83 c1 02	 add	 ecx, 2
  0020c	84 d2		 test	 dl, dl
  0020e	75 e4		 jne	 SHORT $LL83@LoadItem
$LN85@LoadItem:
  00210	33 c0		 xor	 eax, eax
  00212	eb 05		 jmp	 SHORT $LN86@LoadItem
$LN84@LoadItem:
  00214	1b c0		 sbb	 eax, eax
  00216	83 d8 ff	 sbb	 eax, -1
$LN86@LoadItem:
  00219	85 c0		 test	 eax, eax
  0021b	0f 84 64 06 00
	00		 je	 $LN14@LoadItem
$LN31@LoadItem:

; 113  : 						{
; 114  : 							break;
; 115  : 						}
; 116  : 					}
; 117  : 
; 118  : 					strcpy(this->m_sEventName, TokenString);

  00221	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
  00224	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
  00229	8b d3		 mov	 edx, ebx
  0022b	2b d0		 sub	 edx, eax
  0022d	8d 49 00	 npad	 3
$LL52@LoadItem:
  00230	8a 08		 mov	 cl, BYTE PTR [eax]
  00232	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00235	40		 inc	 eax
  00236	84 c9		 test	 cl, cl
  00238	75 f6		 jne	 SHORT $LL52@LoadItem

; 119  : 
; 120  : 					Token = GetToken();

  0023a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 121  : 					this->m_iDropZen = (int)TokenNumber;

  0023f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00245	e8 00 00 00 00	 call	 __ftol2_sse
  0024a	89 86 10 01 00
	00		 mov	 DWORD PTR [esi+272], eax

; 122  : 
; 123  : 					Token = GetToken();

  00250	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 124  : 					int type = (int)TokenNumber;

  00255	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0025b	e8 00 00 00 00	 call	 __ftol2_sse
  00260	8b f8		 mov	 edi, eax

; 125  : 
; 126  : 					Token = GetToken();

  00262	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 127  : 					int index = (int)TokenNumber;
; 128  : 
; 129  : 					this->m_iEventItemType = ITEMGET(type, index);

  00267	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026d	c1 e7 09	 shl	 edi, 9
  00270	e8 00 00 00 00	 call	 __ftol2_sse
  00275	03 f8		 add	 edi, eax
  00277	89 be 08 01 00
	00		 mov	 DWORD PTR [esi+264], edi

; 130  : 
; 131  : 					Token = GetToken();

  0027d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 132  : 					this->m_iEventItemLevel = (int)TokenNumber;

  00282	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00288	e8 00 00 00 00	 call	 __ftol2_sse
  0028d	89 86 0c 01 00
	00		 mov	 DWORD PTR [esi+268], eax

; 133  : 
; 134  : 					Token = GetToken();

  00293	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 135  : 					this->m_iEventItemDropRate = (int)TokenNumber;

  00298	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029e	e8 00 00 00 00	 call	 __ftol2_sse
  002a3	89 86 14 01 00
	00		 mov	 DWORD PTR [esi+276], eax

; 136  : 
; 137  : 					Token = GetToken();

  002a9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 138  : 					this->m_iItemDropRate = (int)TokenNumber;

  002ae	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b4	e8 00 00 00 00	 call	 __ftol2_sse
  002b9	89 86 18 01 00
	00		 mov	 DWORD PTR [esi+280], eax

; 139  : 
; 140  : 					Token = GetToken();

  002bf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 141  : 					this->m_iExItemDropRate = (int)TokenNumber;

  002c4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ca	e8 00 00 00 00	 call	 __ftol2_sse

; 142  : 
; 143  : 					char szTemp[256];
; 144  : 
; 145  : 					wsprintf(szTemp, "[%s] Eventitemnum = %d,EventItemLevel = %d, EventItemDropRate = %d, ItemDropRate = %d, ExItemDropRate = %d", this->m_sEventName, this->m_iEventItemType, this->m_iEventItemLevel, this->m_iEventItemDropRate, this->m_iItemDropRate, this->m_iExItemDropRate);

  002cf	8b 96 18 01 00
	00		 mov	 edx, DWORD PTR [esi+280]
  002d5	8b 8e 0c 01 00
	00		 mov	 ecx, DWORD PTR [esi+268]
  002db	50		 push	 eax
  002dc	52		 push	 edx
  002dd	8b 96 08 01 00
	00		 mov	 edx, DWORD PTR [esi+264]
  002e3	89 86 1c 01 00
	00		 mov	 DWORD PTR [esi+284], eax
  002e9	8b 86 14 01 00
	00		 mov	 eax, DWORD PTR [esi+276]
  002ef	50		 push	 eax
  002f0	51		 push	 ecx
  002f1	52		 push	 edx
  002f2	53		 push	 ebx
  002f3	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$210268[ebp]
  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_0GL@LIMNLNHJ@?$FL?$CFs?$FN?5Eventitemnum?5?$DN?5?$CFd?0EventItem@
  002fe	50		 push	 eax
  002ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 146  : 					LogAddTD(szTemp);

  00305	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$210268[ebp]
  0030b	51		 push	 ecx
  0030c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00312	83 c4 24	 add	 esp, 36			; 00000024H

; 147  : 				}

  00315	e9 c7 fe ff ff	 jmp	 $LL34@LoadItem
$LN35@LoadItem:

; 148  : 			}
; 149  : 			else if ( st == 2 )

  0031a	83 f8 02	 cmp	 eax, 2
  0031d	0f 85 52 03 00
	00		 jne	 $LN29@LoadItem

; 150  : 			{
; 151  : 				iProbability = 0; //ebp-10

  00323	33 db		 xor	 ebx, ebx
$LL28@LoadItem:

; 152  : 
; 153  : 				while ( true )
; 154  : 				{
; 155  : 					Token = GetToken();

  00325	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 156  : 
; 157  : 					if ( Token == 0 )

  0032a	85 c0		 test	 eax, eax
  0032c	75 37		 jne	 SHORT $LN107@LoadItem

; 158  : 					{
; 159  : 						if ( strcmp("end", TokenString) == 0 )

  0032e	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00333	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL87@LoadItem:
  00338	8a 10		 mov	 dl, BYTE PTR [eax]
  0033a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0033c	75 1a		 jne	 SHORT $LN88@LoadItem
  0033e	84 d2		 test	 dl, dl
  00340	74 12		 je	 SHORT $LN89@LoadItem
  00342	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00345	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00348	75 0e		 jne	 SHORT $LN88@LoadItem
  0034a	83 c0 02	 add	 eax, 2
  0034d	83 c1 02	 add	 ecx, 2
  00350	84 d2		 test	 dl, dl
  00352	75 e4		 jne	 SHORT $LL87@LoadItem
$LN89@LoadItem:
  00354	33 c0		 xor	 eax, eax
  00356	eb 05		 jmp	 SHORT $LN90@LoadItem
$LN88@LoadItem:
  00358	1b c0		 sbb	 eax, eax
  0035a	83 d8 ff	 sbb	 eax, -1
$LN90@LoadItem:
  0035d	85 c0		 test	 eax, eax
  0035f	0f 84 1a 05 00
	00		 je	 $LN75@LoadItem
$LN107@LoadItem:

; 160  : 						{
; 161  : 							break;
; 162  : 						}
; 163  : 					}
; 164  : 
; 165  : 					if( iProbability == 0) //good
; 166  : 					{
; 167  : 						this->m_iEventItemDropRateZt[iProbability] = (int)TokenNumber; //good

  00365	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0036b	e8 00 00 00 00	 call	 __ftol2_sse
  00370	85 db		 test	 ebx, ebx
  00372	75 08		 jne	 SHORT $LN24@LoadItem
  00374	89 86 64 07 00
	00		 mov	 DWORD PTR [esi+1892], eax

; 168  : 					}
; 169  : 					else

  0037a	eb 0e		 jmp	 SHORT $LN23@LoadItem
$LN24@LoadItem:

; 170  : 					{
; 171  : 						this->m_iEventItemDropRateZt[iProbability] = this->m_iEventItemDropRateZt[iProbability-1] + (int)TokenNumber; //great

  0037c	03 84 9e 60 07
	00 00		 add	 eax, DWORD PTR [esi+ebx*4+1888]
  00383	89 84 9e 64 07
	00 00		 mov	 DWORD PTR [esi+ebx*4+1892], eax
$LN23@LoadItem:

; 172  : 					}
; 173  : 
; 174  : 					n = 0;

  0038a	33 ff		 xor	 edi, edi
  0038c	8d 64 24 00	 npad	 4
$LL22@LoadItem:

; 175  : 
; 176  : 					while ( true )
; 177  : 					{
; 178  : 						Token = GetToken();

  00390	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 179  : 
; 180  : 						if ( Token == 0 )

  00395	85 c0		 test	 eax, eax
  00397	75 37		 jne	 SHORT $LN19@LoadItem

; 181  : 						{
; 182  : 							if ( strcmp("end", TokenString) == 0 )

  00399	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0039e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL91@LoadItem:
  003a3	8a 10		 mov	 dl, BYTE PTR [eax]
  003a5	3a 11		 cmp	 dl, BYTE PTR [ecx]
  003a7	75 1a		 jne	 SHORT $LN92@LoadItem
  003a9	84 d2		 test	 dl, dl
  003ab	74 12		 je	 SHORT $LN93@LoadItem
  003ad	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  003b0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  003b3	75 0e		 jne	 SHORT $LN92@LoadItem
  003b5	83 c0 02	 add	 eax, 2
  003b8	83 c1 02	 add	 ecx, 2
  003bb	84 d2		 test	 dl, dl
  003bd	75 e4		 jne	 SHORT $LL91@LoadItem
$LN93@LoadItem:
  003bf	33 c0		 xor	 eax, eax
  003c1	eb 05		 jmp	 SHORT $LN94@LoadItem
$LN92@LoadItem:
  003c3	1b c0		 sbb	 eax, eax
  003c5	83 d8 ff	 sbb	 eax, -1
$LN94@LoadItem:
  003c8	85 c0		 test	 eax, eax
  003ca	0f 84 8f 02 00
	00		 je	 $LN67@LoadItem
$LN19@LoadItem:

; 185  : 								break;
; 186  : 							}
; 187  : 						}
; 188  : 
; 189  : 						this->BagObject[this->m_iBagObjectCount].m_type = (BYTE)TokenNumber;

  003d0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003d6	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv548[ebp]
  003dc	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv548[ebp]
  003e3	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003e8	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv518[ebp], eax
  003ee	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  003f4	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  003f7	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv518[ebp]
  003fd	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv144[ebp]
  00403	0f b6 95 f4 fe
	ff ff		 movzx	 edx, BYTE PTR tv144[ebp]
  0040a	88 94 08 1d 02
	00 00		 mov	 BYTE PTR [eax+ecx+541], dl
  00411	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv548[ebp]

; 190  : 
; 191  : 						Token = GetToken();

  00417	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 192  : 						this->BagObject[this->m_iBagObjectCount].m_index = (BYTE)TokenNumber;

  0041c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00422	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv131[ebp]
  00428	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv131[ebp]
  0042f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00434	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv132[ebp], eax
  0043a	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  00440	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  00443	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv132[ebp]
  00449	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv88[ebp]
  0044f	0f b6 95 f4 fe
	ff ff		 movzx	 edx, BYTE PTR tv88[ebp]
  00456	88 94 08 1e 02
	00 00		 mov	 BYTE PTR [eax+ecx+542], dl
  0045d	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv131[ebp]

; 193  : 
; 194  : 						Token = GetToken();

  00463	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 195  : 						this->BagObject[this->m_iBagObjectCount].m_minLevel = (BYTE)TokenNumber;

  00468	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0046e	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv540[ebp]
  00474	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv540[ebp]
  0047b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00480	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv546[ebp], eax
  00486	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  0048c	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  0048f	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv546[ebp]
  00495	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv558[ebp]
  0049b	0f b6 95 f4 fe
	ff ff		 movzx	 edx, BYTE PTR tv558[ebp]
  004a2	88 94 08 1f 02
	00 00		 mov	 BYTE PTR [eax+ecx+543], dl
  004a9	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv540[ebp]

; 196  : 
; 197  : 						Token = GetToken();

  004af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 198  : 						this->BagObject[this->m_iBagObjectCount].m_maxLevel = (BYTE)TokenNumber;

  004b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004ba	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv450[ebp]
  004c0	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv450[ebp]
  004c7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004cc	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv445[ebp], eax
  004d2	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  004d8	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  004db	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv445[ebp]
  004e1	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv443[ebp]
  004e7	0f b6 95 f4 fe
	ff ff		 movzx	 edx, BYTE PTR tv443[ebp]
  004ee	88 94 08 20 02
	00 00		 mov	 BYTE PTR [eax+ecx+544], dl
  004f5	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv450[ebp]

; 199  : 
; 200  : 						Token = GetToken();

  004fb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 201  : 						this->BagObject[this->m_iBagObjectCount].m_isskill = (BYTE)TokenNumber;

  00500	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00506	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv437[ebp]
  0050c	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv437[ebp]
  00513	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00518	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv434[ebp], eax
  0051e	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  00524	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  00527	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv434[ebp]
  0052d	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv431[ebp]
  00533	0f b6 95 f4 fe
	ff ff		 movzx	 edx, BYTE PTR tv431[ebp]
  0053a	88 94 08 21 02
	00 00		 mov	 BYTE PTR [eax+ecx+545], dl
  00541	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv437[ebp]

; 202  : 
; 203  : 						Token = GetToken();

  00547	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 204  : 						this->BagObject[this->m_iBagObjectCount].m_isluck = (BYTE)TokenNumber;

  0054c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00552	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv426[ebp]
  00558	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv426[ebp]
  0055f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00564	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv422[ebp], eax
  0056a	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  00570	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  00573	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv422[ebp]
  00579	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv418[ebp]
  0057f	0f b6 95 f4 fe
	ff ff		 movzx	 edx, BYTE PTR tv418[ebp]
  00586	88 94 08 22 02
	00 00		 mov	 BYTE PTR [eax+ecx+546], dl
  0058d	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv426[ebp]

; 205  : 
; 206  : 						Token = GetToken();

  00593	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 207  : 						this->BagObject[this->m_iBagObjectCount].m_isoption = (BYTE)TokenNumber;

  00598	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0059e	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv413[ebp]
  005a4	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv413[ebp]
  005ab	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005b0	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv407[ebp], eax
  005b6	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv407[ebp]
  005bc	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  005c2	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  005c5	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv403[ebp]
  005cb	0f b6 95 f4 fe
	ff ff		 movzx	 edx, BYTE PTR tv403[ebp]
  005d2	88 94 08 23 02
	00 00		 mov	 BYTE PTR [eax+ecx+547], dl
  005d9	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv413[ebp]

; 208  : 
; 209  : 						Token = GetToken();

  005df	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 210  : 						this->BagObject[this->m_iBagObjectCount].m_isexitem = (BYTE)TokenNumber;

  005e4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005ea	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv397[ebp]
  005f0	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv397[ebp]
  005f7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  005fc	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv391[ebp], eax
  00602	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  00608	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  0060b	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv391[ebp]
  00611	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv389[ebp]
  00617	0f b6 95 f4 fe
	ff ff		 movzx	 edx, BYTE PTR tv389[ebp]
  0061e	88 94 08 24 02
	00 00		 mov	 BYTE PTR [eax+ecx+548], dl

; 211  : 
; 212  : 						if(this->BagObject[this->m_iBagObjectCount].m_minLevel > this->BagObject[this->m_iBagObjectCount].m_maxLevel)

  00625	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  0062b	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv397[ebp]
  00631	8d 14 c6	 lea	 edx, DWORD PTR [esi+eax*8]
  00634	8d 0c 10	 lea	 ecx, DWORD PTR [eax+edx]
  00637	0f b6 91 1f 02
	00 00		 movzx	 edx, BYTE PTR [ecx+543]
  0063e	3a 91 20 02 00
	00		 cmp	 dl, BYTE PTR [ecx+544]
  00644	0f 87 8b 02 00
	00		 ja	 $LN68@LoadItem

; 216  : 						}
; 217  : 						
; 218  : 						n++;
; 219  : 						this->m_iBagObjectCount++;

  0064a	40		 inc	 eax
  0064b	47		 inc	 edi
  0064c	89 86 20 01 00
	00		 mov	 DWORD PTR [esi+288], eax

; 220  : 
; 221  : 						if ( this->m_iBagObjectCount > MAX_ITEMBAG_ATTR-1 )

  00652	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  00657	0f 8e 33 fd ff
	ff		 jle	 $LL22@LoadItem

; 222  : 						{
; 223  : 							break;
; 224  : 						}
; 225  : 					}

  0065d	eb 07		 jmp	 SHORT $LN69@LoadItem
$LN67@LoadItem:

; 183  : 							{
; 184  : 								this->m_iDropRatePerItemCount[iProbability] = n;

  0065f	89 bc 9e b4 07
	00 00		 mov	 DWORD PTR [esi+ebx*4+1972], edi
$LN69@LoadItem:

; 226  : 
; 227  : 					iProbability++;

  00666	43		 inc	 ebx

; 228  : 
; 229  : 					if(iProbability > 19)

  00667	83 fb 13	 cmp	 ebx, 19			; 00000013H
  0066a	0f 8e b5 fc ff
	ff		 jle	 $LL28@LoadItem

; 230  : 					{
; 231  : 						break;
; 232  : 					}
; 233  : 					continue;
; 234  : 				}
; 235  : 				this->m_iRateKindCount = iProbability;

  00670	e9 0a 02 00 00	 jmp	 $LN75@LoadItem
$LN29@LoadItem:

; 236  : 			}
; 237  : 			else if ( st == 3 )

  00675	83 f8 03	 cmp	 eax, 3
  00678	0f 85 07 02 00
	00		 jne	 $LN14@LoadItem

; 238  : 			{
; 239  : 				iProbability = this->m_iRateKindCount;

  0067e	8b 9e 04 08 00
	00		 mov	 ebx, DWORD PTR [esi+2052]
$LL13@LoadItem:

; 240  : 
; 241  : 				while ( true )
; 242  : 				{
; 243  : 					Token = GetToken();

  00684	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 244  : 
; 245  : 					if ( Token == 0 )

  00689	85 c0		 test	 eax, eax
  0068b	75 37		 jne	 SHORT $LN104@LoadItem

; 246  : 					{
; 247  : 						if ( strcmp("end", TokenString) == 0 )

  0068d	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00692	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL95@LoadItem:
  00697	8a 10		 mov	 dl, BYTE PTR [eax]
  00699	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0069b	75 1a		 jne	 SHORT $LN96@LoadItem
  0069d	84 d2		 test	 dl, dl
  0069f	74 12		 je	 SHORT $LN97@LoadItem
  006a1	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  006a4	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  006a7	75 0e		 jne	 SHORT $LN96@LoadItem
  006a9	83 c0 02	 add	 eax, 2
  006ac	83 c1 02	 add	 ecx, 2
  006af	84 d2		 test	 dl, dl
  006b1	75 e4		 jne	 SHORT $LL95@LoadItem
$LN97@LoadItem:
  006b3	33 c0		 xor	 eax, eax
  006b5	eb 05		 jmp	 SHORT $LN98@LoadItem
$LN96@LoadItem:
  006b7	1b c0		 sbb	 eax, eax
  006b9	83 d8 ff	 sbb	 eax, -1
$LN98@LoadItem:
  006bc	85 c0		 test	 eax, eax
  006be	0f 84 bb 01 00
	00		 je	 $LN75@LoadItem
$LN104@LoadItem:

; 248  : 						{
; 249  : 							break;
; 250  : 						}
; 251  : 					}
; 252  : 
; 253  : 					if( iProbability == 0) //good
; 254  : 					{
; 255  : 						this->m_iEventItemDropRateZt[iProbability] = (int)TokenNumber; //good

  006c4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006ca	e8 00 00 00 00	 call	 __ftol2_sse
  006cf	85 db		 test	 ebx, ebx
  006d1	75 08		 jne	 SHORT $LN9@LoadItem
  006d3	89 86 64 07 00
	00		 mov	 DWORD PTR [esi+1892], eax

; 256  : 					}
; 257  : 					else

  006d9	eb 0e		 jmp	 SHORT $LN8@LoadItem
$LN9@LoadItem:

; 258  : 					{
; 259  : 						this->m_iEventItemDropRateZt[iProbability] = this->m_iEventItemDropRateZt[iProbability-1] + (int)TokenNumber; //great

  006db	03 84 9e 60 07
	00 00		 add	 eax, DWORD PTR [esi+ebx*4+1888]
  006e2	89 84 9e 64 07
	00 00		 mov	 DWORD PTR [esi+ebx*4+1892], eax
$LN8@LoadItem:

; 260  : 					}
; 261  : 
; 262  : 					n = 0;

  006e9	33 ff		 xor	 edi, edi
  006eb	eb 03 8d 49 00	 npad	 5
$LL7@LoadItem:

; 263  : 
; 264  : 					while ( true )
; 265  : 					{
; 266  : 						Token = GetToken();

  006f0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 267  : 
; 268  : 						if ( Token == 0 )

  006f5	85 c0		 test	 eax, eax
  006f7	75 37		 jne	 SHORT $LN4@LoadItem

; 269  : 						{
; 270  : 							if ( strcmp("end", TokenString) == 0 )

  006f9	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  006fe	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL99@LoadItem:
  00703	8a 10		 mov	 dl, BYTE PTR [eax]
  00705	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00707	75 1a		 jne	 SHORT $LN100@LoadItem
  00709	84 d2		 test	 dl, dl
  0070b	74 12		 je	 SHORT $LN101@LoadItem
  0070d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00710	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00713	75 0e		 jne	 SHORT $LN100@LoadItem
  00715	83 c0 02	 add	 eax, 2
  00718	83 c1 02	 add	 ecx, 2
  0071b	84 d2		 test	 dl, dl
  0071d	75 e4		 jne	 SHORT $LL99@LoadItem
$LN101@LoadItem:
  0071f	33 c0		 xor	 eax, eax
  00721	eb 05		 jmp	 SHORT $LN102@LoadItem
$LN100@LoadItem:
  00723	1b c0		 sbb	 eax, eax
  00725	83 d8 ff	 sbb	 eax, -1
$LN102@LoadItem:
  00728	85 c0		 test	 eax, eax
  0072a	0f 84 3e 01 00
	00		 je	 $LN72@LoadItem
$LN4@LoadItem:

; 273  : 								break;
; 274  : 							}
; 275  : 						}
; 276  : 
; 277  : 						this->BagObject[this->m_iBagObjectCount].m_type = (BYTE)TokenNumber;

  00730	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00736	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv269[ebp]
  0073c	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv269[ebp]
  00743	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00748	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv263[ebp], eax
  0074e	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  00754	8d 14 c6	 lea	 edx, DWORD PTR [esi+eax*8]
  00757	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv263[ebp]
  0075d	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv259[ebp]
  00763	0f b6 8d f4 fe
	ff ff		 movzx	 ecx, BYTE PTR tv259[ebp]
  0076a	88 8c 10 1d 02
	00 00		 mov	 BYTE PTR [eax+edx+541], cl
  00771	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv269[ebp]

; 278  : 
; 279  : 						Token = GetToken();

  00777	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 280  : 						this->BagObject[this->m_iBagObjectCount].m_index = (BYTE)TokenNumber;

  0077c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00782	d9 bd fa fe ff
	ff		 fnstcw	 WORD PTR tv253[ebp]
  00788	0f b7 85 fa fe
	ff ff		 movzx	 eax, WORD PTR tv253[ebp]
  0078f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00794	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv248[ebp], eax
  0079a	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  007a0	8d 14 c6	 lea	 edx, DWORD PTR [esi+eax*8]
  007a3	d9 ad f4 fe ff
	ff		 fldcw	 WORD PTR tv248[ebp]
  007a9	db 9d f4 fe ff
	ff		 fistp	 DWORD PTR tv246[ebp]
  007af	0f b6 8d f4 fe
	ff ff		 movzx	 ecx, BYTE PTR tv246[ebp]
  007b6	88 8c 10 1e 02
	00 00		 mov	 BYTE PTR [eax+edx+542], cl

; 281  : 
; 282  : 						this->BagObject[this->m_iBagObjectCount].m_issetitem = 1; //season 3.5 add-on

  007bd	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  007c3	8d 8c c6 e8 01
	00 00		 lea	 ecx, DWORD PTR [esi+eax*8+488]
  007ca	d9 ad fa fe ff
	ff		 fldcw	 WORD PTR tv253[ebp]
  007d0	c6 44 08 3d 01	 mov	 BYTE PTR [eax+ecx+61], 1

; 283  : 						this->BagObject[this->m_iBagObjectCount].m_minLevel = 0;

  007d5	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  007db	8d 14 c6	 lea	 edx, DWORD PTR [esi+eax*8]
  007de	c6 84 10 1f 02
	00 00 00	 mov	 BYTE PTR [eax+edx+543], 0

; 284  : 						this->BagObject[this->m_iBagObjectCount].m_maxLevel = 0;

  007e6	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  007ec	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  007ef	c6 84 08 20 02
	00 00 00	 mov	 BYTE PTR [eax+ecx+544], 0

; 285  : 						this->BagObject[this->m_iBagObjectCount].m_isskill = 0;

  007f7	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  007fd	8d 14 c6	 lea	 edx, DWORD PTR [esi+eax*8]
  00800	c6 84 10 21 02
	00 00 00	 mov	 BYTE PTR [eax+edx+545], 0

; 286  : 						this->BagObject[this->m_iBagObjectCount].m_isluck = 0;

  00808	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  0080e	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  00811	c6 84 08 22 02
	00 00 00	 mov	 BYTE PTR [eax+ecx+546], 0

; 287  : 						this->BagObject[this->m_iBagObjectCount].m_isoption = 0;

  00819	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  0081f	8d 14 c6	 lea	 edx, DWORD PTR [esi+eax*8]
  00822	c6 84 10 23 02
	00 00 00	 mov	 BYTE PTR [eax+edx+547], 0

; 288  : 						this->BagObject[this->m_iBagObjectCount].m_isexitem = 0;

  0082a	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  00830	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  00833	c6 84 08 24 02
	00 00 00	 mov	 BYTE PTR [eax+ecx+548], 0

; 289  : 
; 290  : 						if(this->BagObject[this->m_iBagObjectCount].m_minLevel > this->BagObject[this->m_iBagObjectCount].m_maxLevel)

  0083b	8b 86 20 01 00
	00		 mov	 eax, DWORD PTR [esi+288]
  00841	8d 14 c6	 lea	 edx, DWORD PTR [esi+eax*8]
  00844	8d 0c 10	 lea	 ecx, DWORD PTR [eax+edx]
  00847	8a 91 1f 02 00
	00		 mov	 dl, BYTE PTR [ecx+543]
  0084d	3a 91 20 02 00
	00		 cmp	 dl, BYTE PTR [ecx+544]
  00853	0f 87 85 00 00
	00		 ja	 $LN73@LoadItem

; 293  : 							return;
; 294  : 						}
; 295  : 						
; 296  : 						n++;
; 297  : 						this->m_iBagObjectCount++;

  00859	40		 inc	 eax
  0085a	47		 inc	 edi
  0085b	89 86 20 01 00
	00		 mov	 DWORD PTR [esi+288], eax

; 298  : 
; 299  : 						if ( this->m_iBagObjectCount > MAX_ITEMBAG_ATTR-1 )

  00861	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  00866	0f 8e 84 fe ff
	ff		 jle	 $LL7@LoadItem

; 300  : 						{
; 301  : 							break;
; 302  : 						}
; 303  : 					}

  0086c	eb 07		 jmp	 SHORT $LN74@LoadItem
$LN72@LoadItem:

; 271  : 							{
; 272  : 								this->m_iDropRatePerItemCount[iProbability] = n;

  0086e	89 bc 9e b4 07
	00 00		 mov	 DWORD PTR [esi+ebx*4+1972], edi
$LN74@LoadItem:

; 304  : 
; 305  : 					iProbability++;

  00875	43		 inc	 ebx

; 306  : 
; 307  : 					if(iProbability > 19)

  00876	83 fb 13	 cmp	 ebx, 19			; 00000013H
  00879	0f 8e 05 fe ff
	ff		 jle	 $LL13@LoadItem
$LN75@LoadItem:

; 308  : 					{
; 309  : 						break;
; 310  : 					}
; 311  : 					continue;
; 312  : 				}
; 313  : 				this->m_iRateKindCount = iProbability;

  0087f	89 9e 04 08 00
	00		 mov	 DWORD PTR [esi+2052], ebx
$LN14@LoadItem:

; 52   : 		return;
; 53   : 	}
; 54   : 
; 55   : 	int n=0;
; 56   : 	int	iProbability=0;
; 57   : 
; 58   : 	while ( true )
; 59   : 	{
; 60   : 		Token = GetToken();

  00885	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 61   : 
; 62   : 		if ( Token == 2 )

  0088a	83 f8 02	 cmp	 eax, 2
  0088d	0f 85 ed f7 ff
	ff		 jne	 $LL46@LoadItem
  00893	8b bd f0 fe ff
	ff		 mov	 edi, DWORD PTR _script_file$GSCopy$[ebp]
$LN77@LoadItem:

; 314  : 			}
; 315  : 		}
; 316  : 	}
; 317  : 
; 318  : 	fclose(SMDFile);

  00899	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0089e	50		 push	 eax
  0089f	e8 00 00 00 00	 call	 _fclose
  008a4	83 c4 04	 add	 esp, 4

; 319  : 	LogAdd(lMsg.Get(MSGGET(1, 198)), script_file);

  008a7	57		 push	 edi
  008a8	68 c6 01 00 00	 push	 454			; 000001c6H
  008ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  008b2	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  008b7	50		 push	 eax
  008b8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 320  : 	this->m_bLoad = TRUE;

  008be	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
  008c5	eb 28		 jmp	 SHORT $LN109@LoadItem
$LN65@LoadItem:

; 88   : 					{
; 89   : 						MsgBox("ZtEvent ItemBag LoadFail [%s]", script_file);

  008c7	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _script_file$GSCopy$[ebp]
  008cd	51		 push	 ecx
  008ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PLHOAEKH@ZtEvent?5ItemBag?5LoadFail?5?$FL?$CFs?$FN?$AA@

; 90   : 						return;

  008d3	eb 15		 jmp	 SHORT $LN110@LoadItem
$LN68@LoadItem:

; 213  : 						{
; 214  : 							MsgBox("Load Script Error %s", script_file);

  008d5	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _script_file$GSCopy$[ebp]
  008db	52		 push	 edx

; 215  : 							return;

  008dc	eb 07		 jmp	 SHORT $LN111@LoadItem
$LN73@LoadItem:

; 291  : 						{
; 292  : 							MsgBox("Load Script Error %s", script_file);

  008de	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _script_file$GSCopy$[ebp]
  008e4	50		 push	 eax
$LN111@LoadItem:
  008e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
$LN110@LoadItem:
  008ea	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
$LN109@LoadItem:

; 321  : }

  008ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008f2	83 c4 08	 add	 esp, 8
  008f5	5b		 pop	 ebx
  008f6	5f		 pop	 edi
  008f7	33 cd		 xor	 ecx, ebp
  008f9	5e		 pop	 esi
  008fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008ff	8b e5		 mov	 esp, ebp
  00901	5d		 pop	 ebp
  00902	c2 04 00	 ret	 4
?LoadItem@CProbabilityItemBag@@QAEXPAD@Z ENDP		; CProbabilityItemBag::LoadItem
_TEXT	ENDS
PUBLIC	?GetLevel@CProbabilityItemBag@@AAEEH@Z		; CProbabilityItemBag::GetLevel
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetLevel@CProbabilityItemBag@@AAEEH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetLevel@CProbabilityItemBag@@AAEEH@Z PROC		; CProbabilityItemBag::GetLevel, COMDAT
; _this$ = ecx

; 324  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 325  : 	if ( n <0 || n > MAX_ITEMBAG_ATTR-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  0000b	77 37		 ja	 SHORT $LN2@GetLevel

; 328  : 	}
; 329  : 
; 330  : 	if ( this->BagObject[n].m_minLevel == this->BagObject[n].m_maxLevel )

  0000d	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  00010	56		 push	 esi
  00011	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  00014	8a 86 1f 02 00
	00		 mov	 al, BYTE PTR [esi+543]
  0001a	8a 8e 20 02 00
	00		 mov	 cl, BYTE PTR [esi+544]
  00020	3a c1		 cmp	 al, cl

; 331  : 	{
; 332  : 		return this->BagObject[n].m_minLevel;

  00022	74 1b		 je	 SHORT $LN6@GetLevel

; 333  : 	}
; 334  : 
; 335  : 	int sub = (this->BagObject[n].m_maxLevel - this->BagObject[n].m_minLevel) + 1;

  00024	57		 push	 edi
  00025	0f b6 d0	 movzx	 edx, al
  00028	0f b6 f9	 movzx	 edi, cl
  0002b	2b fa		 sub	 edi, edx
  0002d	47		 inc	 edi

; 336  : 	int level = this->BagObject[n].m_minLevel + (rand()%sub);

  0002e	e8 00 00 00 00	 call	 _rand
  00033	99		 cdq
  00034	f7 ff		 idiv	 edi
  00036	5f		 pop	 edi
  00037	8b c2		 mov	 eax, edx
  00039	02 86 1f 02 00
	00		 add	 al, BYTE PTR [esi+543]
$LN6@GetLevel:
  0003f	5e		 pop	 esi

; 337  : 
; 338  : 	return level;
; 339  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN2@GetLevel:

; 326  : 	{
; 327  : 		return 0;

  00044	32 c0		 xor	 al, al

; 337  : 
; 338  : 	return level;
; 339  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?GetLevel@CProbabilityItemBag@@AAEEH@Z ENDP		; CProbabilityItemBag::GetLevel
_TEXT	ENDS
PUBLIC	?IsEnableEventItemDrop@CProbabilityItemBag@@AAEHH@Z ; CProbabilityItemBag::IsEnableEventItemDrop
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?IsEnableEventItemDrop@CProbabilityItemBag@@AAEHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?IsEnableEventItemDrop@CProbabilityItemBag@@AAEHH@Z PROC ; CProbabilityItemBag::IsEnableEventItemDrop, COMDAT
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 344  : 	int iMapNumber = gObj[aIndex].MapNumber;

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00012	03 d0		 add	 edx, eax
  00014	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  0001b	56		 push	 esi

; 345  : 
; 346  : 	if ( this->DropMapInfo[iMapNumber].m_bIsDrop == FALSE )

  0001c	8d 34 41	 lea	 esi, DWORD PTR [ecx+eax*2]
  0001f	80 bc 06 24 01
	00 00 00	 cmp	 BYTE PTR [esi+eax+292], 0

; 347  : 	{
; 348  : 		return FALSE;

  00027	74 2d		 je	 SHORT $LN1@IsEnableEv

; 349  : 	}
; 350  : 
; 351  : 	int iLevel = gObj[aIndex].Level;

  00029	0f bf 92 be 00
	00 00		 movsx	 edx, WORD PTR [edx+190]

; 352  : 
; 353  : 	if  ( iLevel < this->DropMapInfo[iMapNumber].m_MinMonsterLevel || iLevel > this->DropMapInfo[iMapNumber].m_MaxMonsterLevel)

  00030	0f b6 b4 06 25
	01 00 00	 movzx	 esi, BYTE PTR [esi+eax+293]
  00038	3b d6		 cmp	 edx, esi
  0003a	7c 1a		 jl	 SHORT $LN1@IsEnableEv
  0003c	8d 8c 41 c4 00
	00 00		 lea	 ecx, DWORD PTR [ecx+eax*2+196]
  00043	0f b6 44 08 62	 movzx	 eax, BYTE PTR [eax+ecx+98]
  00048	3b d0		 cmp	 edx, eax
  0004a	7f 0a		 jg	 SHORT $LN1@IsEnableEv

; 356  : 	}
; 357  : 
; 358  : 	return TRUE;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	5e		 pop	 esi

; 359  : }

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN1@IsEnableEv:

; 354  : 	{
; 355  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax
  00058	5e		 pop	 esi

; 359  : }

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?IsEnableEventItemDrop@CProbabilityItemBag@@AAEHH@Z ENDP ; CProbabilityItemBag::IsEnableEventItemDrop
_TEXT	ENDS
PUBLIC	?SortItem@CProbabilityItemBag@@QAEHH@Z		; CProbabilityItemBag::SortItem
; Function compile flags: /Ogtp
;	COMDAT ?SortItem@CProbabilityItemBag@@QAEHH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?SortItem@CProbabilityItemBag@@QAEHH@Z PROC		; CProbabilityItemBag::SortItem, COMDAT
; _this$ = ecx

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b d9		 mov	 ebx, ecx

; 363  : 	int loc2 = this->m_iRateKindCount;

  00007	8b b3 04 08 00
	00		 mov	 esi, DWORD PTR [ebx+2052]
  0000d	57		 push	 edi

; 364  : 
; 365  : 	int loc3 = 0;
; 366  : 
; 367  : 	int loc4 = this->GetBagCount()-1;

  0000e	8b bb 20 01 00
	00		 mov	 edi, DWORD PTR [ebx+288]
  00014	33 c0		 xor	 eax, eax
  00016	4f		 dec	 edi

; 368  : 
; 369  : 	while(loc2-- != 0)

  00017	85 f6		 test	 esi, esi
  00019	74 52		 je	 SHORT $LN12@SortItem

; 363  : 	int loc2 = this->m_iRateKindCount;

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0001e	8d 84 b3 60 07
	00 00		 lea	 eax, DWORD PTR [ebx+esi*4+1888]
$LL4@SortItem:

; 368  : 
; 369  : 	while(loc2-- != 0)

  00025	83 e8 04	 sub	 eax, 4
  00028	4e		 dec	 esi

; 370  : 	{
; 371  : 		if(loc2 == 0)

  00029	74 1c		 je	 SHORT $LN10@SortItem

; 374  : 			break;
; 375  : 		}
; 376  : 
; 377  : 		if(n >= 10000 - this->m_iEventItemDropRateZt[loc2] && n < 10000 - this->m_iEventItemDropRateZt[loc2-1])

  0002b	ba 10 27 00 00	 mov	 edx, 10000		; 00002710H
  00030	2b 50 04	 sub	 edx, DWORD PTR [eax+4]
  00033	3b ca		 cmp	 ecx, edx
  00035	7c 0b		 jl	 SHORT $LN1@SortItem
  00037	ba 10 27 00 00	 mov	 edx, 10000		; 00002710H
  0003c	2b 10		 sub	 edx, DWORD PTR [eax]
  0003e	3b ca		 cmp	 ecx, edx
  00040	7c 1a		 jl	 SHORT $LN11@SortItem
$LN1@SortItem:

; 380  : 			break;
; 381  : 		}
; 382  : 		loc4 = loc4 - this->m_iDropRatePerItemCount[loc2];

  00042	2b 78 54	 sub	 edi, DWORD PTR [eax+84]

; 368  : 
; 369  : 	while(loc2-- != 0)

  00045	eb de		 jmp	 SHORT $LL4@SortItem
$LN10@SortItem:

; 372  : 		{
; 373  : 			loc3 = rand()%this->m_iDropRatePerItemCount[0];

  00047	e8 00 00 00 00	 call	 _rand
  0004c	99		 cdq
  0004d	f7 bb b4 07 00
	00		 idiv	 DWORD PTR [ebx+1972]
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b c2		 mov	 eax, edx

; 383  : 	}
; 384  : 
; 385  : 	return loc3;
; 386  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN11@SortItem:

; 378  : 		{
; 379  : 			loc3 = loc4 - rand()%this->m_iDropRatePerItemCount[loc2];

  0005c	e8 00 00 00 00	 call	 _rand
  00061	99		 cdq
  00062	f7 bc b3 b4 07
	00 00		 idiv	 DWORD PTR [ebx+esi*4+1972]
  00069	2b fa		 sub	 edi, edx
  0006b	8b c7		 mov	 eax, edi
$LN12@SortItem:
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 383  : 	}
; 384  : 
; 385  : 	return loc3;
; 386  : }

  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?SortItem@CProbabilityItemBag@@QAEHH@Z ENDP		; CProbabilityItemBag::SortItem
_TEXT	ENDS
PUBLIC	?GetEventName@CProbabilityItemBag@@AAEPADXZ	; CProbabilityItemBag::GetEventName
; Function compile flags: /Ogtp
;	COMDAT ?GetEventName@CProbabilityItemBag@@AAEPADXZ
_TEXT	SEGMENT
?GetEventName@CProbabilityItemBag@@AAEPADXZ PROC	; CProbabilityItemBag::GetEventName, COMDAT
; _this$ = ecx

; 390  : 	return m_sEventName;

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 391  : }

  00003	c3		 ret	 0
?GetEventName@CProbabilityItemBag@@AAEPADXZ ENDP	; CProbabilityItemBag::GetEventName
_TEXT	ENDS
PUBLIC	??_C@_0EG@NPFPBNJ@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@ ; `string'
PUBLIC	??_C@_0HN@GKJHCEFI@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@ ; `string'
PUBLIC	?DropNewYearLuckMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropNewYearLuckMonsterReward
EXTRN	?MoneyItemDrop@MapClass@@QAEHHHH@Z:PROC		; MapClass::MoneyItemDrop
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?NewOptionRand@@YAEH@Z:PROC			; NewOptionRand
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
;	COMDAT ??_C@_0EG@NPFPBNJ@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0EG@NPFPBNJ@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@ DB '[ NewYea'
	DB	'rLuckyBagMonsterEvent ] NewYearLuckyBagDrop [%s][%s] [%d Zen]'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0HN@GKJHCEFI@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@
CONST	SEGMENT
??_C@_0HN@GKJHCEFI@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@ DB '[ NewYe'
	DB	'arLuckyBagMonsterEvent ] NewYearLuckyBagDrop [%s][%s] : (%d)('
	DB	'%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropNewYearLuckMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_loc12$ = -16						; size = 4
_Option1$ = -12						; size = 4
_Option2$ = -8						; size = 4
_Option3$ = -4						; size = 4
_x$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_y$ = 16						; size = 4
_cX$ = 16						; size = 1
_level$ = 20						; size = 4
_cY$ = 20						; size = 1
?DropNewYearLuckMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropNewYearLuckMonsterReward, COMDAT
; _this$ = ecx

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 395  : 	if ( this->m_bLoad == FALSE )

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0000f	75 0a		 jne	 SHORT $LN16@DropNewYea

; 396  : 		return FALSE;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 495  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN16@DropNewYea:
  0001b	57		 push	 edi

; 397  : 
; 398  : 	float dur = 0;
; 399  : 	int type = 0; 
; 400  : 	int level = 0;
; 401  : 	int x = 0;
; 402  : 	int y = 0;
; 403  : 	int Option1 = 0;
; 404  : 	int Option2 = 0;
; 405  : 	int Option3 = 0;
; 406  : 	int DropItemNum = 0;
; 407  : 	int ExOption = 0;
; 408  : 	int loc12 = 0;
; 409  : 	LPOBJ lpObj = &gObj[aIndex];

  0001c	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0001f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00025	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx
  0002e	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx
  00031	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx
  00034	89 5d f0	 mov	 DWORD PTR _loc12$[ebp], ebx

; 410  : 	int loc14;
; 411  : 	int loc15;
; 412  : 	int loc16;
; 413  : 
; 414  : 	if ( this->GetBagCount() > 0 )

  00037	39 9e 20 01 00
	00		 cmp	 DWORD PTR [esi+288], ebx
  0003d	0f 8e 14 02 00
	00		 jle	 $LN15@DropNewYea

; 415  : 	{
; 416  : 		loc14 = rand()%10000;

  00043	e8 00 00 00 00	 call	 _rand
  00048	99		 cdq
  00049	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0004e	f7 f9		 idiv	 ecx

; 417  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1])

  00050	8b 86 04 08 00
	00		 mov	 eax, DWORD PTR [esi+2052]
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 84 b3 01 00
	00		 je	 $LN13@DropNewYea
  0005e	2b 8c 86 60 07
	00 00		 sub	 ecx, DWORD PTR [esi+eax*4+1888]
  00065	3b d1		 cmp	 edx, ecx
  00067	0f 8c a4 01 00
	00		 jl	 $LN13@DropNewYea

; 421  : 			return 1;
; 422  : 		}
; 423  : 			
; 424  : 		loc15 = this->m_iRateKindCount;
; 425  : 		loc16 = this->SortItem(loc14);

  0006d	52		 push	 edx
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem

; 426  : 
; 427  : 		if ( cX == 0 && cY == 0 )

  00075	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00078	8b d8		 mov	 ebx, eax
  0007a	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  0007d	84 c0		 test	 al, al
  0007f	75 14		 jne	 SHORT $LN12@DropNewYea
  00081	84 c9		 test	 cl, cl
  00083	75 10		 jne	 SHORT $LN12@DropNewYea

; 428  : 		{
; 429  : 			x = lpObj->X;

  00085	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 430  : 			y = lpObj->Y;

  0008c	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]

; 431  : 		}
; 432  : 		else

  00093	eb 06		 jmp	 SHORT $LN26@DropNewYea
$LN12@DropNewYea:

; 433  : 		{
; 434  : 			x = cX;

  00095	0f b6 d0	 movzx	 edx, al

; 435  : 			y = cY;

  00098	0f b6 c1	 movzx	 eax, cl
$LN26@DropNewYea:

; 436  : 		}
; 437  : 
; 438  : 		level = this->GetLevel(loc16);

  0009b	53		 push	 ebx
  0009c	8b ce		 mov	 ecx, esi
  0009e	89 45 10	 mov	 DWORD PTR _y$[ebp], eax
  000a1	89 55 08	 mov	 DWORD PTR _x$[ebp], edx
  000a4	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000a9	0f b6 c8	 movzx	 ecx, al

; 439  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  000ac	8d 14 de	 lea	 edx, DWORD PTR [esi+ebx*8]
  000af	0f b6 84 13 1e
	02 00 00	 movzx	 eax, BYTE PTR [ebx+edx+542]
  000b7	03 da		 add	 ebx, edx
  000b9	89 4d 14	 mov	 DWORD PTR _level$[ebp], ecx
  000bc	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000ca	8b f0		 mov	 esi, eax
  000cc	83 c4 08	 add	 esp, 8

; 440  : 
; 441  : 		if ( type == -1 )

  000cf	83 fe ff	 cmp	 esi, -1
  000d2	75 0b		 jne	 SHORT $LN10@DropNewYea

; 442  : 		{
; 443  : 			return FALSE;

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	33 c0		 xor	 eax, eax
  000d8	5b		 pop	 ebx

; 495  : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 10 00	 ret	 16			; 00000010H
$LN10@DropNewYea:

; 444  : 		}
; 445  : 
; 446  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  000df	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000e6	74 07		 je	 SHORT $LN21@DropNewYea

; 447  : 		{
; 448  : 			Option1 =1;

  000e8	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN21@DropNewYea:

; 449  : 		}
; 450  : 
; 451  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  000ef	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  000f6	74 21		 je	 SHORT $LN22@DropNewYea

; 452  : 		{
; 453  : 			Option2 = 0;

  000f8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 454  : 
; 455  : 			if ( (rand()%2) == 0 )

  000ff	e8 00 00 00 00	 call	 _rand
  00104	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00109	79 05		 jns	 SHORT $LN25@DropNewYea
  0010b	48		 dec	 eax
  0010c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0010f	40		 inc	 eax
$LN25@DropNewYea:
  00110	75 07		 jne	 SHORT $LN22@DropNewYea

; 456  : 			{
; 457  : 				Option2 = 1;

  00112	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN22@DropNewYea:

; 458  : 			}
; 459  : 		}
; 460  : 
; 461  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  00119	80 bb 23 02 00
	00 00		 cmp	 BYTE PTR [ebx+547], 0
  00120	74 2b		 je	 SHORT $LN4@DropNewYea

; 462  : 		{
; 463  : 			if ( rand()%5 < 1 )

  00122	e8 00 00 00 00	 call	 _rand
  00127	99		 cdq
  00128	b9 05 00 00 00	 mov	 ecx, 5
  0012d	f7 f9		 idiv	 ecx
  0012f	83 fa 01	 cmp	 edx, 1
  00132	7d 09		 jge	 SHORT $LN5@DropNewYea

; 464  : 			{
; 465  : 				Option3 = 3;

  00134	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 466  : 			}
; 467  : 			else

  0013b	eb 10		 jmp	 SHORT $LN4@DropNewYea
$LN5@DropNewYea:

; 468  : 			{
; 469  : 				Option3 = rand()%3;

  0013d	e8 00 00 00 00	 call	 _rand
  00142	99		 cdq
  00143	b9 03 00 00 00	 mov	 ecx, 3
  00148	f7 f9		 idiv	 ecx
  0014a	89 55 fc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropNewYea:

; 470  : 			}
; 471  : 		}
; 472  : 
; 473  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  0014d	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  00154	74 1a		 je	 SHORT $LN23@DropNewYea

; 474  : 		{
; 475  : 			loc12 = NewOptionRand(0);

  00156	33 db		 xor	 ebx, ebx
  00158	53		 push	 ebx
  00159	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  0015e	0f b6 d0	 movzx	 edx, al
  00161	83 c4 04	 add	 esp, 4
  00164	89 55 f0	 mov	 DWORD PTR _loc12$[ebp], edx

; 476  : 			//Option2 = 0;
; 477  : 			Option1 = 1;

  00167	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
  0016e	eb 02		 jmp	 SHORT $LN3@DropNewYea
$LN23@DropNewYea:
  00170	33 db		 xor	 ebx, ebx
$LN3@DropNewYea:

; 478  : 			//level = 0;
; 479  : 		}
; 480  : 
; 481  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  00172	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  00178	74 10		 je	 SHORT $LN1@DropNewYea
  0017a	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  00180	74 08		 je	 SHORT $LN1@DropNewYea
  00182	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  00188	75 0c		 jne	 SHORT $LN2@DropNewYea
$LN1@DropNewYea:

; 482  : 		{
; 483  : 			Option1 = 0;

  0018a	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx

; 484  : 			Option2 = 0;

  0018d	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx

; 485  : 			Option3 = 0;

  00190	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx

; 486  : 			level = 0;

  00193	89 5d 14	 mov	 DWORD PTR _level$[ebp], ebx
$LN2@DropNewYea:

; 487  : 		}
; 488  : 
; 489  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  00196	8b 4d f0	 mov	 ecx, DWORD PTR _loc12$[ebp]
  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  0019e	53		 push	 ebx
  0019f	51		 push	 ecx
  001a0	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001a3	50		 push	 eax
  001a4	52		 push	 edx
  001a5	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001a8	51		 push	 ecx
  001a9	8b 4d 14	 mov	 ecx, DWORD PTR _level$[ebp]
  001ac	52		 push	 edx
  001ad	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  001b0	53		 push	 ebx
  001b1	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  001b4	51		 push	 ecx
  001b5	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001b8	56		 push	 esi
  001b9	52		 push	 edx
  001ba	51		 push	 ecx
  001bb	53		 push	 ebx
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 490  : 		LogAddTD("[ NewYearLuckyBagMonsterEvent ] NewYearLuckyBagDrop [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 491  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  001c2	8b 55 f0	 mov	 edx, DWORD PTR _loc12$[ebp]
  001c5	8b 45 fc	 mov	 eax, DWORD PTR _Option3$[ebp]
  001c8	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001cb	52		 push	 edx
  001cc	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001cf	50		 push	 eax
  001d0	8b 45 14	 mov	 eax, DWORD PTR _level$[ebp]
  001d3	51		 push	 ecx
  001d4	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  001d7	52		 push	 edx
  001d8	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001db	50		 push	 eax
  001dc	56		 push	 esi
  001dd	6b f6 70	 imul	 esi, 112		; 00000070H
  001e0	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  001e6	56		 push	 esi
  001e7	51		 push	 ecx
  001e8	52		 push	 edx
  001e9	0f b6 c3	 movzx	 eax, bl
  001ec	50		 push	 eax
  001ed	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  001f0	51		 push	 ecx
  001f1	83 c7 6c	 add	 edi, 108		; 0000006cH
  001f4	57		 push	 edi
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0HN@GKJHCEFI@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00200	83 c4 68	 add	 esp, 104		; 00000068H
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi

; 492  : 
; 493  : 	}
; 494  : 	return 1;

  00205	b8 01 00 00 00	 mov	 eax, 1
  0020a	5b		 pop	 ebx

; 495  : }

  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c2 10 00	 ret	 16			; 00000010H
$LN13@DropNewYea:

; 418  : 		{
; 419  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00211	0f b6 55 14	 movzx	 edx, BYTE PTR _cY$[ebp]
  00215	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  00219	8b 8e 10 01 00
	00		 mov	 ecx, DWORD PTR [esi+272]
  0021f	52		 push	 edx
  00220	50		 push	 eax
  00221	51		 push	 ecx
  00222	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00229	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  0022f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00235	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 420  : 			LogAddTD("[ NewYearLuckyBagMonsterEvent ] NewYearLuckyBagDrop [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  0023a	8b 96 10 01 00
	00		 mov	 edx, DWORD PTR [esi+272]
  00240	52		 push	 edx
  00241	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00244	50		 push	 eax
  00245	83 c7 6c	 add	 edi, 108		; 0000006cH
  00248	57		 push	 edi
  00249	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@NPFPBNJ@?$FL?5NewYearLuckyBagMonsterEvent?5?$FN?5@
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00254	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@DropNewYea:

; 492  : 
; 493  : 	}
; 494  : 	return 1;

  00257	5f		 pop	 edi
  00258	5e		 pop	 esi
  00259	b8 01 00 00 00	 mov	 eax, 1
  0025e	5b		 pop	 ebx

; 495  : }

  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c2 10 00	 ret	 16			; 00000010H
?DropNewYearLuckMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropNewYearLuckMonsterReward
_TEXT	ENDS
PUBLIC	??_C@_0DI@BKBFBIM@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@ ; `string'
PUBLIC	??_C@_0GP@MOLGNKBL@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@ ; `string'
PUBLIC	__real@437f0000
PUBLIC	__real@00000000
PUBLIC	?DropGMPresentBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropGMPresentBoxReward
;	COMDAT ??_C@_0DI@BKBFBIM@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0DI@BKBFBIM@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@ DB '[ GMPres'
	DB	'entBox ] GMPresentBoxItemDrop [%s][%s] [%d Zen]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GP@MOLGNKBL@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@
CONST	SEGMENT
??_C@_0GP@MOLGNKBL@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@ DB '[ GMPre'
	DB	'sentBox ] GMPresentBoxItemDrop [%s][%s] : (%d)(%d/%d) Item:(%'
	DB	's)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropGMPresentBoxReward@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
tv364 = -24						; size = 4
tv362 = -24						; size = 4
_dur$ = -24						; size = 4
_x$ = -20						; size = 4
_loc12$ = -16						; size = 4
_Option1$ = -12						; size = 4
_Option2$ = -8						; size = 4
_Option3$ = -4						; size = 4
_y$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
tv367 = 18						; size = 2
_level$ = 20						; size = 4
_cY$ = 20						; size = 1
?DropGMPresentBoxReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropGMPresentBoxReward, COMDAT
; _this$ = ecx

; 498  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 499  : 	if ( this->m_bLoad == FALSE )

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0000f	75 0a		 jne	 SHORT $LN17@DropGMPres

; 500  : 		return FALSE;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 605  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN17@DropGMPres:

; 501  : 
; 502  : 	float dur = 0;

  0001b	d9 ee		 fldz
  0001d	57		 push	 edi

; 503  : 	int type = 0;
; 504  : 	int level = 0;
; 505  : 	int x = 0;
; 506  : 	int y = 0;
; 507  : 	int Option1 = 0;
; 508  : 	int Option2 = 0;
; 509  : 	int Option3 = 0;
; 510  : 	int DropItemNum = 0;
; 511  : 	int ExOption = 0;
; 512  : 	int loc12 = 0;
; 513  : 	LPOBJ lpObj = &gObj[aIndex];

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00021	d9 5d e8	 fstp	 DWORD PTR _dur$[ebp]
  00024	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0002a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx
  00033	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx
  00036	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx
  00039	89 5d f0	 mov	 DWORD PTR _loc12$[ebp], ebx

; 514  : 	int loc14;
; 515  : 	int loc15;
; 516  : 	int loc16;
; 517  : 
; 518  : 	if ( this->GetBagCount() > 0 )

  0003c	39 9e 20 01 00
	00		 cmp	 DWORD PTR [esi+288], ebx
  00042	0f 8e 4f 02 00
	00		 jle	 $LN16@DropGMPres

; 519  : 	{
; 520  : 		loc14 = rand()%10000;

  00048	e8 00 00 00 00	 call	 _rand
  0004d	99		 cdq
  0004e	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00053	f7 f9		 idiv	 ecx

; 521  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1])

  00055	8b 86 04 08 00
	00		 mov	 eax, DWORD PTR [esi+2052]
  0005b	3b c3		 cmp	 eax, ebx
  0005d	0f 84 e8 01 00
	00		 je	 $LN14@DropGMPres
  00063	2b 8c 86 60 07
	00 00		 sub	 ecx, DWORD PTR [esi+eax*4+1888]
  0006a	3b d1		 cmp	 edx, ecx
  0006c	0f 8c d9 01 00
	00		 jl	 $LN14@DropGMPres

; 525  : 			return 1;
; 526  : 		}
; 527  : 			
; 528  : 		loc15 = this->m_iRateKindCount;
; 529  : 		loc16 = this->SortItem(loc14);

  00072	52		 push	 edx
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem

; 530  : 
; 531  : 		if ( cX == 0 && cY == 0 )

  0007a	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  0007d	8b d8		 mov	 ebx, eax
  0007f	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  00082	84 c0		 test	 al, al
  00084	75 14		 jne	 SHORT $LN13@DropGMPres
  00086	84 c9		 test	 cl, cl
  00088	75 10		 jne	 SHORT $LN13@DropGMPres

; 532  : 		{
; 533  : 			x = lpObj->X;

  0008a	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 534  : 			y = lpObj->Y;

  00091	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]

; 535  : 		}
; 536  : 		else

  00098	eb 06		 jmp	 SHORT $LN27@DropGMPres
$LN13@DropGMPres:

; 537  : 		{
; 538  : 			x = cX;

  0009a	0f b6 d0	 movzx	 edx, al

; 539  : 			y = cY;

  0009d	0f b6 c1	 movzx	 eax, cl
$LN27@DropGMPres:

; 540  : 		}
; 541  : 
; 542  : 		level = this->GetLevel(loc16);

  000a0	53		 push	 ebx
  000a1	8b ce		 mov	 ecx, esi
  000a3	89 45 08	 mov	 DWORD PTR _y$[ebp], eax
  000a6	89 55 ec	 mov	 DWORD PTR _x$[ebp], edx
  000a9	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000ae	0f b6 c8	 movzx	 ecx, al

; 543  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  000b1	8d 14 de	 lea	 edx, DWORD PTR [esi+ebx*8]
  000b4	0f b6 84 13 1e
	02 00 00	 movzx	 eax, BYTE PTR [ebx+edx+542]
  000bc	03 da		 add	 ebx, edx
  000be	89 4d 14	 mov	 DWORD PTR _level$[ebp], ecx
  000c1	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  000c8	50		 push	 eax
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000cf	8b f0		 mov	 esi, eax
  000d1	83 c4 08	 add	 esp, 8

; 544  : 
; 545  : 		if ( type == -1 )

  000d4	83 fe ff	 cmp	 esi, -1
  000d7	75 0b		 jne	 SHORT $LN11@DropGMPres

; 546  : 		{
; 547  : 			return FALSE;

  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	33 c0		 xor	 eax, eax
  000dd	5b		 pop	 ebx

; 605  : }

  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 10 00	 ret	 16			; 00000010H
$LN11@DropGMPres:

; 548  : 		}
; 549  : 
; 550  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  000e4	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000eb	74 07		 je	 SHORT $LN22@DropGMPres

; 551  : 		{
; 552  : 			Option1 =1;

  000ed	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN22@DropGMPres:

; 553  : 		}
; 554  : 
; 555  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  000f4	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  000fb	74 21		 je	 SHORT $LN23@DropGMPres

; 556  : 		{
; 557  : 			Option2 = 0;

  000fd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 558  : 
; 559  : 			if ( (rand()%2) == 0 )

  00104	e8 00 00 00 00	 call	 _rand
  00109	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0010e	79 05		 jns	 SHORT $LN26@DropGMPres
  00110	48		 dec	 eax
  00111	83 c8 fe	 or	 eax, -2			; fffffffeH
  00114	40		 inc	 eax
$LN26@DropGMPres:
  00115	75 07		 jne	 SHORT $LN23@DropGMPres

; 560  : 			{
; 561  : 				Option2 = 1;

  00117	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN23@DropGMPres:

; 562  : 			}
; 563  : 		}
; 564  : 
; 565  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  0011e	80 bb 23 02 00
	00 00		 cmp	 BYTE PTR [ebx+547], 0
  00125	74 2b		 je	 SHORT $LN5@DropGMPres

; 566  : 		{
; 567  : 			if ( rand()%5 < 1 )

  00127	e8 00 00 00 00	 call	 _rand
  0012c	99		 cdq
  0012d	b9 05 00 00 00	 mov	 ecx, 5
  00132	f7 f9		 idiv	 ecx
  00134	83 fa 01	 cmp	 edx, 1
  00137	7d 09		 jge	 SHORT $LN6@DropGMPres

; 568  : 			{
; 569  : 				Option3 = 3;

  00139	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 570  : 			}
; 571  : 			else

  00140	eb 10		 jmp	 SHORT $LN5@DropGMPres
$LN6@DropGMPres:

; 572  : 			{
; 573  : 				Option3 = rand()%3;

  00142	e8 00 00 00 00	 call	 _rand
  00147	99		 cdq
  00148	b9 03 00 00 00	 mov	 ecx, 3
  0014d	f7 f9		 idiv	 ecx
  0014f	89 55 fc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN5@DropGMPres:

; 574  : 			}
; 575  : 		}
; 576  : 
; 577  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  00152	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  00159	74 1a		 je	 SHORT $LN24@DropGMPres

; 578  : 		{
; 579  : 			loc12 = NewOptionRand(0);

  0015b	33 db		 xor	 ebx, ebx
  0015d	53		 push	 ebx
  0015e	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  00163	0f b6 d0	 movzx	 edx, al
  00166	83 c4 04	 add	 esp, 4
  00169	89 55 f0	 mov	 DWORD PTR _loc12$[ebp], edx

; 580  : 			//Option2 = 0;
; 581  : 			Option1 = 1;

  0016c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
  00173	eb 02		 jmp	 SHORT $LN4@DropGMPres
$LN24@DropGMPres:
  00175	33 db		 xor	 ebx, ebx
$LN4@DropGMPres:

; 582  : 			//level = 0;
; 583  : 		}
; 584  : 
; 585  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  00177	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  0017d	74 10		 je	 SHORT $LN2@DropGMPres
  0017f	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  00185	74 08		 je	 SHORT $LN2@DropGMPres
  00187	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  0018d	75 0c		 jne	 SHORT $LN3@DropGMPres
$LN2@DropGMPres:

; 586  : 		{
; 587  : 			Option1 = 0;

  0018f	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx

; 588  : 			Option2 = 0;

  00192	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx

; 589  : 			Option3 = 0;

  00195	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx

; 590  : 			level = 0;

  00198	89 5d 14	 mov	 DWORD PTR _level$[ebp], ebx
$LN3@DropGMPres:

; 591  : 		}
; 592  : 
; 593  : 		if ( type == ITEMGET(13,20) )

  0019b	81 fe 14 1a 00
	00		 cmp	 esi, 6676		; 00001a14H
  001a1	75 0c		 jne	 SHORT $LN1@DropGMPres

; 594  : 		{
; 595  : 			level = 0;
; 596  : 			dur = 255;

  001a3	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@437f0000
  001a9	89 5d 14	 mov	 DWORD PTR _level$[ebp], ebx
  001ac	d9 5d e8	 fstp	 DWORD PTR _dur$[ebp]
$LN1@DropGMPres:

; 597  : 		}
; 598  : 
; 599  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  001af	8b 45 f0	 mov	 eax, DWORD PTR _loc12$[ebp]
  001b2	d9 45 e8	 fld	 DWORD PTR _dur$[ebp]
  001b5	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001b7	d9 7d 12	 fnstcw	 WORD PTR tv367[ebp]
  001ba	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  001bd	53		 push	 ebx
  001be	50		 push	 eax
  001bf	8b 45 f8	 mov	 eax, DWORD PTR _Option2$[ebp]
  001c2	51		 push	 ecx
  001c3	52		 push	 edx
  001c4	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001c7	50		 push	 eax
  001c8	0f b7 45 12	 movzx	 eax, WORD PTR tv367[ebp]
  001cc	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001d1	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  001d4	89 45 e8	 mov	 DWORD PTR tv364[ebp], eax
  001d7	52		 push	 edx
  001d8	d9 6d e8	 fldcw	 WORD PTR tv364[ebp]
  001db	db 5d e8	 fistp	 DWORD PTR tv362[ebp]
  001de	8a 45 e8	 mov	 al, BYTE PTR tv362[ebp]
  001e1	0f b6 d0	 movzx	 edx, al
  001e4	8b 45 14	 mov	 eax, DWORD PTR _level$[ebp]
  001e7	d9 6d 12	 fldcw	 WORD PTR tv367[ebp]
  001ea	52		 push	 edx
  001eb	8b 55 08	 mov	 edx, DWORD PTR _y$[ebp]
  001ee	50		 push	 eax
  001ef	8b 45 ec	 mov	 eax, DWORD PTR _x$[ebp]
  001f2	56		 push	 esi
  001f3	52		 push	 edx
  001f4	50		 push	 eax
  001f5	53		 push	 ebx
  001f6	51		 push	 ecx
  001f7	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 600  : 		LogAddTD("[ GMPresentBox ] GMPresentBoxItemDrop [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 601  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  001fc	8b 4d f0	 mov	 ecx, DWORD PTR _loc12$[ebp]
  001ff	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  00202	8b 45 f8	 mov	 eax, DWORD PTR _Option2$[ebp]
  00205	51		 push	 ecx
  00206	8b 4d f4	 mov	 ecx, DWORD PTR _Option1$[ebp]
  00209	52		 push	 edx
  0020a	8b 55 14	 mov	 edx, DWORD PTR _level$[ebp]
  0020d	50		 push	 eax
  0020e	8b 45 08	 mov	 eax, DWORD PTR _y$[ebp]
  00211	51		 push	 ecx
  00212	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  00215	52		 push	 edx
  00216	56		 push	 esi
  00217	6b f6 70	 imul	 esi, 112		; 00000070H
  0021a	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00220	56		 push	 esi
  00221	50		 push	 eax
  00222	51		 push	 ecx
  00223	0f b6 d3	 movzx	 edx, bl
  00226	52		 push	 edx
  00227	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  0022a	50		 push	 eax
  0022b	83 c7 6c	 add	 edi, 108		; 0000006cH
  0022e	57		 push	 edi
  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0GP@MOLGNKBL@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0023a	83 c4 68	 add	 esp, 104		; 00000068H
  0023d	5f		 pop	 edi
  0023e	5e		 pop	 esi

; 602  : 
; 603  : 	}
; 604  : 	return 1;

  0023f	b8 01 00 00 00	 mov	 eax, 1
  00244	5b		 pop	 ebx

; 605  : }

  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c2 10 00	 ret	 16			; 00000010H
$LN14@DropGMPres:

; 522  : 		{
; 523  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, lpObj->X, lpObj->Y);

  0024b	0f bf 8f 46 01
	00 00		 movsx	 ecx, WORD PTR [edi+326]
  00252	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]
  00259	8b 86 10 01 00
	00		 mov	 eax, DWORD PTR [esi+272]
  0025f	51		 push	 ecx
  00260	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00267	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  0026d	52		 push	 edx
  0026e	50		 push	 eax
  0026f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00275	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 524  : 			LogAddTD("[ GMPresentBox ] GMPresentBoxItemDrop [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  0027a	8b 8e 10 01 00
	00		 mov	 ecx, DWORD PTR [esi+272]
  00280	51		 push	 ecx
  00281	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  00284	52		 push	 edx
  00285	83 c7 6c	 add	 edi, 108		; 0000006cH
  00288	57		 push	 edi
  00289	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@BKBFBIM@?$FL?5GMPresentBox?5?$FN?5GMPresentBoxIte@
  0028e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00294	83 c4 10	 add	 esp, 16			; 00000010H
$LN16@DropGMPres:

; 602  : 
; 603  : 	}
; 604  : 	return 1;

  00297	5f		 pop	 edi
  00298	5e		 pop	 esi
  00299	b8 01 00 00 00	 mov	 eax, 1
  0029e	5b		 pop	 ebx

; 605  : }

  0029f	8b e5		 mov	 esp, ebp
  002a1	5d		 pop	 ebp
  002a2	c2 10 00	 ret	 16			; 00000010H
?DropGMPresentBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropGMPresentBoxReward
_TEXT	ENDS
PUBLIC	??_C@_0DO@GKLPNLL@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@ ; `string'
PUBLIC	??_C@_0HF@GABPJFOM@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@ ; `string'
PUBLIC	?DropPCBangGreenChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropPCBangGreenChaosBoxReward
;	COMDAT ??_C@_0DO@GKLPNLL@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0DO@GKLPNLL@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@ DB '[PCBangPoi'
	DB	'ntSystem] DropBoxOfGreenChaosItem [%s][%s] [%d Zen]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HF@GABPJFOM@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@
CONST	SEGMENT
??_C@_0HF@GABPJFOM@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfGreenChaosItem [%s][%s] : (%d)(%d/%d) Ite'
	DB	'm:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropPCBangGreenChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_loc12$ = -16						; size = 4
_Option1$ = -12						; size = 4
_Option2$ = -8						; size = 4
_Option3$ = -4						; size = 4
_x$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_y$ = 16						; size = 4
_cX$ = 16						; size = 1
_level$ = 20						; size = 4
_cY$ = 20						; size = 1
?DropPCBangGreenChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropPCBangGreenChaosBoxReward, COMDAT
; _this$ = ecx

; 608  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 609  : 	if ( this->m_bLoad == FALSE )

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0000f	75 0a		 jne	 SHORT $LN16@DropPCBang

; 610  : 		return FALSE;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 709  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN16@DropPCBang:
  0001b	57		 push	 edi

; 611  : 
; 612  : 	float dur = 0;
; 613  : 	int type = 0;
; 614  : 	int level = 0;
; 615  : 	int x = 0;
; 616  : 	int y = 0;
; 617  : 	int Option1 = 0;
; 618  : 	int Option2 = 0;
; 619  : 	int Option3 = 0;
; 620  : 	int DropItemNum = 0;
; 621  : 	int ExOption = 0;
; 622  : 	int loc12 = 0;
; 623  : 	LPOBJ lpObj = &gObj[aIndex];

  0001c	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0001f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00025	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx
  0002e	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx
  00031	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx
  00034	89 5d f0	 mov	 DWORD PTR _loc12$[ebp], ebx

; 624  : 	int loc14;
; 625  : 	int loc15;
; 626  : 	int loc16;
; 627  : 
; 628  : 	if ( this->GetBagCount() > 0 )

  00037	39 9e 20 01 00
	00		 cmp	 DWORD PTR [esi+288], ebx
  0003d	0f 8e 14 02 00
	00		 jle	 $LN15@DropPCBang

; 629  : 	{
; 630  : 		loc14 = rand()%10000;

  00043	e8 00 00 00 00	 call	 _rand
  00048	99		 cdq
  00049	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0004e	f7 f9		 idiv	 ecx

; 631  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1])

  00050	8b 86 04 08 00
	00		 mov	 eax, DWORD PTR [esi+2052]
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 84 b3 01 00
	00		 je	 $LN13@DropPCBang
  0005e	2b 8c 86 60 07
	00 00		 sub	 ecx, DWORD PTR [esi+eax*4+1888]
  00065	3b d1		 cmp	 edx, ecx
  00067	0f 8c a4 01 00
	00		 jl	 $LN13@DropPCBang

; 635  : 			return 1;
; 636  : 		}
; 637  : 			
; 638  : 		loc15 = this->m_iRateKindCount;
; 639  : 		loc16 = this->SortItem(loc14);

  0006d	52		 push	 edx
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem

; 640  : 
; 641  : 		if ( cX == 0 && cY == 0 )

  00075	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00078	8b d8		 mov	 ebx, eax
  0007a	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  0007d	84 c0		 test	 al, al
  0007f	75 14		 jne	 SHORT $LN12@DropPCBang
  00081	84 c9		 test	 cl, cl
  00083	75 10		 jne	 SHORT $LN12@DropPCBang

; 642  : 		{
; 643  : 			x = lpObj->X;

  00085	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 644  : 			y = lpObj->Y;

  0008c	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]

; 645  : 		}
; 646  : 		else

  00093	eb 06		 jmp	 SHORT $LN26@DropPCBang
$LN12@DropPCBang:

; 647  : 		{
; 648  : 			x = cX;

  00095	0f b6 d0	 movzx	 edx, al

; 649  : 			y = cY;

  00098	0f b6 c1	 movzx	 eax, cl
$LN26@DropPCBang:

; 650  : 		}
; 651  : 
; 652  : 		level = this->GetLevel(loc16);

  0009b	53		 push	 ebx
  0009c	8b ce		 mov	 ecx, esi
  0009e	89 45 10	 mov	 DWORD PTR _y$[ebp], eax
  000a1	89 55 08	 mov	 DWORD PTR _x$[ebp], edx
  000a4	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000a9	0f b6 c8	 movzx	 ecx, al

; 653  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  000ac	8d 14 de	 lea	 edx, DWORD PTR [esi+ebx*8]
  000af	0f b6 84 13 1e
	02 00 00	 movzx	 eax, BYTE PTR [ebx+edx+542]
  000b7	03 da		 add	 ebx, edx
  000b9	89 4d 14	 mov	 DWORD PTR _level$[ebp], ecx
  000bc	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000ca	8b f0		 mov	 esi, eax
  000cc	83 c4 08	 add	 esp, 8

; 654  : 
; 655  : 		if ( type == -1 )

  000cf	83 fe ff	 cmp	 esi, -1
  000d2	75 0b		 jne	 SHORT $LN10@DropPCBang

; 656  : 		{
; 657  : 			return FALSE;

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	33 c0		 xor	 eax, eax
  000d8	5b		 pop	 ebx

; 709  : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 10 00	 ret	 16			; 00000010H
$LN10@DropPCBang:

; 658  : 		}
; 659  : 
; 660  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  000df	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000e6	74 07		 je	 SHORT $LN21@DropPCBang

; 661  : 		{
; 662  : 			Option1 =1;

  000e8	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN21@DropPCBang:

; 663  : 		}
; 664  : 
; 665  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  000ef	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  000f6	74 21		 je	 SHORT $LN22@DropPCBang

; 666  : 		{
; 667  : 			Option2 = 0;

  000f8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 668  : 
; 669  : 			if ( (rand()%2) == 0 )

  000ff	e8 00 00 00 00	 call	 _rand
  00104	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00109	79 05		 jns	 SHORT $LN25@DropPCBang
  0010b	48		 dec	 eax
  0010c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0010f	40		 inc	 eax
$LN25@DropPCBang:
  00110	75 07		 jne	 SHORT $LN22@DropPCBang

; 670  : 			{
; 671  : 				Option2 = 1;

  00112	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN22@DropPCBang:

; 672  : 			}
; 673  : 		}
; 674  : 
; 675  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  00119	80 bb 23 02 00
	00 00		 cmp	 BYTE PTR [ebx+547], 0
  00120	74 2b		 je	 SHORT $LN4@DropPCBang

; 676  : 		{
; 677  : 			if ( rand()%5 < 1 )

  00122	e8 00 00 00 00	 call	 _rand
  00127	99		 cdq
  00128	b9 05 00 00 00	 mov	 ecx, 5
  0012d	f7 f9		 idiv	 ecx
  0012f	83 fa 01	 cmp	 edx, 1
  00132	7d 09		 jge	 SHORT $LN5@DropPCBang

; 678  : 			{
; 679  : 				Option3 = 3;

  00134	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 680  : 			}
; 681  : 			else

  0013b	eb 10		 jmp	 SHORT $LN4@DropPCBang
$LN5@DropPCBang:

; 682  : 			{
; 683  : 				Option3 = rand()%3;

  0013d	e8 00 00 00 00	 call	 _rand
  00142	99		 cdq
  00143	b9 03 00 00 00	 mov	 ecx, 3
  00148	f7 f9		 idiv	 ecx
  0014a	89 55 fc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropPCBang:

; 684  : 			}
; 685  : 		}
; 686  : 
; 687  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  0014d	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  00154	74 1a		 je	 SHORT $LN23@DropPCBang

; 688  : 		{
; 689  : 			loc12 = NewOptionRand(0);

  00156	33 db		 xor	 ebx, ebx
  00158	53		 push	 ebx
  00159	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  0015e	0f b6 d0	 movzx	 edx, al
  00161	83 c4 04	 add	 esp, 4
  00164	89 55 f0	 mov	 DWORD PTR _loc12$[ebp], edx

; 690  : 			//Option2 = 0;
; 691  : 			Option1 = 1;

  00167	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
  0016e	eb 02		 jmp	 SHORT $LN3@DropPCBang
$LN23@DropPCBang:
  00170	33 db		 xor	 ebx, ebx
$LN3@DropPCBang:

; 692  : 			//level = 0;
; 693  : 		}
; 694  : 
; 695  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  00172	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  00178	74 10		 je	 SHORT $LN1@DropPCBang
  0017a	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  00180	74 08		 je	 SHORT $LN1@DropPCBang
  00182	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  00188	75 0c		 jne	 SHORT $LN2@DropPCBang
$LN1@DropPCBang:

; 696  : 		{
; 697  : 			Option1 = 0;

  0018a	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx

; 698  : 			Option2 = 0;

  0018d	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx

; 699  : 			Option3 = 0;

  00190	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx

; 700  : 			level = 0;

  00193	89 5d 14	 mov	 DWORD PTR _level$[ebp], ebx
$LN2@DropPCBang:

; 701  : 		}
; 702  : 
; 703  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  00196	8b 4d f0	 mov	 ecx, DWORD PTR _loc12$[ebp]
  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  0019e	53		 push	 ebx
  0019f	51		 push	 ecx
  001a0	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001a3	50		 push	 eax
  001a4	52		 push	 edx
  001a5	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001a8	51		 push	 ecx
  001a9	8b 4d 14	 mov	 ecx, DWORD PTR _level$[ebp]
  001ac	52		 push	 edx
  001ad	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  001b0	53		 push	 ebx
  001b1	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  001b4	51		 push	 ecx
  001b5	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001b8	56		 push	 esi
  001b9	52		 push	 edx
  001ba	51		 push	 ecx
  001bb	53		 push	 ebx
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 704  : 		LogAddTD("[PCBangPointSystem] DropBoxOfGreenChaosItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 705  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  001c2	8b 55 f0	 mov	 edx, DWORD PTR _loc12$[ebp]
  001c5	8b 45 fc	 mov	 eax, DWORD PTR _Option3$[ebp]
  001c8	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001cb	52		 push	 edx
  001cc	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001cf	50		 push	 eax
  001d0	8b 45 14	 mov	 eax, DWORD PTR _level$[ebp]
  001d3	51		 push	 ecx
  001d4	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  001d7	52		 push	 edx
  001d8	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001db	50		 push	 eax
  001dc	56		 push	 esi
  001dd	6b f6 70	 imul	 esi, 112		; 00000070H
  001e0	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  001e6	56		 push	 esi
  001e7	51		 push	 ecx
  001e8	52		 push	 edx
  001e9	0f b6 c3	 movzx	 eax, bl
  001ec	50		 push	 eax
  001ed	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  001f0	51		 push	 ecx
  001f1	83 c7 6c	 add	 edi, 108		; 0000006cH
  001f4	57		 push	 edi
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@GABPJFOM@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00200	83 c4 68	 add	 esp, 104		; 00000068H
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi

; 706  : 
; 707  : 	}
; 708  : 	return 1;

  00205	b8 01 00 00 00	 mov	 eax, 1
  0020a	5b		 pop	 ebx

; 709  : }

  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c2 10 00	 ret	 16			; 00000010H
$LN13@DropPCBang:

; 632  : 		{
; 633  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00211	0f b6 55 14	 movzx	 edx, BYTE PTR _cY$[ebp]
  00215	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  00219	8b 8e 10 01 00
	00		 mov	 ecx, DWORD PTR [esi+272]
  0021f	52		 push	 edx
  00220	50		 push	 eax
  00221	51		 push	 ecx
  00222	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00229	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  0022f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00235	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 634  : 			LogAddTD("[PCBangPointSystem] DropBoxOfGreenChaosItem [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  0023a	8b 96 10 01 00
	00		 mov	 edx, DWORD PTR [esi+272]
  00240	52		 push	 edx
  00241	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00244	50		 push	 eax
  00245	83 c7 6c	 add	 edi, 108		; 0000006cH
  00248	57		 push	 edi
  00249	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@GKLPNLL@?$FLPCBangPointSystem?$FN?5DropBoxOfGre@
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00254	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@DropPCBang:

; 706  : 
; 707  : 	}
; 708  : 	return 1;

  00257	5f		 pop	 edi
  00258	5e		 pop	 esi
  00259	b8 01 00 00 00	 mov	 eax, 1
  0025e	5b		 pop	 ebx

; 709  : }

  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c2 10 00	 ret	 16			; 00000010H
?DropPCBangGreenChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropPCBangGreenChaosBoxReward
_TEXT	ENDS
PUBLIC	??_C@_0DM@JFLICMGN@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@ ; `string'
PUBLIC	??_C@_0HD@LHFCFBDD@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@ ; `string'
PUBLIC	?DropPCBangRedChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropPCBangRedChaosBoxReward
;	COMDAT ??_C@_0DM@JFLICMGN@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0DM@JFLICMGN@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfRedChaosItem [%s][%s] [%d Zen]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@LHFCFBDD@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@
CONST	SEGMENT
??_C@_0HD@LHFCFBDD@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfRedChaosItem [%s][%s] : (%d)(%d/%d) Item:'
	DB	'(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropPCBangRedChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_loc12$ = -16						; size = 4
_Option1$ = -12						; size = 4
_Option2$ = -8						; size = 4
_Option3$ = -4						; size = 4
_x$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_y$ = 16						; size = 4
_cX$ = 16						; size = 1
_level$ = 20						; size = 4
_cY$ = 20						; size = 1
?DropPCBangRedChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropPCBangRedChaosBoxReward, COMDAT
; _this$ = ecx

; 712  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 713  : 	if ( this->m_bLoad == FALSE )

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0000f	75 0a		 jne	 SHORT $LN16@DropPCBang@2

; 714  : 		return FALSE;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 813  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN16@DropPCBang@2:
  0001b	57		 push	 edi

; 715  : 
; 716  : 	float dur = 0;
; 717  : 	int type = 0;
; 718  : 	int level = 0;
; 719  : 	int x = 0;
; 720  : 	int y = 0;
; 721  : 	int Option1 = 0;
; 722  : 	int Option2 = 0;
; 723  : 	int Option3 = 0;
; 724  : 	int DropItemNum = 0;
; 725  : 	int ExOption = 0;
; 726  : 	int loc12 = 0;
; 727  : 	LPOBJ lpObj = &gObj[aIndex];

  0001c	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0001f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00025	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx
  0002e	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx
  00031	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx
  00034	89 5d f0	 mov	 DWORD PTR _loc12$[ebp], ebx

; 728  : 	int loc14;
; 729  : 	int loc15;
; 730  : 	int loc16;
; 731  : 
; 732  : 	if ( this->GetBagCount() > 0 )

  00037	39 9e 20 01 00
	00		 cmp	 DWORD PTR [esi+288], ebx
  0003d	0f 8e 14 02 00
	00		 jle	 $LN15@DropPCBang@2

; 733  : 	{
; 734  : 		loc14 = rand()%10000;

  00043	e8 00 00 00 00	 call	 _rand
  00048	99		 cdq
  00049	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0004e	f7 f9		 idiv	 ecx

; 735  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1])

  00050	8b 86 04 08 00
	00		 mov	 eax, DWORD PTR [esi+2052]
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 84 b3 01 00
	00		 je	 $LN13@DropPCBang@2
  0005e	2b 8c 86 60 07
	00 00		 sub	 ecx, DWORD PTR [esi+eax*4+1888]
  00065	3b d1		 cmp	 edx, ecx
  00067	0f 8c a4 01 00
	00		 jl	 $LN13@DropPCBang@2

; 739  : 			return 1;
; 740  : 		}
; 741  : 			
; 742  : 		loc15 = this->m_iRateKindCount;
; 743  : 		loc16 = this->SortItem(loc14);

  0006d	52		 push	 edx
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem

; 744  : 
; 745  : 		if ( cX == 0 && cY == 0 )

  00075	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00078	8b d8		 mov	 ebx, eax
  0007a	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  0007d	84 c0		 test	 al, al
  0007f	75 14		 jne	 SHORT $LN12@DropPCBang@2
  00081	84 c9		 test	 cl, cl
  00083	75 10		 jne	 SHORT $LN12@DropPCBang@2

; 746  : 		{
; 747  : 			x = lpObj->X;

  00085	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 748  : 			y = lpObj->Y;

  0008c	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]

; 749  : 		}
; 750  : 		else

  00093	eb 06		 jmp	 SHORT $LN26@DropPCBang@2
$LN12@DropPCBang@2:

; 751  : 		{
; 752  : 			x = cX;

  00095	0f b6 d0	 movzx	 edx, al

; 753  : 			y = cY;

  00098	0f b6 c1	 movzx	 eax, cl
$LN26@DropPCBang@2:

; 754  : 		}
; 755  : 
; 756  : 		level = this->GetLevel(loc16);

  0009b	53		 push	 ebx
  0009c	8b ce		 mov	 ecx, esi
  0009e	89 45 10	 mov	 DWORD PTR _y$[ebp], eax
  000a1	89 55 08	 mov	 DWORD PTR _x$[ebp], edx
  000a4	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000a9	0f b6 c8	 movzx	 ecx, al

; 757  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  000ac	8d 14 de	 lea	 edx, DWORD PTR [esi+ebx*8]
  000af	0f b6 84 13 1e
	02 00 00	 movzx	 eax, BYTE PTR [ebx+edx+542]
  000b7	03 da		 add	 ebx, edx
  000b9	89 4d 14	 mov	 DWORD PTR _level$[ebp], ecx
  000bc	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000ca	8b f0		 mov	 esi, eax
  000cc	83 c4 08	 add	 esp, 8

; 758  : 
; 759  : 		if ( type == -1 )

  000cf	83 fe ff	 cmp	 esi, -1
  000d2	75 0b		 jne	 SHORT $LN10@DropPCBang@2

; 760  : 		{
; 761  : 			return FALSE;

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	33 c0		 xor	 eax, eax
  000d8	5b		 pop	 ebx

; 813  : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 10 00	 ret	 16			; 00000010H
$LN10@DropPCBang@2:

; 762  : 		}
; 763  : 
; 764  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  000df	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000e6	74 07		 je	 SHORT $LN21@DropPCBang@2

; 765  : 		{
; 766  : 			Option1 =1;

  000e8	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN21@DropPCBang@2:

; 767  : 		}
; 768  : 
; 769  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  000ef	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  000f6	74 21		 je	 SHORT $LN22@DropPCBang@2

; 770  : 		{
; 771  : 			Option2 = 0;

  000f8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 772  : 
; 773  : 			if ( (rand()%2) == 0 )

  000ff	e8 00 00 00 00	 call	 _rand
  00104	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00109	79 05		 jns	 SHORT $LN25@DropPCBang@2
  0010b	48		 dec	 eax
  0010c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0010f	40		 inc	 eax
$LN25@DropPCBang@2:
  00110	75 07		 jne	 SHORT $LN22@DropPCBang@2

; 774  : 			{
; 775  : 				Option2 = 1;

  00112	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN22@DropPCBang@2:

; 776  : 			}
; 777  : 		}
; 778  : 
; 779  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  00119	80 bb 23 02 00
	00 00		 cmp	 BYTE PTR [ebx+547], 0
  00120	74 2b		 je	 SHORT $LN4@DropPCBang@2

; 780  : 		{
; 781  : 			if ( rand()%5 < 1 )

  00122	e8 00 00 00 00	 call	 _rand
  00127	99		 cdq
  00128	b9 05 00 00 00	 mov	 ecx, 5
  0012d	f7 f9		 idiv	 ecx
  0012f	83 fa 01	 cmp	 edx, 1
  00132	7d 09		 jge	 SHORT $LN5@DropPCBang@2

; 782  : 			{
; 783  : 				Option3 = 3;

  00134	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 784  : 			}
; 785  : 			else

  0013b	eb 10		 jmp	 SHORT $LN4@DropPCBang@2
$LN5@DropPCBang@2:

; 786  : 			{
; 787  : 				Option3 = rand()%3;

  0013d	e8 00 00 00 00	 call	 _rand
  00142	99		 cdq
  00143	b9 03 00 00 00	 mov	 ecx, 3
  00148	f7 f9		 idiv	 ecx
  0014a	89 55 fc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropPCBang@2:

; 788  : 			}
; 789  : 		}
; 790  : 
; 791  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  0014d	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  00154	74 1a		 je	 SHORT $LN23@DropPCBang@2

; 792  : 		{
; 793  : 			loc12 = NewOptionRand(0);

  00156	33 db		 xor	 ebx, ebx
  00158	53		 push	 ebx
  00159	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  0015e	0f b6 d0	 movzx	 edx, al
  00161	83 c4 04	 add	 esp, 4
  00164	89 55 f0	 mov	 DWORD PTR _loc12$[ebp], edx

; 794  : 			//Option2 = 0;
; 795  : 			Option1 = 1;

  00167	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
  0016e	eb 02		 jmp	 SHORT $LN3@DropPCBang@2
$LN23@DropPCBang@2:
  00170	33 db		 xor	 ebx, ebx
$LN3@DropPCBang@2:

; 796  : 			//level = 0;
; 797  : 		}
; 798  : 
; 799  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  00172	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  00178	74 10		 je	 SHORT $LN1@DropPCBang@2
  0017a	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  00180	74 08		 je	 SHORT $LN1@DropPCBang@2
  00182	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  00188	75 0c		 jne	 SHORT $LN2@DropPCBang@2
$LN1@DropPCBang@2:

; 800  : 		{
; 801  : 			Option1 = 0;

  0018a	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx

; 802  : 			Option2 = 0;

  0018d	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx

; 803  : 			Option3 = 0;

  00190	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx

; 804  : 			level = 0;

  00193	89 5d 14	 mov	 DWORD PTR _level$[ebp], ebx
$LN2@DropPCBang@2:

; 805  : 		}
; 806  : 
; 807  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  00196	8b 4d f0	 mov	 ecx, DWORD PTR _loc12$[ebp]
  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  0019e	53		 push	 ebx
  0019f	51		 push	 ecx
  001a0	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001a3	50		 push	 eax
  001a4	52		 push	 edx
  001a5	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001a8	51		 push	 ecx
  001a9	8b 4d 14	 mov	 ecx, DWORD PTR _level$[ebp]
  001ac	52		 push	 edx
  001ad	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  001b0	53		 push	 ebx
  001b1	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  001b4	51		 push	 ecx
  001b5	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001b8	56		 push	 esi
  001b9	52		 push	 edx
  001ba	51		 push	 ecx
  001bb	53		 push	 ebx
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 808  : 		LogAddTD("[PCBangPointSystem] DropBoxOfRedChaosItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 809  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  001c2	8b 55 f0	 mov	 edx, DWORD PTR _loc12$[ebp]
  001c5	8b 45 fc	 mov	 eax, DWORD PTR _Option3$[ebp]
  001c8	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001cb	52		 push	 edx
  001cc	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001cf	50		 push	 eax
  001d0	8b 45 14	 mov	 eax, DWORD PTR _level$[ebp]
  001d3	51		 push	 ecx
  001d4	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  001d7	52		 push	 edx
  001d8	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001db	50		 push	 eax
  001dc	56		 push	 esi
  001dd	6b f6 70	 imul	 esi, 112		; 00000070H
  001e0	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  001e6	56		 push	 esi
  001e7	51		 push	 ecx
  001e8	52		 push	 edx
  001e9	0f b6 c3	 movzx	 eax, bl
  001ec	50		 push	 eax
  001ed	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  001f0	51		 push	 ecx
  001f1	83 c7 6c	 add	 edi, 108		; 0000006cH
  001f4	57		 push	 edi
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@LHFCFBDD@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00200	83 c4 68	 add	 esp, 104		; 00000068H
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi

; 810  : 
; 811  : 	}
; 812  : 	return 1;

  00205	b8 01 00 00 00	 mov	 eax, 1
  0020a	5b		 pop	 ebx

; 813  : }

  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c2 10 00	 ret	 16			; 00000010H
$LN13@DropPCBang@2:

; 736  : 		{
; 737  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00211	0f b6 55 14	 movzx	 edx, BYTE PTR _cY$[ebp]
  00215	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  00219	8b 8e 10 01 00
	00		 mov	 ecx, DWORD PTR [esi+272]
  0021f	52		 push	 edx
  00220	50		 push	 eax
  00221	51		 push	 ecx
  00222	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00229	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  0022f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00235	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 738  : 			LogAddTD("[PCBangPointSystem] DropBoxOfRedChaosItem [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  0023a	8b 96 10 01 00
	00		 mov	 edx, DWORD PTR [esi+272]
  00240	52		 push	 edx
  00241	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00244	50		 push	 eax
  00245	83 c7 6c	 add	 edi, 108		; 0000006cH
  00248	57		 push	 edi
  00249	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@JFLICMGN@?$FLPCBangPointSystem?$FN?5DropBoxOfRed@
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00254	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@DropPCBang@2:

; 810  : 
; 811  : 	}
; 812  : 	return 1;

  00257	5f		 pop	 edi
  00258	5e		 pop	 esi
  00259	b8 01 00 00 00	 mov	 eax, 1
  0025e	5b		 pop	 ebx

; 813  : }

  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c2 10 00	 ret	 16			; 00000010H
?DropPCBangRedChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropPCBangRedChaosBoxReward
_TEXT	ENDS
PUBLIC	??_C@_0DP@JPDMGMKL@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@ ; `string'
PUBLIC	??_C@_0HG@CNGDIFNG@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@ ; `string'
PUBLIC	?DropPCBangPurpleChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropPCBangPurpleChaosBoxReward
;	COMDAT ??_C@_0DP@JPDMGMKL@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0DP@JPDMGMKL@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfPurpleChaosItem [%s][%s] [%d Zen]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HG@CNGDIFNG@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@
CONST	SEGMENT
??_C@_0HG@CNGDIFNG@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@ DB '[PCBangPo'
	DB	'intSystem] DropBoxOfPurpleChaosItem [%s][%s] : (%d)(%d/%d) It'
	DB	'em:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropPCBangPurpleChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_loc12$ = -16						; size = 4
_Option1$ = -12						; size = 4
_Option2$ = -8						; size = 4
_Option3$ = -4						; size = 4
_x$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_y$ = 16						; size = 4
_cX$ = 16						; size = 1
_level$ = 20						; size = 4
_cY$ = 20						; size = 1
?DropPCBangPurpleChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropPCBangPurpleChaosBoxReward, COMDAT
; _this$ = ecx

; 816  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 817  : 	if ( this->m_bLoad == FALSE )

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0000f	75 0a		 jne	 SHORT $LN16@DropPCBang@3

; 818  : 		return FALSE;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 917  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN16@DropPCBang@3:
  0001b	57		 push	 edi

; 819  : 
; 820  : 	float dur = 0;
; 821  : 	int type = 0;
; 822  : 	int level = 0;
; 823  : 	int x = 0;
; 824  : 	int y = 0;
; 825  : 	int Option1 = 0;
; 826  : 	int Option2 = 0;
; 827  : 	int Option3 = 0;
; 828  : 	int DropItemNum = 0;
; 829  : 	int ExOption = 0;
; 830  : 	int loc12 = 0;
; 831  : 	LPOBJ lpObj = &gObj[aIndex];

  0001c	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0001f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00025	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx
  0002e	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx
  00031	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx
  00034	89 5d f0	 mov	 DWORD PTR _loc12$[ebp], ebx

; 832  : 	int loc14;
; 833  : 	int loc15;
; 834  : 	int loc16;
; 835  : 
; 836  : 	if ( this->GetBagCount() > 0 )

  00037	39 9e 20 01 00
	00		 cmp	 DWORD PTR [esi+288], ebx
  0003d	0f 8e 14 02 00
	00		 jle	 $LN15@DropPCBang@3

; 837  : 	{
; 838  : 		loc14 = rand()%10000;

  00043	e8 00 00 00 00	 call	 _rand
  00048	99		 cdq
  00049	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0004e	f7 f9		 idiv	 ecx

; 839  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1])

  00050	8b 86 04 08 00
	00		 mov	 eax, DWORD PTR [esi+2052]
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 84 b3 01 00
	00		 je	 $LN13@DropPCBang@3
  0005e	2b 8c 86 60 07
	00 00		 sub	 ecx, DWORD PTR [esi+eax*4+1888]
  00065	3b d1		 cmp	 edx, ecx
  00067	0f 8c a4 01 00
	00		 jl	 $LN13@DropPCBang@3

; 843  : 			return 1;
; 844  : 		}
; 845  : 			
; 846  : 		loc15 = this->m_iRateKindCount;
; 847  : 		loc16 = this->SortItem(loc14);

  0006d	52		 push	 edx
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem

; 848  : 
; 849  : 		if ( cX == 0 && cY == 0 )

  00075	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00078	8b d8		 mov	 ebx, eax
  0007a	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  0007d	84 c0		 test	 al, al
  0007f	75 14		 jne	 SHORT $LN12@DropPCBang@3
  00081	84 c9		 test	 cl, cl
  00083	75 10		 jne	 SHORT $LN12@DropPCBang@3

; 850  : 		{
; 851  : 			x = lpObj->X;

  00085	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 852  : 			y = lpObj->Y;

  0008c	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]

; 853  : 		}
; 854  : 		else

  00093	eb 06		 jmp	 SHORT $LN26@DropPCBang@3
$LN12@DropPCBang@3:

; 855  : 		{
; 856  : 			x = cX;

  00095	0f b6 d0	 movzx	 edx, al

; 857  : 			y = cY;

  00098	0f b6 c1	 movzx	 eax, cl
$LN26@DropPCBang@3:

; 858  : 		}
; 859  : 
; 860  : 		level = this->GetLevel(loc16);

  0009b	53		 push	 ebx
  0009c	8b ce		 mov	 ecx, esi
  0009e	89 45 10	 mov	 DWORD PTR _y$[ebp], eax
  000a1	89 55 08	 mov	 DWORD PTR _x$[ebp], edx
  000a4	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000a9	0f b6 c8	 movzx	 ecx, al

; 861  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  000ac	8d 14 de	 lea	 edx, DWORD PTR [esi+ebx*8]
  000af	0f b6 84 13 1e
	02 00 00	 movzx	 eax, BYTE PTR [ebx+edx+542]
  000b7	03 da		 add	 ebx, edx
  000b9	89 4d 14	 mov	 DWORD PTR _level$[ebp], ecx
  000bc	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000ca	8b f0		 mov	 esi, eax
  000cc	83 c4 08	 add	 esp, 8

; 862  : 
; 863  : 		if ( type == -1 )

  000cf	83 fe ff	 cmp	 esi, -1
  000d2	75 0b		 jne	 SHORT $LN10@DropPCBang@3

; 864  : 		{
; 865  : 			return FALSE;

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	33 c0		 xor	 eax, eax
  000d8	5b		 pop	 ebx

; 917  : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 10 00	 ret	 16			; 00000010H
$LN10@DropPCBang@3:

; 866  : 		}
; 867  : 
; 868  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  000df	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000e6	74 07		 je	 SHORT $LN21@DropPCBang@3

; 869  : 		{
; 870  : 			Option1 =1;

  000e8	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN21@DropPCBang@3:

; 871  : 		}
; 872  : 
; 873  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  000ef	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  000f6	74 21		 je	 SHORT $LN22@DropPCBang@3

; 874  : 		{
; 875  : 			Option2 = 0;

  000f8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 876  : 
; 877  : 			if ( (rand()%2) == 0 )

  000ff	e8 00 00 00 00	 call	 _rand
  00104	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00109	79 05		 jns	 SHORT $LN25@DropPCBang@3
  0010b	48		 dec	 eax
  0010c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0010f	40		 inc	 eax
$LN25@DropPCBang@3:
  00110	75 07		 jne	 SHORT $LN22@DropPCBang@3

; 878  : 			{
; 879  : 				Option2 = 1;

  00112	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN22@DropPCBang@3:

; 880  : 			}
; 881  : 		}
; 882  : 
; 883  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  00119	80 bb 23 02 00
	00 00		 cmp	 BYTE PTR [ebx+547], 0
  00120	74 2b		 je	 SHORT $LN4@DropPCBang@3

; 884  : 		{
; 885  : 			if ( rand()%5 < 1 )

  00122	e8 00 00 00 00	 call	 _rand
  00127	99		 cdq
  00128	b9 05 00 00 00	 mov	 ecx, 5
  0012d	f7 f9		 idiv	 ecx
  0012f	83 fa 01	 cmp	 edx, 1
  00132	7d 09		 jge	 SHORT $LN5@DropPCBang@3

; 886  : 			{
; 887  : 				Option3 = 3;

  00134	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 888  : 			}
; 889  : 			else

  0013b	eb 10		 jmp	 SHORT $LN4@DropPCBang@3
$LN5@DropPCBang@3:

; 890  : 			{
; 891  : 				Option3 = rand()%3;

  0013d	e8 00 00 00 00	 call	 _rand
  00142	99		 cdq
  00143	b9 03 00 00 00	 mov	 ecx, 3
  00148	f7 f9		 idiv	 ecx
  0014a	89 55 fc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropPCBang@3:

; 892  : 			}
; 893  : 		}
; 894  : 
; 895  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  0014d	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  00154	74 1a		 je	 SHORT $LN23@DropPCBang@3

; 896  : 		{
; 897  : 			loc12 = NewOptionRand(0);

  00156	33 db		 xor	 ebx, ebx
  00158	53		 push	 ebx
  00159	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  0015e	0f b6 d0	 movzx	 edx, al
  00161	83 c4 04	 add	 esp, 4
  00164	89 55 f0	 mov	 DWORD PTR _loc12$[ebp], edx

; 898  : 			//Option2 = 0;
; 899  : 			Option1 = 1;

  00167	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
  0016e	eb 02		 jmp	 SHORT $LN3@DropPCBang@3
$LN23@DropPCBang@3:
  00170	33 db		 xor	 ebx, ebx
$LN3@DropPCBang@3:

; 900  : 			//level = 0;
; 901  : 		}
; 902  : 
; 903  : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14))	// Chaos, Bless, Soul

  00172	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  00178	74 10		 je	 SHORT $LN1@DropPCBang@3
  0017a	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  00180	74 08		 je	 SHORT $LN1@DropPCBang@3
  00182	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  00188	75 0c		 jne	 SHORT $LN2@DropPCBang@3
$LN1@DropPCBang@3:

; 904  : 		{
; 905  : 			Option1 = 0;

  0018a	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx

; 906  : 			Option2 = 0;

  0018d	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx

; 907  : 			Option3 = 0;

  00190	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx

; 908  : 			level = 0;

  00193	89 5d 14	 mov	 DWORD PTR _level$[ebp], ebx
$LN2@DropPCBang@3:

; 909  : 		}
; 910  : 
; 911  : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  00196	8b 4d f0	 mov	 ecx, DWORD PTR _loc12$[ebp]
  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  0019e	53		 push	 ebx
  0019f	51		 push	 ecx
  001a0	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001a3	50		 push	 eax
  001a4	52		 push	 edx
  001a5	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001a8	51		 push	 ecx
  001a9	8b 4d 14	 mov	 ecx, DWORD PTR _level$[ebp]
  001ac	52		 push	 edx
  001ad	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  001b0	53		 push	 ebx
  001b1	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  001b4	51		 push	 ecx
  001b5	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001b8	56		 push	 esi
  001b9	52		 push	 edx
  001ba	51		 push	 ecx
  001bb	53		 push	 ebx
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 912  : 		LogAddTD("[PCBangPointSystem] DropBoxOfPurpleChaosItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 913  : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  001c2	8b 55 f0	 mov	 edx, DWORD PTR _loc12$[ebp]
  001c5	8b 45 fc	 mov	 eax, DWORD PTR _Option3$[ebp]
  001c8	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001cb	52		 push	 edx
  001cc	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001cf	50		 push	 eax
  001d0	8b 45 14	 mov	 eax, DWORD PTR _level$[ebp]
  001d3	51		 push	 ecx
  001d4	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  001d7	52		 push	 edx
  001d8	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001db	50		 push	 eax
  001dc	56		 push	 esi
  001dd	6b f6 70	 imul	 esi, 112		; 00000070H
  001e0	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  001e6	56		 push	 esi
  001e7	51		 push	 ecx
  001e8	52		 push	 edx
  001e9	0f b6 c3	 movzx	 eax, bl
  001ec	50		 push	 eax
  001ed	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  001f0	51		 push	 ecx
  001f1	83 c7 6c	 add	 edi, 108		; 0000006cH
  001f4	57		 push	 edi
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0HG@CNGDIFNG@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00200	83 c4 68	 add	 esp, 104		; 00000068H
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi

; 914  : 
; 915  : 	}
; 916  : 	return 1;

  00205	b8 01 00 00 00	 mov	 eax, 1
  0020a	5b		 pop	 ebx

; 917  : }

  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c2 10 00	 ret	 16			; 00000010H
$LN13@DropPCBang@3:

; 840  : 		{
; 841  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00211	0f b6 55 14	 movzx	 edx, BYTE PTR _cY$[ebp]
  00215	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  00219	8b 8e 10 01 00
	00		 mov	 ecx, DWORD PTR [esi+272]
  0021f	52		 push	 edx
  00220	50		 push	 eax
  00221	51		 push	 ecx
  00222	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00229	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  0022f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00235	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 842  : 			LogAddTD("[PCBangPointSystem] DropBoxOfPurpleChaosItem [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  0023a	8b 96 10 01 00
	00		 mov	 edx, DWORD PTR [esi+272]
  00240	52		 push	 edx
  00241	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00244	50		 push	 eax
  00245	83 c7 6c	 add	 edi, 108		; 0000006cH
  00248	57		 push	 edi
  00249	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@JPDMGMKL@?$FLPCBangPointSystem?$FN?5DropBoxOfPur@
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00254	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@DropPCBang@3:

; 914  : 
; 915  : 	}
; 916  : 	return 1;

  00257	5f		 pop	 edi
  00258	5e		 pop	 esi
  00259	b8 01 00 00 00	 mov	 eax, 1
  0025e	5b		 pop	 ebx

; 917  : }

  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c2 10 00	 ret	 16			; 00000010H
?DropPCBangPurpleChaosBoxReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropPCBangPurpleChaosBoxReward
_TEXT	ENDS
PUBLIC	??_C@_0EC@JAKDNDHP@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@ ; `string'
PUBLIC	??_C@_0HJ@HEHGEPGH@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@ ; `string'
PUBLIC	?DropIllusionTempleEventReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropIllusionTempleEventReward
;	COMDAT ??_C@_0EC@JAKDNDHP@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0EC@JAKDNDHP@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@ DB '[ ILLUS'
	DB	'IONTempleEvent ] ILLUSIONTempleEventDrop [%s][%s] [%d Zen]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HJ@HEHGEPGH@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@
CONST	SEGMENT
??_C@_0HJ@HEHGEPGH@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@ DB '[ ILLUS'
	DB	'IONTempleEvent ] ILLUSIONTempleEventDrop [%s][%s] : (%d)(%d/%'
	DB	'd) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropIllusionTempleEventReward@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_loc12$ = -16						; size = 4
_Option1$ = -12						; size = 4
_Option2$ = -8						; size = 4
_Option3$ = -4						; size = 4
_x$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_y$ = 16						; size = 4
_cX$ = 16						; size = 1
_level$ = 20						; size = 4
_cY$ = 20						; size = 1
?DropIllusionTempleEventReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropIllusionTempleEventReward, COMDAT
; _this$ = ecx

; 920  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 921  : 	if ( this->m_bLoad == FALSE )

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0000f	75 0a		 jne	 SHORT $LN16@DropIllusi

; 922  : 		return FALSE;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 1021 : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN16@DropIllusi:
  0001b	57		 push	 edi

; 923  : 
; 924  : 	float dur = 0;
; 925  : 	int type = 0;
; 926  : 	int level = 0;
; 927  : 	int x = 0;
; 928  : 	int y = 0;
; 929  : 	int Option1 = 0;
; 930  : 	int Option2 = 0;
; 931  : 	int Option3 = 0;
; 932  : 	int DropItemNum = 0;
; 933  : 	int ExOption = 0;
; 934  : 	int loc12 = 0;
; 935  : 	LPOBJ lpObj = &gObj[aIndex];

  0001c	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0001f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00025	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx
  0002e	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx
  00031	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx
  00034	89 5d f0	 mov	 DWORD PTR _loc12$[ebp], ebx

; 936  : 	int loc14;
; 937  : 	int loc15;
; 938  : 	int loc16;
; 939  : 
; 940  : 	if ( this->GetBagCount() > 0 )

  00037	39 9e 20 01 00
	00		 cmp	 DWORD PTR [esi+288], ebx
  0003d	0f 8e 1c 02 00
	00		 jle	 $LN15@DropIllusi

; 941  : 	{
; 942  : 		loc14 = rand()%10000;

  00043	e8 00 00 00 00	 call	 _rand
  00048	99		 cdq
  00049	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0004e	f7 f9		 idiv	 ecx

; 943  : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1])

  00050	8b 86 04 08 00
	00		 mov	 eax, DWORD PTR [esi+2052]
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 84 bb 01 00
	00		 je	 $LN13@DropIllusi
  0005e	2b 8c 86 60 07
	00 00		 sub	 ecx, DWORD PTR [esi+eax*4+1888]
  00065	3b d1		 cmp	 edx, ecx
  00067	0f 8c ac 01 00
	00		 jl	 $LN13@DropIllusi

; 947  : 			return 1;
; 948  : 		}
; 949  : 			
; 950  : 		loc15 = this->m_iRateKindCount;
; 951  : 		loc16 = this->SortItem(loc14);

  0006d	52		 push	 edx
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem

; 952  : 
; 953  : 		if ( cX == 0 && cY == 0 )

  00075	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00078	8b d8		 mov	 ebx, eax
  0007a	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  0007d	84 c0		 test	 al, al
  0007f	75 14		 jne	 SHORT $LN12@DropIllusi
  00081	84 c9		 test	 cl, cl
  00083	75 10		 jne	 SHORT $LN12@DropIllusi

; 954  : 		{
; 955  : 			x = lpObj->X;

  00085	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 956  : 			y = lpObj->Y;

  0008c	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]

; 957  : 		}
; 958  : 		else

  00093	eb 06		 jmp	 SHORT $LN26@DropIllusi
$LN12@DropIllusi:

; 959  : 		{
; 960  : 			x = cX;

  00095	0f b6 d0	 movzx	 edx, al

; 961  : 			y = cY;

  00098	0f b6 c1	 movzx	 eax, cl
$LN26@DropIllusi:

; 962  : 		}
; 963  : 
; 964  : 		level = this->GetLevel(loc16);

  0009b	53		 push	 ebx
  0009c	8b ce		 mov	 ecx, esi
  0009e	89 45 10	 mov	 DWORD PTR _y$[ebp], eax
  000a1	89 55 08	 mov	 DWORD PTR _x$[ebp], edx
  000a4	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000a9	0f b6 c8	 movzx	 ecx, al

; 965  : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  000ac	8d 14 de	 lea	 edx, DWORD PTR [esi+ebx*8]
  000af	0f b6 84 13 1e
	02 00 00	 movzx	 eax, BYTE PTR [ebx+edx+542]
  000b7	03 da		 add	 ebx, edx
  000b9	89 4d 14	 mov	 DWORD PTR _level$[ebp], ecx
  000bc	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000ca	8b f0		 mov	 esi, eax
  000cc	83 c4 08	 add	 esp, 8

; 966  : 
; 967  : 		if ( type == -1 )

  000cf	83 fe ff	 cmp	 esi, -1
  000d2	75 0b		 jne	 SHORT $LN10@DropIllusi

; 968  : 		{
; 969  : 			return FALSE;

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	33 c0		 xor	 eax, eax
  000d8	5b		 pop	 ebx

; 1021 : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 10 00	 ret	 16			; 00000010H
$LN10@DropIllusi:

; 970  : 		}
; 971  : 
; 972  : 		if ( this->BagObject[loc16].m_isskill != 0 )

  000df	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000e6	74 07		 je	 SHORT $LN21@DropIllusi

; 973  : 		{
; 974  : 			Option1 =1;

  000e8	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN21@DropIllusi:

; 975  : 		}
; 976  : 
; 977  : 		if ( this->BagObject[loc16].m_isluck != 0 )

  000ef	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  000f6	74 21		 je	 SHORT $LN22@DropIllusi

; 978  : 		{
; 979  : 			Option2 = 0;

  000f8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 980  : 
; 981  : 			if ( (rand()%2) == 0 )

  000ff	e8 00 00 00 00	 call	 _rand
  00104	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00109	79 05		 jns	 SHORT $LN25@DropIllusi
  0010b	48		 dec	 eax
  0010c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0010f	40		 inc	 eax
$LN25@DropIllusi:
  00110	75 07		 jne	 SHORT $LN22@DropIllusi

; 982  : 			{
; 983  : 				Option2 = 1;

  00112	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN22@DropIllusi:

; 984  : 			}
; 985  : 		}
; 986  : 
; 987  : 		if ( this->BagObject[loc16].m_isoption != 0 )

  00119	80 bb 23 02 00
	00 00		 cmp	 BYTE PTR [ebx+547], 0
  00120	74 2b		 je	 SHORT $LN4@DropIllusi

; 988  : 		{
; 989  : 			if ( rand()%5 < 1 )

  00122	e8 00 00 00 00	 call	 _rand
  00127	99		 cdq
  00128	b9 05 00 00 00	 mov	 ecx, 5
  0012d	f7 f9		 idiv	 ecx
  0012f	83 fa 01	 cmp	 edx, 1
  00132	7d 09		 jge	 SHORT $LN5@DropIllusi

; 990  : 			{
; 991  : 				Option3 = 3;

  00134	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 992  : 			}
; 993  : 			else

  0013b	eb 10		 jmp	 SHORT $LN4@DropIllusi
$LN5@DropIllusi:

; 994  : 			{
; 995  : 				Option3 = rand()%3;

  0013d	e8 00 00 00 00	 call	 _rand
  00142	99		 cdq
  00143	b9 03 00 00 00	 mov	 ecx, 3
  00148	f7 f9		 idiv	 ecx
  0014a	89 55 fc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN4@DropIllusi:

; 996  : 			}
; 997  : 		}
; 998  : 
; 999  : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  0014d	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  00154	74 1a		 je	 SHORT $LN23@DropIllusi

; 1000 : 		{
; 1001 : 			loc12 = NewOptionRand(0);

  00156	33 db		 xor	 ebx, ebx
  00158	53		 push	 ebx
  00159	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  0015e	0f b6 d0	 movzx	 edx, al
  00161	83 c4 04	 add	 esp, 4
  00164	89 55 f0	 mov	 DWORD PTR _loc12$[ebp], edx

; 1002 : 			//Option2 = 0;
; 1003 : 			Option1 = 1;

  00167	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
  0016e	eb 02		 jmp	 SHORT $LN3@DropIllusi
$LN23@DropIllusi:
  00170	33 db		 xor	 ebx, ebx
$LN3@DropIllusi:

; 1004 : 			//level = 0;
; 1005 : 		}
; 1006 : 
; 1007 : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14) || type == ITEMGET(14,22) )	// Chaos, Bless, Soul, Creation

  00172	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  00178	74 18		 je	 SHORT $LN1@DropIllusi
  0017a	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  00180	74 10		 je	 SHORT $LN1@DropIllusi
  00182	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  00188	74 08		 je	 SHORT $LN1@DropIllusi
  0018a	81 fe 16 1c 00
	00		 cmp	 esi, 7190		; 00001c16H
  00190	75 0c		 jne	 SHORT $LN2@DropIllusi
$LN1@DropIllusi:

; 1008 : 		{
; 1009 : 			Option1 = 0;

  00192	89 5d f4	 mov	 DWORD PTR _Option1$[ebp], ebx

; 1010 : 			Option2 = 0;

  00195	89 5d f8	 mov	 DWORD PTR _Option2$[ebp], ebx

; 1011 : 			Option3 = 0;

  00198	89 5d fc	 mov	 DWORD PTR _Option3$[ebp], ebx

; 1012 : 			level = 0;

  0019b	89 5d 14	 mov	 DWORD PTR _level$[ebp], ebx
$LN2@DropIllusi:

; 1013 : 		}
; 1014 : 
; 1015 : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  0019e	8b 4d f0	 mov	 ecx, DWORD PTR _loc12$[ebp]
  001a1	8b 07		 mov	 eax, DWORD PTR [edi]
  001a3	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  001a6	53		 push	 ebx
  001a7	51		 push	 ecx
  001a8	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001ab	50		 push	 eax
  001ac	52		 push	 edx
  001ad	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001b0	51		 push	 ecx
  001b1	8b 4d 14	 mov	 ecx, DWORD PTR _level$[ebp]
  001b4	52		 push	 edx
  001b5	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  001b8	53		 push	 ebx
  001b9	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  001bc	51		 push	 ecx
  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001c0	56		 push	 esi
  001c1	52		 push	 edx
  001c2	51		 push	 ecx
  001c3	53		 push	 ebx
  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1016 : 		LogAddTD("[ ILLUSIONTempleEvent ] ILLUSIONTempleEventDrop [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1017 : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  001ca	8b 55 f0	 mov	 edx, DWORD PTR _loc12$[ebp]
  001cd	8b 45 fc	 mov	 eax, DWORD PTR _Option3$[ebp]
  001d0	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  001d3	52		 push	 edx
  001d4	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001d7	50		 push	 eax
  001d8	8b 45 14	 mov	 eax, DWORD PTR _level$[ebp]
  001db	51		 push	 ecx
  001dc	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  001df	52		 push	 edx
  001e0	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001e3	50		 push	 eax
  001e4	56		 push	 esi
  001e5	6b f6 70	 imul	 esi, 112		; 00000070H
  001e8	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  001ee	56		 push	 esi
  001ef	51		 push	 ecx
  001f0	52		 push	 edx
  001f1	0f b6 c3	 movzx	 eax, bl
  001f4	50		 push	 eax
  001f5	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  001f8	51		 push	 ecx
  001f9	83 c7 6c	 add	 edi, 108		; 0000006cH
  001fc	57		 push	 edi
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_0HJ@HEHGEPGH@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00208	83 c4 68	 add	 esp, 104		; 00000068H
  0020b	5f		 pop	 edi
  0020c	5e		 pop	 esi

; 1018 : 
; 1019 : 	}
; 1020 : 	return 1;

  0020d	b8 01 00 00 00	 mov	 eax, 1
  00212	5b		 pop	 ebx

; 1021 : }

  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c2 10 00	 ret	 16			; 00000010H
$LN13@DropIllusi:

; 944  : 		{
; 945  : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00219	0f b6 55 14	 movzx	 edx, BYTE PTR _cY$[ebp]
  0021d	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  00221	8b 8e 10 01 00
	00		 mov	 ecx, DWORD PTR [esi+272]
  00227	52		 push	 edx
  00228	50		 push	 eax
  00229	51		 push	 ecx
  0022a	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00231	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  00237	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0023d	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 946  : 			LogAddTD("[ ILLUSIONTempleEvent ] ILLUSIONTempleEventDrop [%s][%s] [%d Zen]", lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  00242	8b 96 10 01 00
	00		 mov	 edx, DWORD PTR [esi+272]
  00248	52		 push	 edx
  00249	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  0024c	50		 push	 eax
  0024d	83 c7 6c	 add	 edi, 108		; 0000006cH
  00250	57		 push	 edi
  00251	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@JAKDNDHP@?$FL?5ILLUSIONTempleEvent?5?$FN?5ILLUSION@
  00256	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0025c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@DropIllusi:

; 1018 : 
; 1019 : 	}
; 1020 : 	return 1;

  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi
  00261	b8 01 00 00 00	 mov	 eax, 1
  00266	5b		 pop	 ebx

; 1021 : }

  00267	8b e5		 mov	 esp, ebp
  00269	5d		 pop	 ebp
  0026a	c2 10 00	 ret	 16			; 00000010H
?DropIllusionTempleEventReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropIllusionTempleEventReward
_TEXT	ENDS
PUBLIC	??_C@_0HF@NBBLCEHI@?$FL?$CFs?$FN?5Drop?5Set?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CF@ ; `string'
PUBLIC	?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z	; CProbabilityItemBag::DropSetItem
EXTRN	?GetSetOptionName@CSetItemOption@@QAEPADHH@Z:PROC ; CSetItemOption::GetSetOptionName
EXTRN	?GenSetOption@CSetItemOption@@QAEHH@Z:PROC	; CSetItemOption::GenSetOption
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
;	COMDAT ??_C@_0HF@NBBLCEHI@?$FL?$CFs?$FN?5Drop?5Set?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CF@
CONST	SEGMENT
??_C@_0HF@NBBLCEHI@?$FL?$CFs?$FN?5Drop?5Set?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CF@ DB '['
	DB	'%s] Drop Set Item [%s][%s] : (%d)(%d/%d) Itemnum:[%d] skill:['
	DB	'%d] luck:[%d] option:[%d] SetOption:[%d], SetName:[%s]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_Option2$ = -8						; size = 4
_option3rand$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_Option3$ = 12						; size = 4
_itemnum$ = 12						; size = 4
_btMapNumber$ = 16					; size = 1
_cX$ = 20						; size = 4
_cY$ = 24						; size = 4
?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z PROC	; CProbabilityItemBag::DropSetItem, COMDAT
; _this$ = ecx

; 1151 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1152 : 	int SetOption = gSetItemOption.GenSetOption(itemnum);

  00009	8b 7d 0c	 mov	 edi, DWORD PTR _itemnum$[ebp]
  0000c	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	57		 push	 edi
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00015	e8 00 00 00 00	 call	 ?GenSetOption@CSetItemOption@@QAEHH@Z ; CSetItemOption::GenSetOption
  0001a	8b d8		 mov	 ebx, eax

; 1153 : 
; 1154 : 	int option1rand;
; 1155 : 	int option2rand;
; 1156 : 	int option3rand;
; 1157 : 	int optionc;
; 1158 : 	int Option1 = 0;
; 1159 : 	int Option2 = 0;

  0001c	33 c0		 xor	 eax, eax
  0001e	89 45 f8	 mov	 DWORD PTR _Option2$[ebp], eax

; 1160 : 	int Option3 = 0;

  00021	89 45 0c	 mov	 DWORD PTR _Option3$[ebp], eax

; 1161 : 
; 1162 : 	option1rand = 6;
; 1163 : 	option2rand = 4;
; 1164 : 
; 1165 : 	option3rand = rand()%100;

  00024	e8 00 00 00 00	 call	 _rand
  00029	99		 cdq
  0002a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0002f	f7 f9		 idiv	 ecx
  00031	89 55 fc	 mov	 DWORD PTR _option3rand$[ebp], edx

; 1166 : 	optionc = rand()%3;

  00034	e8 00 00 00 00	 call	 _rand
  00039	99		 cdq
  0003a	b9 03 00 00 00	 mov	 ecx, 3
  0003f	f7 f9		 idiv	 ecx
  00041	8b f2		 mov	 esi, edx

; 1167 : 
; 1168 : 	if(rand()%100 < option2rand)

  00043	e8 00 00 00 00	 call	 _rand
  00048	99		 cdq
  00049	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0004e	f7 f9		 idiv	 ecx
  00050	83 fa 04	 cmp	 edx, 4
  00053	7d 07		 jge	 SHORT $LN16@DropSetIte

; 1169 : 	{
; 1170 : 		Option2 = 1;

  00055	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN16@DropSetIte:

; 1171 : 	}
; 1172 : 
; 1173 : 	switch(optionc)

  0005c	83 ee 00	 sub	 esi, 0
  0005f	74 24		 je	 SHORT $LN10@DropSetIte
  00061	4e		 dec	 esi
  00062	74 12		 je	 SHORT $LN8@DropSetIte
  00064	4e		 dec	 esi
  00065	75 2b		 jne	 SHORT $LN17@DropSetIte

; 1187 : 	case 2: 
; 1188 : 		if(option3rand < 12)

  00067	83 7d fc 0c	 cmp	 DWORD PTR _option3rand$[ebp], 12 ; 0000000cH
  0006b	7d 25		 jge	 SHORT $LN17@DropSetIte

; 1189 : 		{
; 1190 : 			Option3 = 1;

  0006d	c7 45 0c 01 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 1

; 1191 : 		}
; 1192 : 		break;

  00074	eb 1c		 jmp	 SHORT $LN17@DropSetIte
$LN8@DropSetIte:

; 1179 : 		}
; 1180 : 		break;
; 1181 : 	case 1:
; 1182 : 		if(option3rand < 8)

  00076	83 7d fc 08	 cmp	 DWORD PTR _option3rand$[ebp], 8
  0007a	7d 16		 jge	 SHORT $LN17@DropSetIte

; 1183 : 		{
; 1184 : 			Option3 = 2;

  0007c	c7 45 0c 02 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 2

; 1185 : 		}
; 1186 : 		break;

  00083	eb 0d		 jmp	 SHORT $LN17@DropSetIte
$LN10@DropSetIte:

; 1174 : 	{
; 1175 : 	case 0: 
; 1176 : 		if(option3rand < 4)

  00085	83 7d fc 04	 cmp	 DWORD PTR _option3rand$[ebp], 4
  00089	7d 07		 jge	 SHORT $LN17@DropSetIte

; 1177 : 		{
; 1178 : 			Option3 = 3;

  0008b	c7 45 0c 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3
$LN17@DropSetIte:

; 1193 : 	default: break;
; 1194 : 	}
; 1195 : 
; 1196 : 	Option1 = 1;
; 1197 : 
; 1198 : 	ItemSerialCreateSend(aIndex,btMapNumber,(BYTE)cX,(BYTE)cY,itemnum,0,0,(BYTE)Option1,(BYTE)Option2,(BYTE)Option3,aIndex,0,(BYTE)SetOption);

  00092	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00095	8b 55 0c	 mov	 edx, DWORD PTR _Option3$[ebp]
  00098	8b 45 f8	 mov	 eax, DWORD PTR _Option2$[ebp]
  0009b	8b 4d 18	 mov	 ecx, DWORD PTR _cY$[ebp]
  0009e	53		 push	 ebx
  0009f	6a 00		 push	 0
  000a1	56		 push	 esi
  000a2	52		 push	 edx
  000a3	8b 55 14	 mov	 edx, DWORD PTR _cX$[ebp]
  000a6	50		 push	 eax
  000a7	8b 45 10	 mov	 eax, DWORD PTR _btMapNumber$[ebp]
  000aa	6a 01		 push	 1
  000ac	6a 00		 push	 0
  000ae	6a 00		 push	 0
  000b0	57		 push	 edi
  000b1	51		 push	 ecx
  000b2	52		 push	 edx
  000b3	50		 push	 eax
  000b4	56		 push	 esi
  000b5	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  000ba	83 c4 34	 add	 esp, 52			; 00000034H

; 1199 : 
; 1200 : 	int loc10 = 0;

  000bd	33 c0		 xor	 eax, eax

; 1201 : 
; 1202 : 	if((SetOption&0x01) != 0)

  000bf	f6 c3 01	 test	 bl, 1
  000c2	74 07		 je	 SHORT $LN3@DropSetIte

; 1203 : 	{
; 1204 : 		loc10 = 1;

  000c4	b8 01 00 00 00	 mov	 eax, 1
  000c9	eb 0a		 jmp	 SHORT $LN1@DropSetIte
$LN3@DropSetIte:

; 1205 : 	}
; 1206 : 	else if((SetOption&0x02) != 0)

  000cb	f6 c3 02	 test	 bl, 2
  000ce	74 05		 je	 SHORT $LN1@DropSetIte

; 1207 : 	{
; 1208 : 		loc10 = 2;

  000d0	b8 02 00 00 00	 mov	 eax, 2
$LN1@DropSetIte:

; 1209 : 	}
; 1210 : 
; 1211 : 	LogAddTD("[%s] Drop Set Item [%s][%s] : (%d)(%d/%d) Itemnum:[%d] skill:[%d] luck:[%d] option:[%d] SetOption:[%d], SetName:[%s]",this->GetEventName(), gObj[aIndex].AccountID,gObj[aIndex].Name,
; 1212 : 		btMapNumber, cX, cY, itemnum,Option1,Option2,Option3,SetOption, gSetItemOption.GetSetOptionName(itemnum, loc10));

  000d5	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000db	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e1	50		 push	 eax
  000e2	57		 push	 edi
  000e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  000e8	e8 00 00 00 00	 call	 ?GetSetOptionName@CSetItemOption@@QAEPADHH@Z ; CSetItemOption::GetSetOptionName
  000ed	8b 55 0c	 mov	 edx, DWORD PTR _Option3$[ebp]
  000f0	8b 4d 18	 mov	 ecx, DWORD PTR _cY$[ebp]
  000f3	50		 push	 eax
  000f4	8b 45 f8	 mov	 eax, DWORD PTR _Option2$[ebp]
  000f7	53		 push	 ebx
  000f8	52		 push	 edx
  000f9	8b 55 14	 mov	 edx, DWORD PTR _cX$[ebp]
  000fc	50		 push	 eax
  000fd	0f b6 45 10	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  00101	6a 01		 push	 1
  00103	57		 push	 edi
  00104	51		 push	 ecx
  00105	52		 push	 edx
  00106	50		 push	 eax
  00107	8d 4e 77	 lea	 ecx, DWORD PTR [esi+119]
  0010a	51		 push	 ecx
  0010b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	83 c6 6c	 add	 esi, 108		; 0000006cH
  00111	56		 push	 esi
  00112	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  00117	50		 push	 eax
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@NBBLCEHI@?$FL?$CFs?$FN?5Drop?5Set?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CF@
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00123	83 c4 34	 add	 esp, 52			; 00000034H
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx

; 1213 : }

  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 14 00	 ret	 20			; 00000014H
?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z ENDP	; CProbabilityItemBag::DropSetItem
_TEXT	ENDS
PUBLIC	??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@ ; `string'
PUBLIC	??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@ ; `string'
PUBLIC	?DropItem@CProbabilityItemBag@@QAEHHEEEPAH@Z	; CProbabilityItemBag::DropItem
;	COMDAT ??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@ DB '['
	DB	'%s] Drop Zen [%s][%s] [%d Zen]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@
CONST	SEGMENT
??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@ DB '['
	DB	'%s] Drop Item [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1'
	DB	':%d op2:%d op3:%d ExOp:%d', 00H		; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropItem@CProbabilityItemBag@@QAEHHEEEPAH@Z
_TEXT	SEGMENT
_loc16$ = -24						; size = 4
_level$ = -20						; size = 4
_loc12$ = -16						; size = 4
_Option1$ = -12						; size = 4
_Option2$ = -8						; size = 4
_Option3$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_x$ = 16						; size = 4
_cX$ = 16						; size = 1
_y$ = 20						; size = 4
_cY$ = 20						; size = 1
tv357 = 24						; size = 4
_iDropZen$ = 24						; size = 4
?DropItem@CProbabilityItemBag@@QAEHHEEEPAH@Z PROC	; CProbabilityItemBag::DropItem, COMDAT
; _this$ = ecx

; 1216 : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx

; 1217 : 	if ( this->m_bLoad == FALSE )

  0000a	33 f6		 xor	 esi, esi
  0000c	39 73 04	 cmp	 DWORD PTR [ebx+4], esi
  0000f	75 0a		 jne	 SHORT $LN19@DropItem

; 1218 : 		return FALSE;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 1333 : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 14 00	 ret	 20			; 00000014H
$LN19@DropItem:
  0001b	57		 push	 edi

; 1219 : 
; 1220 : 	float dur = 0;
; 1221 : 	int type = 0;
; 1222 : 	int level = 0;
; 1223 : 	int x = 0;
; 1224 : 	int y = 0;
; 1225 : 	int Option1 = 0;
; 1226 : 	int Option2 = 0;
; 1227 : 	int Option3 = 0;
; 1228 : 	int DropItemNum = 0;
; 1229 : 	int ExOption = 0;
; 1230 : 	int loc12 = 0;
; 1231 : 	LPOBJ lpObj = &gObj[aIndex];

  0001c	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0001f	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00025	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	89 75 f4	 mov	 DWORD PTR _Option1$[ebp], esi
  0002e	89 75 f8	 mov	 DWORD PTR _Option2$[ebp], esi
  00031	89 75 fc	 mov	 DWORD PTR _Option3$[ebp], esi
  00034	89 75 f0	 mov	 DWORD PTR _loc12$[ebp], esi

; 1232 : 	int loc14;
; 1233 : 	int loc15;
; 1234 : 	int loc16;
; 1235 : 
; 1236 : 	if ( this->GetBagCount() > 0 )

  00037	39 b3 20 01 00
	00		 cmp	 DWORD PTR [ebx+288], esi
  0003d	0f 8e 92 02 00
	00		 jle	 $LN18@DropItem

; 1237 : 	{
; 1238 : 		loc14 = rand()%10000;

  00043	e8 00 00 00 00	 call	 _rand
  00048	99		 cdq
  00049	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0004e	f7 f9		 idiv	 ecx

; 1239 : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1])

  00050	8b 83 04 08 00
	00		 mov	 eax, DWORD PTR [ebx+2052]
  00056	3b c6		 cmp	 eax, esi
  00058	0f 84 0d 02 00
	00		 je	 $LN16@DropItem
  0005e	2b 8c 83 60 07
	00 00		 sub	 ecx, DWORD PTR [ebx+eax*4+1888]
  00065	3b d1		 cmp	 edx, ecx
  00067	0f 8c fe 01 00
	00		 jl	 $LN16@DropItem

; 1249 : 			return 1;
; 1250 : 		}
; 1251 : 			
; 1252 : 		loc15 = this->m_iRateKindCount;
; 1253 : 		loc16 = this->SortItem(loc14);

  0006d	52		 push	 edx
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem

; 1254 : 
; 1255 : 		if ( cX == 0 && cY == 0 )

  00075	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00078	8b f0		 mov	 esi, eax
  0007a	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  0007d	89 75 e8	 mov	 DWORD PTR _loc16$[ebp], esi
  00080	84 c0		 test	 al, al
  00082	75 14		 jne	 SHORT $LN14@DropItem
  00084	84 c9		 test	 cl, cl
  00086	75 10		 jne	 SHORT $LN14@DropItem

; 1256 : 		{
; 1257 : 			x = lpObj->X;

  00088	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 1258 : 			y = lpObj->Y;

  0008f	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]

; 1259 : 		}
; 1260 : 		else

  00096	eb 06		 jmp	 SHORT $LN32@DropItem
$LN14@DropItem:

; 1261 : 		{
; 1262 : 			x = cX;

  00098	0f b6 d0	 movzx	 edx, al

; 1263 : 			y = cY;

  0009b	0f b6 c1	 movzx	 eax, cl
$LN32@DropItem:

; 1264 : 		}
; 1265 : 
; 1266 : 		if(btMapNumber == 0xFF)

  0009e	80 7d 0c ff	 cmp	 BYTE PTR _btMapNumber$[ebp], 255 ; 000000ffH
  000a2	89 45 14	 mov	 DWORD PTR _y$[ebp], eax
  000a5	89 55 10	 mov	 DWORD PTR _x$[ebp], edx
  000a8	75 08		 jne	 SHORT $LN12@DropItem

; 1267 : 		{
; 1268 : 			x = 0;

  000aa	33 c0		 xor	 eax, eax
  000ac	89 45 10	 mov	 DWORD PTR _x$[ebp], eax

; 1269 : 			y = 0;

  000af	89 45 14	 mov	 DWORD PTR _y$[ebp], eax
$LN12@DropItem:

; 1270 : 		}
; 1271 : 
; 1272 : 		level = this->GetLevel(loc16);

  000b2	56		 push	 esi
  000b3	8b cb		 mov	 ecx, ebx
  000b5	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000ba	0f b6 c8	 movzx	 ecx, al

; 1273 : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  000bd	8d 14 f3	 lea	 edx, DWORD PTR [ebx+esi*8]
  000c0	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000c3	0f b6 90 1d 02
	00 00		 movzx	 edx, BYTE PTR [eax+541]
  000ca	89 4d ec	 mov	 DWORD PTR _level$[ebp], ecx
  000cd	0f b6 88 1e 02
	00 00		 movzx	 ecx, BYTE PTR [eax+542]
  000d4	51		 push	 ecx
  000d5	52		 push	 edx
  000d6	89 45 18	 mov	 DWORD PTR tv357[ebp], eax
  000d9	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000de	8b f0		 mov	 esi, eax
  000e0	83 c4 08	 add	 esp, 8

; 1274 : 
; 1275 : 		if ( type == -1 )

  000e3	83 fe ff	 cmp	 esi, -1

; 1276 : 		{
; 1277 : 			return FALSE;

  000e6	0f 84 90 01 00
	00		 je	 $LN33@DropItem

; 1278 : 		}
; 1279 : 
; 1280 : 		if ( this->BagObject[loc16].m_issetitem == 1 ) //season3 add-on

  000ec	8b 45 e8	 mov	 eax, DWORD PTR _loc16$[ebp]
  000ef	8d 8c c3 e8 01
	00 00		 lea	 ecx, DWORD PTR [ebx+eax*8+488]
  000f6	80 7c 08 3d 01	 cmp	 BYTE PTR [eax+ecx+61], 1
  000fb	75 26		 jne	 SHORT $LN10@DropItem

; 1281 : 		{
; 1282 : 			this->DropSetItem(aIndex, type, btMapNumber, x , y);

  000fd	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp]
  00100	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00103	8b 4d 0c	 mov	 ecx, DWORD PTR _btMapNumber$[ebp]
  00106	52		 push	 edx
  00107	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0010a	50		 push	 eax
  0010b	51		 push	 ecx
  0010c	56		 push	 esi
  0010d	52		 push	 edx
  0010e	8b cb		 mov	 ecx, ebx
  00110	e8 00 00 00 00	 call	 ?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z ; CProbabilityItemBag::DropSetItem
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi

; 1331 : 	}
; 1332 : 	return 1;

  00117	b8 01 00 00 00	 mov	 eax, 1
  0011c	5b		 pop	 ebx

; 1333 : }

  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c2 14 00	 ret	 20			; 00000014H
$LN10@DropItem:

; 1283 : 			return TRUE;
; 1284 : 		}
; 1285 : 
; 1286 : 		if ( this->BagObject[loc16].m_isskill != 0 )

  00123	8b 45 18	 mov	 eax, DWORD PTR tv357[ebp]
  00126	80 b8 21 02 00
	00 00		 cmp	 BYTE PTR [eax+545], 0
  0012d	74 07		 je	 SHORT $LN24@DropItem

; 1287 : 		{
; 1288 : 			Option1 =1;

  0012f	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN24@DropItem:

; 1289 : 		}
; 1290 : 
; 1291 : 		if ( this->BagObject[loc16].m_isluck != 0 )

  00136	80 b8 22 02 00
	00 00		 cmp	 BYTE PTR [eax+546], 0
  0013d	74 21		 je	 SHORT $LN25@DropItem

; 1292 : 		{
; 1293 : 			Option2 = 0;

  0013f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1294 : 
; 1295 : 			if ( (rand()%2) == 0 )

  00146	e8 00 00 00 00	 call	 _rand
  0014b	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00150	79 05		 jns	 SHORT $LN31@DropItem
  00152	48		 dec	 eax
  00153	83 c8 fe	 or	 eax, -2			; fffffffeH
  00156	40		 inc	 eax
$LN31@DropItem:
  00157	75 07		 jne	 SHORT $LN25@DropItem

; 1296 : 			{
; 1297 : 				Option2 = 1;

  00159	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN25@DropItem:

; 1298 : 			}
; 1299 : 		}
; 1300 : 
; 1301 : 		if ( this->BagObject[loc16].m_isoption != 0 )

  00160	8b 45 18	 mov	 eax, DWORD PTR tv357[ebp]
  00163	80 b8 23 02 00
	00 00		 cmp	 BYTE PTR [eax+547], 0
  0016a	74 2b		 je	 SHORT $LN27@DropItem

; 1302 : 		{
; 1303 : 			if ( rand()%5 < 1 )

  0016c	e8 00 00 00 00	 call	 _rand
  00171	99		 cdq
  00172	b9 05 00 00 00	 mov	 ecx, 5
  00177	f7 f9		 idiv	 ecx
  00179	83 fa 01	 cmp	 edx, 1
  0017c	7d 09		 jge	 SHORT $LN5@DropItem

; 1304 : 			{
; 1305 : 				Option3 = 3;

  0017e	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 1306 : 			}
; 1307 : 			else

  00185	eb 10		 jmp	 SHORT $LN27@DropItem
$LN5@DropItem:

; 1308 : 			{
; 1309 : 				Option3 = rand()%3;

  00187	e8 00 00 00 00	 call	 _rand
  0018c	99		 cdq
  0018d	b9 03 00 00 00	 mov	 ecx, 3
  00192	f7 f9		 idiv	 ecx
  00194	89 55 fc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN27@DropItem:

; 1310 : 			}
; 1311 : 		}
; 1312 : 
; 1313 : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  00197	8b 55 18	 mov	 edx, DWORD PTR tv357[ebp]
  0019a	80 ba 24 02 00
	00 00		 cmp	 BYTE PTR [edx+548], 0
  001a1	74 17		 je	 SHORT $LN28@DropItem

; 1314 : 		{
; 1315 : 			loc12 = NewOptionRand(0);

  001a3	6a 00		 push	 0
  001a5	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  001aa	0f b6 c0	 movzx	 eax, al
  001ad	83 c4 04	 add	 esp, 4
  001b0	89 45 f0	 mov	 DWORD PTR _loc12$[ebp], eax

; 1316 : 			//Option2 = 0;
; 1317 : 			Option1 = 1;

  001b3	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN28@DropItem:

; 1318 : 			//level = 0;
; 1319 : 		}
; 1320 : 
; 1321 : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14) )	// Chaos, Bless, Soul

  001ba	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  001c0	74 10		 je	 SHORT $LN1@DropItem
  001c2	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  001c8	74 08		 je	 SHORT $LN1@DropItem
  001ca	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  001d0	75 10		 jne	 SHORT $LN29@DropItem
$LN1@DropItem:

; 1322 : 		{
; 1323 : 			Option1 = 0;

  001d2	33 c9		 xor	 ecx, ecx
  001d4	89 4d f4	 mov	 DWORD PTR _Option1$[ebp], ecx

; 1324 : 			Option2 = 0;

  001d7	89 4d f8	 mov	 DWORD PTR _Option2$[ebp], ecx

; 1325 : 			Option3 = 0;

  001da	89 4d fc	 mov	 DWORD PTR _Option3$[ebp], ecx

; 1326 : 			level = 0;

  001dd	89 4d ec	 mov	 DWORD PTR _level$[ebp], ecx
  001e0	eb 02		 jmp	 SHORT $LN2@DropItem
$LN29@DropItem:
  001e2	33 c9		 xor	 ecx, ecx
$LN2@DropItem:

; 1327 : 		}
; 1328 : 
; 1329 : 		ItemSerialCreateSend(lpObj->m_Index, btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  001e4	8b 55 f0	 mov	 edx, DWORD PTR _loc12$[ebp]
  001e7	8b 07		 mov	 eax, DWORD PTR [edi]
  001e9	51		 push	 ecx
  001ea	52		 push	 edx
  001eb	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  001ee	50		 push	 eax
  001ef	52		 push	 edx
  001f0	8b 55 f8	 mov	 edx, DWORD PTR _Option2$[ebp]
  001f3	52		 push	 edx
  001f4	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  001f7	52		 push	 edx
  001f8	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp]
  001fb	51		 push	 ecx
  001fc	8b 4d ec	 mov	 ecx, DWORD PTR _level$[ebp]
  001ff	51		 push	 ecx
  00200	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00203	56		 push	 esi
  00204	52		 push	 edx
  00205	8b 55 0c	 mov	 edx, DWORD PTR _btMapNumber$[ebp]
  00208	51		 push	 ecx
  00209	52		 push	 edx
  0020a	50		 push	 eax
  0020b	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1330 : 		LogAddTD("[%s] Drop Item [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",	this->GetEventName(), lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  00210	8b 45 f0	 mov	 eax, DWORD PTR _loc12$[ebp]
  00213	8b 4d fc	 mov	 ecx, DWORD PTR _Option3$[ebp]
  00216	8b 55 f8	 mov	 edx, DWORD PTR _Option2$[ebp]
  00219	83 c4 34	 add	 esp, 52			; 00000034H
  0021c	50		 push	 eax
  0021d	8b 45 f4	 mov	 eax, DWORD PTR _Option1$[ebp]
  00220	51		 push	 ecx
  00221	8b 4d ec	 mov	 ecx, DWORD PTR _level$[ebp]
  00224	52		 push	 edx
  00225	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp]
  00228	50		 push	 eax
  00229	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  0022c	51		 push	 ecx
  0022d	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _btMapNumber$[ebp]
  00231	56		 push	 esi
  00232	6b f6 70	 imul	 esi, 112		; 00000070H
  00235	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0023b	56		 push	 esi
  0023c	52		 push	 edx
  0023d	50		 push	 eax
  0023e	51		 push	 ecx
  0023f	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  00242	52		 push	 edx
  00243	83 c7 6c	 add	 edi, 108		; 0000006cH
  00246	57		 push	 edi
  00247	8b cb		 mov	 ecx, ebx
  00249	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  0024e	50		 push	 eax
  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0025a	83 c4 38	 add	 esp, 56			; 00000038H
  0025d	5f		 pop	 edi
  0025e	5e		 pop	 esi

; 1331 : 	}
; 1332 : 	return 1;

  0025f	b8 01 00 00 00	 mov	 eax, 1
  00264	5b		 pop	 ebx

; 1333 : }

  00265	8b e5		 mov	 esp, ebp
  00267	5d		 pop	 ebp
  00268	c2 14 00	 ret	 20			; 00000014H
$LN16@DropItem:

; 1240 : 		{
; 1241 : 			if(btMapNumber == 0xFF)

  0026b	80 7d 0c ff	 cmp	 BYTE PTR _btMapNumber$[ebp], 255 ; 000000ffH
  0026f	75 16		 jne	 SHORT $LN15@DropItem

; 1242 : 			{
; 1243 : 				*iDropZen = this->m_iDropZen;

  00271	8b 83 10 01 00
	00		 mov	 eax, DWORD PTR [ebx+272]
  00277	8b 4d 18	 mov	 ecx, DWORD PTR _iDropZen$[ebp]
  0027a	89 01		 mov	 DWORD PTR [ecx], eax
$LN33@DropItem:

; 1244 : 				return FALSE;

  0027c	5f		 pop	 edi
  0027d	5e		 pop	 esi
  0027e	33 c0		 xor	 eax, eax
  00280	5b		 pop	 ebx

; 1333 : }

  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 14 00	 ret	 20			; 00000014H
$LN15@DropItem:

; 1245 : 			}
; 1246 : 
; 1247 : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00287	0f b6 55 14	 movzx	 edx, BYTE PTR _cY$[ebp]
  0028b	0f b6 45 10	 movzx	 eax, BYTE PTR _cX$[ebp]
  0028f	8b 8b 10 01 00
	00		 mov	 ecx, DWORD PTR [ebx+272]
  00295	52		 push	 edx
  00296	50		 push	 eax
  00297	51		 push	 ecx
  00298	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  0029f	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  002a5	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  002ab	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1248 : 			LogAddTD("[%s] Drop Zen [%s][%s] [%d Zen]", this->GetEventName(), lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  002b0	8b 93 10 01 00
	00		 mov	 edx, DWORD PTR [ebx+272]
  002b6	52		 push	 edx
  002b7	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  002ba	50		 push	 eax
  002bb	83 c7 6c	 add	 edi, 108		; 0000006cH
  002be	57		 push	 edi
  002bf	8b cb		 mov	 ecx, ebx
  002c1	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  002c6	50		 push	 eax
  002c7	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@
  002cc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002d2	83 c4 14	 add	 esp, 20			; 00000014H
$LN18@DropItem:

; 1331 : 	}
; 1332 : 	return 1;

  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi
  002d7	b8 01 00 00 00	 mov	 eax, 1
  002dc	5b		 pop	 ebx

; 1333 : }

  002dd	8b e5		 mov	 esp, ebp
  002df	5d		 pop	 ebp
  002e0	c2 14 00	 ret	 20			; 00000014H
?DropItem@CProbabilityItemBag@@QAEHHEEEPAH@Z ENDP	; CProbabilityItemBag::DropItem
_TEXT	ENDS
PUBLIC	??_C@_0HB@PANEKFLN@?$FL?5RAKLION?5?$FN?$FL?5Reward?5?$FN?5Selupan?5It@ ; `string'
PUBLIC	?DropRaklionSelupanMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropRaklionSelupanMonsterReward
;	COMDAT ??_C@_0HB@PANEKFLN@?$FL?5RAKLION?5?$FN?$FL?5Reward?5?$FN?5Selupan?5It@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0HB@PANEKFLN@?$FL?5RAKLION?5?$FN?$FL?5Reward?5?$FN?5Selupan?5It@ DB '['
	DB	' RAKLION ][ Reward ] Selupan Item Drop [%s][%s] : (%d)(%d/%d)'
	DB	' Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropRaklionSelupanMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_loc12$ = -16						; size = 4
_Option1$ = -12						; size = 4
_Option2$ = -8						; size = 4
_Option3$ = -4						; size = 4
_level$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_y$ = 16						; size = 4
_cX$ = 16						; size = 1
_x$ = 20						; size = 4
_cY$ = 20						; size = 1
?DropRaklionSelupanMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropRaklionSelupanMonsterReward, COMDAT
; _this$ = ecx

; 1336 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 1337 : 	if ( this->m_bLoad == FALSE )

  00009	33 c0		 xor	 eax, eax
  0000b	39 43 04	 cmp	 DWORD PTR [ebx+4], eax
  0000e	75 07		 jne	 SHORT $LN12@DropRaklio
  00010	5b		 pop	 ebx

; 1418 : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 10 00	 ret	 16			; 00000010H
$LN12@DropRaklio:
  00017	56		 push	 esi

; 1338 : 		return FALSE;
; 1339 : 
; 1340 : 	float dur = 0; //2
; 1341 : 	int type = 0;//3
; 1342 : 	int level = 0;//4
; 1343 : 	int x = 0;//5
; 1344 : 	int y = 0;//6
; 1345 : 	int Option1 = 0;//7
; 1346 : 	int Option2 = 0;//8
; 1347 : 	int Option3 = 0;//9
; 1348 : 	int DropItemNum = 0;//10
; 1349 : 	int ExOption = 0;//11
; 1350 : 	int loc12 = 0;
; 1351 : 	LPOBJ lpObj = &gObj[aIndex];
; 1352 : 
; 1353 : 	if ( this->GetBagCount() > 0 )

  00018	8b b3 20 01 00
	00		 mov	 esi, DWORD PTR [ebx+288]
  0001e	57		 push	 edi
  0001f	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00022	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00028	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002e	89 45 f4	 mov	 DWORD PTR _Option1$[ebp], eax
  00031	89 45 f8	 mov	 DWORD PTR _Option2$[ebp], eax
  00034	89 45 fc	 mov	 DWORD PTR _Option3$[ebp], eax
  00037	89 45 f0	 mov	 DWORD PTR _loc12$[ebp], eax
  0003a	3b f0		 cmp	 esi, eax
  0003c	0f 8e 76 01 00
	00		 jle	 $LN11@DropRaklio

; 1354 : 	{
; 1355 : 		DropItemNum =  rand() % this->GetBagCount();

  00042	e8 00 00 00 00	 call	 _rand
  00047	99		 cdq
  00048	f7 fe		 idiv	 esi

; 1356 : 		dur = 0;
; 1357 : 
; 1358 : 		if ( cX == 0 && cY == 0 )

  0004a	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  0004d	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00050	8b f2		 mov	 esi, edx
  00052	84 c0		 test	 al, al
  00054	75 1a		 jne	 SHORT $LN10@DropRaklio
  00056	84 c9		 test	 cl, cl
  00058	75 16		 jne	 SHORT $LN10@DropRaklio

; 1359 : 		{
; 1360 : 			x = lpObj->X;

  0005a	0f bf 87 44 01
	00 00		 movsx	 eax, WORD PTR [edi+324]

; 1361 : 			y = lpObj->Y;

  00061	0f bf 8f 46 01
	00 00		 movsx	 ecx, WORD PTR [edi+326]
  00068	89 45 14	 mov	 DWORD PTR _x$[ebp], eax
  0006b	89 4d 10	 mov	 DWORD PTR _y$[ebp], ecx

; 1362 : 		}
; 1363 : 		else

  0006e	eb 0c		 jmp	 SHORT $LN9@DropRaklio
$LN10@DropRaklio:

; 1364 : 		{
; 1365 : 			x = cX;

  00070	0f b6 d0	 movzx	 edx, al

; 1366 : 			y = cY;

  00073	0f b6 c1	 movzx	 eax, cl
  00076	89 55 14	 mov	 DWORD PTR _x$[ebp], edx
  00079	89 45 10	 mov	 DWORD PTR _y$[ebp], eax
$LN9@DropRaklio:

; 1367 : 		}
; 1368 : 
; 1369 : 		level = this->GetLevel(DropItemNum);

  0007c	56		 push	 esi
  0007d	8b cb		 mov	 ecx, ebx
  0007f	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  00084	0f b6 c8	 movzx	 ecx, al

; 1370 : 		type = ItemGetNumberMake(this->BagObject[DropItemNum].m_type, this->BagObject[DropItemNum].m_index);

  00087	8d 14 f3	 lea	 edx, DWORD PTR [ebx+esi*8]
  0008a	0f b6 84 16 1e
	02 00 00	 movzx	 eax, BYTE PTR [esi+edx+542]
  00092	8d 1c 16	 lea	 ebx, DWORD PTR [esi+edx]
  00095	89 4d 08	 mov	 DWORD PTR _level$[ebp], ecx
  00098	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  0009f	50		 push	 eax
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000a6	8b f0		 mov	 esi, eax
  000a8	83 c4 08	 add	 esp, 8

; 1371 : 
; 1372 : 		if ( type == -1 )

  000ab	83 fe ff	 cmp	 esi, -1
  000ae	75 0b		 jne	 SHORT $LN8@DropRaklio

; 1373 : 		{
; 1374 : 			return FALSE;

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	33 c0		 xor	 eax, eax
  000b4	5b		 pop	 ebx

; 1418 : }

  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 10 00	 ret	 16			; 00000010H
$LN8@DropRaklio:

; 1375 : 		}
; 1376 : 
; 1377 : 		if ( this->BagObject[DropItemNum].m_isskill != 0 )

  000bb	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000c2	74 07		 je	 SHORT $LN19@DropRaklio

; 1378 : 		{
; 1379 : 			Option1 =1;

  000c4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN19@DropRaklio:

; 1380 : 		}
; 1381 : 
; 1382 : 		if ( this->BagObject[DropItemNum].m_isluck != 0 )

  000cb	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  000d2	74 21		 je	 SHORT $LN20@DropRaklio

; 1383 : 		{
; 1384 : 			Option2 = 0;

  000d4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1385 : 
; 1386 : 			if ( (rand()%2) == 0 )

  000db	e8 00 00 00 00	 call	 _rand
  000e0	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000e5	79 05		 jns	 SHORT $LN24@DropRaklio
  000e7	48		 dec	 eax
  000e8	83 c8 fe	 or	 eax, -2			; fffffffeH
  000eb	40		 inc	 eax
$LN24@DropRaklio:
  000ec	75 07		 jne	 SHORT $LN20@DropRaklio

; 1387 : 			{
; 1388 : 				Option2 = 1;

  000ee	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN20@DropRaklio:

; 1389 : 			}
; 1390 : 		}
; 1391 : 
; 1392 : 		if ( this->BagObject[DropItemNum].m_isoption != 0 )

  000f5	80 bb 23 02 00
	00 00		 cmp	 BYTE PTR [ebx+547], 0
  000fc	74 2b		 je	 SHORT $LN2@DropRaklio

; 1393 : 		{
; 1394 : 			if ( rand()%5 < 1 )

  000fe	e8 00 00 00 00	 call	 _rand
  00103	99		 cdq
  00104	b9 05 00 00 00	 mov	 ecx, 5
  00109	f7 f9		 idiv	 ecx
  0010b	83 fa 01	 cmp	 edx, 1
  0010e	7d 09		 jge	 SHORT $LN3@DropRaklio

; 1395 : 			{
; 1396 : 				Option3 = 3;

  00110	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 1397 : 			}
; 1398 : 			else

  00117	eb 10		 jmp	 SHORT $LN2@DropRaklio
$LN3@DropRaklio:

; 1399 : 			{
; 1400 : 				Option3 = rand()%3;

  00119	e8 00 00 00 00	 call	 _rand
  0011e	99		 cdq
  0011f	b9 03 00 00 00	 mov	 ecx, 3
  00124	f7 f9		 idiv	 ecx
  00126	89 55 fc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN2@DropRaklio:

; 1401 : 			}
; 1402 : 		}
; 1403 : 
; 1404 : 		if ( this->BagObject[DropItemNum].m_isexitem != 0 )

  00129	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  00130	74 17		 je	 SHORT $LN21@DropRaklio

; 1405 : 		{
; 1406 : 			loc12 = NewOptionRand(0);

  00132	6a 00		 push	 0
  00134	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  00139	0f b6 d0	 movzx	 edx, al
  0013c	83 c4 04	 add	 esp, 4
  0013f	89 55 f0	 mov	 DWORD PTR _loc12$[ebp], edx

; 1407 : 			//Option2 = 0;
; 1408 : 			Option1 = 1;

  00142	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN21@DropRaklio:

; 1409 : 			//level = 0;
; 1410 : 		}
; 1411 : 
; 1412 : 		ItemSerialCreateSend(lpObj->m_Index, btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  00149	8b 4d f0	 mov	 ecx, DWORD PTR _loc12$[ebp]
  0014c	8b 07		 mov	 eax, DWORD PTR [edi]
  0014e	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  00151	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  00154	6a 00		 push	 0
  00156	51		 push	 ecx
  00157	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  0015a	50		 push	 eax
  0015b	52		 push	 edx
  0015c	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  0015f	51		 push	 ecx
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _level$[ebp]
  00163	52		 push	 edx
  00164	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  00167	6a 00		 push	 0
  00169	51		 push	 ecx
  0016a	8b 4d 14	 mov	 ecx, DWORD PTR _x$[ebp]
  0016d	56		 push	 esi
  0016e	52		 push	 edx
  0016f	51		 push	 ecx
  00170	53		 push	 ebx
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1413 : 		LogAddTD("[ RAKLION ][ Reward ] Selupan Item Drop [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1414 : 				lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  00177	8b 55 f0	 mov	 edx, DWORD PTR _loc12$[ebp]
  0017a	8b 45 fc	 mov	 eax, DWORD PTR _Option3$[ebp]
  0017d	8b 4d f8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  00180	52		 push	 edx
  00181	8b 55 f4	 mov	 edx, DWORD PTR _Option1$[ebp]
  00184	50		 push	 eax
  00185	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  00188	51		 push	 ecx
  00189	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  0018c	52		 push	 edx
  0018d	8b 55 14	 mov	 edx, DWORD PTR _x$[ebp]
  00190	50		 push	 eax
  00191	56		 push	 esi
  00192	6b f6 70	 imul	 esi, 112		; 00000070H
  00195	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0019b	56		 push	 esi
  0019c	51		 push	 ecx
  0019d	52		 push	 edx
  0019e	0f b6 c3	 movzx	 eax, bl
  001a1	50		 push	 eax
  001a2	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  001a5	51		 push	 ecx
  001a6	83 c7 6c	 add	 edi, 108		; 0000006cH
  001a9	57		 push	 edi
  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@PANEKFLN@?$FL?5RAKLION?5?$FN?$FL?5Reward?5?$FN?5Selupan?5It@
  001af	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b5	83 c4 68	 add	 esp, 104		; 00000068H
$LN11@DropRaklio:

; 1415 : 
; 1416 : 	}
; 1417 : 	return TRUE;

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	b8 01 00 00 00	 mov	 eax, 1
  001bf	5b		 pop	 ebx

; 1418 : }

  001c0	8b e5		 mov	 esp, ebp
  001c2	5d		 pop	 ebp
  001c3	c2 10 00	 ret	 16			; 00000010H
?DropRaklionSelupanMonsterReward@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropRaklionSelupanMonsterReward
_TEXT	ENDS
PUBLIC	??_C@_0CP@FGAKJFJF@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0GG@FDCABAPE@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@ ; `string'
PUBLIC	__real@42480000
PUBLIC	__real@41200000
PUBLIC	?DropGoldenBoxItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropGoldenBoxItem
;	COMDAT ??_C@_0CP@FGAKJFJF@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0CP@FGAKJFJF@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@ DB '[T'
	DB	'EMP_LOG] DropGoldenBoxItem [%s][%s] [%d Zen]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@FDCABAPE@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0GG@FDCABAPE@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@ DB '[T'
	DB	'EMP_LOG] DropGoldenBoxItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d'
	DB	' Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropGoldenBoxItem@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_X$ = -24						; size = 4
_iExOption$ = -20					; size = 4
_iOption1$ = -16					; size = 4
tv403 = -12						; size = 4
tv401 = -12						; size = 4
_fDur$ = -12						; size = 4
_iOption2$ = -8						; size = 4
_iOption3$ = -4						; size = 4
_Y$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_iLevel$ = 16						; size = 4
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
tv407 = 22						; size = 2
?DropGoldenBoxItem@CProbabilityItemBag@@QAEHHEEE@Z PROC	; CProbabilityItemBag::DropGoldenBoxItem, COMDAT
; _this$ = ecx

; 1421 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1422 : 	if( !this->m_bLoad )

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0000f	75 0a		 jne	 SHORT $LN24@DropGolden

; 1423 : 	{
; 1424 : 		return false;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 1537 : 	// ----
; 1538 : 	return true;
; 1539 : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN24@DropGolden:

; 1425 : 	}
; 1426 : 	// ----
; 1427 : 	float fDur			= 0;

  0001b	d9 ee		 fldz
  0001d	57		 push	 edi

; 1428 : 	int iType			= 0;
; 1429 : 	int iLevel			= 0;
; 1430 : 	int X				= 0;
; 1431 : 	int Y				= 0;
; 1432 : 	int iOption1		= 0;
; 1433 : 	int iOption2		= 0;
; 1434 : 	int iOption3		= 0;
; 1435 : 	int nDropItemRate	= 0;
; 1436 : 	int nRateCnt		= 0;
; 1437 : 	int iExOption		= 0;
; 1438 : 	// ----
; 1439 : 	LPOBJ lpObj		= &gObj[aIndex];

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00021	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
  00024	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0002a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	89 5d f0	 mov	 DWORD PTR _iOption1$[ebp], ebx
  00033	89 5d f8	 mov	 DWORD PTR _iOption2$[ebp], ebx
  00036	89 5d fc	 mov	 DWORD PTR _iOption3$[ebp], ebx
  00039	89 5d ec	 mov	 DWORD PTR _iExOption$[ebp], ebx

; 1440 : 	// ----
; 1441 : 	if( this->GetBagCount() <= 0 )

  0003c	39 9e 20 01 00
	00		 cmp	 DWORD PTR [esi+288], ebx

; 1442 : 	{
; 1443 : 		return true;

  00042	0f 8e 75 02 00
	00		 jle	 $LN36@DropGolden

; 1444 : 	}
; 1445 : 	// ----
; 1446 : 	int iDropItemRate = rand() % 10000;

  00048	e8 00 00 00 00	 call	 _rand
  0004d	99		 cdq
  0004e	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00053	f7 f9		 idiv	 ecx

; 1447 : 	// ----
; 1448 : 	if ( !this->m_iRateKindCount || iDropItemRate < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1] )

  00055	8b 86 04 08 00
	00		 mov	 eax, DWORD PTR [esi+2052]
  0005b	3b c3		 cmp	 eax, ebx
  0005d	0f 84 14 02 00
	00		 je	 $LN21@DropGolden
  00063	2b 8c 86 60 07
	00 00		 sub	 ecx, DWORD PTR [esi+eax*4+1888]
  0006a	3b d1		 cmp	 edx, ecx
  0006c	0f 8c 05 02 00
	00		 jl	 $LN21@DropGolden

; 1455 : 	}
; 1456 : 	// ----
; 1457 : 	int iDropItemNum = rand() % this->GetBagCount();	// this->GetDropItemNumber(iDropItemRate);

  00072	8b 9e 20 01 00
	00		 mov	 ebx, DWORD PTR [esi+288]
  00078	e8 00 00 00 00	 call	 _rand
  0007d	99		 cdq
  0007e	f7 fb		 idiv	 ebx

; 1458 : 	// ----
; 1459 : 	if( cX || cY )

  00080	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  00083	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00086	8b da		 mov	 ebx, edx
  00088	84 c0		 test	 al, al
  0008a	75 14		 jne	 SHORT $LN19@DropGolden
  0008c	84 c9		 test	 cl, cl
  0008e	75 10		 jne	 SHORT $LN19@DropGolden

; 1463 : 	}
; 1464 : 	else
; 1465 : 	{
; 1466 : 		X = lpObj->X;

  00090	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 1467 : 		Y = lpObj->Y;

  00097	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]
  0009e	eb 06		 jmp	 SHORT $LN37@DropGolden
$LN19@DropGolden:

; 1460 : 	{
; 1461 : 		X = cX;

  000a0	0f b6 d0	 movzx	 edx, al

; 1462 : 		Y = cY;

  000a3	0f b6 c1	 movzx	 eax, cl
$LN37@DropGolden:

; 1468 : 	}
; 1469 : 	// ----
; 1470 : 	iLevel	= this->GetLevel(iDropItemNum);

  000a6	53		 push	 ebx
  000a7	8b ce		 mov	 ecx, esi
  000a9	89 45 08	 mov	 DWORD PTR _Y$[ebp], eax
  000ac	89 55 e8	 mov	 DWORD PTR _X$[ebp], edx
  000af	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000b4	0f b6 c8	 movzx	 ecx, al

; 1471 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  000b7	8d 14 de	 lea	 edx, DWORD PTR [esi+ebx*8]
  000ba	0f b6 84 13 1e
	02 00 00	 movzx	 eax, BYTE PTR [ebx+edx+542]
  000c2	03 da		 add	 ebx, edx
  000c4	89 4d 10	 mov	 DWORD PTR _iLevel$[ebp], ecx
  000c7	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  000ce	50		 push	 eax
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000d5	8b f0		 mov	 esi, eax
  000d7	83 c4 08	 add	 esp, 8

; 1472 : 	// ----
; 1473 : 	if( iType == -1 )

  000da	83 fe ff	 cmp	 esi, -1
  000dd	75 0b		 jne	 SHORT $LN17@DropGolden

; 1474 : 	{
; 1475 : 		return false;

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	33 c0		 xor	 eax, eax
  000e3	5b		 pop	 ebx

; 1537 : 	// ----
; 1538 : 	return true;
; 1539 : }

  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 10 00	 ret	 16			; 00000010H
$LN17@DropGolden:

; 1476 : 	}
; 1477 : 	// ----
; 1478 : 	if( this->BagObject[iDropItemNum].m_isskill )

  000ea	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000f1	74 07		 je	 SHORT $LN31@DropGolden

; 1479 : 	{
; 1480 : 		iOption1 = true;

  000f3	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN31@DropGolden:

; 1481 : 	}
; 1482 : 	// -----
; 1483 : 	if( this->BagObject[iDropItemNum].m_isluck )

  000fa	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  00101	74 21		 je	 SHORT $LN32@DropGolden

; 1484 : 	{
; 1485 : 		iOption2 = 0;

  00103	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1486 : 		// ----
; 1487 : 		if( !(rand() % 2) )

  0010a	e8 00 00 00 00	 call	 _rand
  0010f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00114	79 05		 jns	 SHORT $LN35@DropGolden
  00116	48		 dec	 eax
  00117	83 c8 fe	 or	 eax, -2			; fffffffeH
  0011a	40		 inc	 eax
$LN35@DropGolden:
  0011b	75 07		 jne	 SHORT $LN32@DropGolden

; 1488 : 		{
; 1489 : 			iOption2 = true;

  0011d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN32@DropGolden:

; 1490 : 		}
; 1491 : 	}
; 1492 : 	// ----
; 1493 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  00124	80 bb 23 02 00
	00 01		 cmp	 BYTE PTR [ebx+547], 1
  0012b	75 2b		 jne	 SHORT $LN11@DropGolden

; 1494 : 	{
; 1495 : 		if( rand() % 5 >= 1 )

  0012d	e8 00 00 00 00	 call	 _rand
  00132	99		 cdq
  00133	b9 05 00 00 00	 mov	 ecx, 5
  00138	f7 f9		 idiv	 ecx
  0013a	83 fa 01	 cmp	 edx, 1
  0013d	7c 12		 jl	 SHORT $LN12@DropGolden

; 1496 : 		{
; 1497 : 			iOption3 = rand() % 3;

  0013f	e8 00 00 00 00	 call	 _rand
  00144	99		 cdq
  00145	b9 03 00 00 00	 mov	 ecx, 3
  0014a	f7 f9		 idiv	 ecx
  0014c	89 55 fc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 1498 : 		}
; 1499 : 		else

  0014f	eb 07		 jmp	 SHORT $LN11@DropGolden
$LN12@DropGolden:

; 1500 : 		{
; 1501 : 			iOption3 = 3;

  00151	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN11@DropGolden:

; 1502 : 		}
; 1503 : 	}
; 1504 : 	// ----
; 1505 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  00158	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  0015f	74 13		 je	 SHORT $LN33@DropGolden

; 1506 : 	{
; 1507 : 		iExOption	= NewOptionRand(0);

  00161	33 db		 xor	 ebx, ebx
  00163	53		 push	 ebx
  00164	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  00169	0f b6 d0	 movzx	 edx, al
  0016c	83 c4 04	 add	 esp, 4
  0016f	89 55 ec	 mov	 DWORD PTR _iExOption$[ebp], edx
  00172	eb 02		 jmp	 SHORT $LN10@DropGolden
$LN33@DropGolden:
  00174	33 db		 xor	 ebx, ebx
$LN10@DropGolden:

; 1508 : 		//iOption2	= false;
; 1509 : 		//iOption1	= true;
; 1510 : 		//iLevel		= 0;
; 1511 : 	}
; 1512 : 	// ----
; 1513 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  00176	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  0017c	74 10		 je	 SHORT $LN8@DropGolden
  0017e	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  00184	74 08		 je	 SHORT $LN8@DropGolden
  00186	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  0018c	75 0c		 jne	 SHORT $LN9@DropGolden
$LN8@DropGolden:

; 1514 : 	{
; 1515 : 		iOption1	= false;

  0018e	89 5d f0	 mov	 DWORD PTR _iOption1$[ebp], ebx

; 1516 : 		iOption2	= false;

  00191	89 5d f8	 mov	 DWORD PTR _iOption2$[ebp], ebx

; 1517 : 		iOption3	= 0;

  00194	89 5d fc	 mov	 DWORD PTR _iOption3$[ebp], ebx

; 1518 : 		iLevel		= 0;

  00197	89 5d 10	 mov	 DWORD PTR _iLevel$[ebp], ebx
$LN9@DropGolden:

; 1519 : 	}
; 1520 : 	// ----
; 1521 : 	if( iType == 7238 || iType == 7239 )

  0019a	81 fe 46 1c 00
	00		 cmp	 esi, 7238		; 00001c46H
  001a0	74 30		 je	 SHORT $LN6@DropGolden
  001a2	81 fe 47 1c 00
	00		 cmp	 esi, 7239		; 00001c47H
  001a8	74 28		 je	 SHORT $LN6@DropGolden

; 1524 : 	}
; 1525 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  001aa	81 fe 55 1c 00
	00		 cmp	 esi, 7253		; 00001c55H
  001b0	74 18		 je	 SHORT $LN3@DropGolden
  001b2	81 fe 56 1c 00
	00		 cmp	 esi, 7254		; 00001c56H
  001b8	74 10		 je	 SHORT $LN3@DropGolden
  001ba	81 fe 57 1c 00
	00		 cmp	 esi, 7255		; 00001c57H
  001c0	74 08		 je	 SHORT $LN3@DropGolden

; 1526 : 	{
; 1527 : 		fDur = 10.0;
; 1528 : 	}
; 1529 : 	else if( iType == 7221 )

  001c2	81 fe 35 1c 00
	00		 cmp	 esi, 7221		; 00001c35H
  001c8	75 11		 jne	 SHORT $LN1@DropGolden
$LN3@DropGolden:

; 1530 : 	{
; 1531 : 		fDur = 10.0;

  001ca	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  001d0	eb 06		 jmp	 SHORT $LN38@DropGolden
$LN6@DropGolden:

; 1522 : 	{
; 1523 : 		fDur = 50.0;

  001d2	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42480000
$LN38@DropGolden:
  001d8	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropGolden:

; 1532 : 	}
; 1533 : 	// ----
; 1534 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  001db	8b 45 ec	 mov	 eax, DWORD PTR _iExOption$[ebp]
  001de	d9 45 f4	 fld	 DWORD PTR _fDur$[ebp]
  001e1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001e3	d9 7d 16	 fnstcw	 WORD PTR tv407[ebp]
  001e6	8b 55 fc	 mov	 edx, DWORD PTR _iOption3$[ebp]
  001e9	53		 push	 ebx
  001ea	50		 push	 eax
  001eb	8b 45 f8	 mov	 eax, DWORD PTR _iOption2$[ebp]
  001ee	51		 push	 ecx
  001ef	52		 push	 edx
  001f0	8b 55 f0	 mov	 edx, DWORD PTR _iOption1$[ebp]
  001f3	50		 push	 eax
  001f4	0f b7 45 16	 movzx	 eax, WORD PTR tv407[ebp]
  001f8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001fd	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  00200	89 45 f4	 mov	 DWORD PTR tv403[ebp], eax
  00203	52		 push	 edx
  00204	d9 6d f4	 fldcw	 WORD PTR tv403[ebp]
  00207	db 5d f4	 fistp	 DWORD PTR tv401[ebp]
  0020a	8a 45 f4	 mov	 al, BYTE PTR tv401[ebp]
  0020d	0f b6 d0	 movzx	 edx, al
  00210	8b 45 10	 mov	 eax, DWORD PTR _iLevel$[ebp]
  00213	d9 6d 16	 fldcw	 WORD PTR tv407[ebp]
  00216	52		 push	 edx
  00217	8b 55 08	 mov	 edx, DWORD PTR _Y$[ebp]
  0021a	50		 push	 eax
  0021b	8b 45 e8	 mov	 eax, DWORD PTR _X$[ebp]
  0021e	56		 push	 esi
  0021f	52		 push	 edx
  00220	50		 push	 eax
  00221	53		 push	 ebx
  00222	51		 push	 ecx
  00223	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1535 : 	LogAddTD("[TEMP_LOG] DropGoldenBoxItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1536 : 		lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  00228	8b 4d ec	 mov	 ecx, DWORD PTR _iExOption$[ebp]
  0022b	8b 55 fc	 mov	 edx, DWORD PTR _iOption3$[ebp]
  0022e	8b 45 f8	 mov	 eax, DWORD PTR _iOption2$[ebp]
  00231	51		 push	 ecx
  00232	8b 4d f0	 mov	 ecx, DWORD PTR _iOption1$[ebp]
  00235	52		 push	 edx
  00236	8b 55 10	 mov	 edx, DWORD PTR _iLevel$[ebp]
  00239	50		 push	 eax
  0023a	8b 45 08	 mov	 eax, DWORD PTR _Y$[ebp]
  0023d	51		 push	 ecx
  0023e	8b 4d e8	 mov	 ecx, DWORD PTR _X$[ebp]
  00241	52		 push	 edx
  00242	56		 push	 esi
  00243	6b f6 70	 imul	 esi, 112		; 00000070H
  00246	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0024c	56		 push	 esi
  0024d	50		 push	 eax
  0024e	51		 push	 ecx
  0024f	0f b6 d3	 movzx	 edx, bl
  00252	52		 push	 edx
  00253	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00256	50		 push	 eax
  00257	83 c7 6c	 add	 edi, 108		; 0000006cH
  0025a	57		 push	 edi
  0025b	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@FDCABAPE@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00266	83 c4 68	 add	 esp, 104		; 00000068H
  00269	5f		 pop	 edi
  0026a	5e		 pop	 esi
  0026b	b8 01 00 00 00	 mov	 eax, 1
  00270	5b		 pop	 ebx

; 1537 : 	// ----
; 1538 : 	return true;
; 1539 : }

  00271	8b e5		 mov	 esp, ebp
  00273	5d		 pop	 ebp
  00274	c2 10 00	 ret	 16			; 00000010H
$LN21@DropGolden:

; 1449 : 	{
; 1450 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00277	0f b6 4d 14	 movzx	 ecx, BYTE PTR _cY$[ebp]
  0027b	0f b6 55 10	 movzx	 edx, BYTE PTR _cX$[ebp]
  0027f	8b 86 10 01 00
	00		 mov	 eax, DWORD PTR [esi+272]
  00285	51		 push	 ecx
  00286	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  0028d	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  00293	52		 push	 edx
  00294	50		 push	 eax
  00295	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0029b	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1451 : 		LogAddTD("[TEMP_LOG] DropGoldenBoxItem [%s][%s] [%d Zen]",
; 1452 : 			lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  002a0	8b 8e 10 01 00
	00		 mov	 ecx, DWORD PTR [esi+272]
  002a6	51		 push	 ecx
  002a7	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  002aa	52		 push	 edx
  002ab	83 c7 6c	 add	 edi, 108		; 0000006cH
  002ae	57		 push	 edi
  002af	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FGAKJFJF@?$FLTEMP_LOG?$FN?5DropGoldenBoxItem?5?$FL?$CFs@
  002b4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002ba	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@DropGolden:

; 1453 : 		// ----
; 1454 : 		return true;

  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	b8 01 00 00 00	 mov	 eax, 1
  002c4	5b		 pop	 ebx

; 1537 : 	// ----
; 1538 : 	return true;
; 1539 : }

  002c5	8b e5		 mov	 esp, ebp
  002c7	5d		 pop	 ebp
  002c8	c2 10 00	 ret	 16			; 00000010H
?DropGoldenBoxItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP	; CProbabilityItemBag::DropGoldenBoxItem
_TEXT	ENDS
PUBLIC	??_C@_0CP@KBPJLKGH@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0GG@OFNAEEBO@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@ ; `string'
PUBLIC	__real@40a00000
PUBLIC	__real@3f800000
PUBLIC	?DropSilverBoxItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropSilverBoxItem
;	COMDAT ??_C@_0CP@KBPJLKGH@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0CP@KBPJLKGH@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@ DB '[T'
	DB	'EMP_LOG] DropSilverBoxItem [%s][%s] [%d Zen]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@OFNAEEBO@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0GG@OFNAEEBO@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@ DB '[T'
	DB	'EMP_LOG] DropSilverBoxItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d'
	DB	' Level:%d op1:%d op2:%d op3:%d ExOp:%d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropSilverBoxItem@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_X$ = -24						; size = 4
_iExOption$ = -20					; size = 4
_iOption1$ = -16					; size = 4
tv404 = -12						; size = 4
tv402 = -12						; size = 4
_fDur$ = -12						; size = 4
_iOption2$ = -8						; size = 4
_iOption3$ = -4						; size = 4
_Y$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_iLevel$ = 16						; size = 4
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
tv408 = 22						; size = 2
?DropSilverBoxItem@CProbabilityItemBag@@QAEHHEEE@Z PROC	; CProbabilityItemBag::DropSilverBoxItem, COMDAT
; _this$ = ecx

; 1544 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1545 : 	if( !this->m_bLoad )

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0000f	75 0a		 jne	 SHORT $LN24@DropSilver

; 1546 : 	{
; 1547 : 		return false;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 1660 : 	// ----
; 1661 : 	return true;
; 1662 : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN24@DropSilver:

; 1548 : 	}
; 1549 : 	// ----
; 1550 : 	float fDur			= 0.0;

  0001b	d9 ee		 fldz
  0001d	57		 push	 edi

; 1551 : 	int iType			= 0;
; 1552 : 	int iLevel			= 0;
; 1553 : 	int X				= 0;
; 1554 : 	int Y				= 0;
; 1555 : 	int iOption1		= 0;
; 1556 : 	int iOption2		= 0;
; 1557 : 	int iOption3		= 0;
; 1558 : 	int nDropItemRate	= 0;
; 1559 : 	int nRateCnt		= 0;
; 1560 : 	int iExOption		= 0;
; 1561 : 	// ----
; 1562 : 	LPOBJ lpObj		= &gObj[aIndex];

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00021	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
  00024	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0002a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	89 5d f0	 mov	 DWORD PTR _iOption1$[ebp], ebx
  00033	89 5d f8	 mov	 DWORD PTR _iOption2$[ebp], ebx
  00036	89 5d fc	 mov	 DWORD PTR _iOption3$[ebp], ebx
  00039	89 5d ec	 mov	 DWORD PTR _iExOption$[ebp], ebx

; 1563 : 	// ----
; 1564 : 	if( this->GetBagCount() <= 0 )

  0003c	39 9e 20 01 00
	00		 cmp	 DWORD PTR [esi+288], ebx

; 1565 : 	{
; 1566 : 		return true;

  00042	0f 8e 79 02 00
	00		 jle	 $LN36@DropSilver

; 1567 : 	}
; 1568 : 	// ----
; 1569 : 	int iDropItemRate = rand() % 10000;

  00048	e8 00 00 00 00	 call	 _rand
  0004d	99		 cdq
  0004e	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00053	f7 f9		 idiv	 ecx

; 1570 : 	// ----
; 1571 : 	if ( !this->m_iRateKindCount || iDropItemRate < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1] )

  00055	8b 86 04 08 00
	00		 mov	 eax, DWORD PTR [esi+2052]
  0005b	3b c3		 cmp	 eax, ebx
  0005d	0f 84 18 02 00
	00		 je	 $LN21@DropSilver
  00063	2b 8c 86 60 07
	00 00		 sub	 ecx, DWORD PTR [esi+eax*4+1888]
  0006a	3b d1		 cmp	 edx, ecx
  0006c	0f 8c 09 02 00
	00		 jl	 $LN21@DropSilver

; 1578 : 	}
; 1579 : 	// ----
; 1580 : 	int iDropItemNum = rand() % this->GetBagCount();// this->GetDropItemNumber(iDropItemRate);

  00072	8b 9e 20 01 00
	00		 mov	 ebx, DWORD PTR [esi+288]
  00078	e8 00 00 00 00	 call	 _rand
  0007d	99		 cdq
  0007e	f7 fb		 idiv	 ebx

; 1581 : 	// ----
; 1582 : 	if( cX || cY )

  00080	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  00083	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00086	8b da		 mov	 ebx, edx
  00088	84 c0		 test	 al, al
  0008a	75 14		 jne	 SHORT $LN19@DropSilver
  0008c	84 c9		 test	 cl, cl
  0008e	75 10		 jne	 SHORT $LN19@DropSilver

; 1586 : 	}
; 1587 : 	else
; 1588 : 	{
; 1589 : 		X = lpObj->X;

  00090	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 1590 : 		Y = lpObj->Y;

  00097	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]
  0009e	eb 06		 jmp	 SHORT $LN37@DropSilver
$LN19@DropSilver:

; 1583 : 	{
; 1584 : 		X = cX;

  000a0	0f b6 d0	 movzx	 edx, al

; 1585 : 		Y = cY;

  000a3	0f b6 c1	 movzx	 eax, cl
$LN37@DropSilver:

; 1591 : 	}
; 1592 : 	// ----
; 1593 : 	iLevel	= this->GetLevel(iDropItemNum);

  000a6	53		 push	 ebx
  000a7	8b ce		 mov	 ecx, esi
  000a9	89 45 08	 mov	 DWORD PTR _Y$[ebp], eax
  000ac	89 55 e8	 mov	 DWORD PTR _X$[ebp], edx
  000af	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000b4	0f b6 c8	 movzx	 ecx, al

; 1594 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  000b7	8d 14 de	 lea	 edx, DWORD PTR [esi+ebx*8]
  000ba	0f b6 84 13 1e
	02 00 00	 movzx	 eax, BYTE PTR [ebx+edx+542]
  000c2	03 da		 add	 ebx, edx
  000c4	89 4d 10	 mov	 DWORD PTR _iLevel$[ebp], ecx
  000c7	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  000ce	50		 push	 eax
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000d5	8b f0		 mov	 esi, eax
  000d7	83 c4 08	 add	 esp, 8

; 1595 : 	// ----
; 1596 : 	if( iType == -1 )

  000da	83 fe ff	 cmp	 esi, -1
  000dd	75 0b		 jne	 SHORT $LN17@DropSilver

; 1597 : 	{
; 1598 : 		return false;

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	33 c0		 xor	 eax, eax
  000e3	5b		 pop	 ebx

; 1660 : 	// ----
; 1661 : 	return true;
; 1662 : }

  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 10 00	 ret	 16			; 00000010H
$LN17@DropSilver:

; 1599 : 	}
; 1600 : 	// ----
; 1601 : 	if( this->BagObject[iDropItemNum].m_isskill )

  000ea	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000f1	74 07		 je	 SHORT $LN31@DropSilver

; 1602 : 	{
; 1603 : 		iOption1 = true;

  000f3	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN31@DropSilver:

; 1604 : 	}
; 1605 : 	// -----
; 1606 : 	if( this->BagObject[iDropItemNum].m_isluck )

  000fa	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  00101	74 21		 je	 SHORT $LN32@DropSilver

; 1607 : 	{
; 1608 : 		iOption2 = 0;

  00103	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1609 : 		// ----
; 1610 : 		if( !(rand() % 2) )

  0010a	e8 00 00 00 00	 call	 _rand
  0010f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00114	79 05		 jns	 SHORT $LN35@DropSilver
  00116	48		 dec	 eax
  00117	83 c8 fe	 or	 eax, -2			; fffffffeH
  0011a	40		 inc	 eax
$LN35@DropSilver:
  0011b	75 07		 jne	 SHORT $LN32@DropSilver

; 1611 : 		{
; 1612 : 			iOption2 = true;

  0011d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN32@DropSilver:

; 1613 : 		}
; 1614 : 	}
; 1615 : 	// ----
; 1616 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  00124	80 bb 23 02 00
	00 01		 cmp	 BYTE PTR [ebx+547], 1
  0012b	75 2b		 jne	 SHORT $LN11@DropSilver

; 1617 : 	{
; 1618 : 		if( rand() % 5 >= 1 )

  0012d	e8 00 00 00 00	 call	 _rand
  00132	99		 cdq
  00133	b9 05 00 00 00	 mov	 ecx, 5
  00138	f7 f9		 idiv	 ecx
  0013a	83 fa 01	 cmp	 edx, 1
  0013d	7c 12		 jl	 SHORT $LN12@DropSilver

; 1619 : 		{
; 1620 : 			iOption3 = rand() % 3;

  0013f	e8 00 00 00 00	 call	 _rand
  00144	99		 cdq
  00145	b9 03 00 00 00	 mov	 ecx, 3
  0014a	f7 f9		 idiv	 ecx
  0014c	89 55 fc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 1621 : 		}
; 1622 : 		else

  0014f	eb 07		 jmp	 SHORT $LN11@DropSilver
$LN12@DropSilver:

; 1623 : 		{
; 1624 : 			iOption3 = 3;

  00151	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN11@DropSilver:

; 1625 : 		}
; 1626 : 	}
; 1627 : 	// ----
; 1628 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  00158	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  0015f	74 13		 je	 SHORT $LN33@DropSilver

; 1629 : 	{
; 1630 : 		iExOption	= NewOptionRand(0);

  00161	33 db		 xor	 ebx, ebx
  00163	53		 push	 ebx
  00164	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  00169	0f b6 d0	 movzx	 edx, al
  0016c	83 c4 04	 add	 esp, 4
  0016f	89 55 ec	 mov	 DWORD PTR _iExOption$[ebp], edx
  00172	eb 02		 jmp	 SHORT $LN10@DropSilver
$LN33@DropSilver:
  00174	33 db		 xor	 ebx, ebx
$LN10@DropSilver:

; 1631 : 		//iOption2	= false;
; 1632 : 		//iOption1	= true;
; 1633 : 		//iLevel		= 0;
; 1634 : 	}
; 1635 : 	// ----
; 1636 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  00176	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  0017c	74 10		 je	 SHORT $LN8@DropSilver
  0017e	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  00184	74 08		 je	 SHORT $LN8@DropSilver
  00186	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  0018c	75 0c		 jne	 SHORT $LN9@DropSilver
$LN8@DropSilver:

; 1637 : 	{
; 1638 : 		iOption1	= false;

  0018e	89 5d f0	 mov	 DWORD PTR _iOption1$[ebp], ebx

; 1639 : 		iOption2	= false;

  00191	89 5d f8	 mov	 DWORD PTR _iOption2$[ebp], ebx

; 1640 : 		iOption3	= 0;

  00194	89 5d fc	 mov	 DWORD PTR _iOption3$[ebp], ebx

; 1641 : 		iLevel		= 0;

  00197	89 5d 10	 mov	 DWORD PTR _iLevel$[ebp], ebx
$LN9@DropSilver:

; 1642 : 	}
; 1643 : 	// ----
; 1644 : 	if( iType == 7238 || iType == 7239 )

  0019a	81 fe 46 1c 00
	00		 cmp	 esi, 7238		; 00001c46H
  001a0	74 34		 je	 SHORT $LN6@DropSilver
  001a2	81 fe 47 1c 00
	00		 cmp	 esi, 7239		; 00001c47H
  001a8	74 2c		 je	 SHORT $LN6@DropSilver

; 1647 : 	}
; 1648 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  001aa	81 fe 55 1c 00
	00		 cmp	 esi, 7253		; 00001c55H
  001b0	74 20		 je	 SHORT $LN3@DropSilver
  001b2	81 fe 56 1c 00
	00		 cmp	 esi, 7254		; 00001c56H
  001b8	74 18		 je	 SHORT $LN3@DropSilver
  001ba	81 fe 57 1c 00
	00		 cmp	 esi, 7255		; 00001c57H
  001c0	74 10		 je	 SHORT $LN3@DropSilver

; 1651 : 	}
; 1652 : 	else if( iType == 7221 )

  001c2	81 fe 35 1c 00
	00		 cmp	 esi, 7221		; 00001c35H
  001c8	75 15		 jne	 SHORT $LN1@DropSilver

; 1653 : 	{
; 1654 : 		fDur = 10.0;

  001ca	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  001d0	eb 0a		 jmp	 SHORT $LN38@DropSilver
$LN3@DropSilver:

; 1649 : 	{
; 1650 : 		fDur = 1.0;

  001d2	d9 e8		 fld1
  001d4	eb 06		 jmp	 SHORT $LN38@DropSilver
$LN6@DropSilver:

; 1645 : 	{
; 1646 : 		fDur = 5.0;

  001d6	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40a00000
$LN38@DropSilver:
  001dc	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropSilver:

; 1655 : 	}
; 1656 : 	// ----
; 1657 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  001df	8b 45 ec	 mov	 eax, DWORD PTR _iExOption$[ebp]
  001e2	d9 45 f4	 fld	 DWORD PTR _fDur$[ebp]
  001e5	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001e7	d9 7d 16	 fnstcw	 WORD PTR tv408[ebp]
  001ea	8b 55 fc	 mov	 edx, DWORD PTR _iOption3$[ebp]
  001ed	53		 push	 ebx
  001ee	50		 push	 eax
  001ef	8b 45 f8	 mov	 eax, DWORD PTR _iOption2$[ebp]
  001f2	51		 push	 ecx
  001f3	52		 push	 edx
  001f4	8b 55 f0	 mov	 edx, DWORD PTR _iOption1$[ebp]
  001f7	50		 push	 eax
  001f8	0f b7 45 16	 movzx	 eax, WORD PTR tv408[ebp]
  001fc	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00201	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  00204	89 45 f4	 mov	 DWORD PTR tv404[ebp], eax
  00207	52		 push	 edx
  00208	d9 6d f4	 fldcw	 WORD PTR tv404[ebp]
  0020b	db 5d f4	 fistp	 DWORD PTR tv402[ebp]
  0020e	8a 45 f4	 mov	 al, BYTE PTR tv402[ebp]
  00211	0f b6 d0	 movzx	 edx, al
  00214	8b 45 10	 mov	 eax, DWORD PTR _iLevel$[ebp]
  00217	d9 6d 16	 fldcw	 WORD PTR tv408[ebp]
  0021a	52		 push	 edx
  0021b	8b 55 08	 mov	 edx, DWORD PTR _Y$[ebp]
  0021e	50		 push	 eax
  0021f	8b 45 e8	 mov	 eax, DWORD PTR _X$[ebp]
  00222	56		 push	 esi
  00223	52		 push	 edx
  00224	50		 push	 eax
  00225	53		 push	 ebx
  00226	51		 push	 ecx
  00227	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1658 : 	LogAddTD("[TEMP_LOG] DropSilverBoxItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1659 : 		lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  0022c	8b 4d ec	 mov	 ecx, DWORD PTR _iExOption$[ebp]
  0022f	8b 55 fc	 mov	 edx, DWORD PTR _iOption3$[ebp]
  00232	8b 45 f8	 mov	 eax, DWORD PTR _iOption2$[ebp]
  00235	51		 push	 ecx
  00236	8b 4d f0	 mov	 ecx, DWORD PTR _iOption1$[ebp]
  00239	52		 push	 edx
  0023a	8b 55 10	 mov	 edx, DWORD PTR _iLevel$[ebp]
  0023d	50		 push	 eax
  0023e	8b 45 08	 mov	 eax, DWORD PTR _Y$[ebp]
  00241	51		 push	 ecx
  00242	8b 4d e8	 mov	 ecx, DWORD PTR _X$[ebp]
  00245	52		 push	 edx
  00246	56		 push	 esi
  00247	6b f6 70	 imul	 esi, 112		; 00000070H
  0024a	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00250	56		 push	 esi
  00251	50		 push	 eax
  00252	51		 push	 ecx
  00253	0f b6 d3	 movzx	 edx, bl
  00256	52		 push	 edx
  00257	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  0025a	50		 push	 eax
  0025b	83 c7 6c	 add	 edi, 108		; 0000006cH
  0025e	57		 push	 edi
  0025f	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@OFNAEEBO@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@
  00264	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0026a	83 c4 68	 add	 esp, 104		; 00000068H
  0026d	5f		 pop	 edi
  0026e	5e		 pop	 esi
  0026f	b8 01 00 00 00	 mov	 eax, 1
  00274	5b		 pop	 ebx

; 1660 : 	// ----
; 1661 : 	return true;
; 1662 : }

  00275	8b e5		 mov	 esp, ebp
  00277	5d		 pop	 ebp
  00278	c2 10 00	 ret	 16			; 00000010H
$LN21@DropSilver:

; 1572 : 	{
; 1573 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  0027b	0f b6 4d 14	 movzx	 ecx, BYTE PTR _cY$[ebp]
  0027f	0f b6 55 10	 movzx	 edx, BYTE PTR _cX$[ebp]
  00283	8b 86 10 01 00
	00		 mov	 eax, DWORD PTR [esi+272]
  00289	51		 push	 ecx
  0028a	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00291	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  00297	52		 push	 edx
  00298	50		 push	 eax
  00299	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0029f	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1574 : 		LogAddTD("[TEMP_LOG] DropSilverBoxItem [%s][%s] [%d Zen]",
; 1575 : 			lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  002a4	8b 8e 10 01 00
	00		 mov	 ecx, DWORD PTR [esi+272]
  002aa	51		 push	 ecx
  002ab	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  002ae	52		 push	 edx
  002af	83 c7 6c	 add	 edi, 108		; 0000006cH
  002b2	57		 push	 edi
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@KBPJLKGH@?$FLTEMP_LOG?$FN?5DropSilverBoxItem?5?$FL?$CFs@
  002b8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002be	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@DropSilver:

; 1576 : 		// ----
; 1577 : 		return true;

  002c1	5f		 pop	 edi
  002c2	5e		 pop	 esi
  002c3	b8 01 00 00 00	 mov	 eax, 1
  002c8	5b		 pop	 ebx

; 1660 : 	// ----
; 1661 : 	return true;
; 1662 : }

  002c9	8b e5		 mov	 esp, ebp
  002cb	5d		 pop	 ebp
  002cc	c2 10 00	 ret	 16			; 00000010H
?DropSilverBoxItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP	; CProbabilityItemBag::DropSilverBoxItem
_TEXT	ENDS
PUBLIC	??_C@_0DD@PFOIKOLI@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@ ; `string'
PUBLIC	??_C@_0GK@HNJFACKD@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@ ; `string'
PUBLIC	?DropJewelleryCaseItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropJewelleryCaseItem
;	COMDAT ??_C@_0DD@PFOIKOLI@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0DD@PFOIKOLI@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@ DB '[TEMP_LOG'
	DB	'] DropJewelleryCaseItem [%s][%s] [%d Zen]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@HNJFACKD@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@
CONST	SEGMENT
??_C@_0GK@HNJFACKD@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@ DB '[TEMP_LOG'
	DB	'] DropJewelleryCaseItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Le'
	DB	'vel:%d op1:%d op2:%d op3:%d ExOp:%d', 00H	; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropJewelleryCaseItem@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_X$ = -24						; size = 4
_iExOption$ = -20					; size = 4
_iOption1$ = -16					; size = 4
tv403 = -12						; size = 4
tv401 = -12						; size = 4
_fDur$ = -12						; size = 4
_iOption2$ = -8						; size = 4
_iOption3$ = -4						; size = 4
_Y$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_iLevel$ = 16						; size = 4
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
tv407 = 22						; size = 2
?DropJewelleryCaseItem@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropJewelleryCaseItem, COMDAT
; _this$ = ecx

; 1667 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1668 : 	if( !this->m_bLoad )

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 5e 04	 cmp	 DWORD PTR [esi+4], ebx
  0000f	75 0a		 jne	 SHORT $LN24@DropJewell

; 1669 : 	{
; 1670 : 		return false;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 1783 : 	// ----
; 1784 : 	return true;
; 1785 : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN24@DropJewell:

; 1671 : 	}
; 1672 : 	// ----
; 1673 : 	float fDur			= 0.0;

  0001b	d9 ee		 fldz
  0001d	57		 push	 edi

; 1674 : 	int iType			= 0;
; 1675 : 	int iLevel			= 0;
; 1676 : 	int X				= 0;
; 1677 : 	int Y				= 0;
; 1678 : 	int iOption1		= 0;
; 1679 : 	int iOption2		= 0;
; 1680 : 	int iOption3		= 0;
; 1681 : 	int nDropItemRate	= 0;
; 1682 : 	int nRateCnt		= 0;
; 1683 : 	int iExOption		= 0;
; 1684 : 	// ----
; 1685 : 	LPOBJ lpObj		= &gObj[aIndex];

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00021	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
  00024	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0002a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	89 5d f0	 mov	 DWORD PTR _iOption1$[ebp], ebx
  00033	89 5d f8	 mov	 DWORD PTR _iOption2$[ebp], ebx
  00036	89 5d fc	 mov	 DWORD PTR _iOption3$[ebp], ebx
  00039	89 5d ec	 mov	 DWORD PTR _iExOption$[ebp], ebx

; 1686 : 	// ----
; 1687 : 	if( this->GetBagCount() <= 0 )

  0003c	39 9e 20 01 00
	00		 cmp	 DWORD PTR [esi+288], ebx

; 1688 : 	{
; 1689 : 		return true;

  00042	0f 8e 75 02 00
	00		 jle	 $LN36@DropJewell

; 1690 : 	}
; 1691 : 	// ----
; 1692 : 	int iDropItemRate = rand() % 10000;

  00048	e8 00 00 00 00	 call	 _rand
  0004d	99		 cdq
  0004e	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00053	f7 f9		 idiv	 ecx

; 1693 : 	// ----
; 1694 : 	if ( !this->m_iRateKindCount || iDropItemRate < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1] )

  00055	8b 86 04 08 00
	00		 mov	 eax, DWORD PTR [esi+2052]
  0005b	3b c3		 cmp	 eax, ebx
  0005d	0f 84 14 02 00
	00		 je	 $LN21@DropJewell
  00063	2b 8c 86 60 07
	00 00		 sub	 ecx, DWORD PTR [esi+eax*4+1888]
  0006a	3b d1		 cmp	 edx, ecx
  0006c	0f 8c 05 02 00
	00		 jl	 $LN21@DropJewell

; 1701 : 	}
; 1702 : 	// ----
; 1703 : 	int iDropItemNum = rand() % this->GetBagCount();//; this->GetDropItemNumber(iDropItemRate);

  00072	8b 9e 20 01 00
	00		 mov	 ebx, DWORD PTR [esi+288]
  00078	e8 00 00 00 00	 call	 _rand
  0007d	99		 cdq
  0007e	f7 fb		 idiv	 ebx

; 1704 : 	// ----
; 1705 : 	if( cX || cY )

  00080	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  00083	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00086	8b da		 mov	 ebx, edx
  00088	84 c0		 test	 al, al
  0008a	75 14		 jne	 SHORT $LN19@DropJewell
  0008c	84 c9		 test	 cl, cl
  0008e	75 10		 jne	 SHORT $LN19@DropJewell

; 1709 : 	}
; 1710 : 	else
; 1711 : 	{
; 1712 : 		X = lpObj->X;

  00090	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 1713 : 		Y = lpObj->Y;

  00097	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]
  0009e	eb 06		 jmp	 SHORT $LN37@DropJewell
$LN19@DropJewell:

; 1706 : 	{
; 1707 : 		X = cX;

  000a0	0f b6 d0	 movzx	 edx, al

; 1708 : 		Y = cY;

  000a3	0f b6 c1	 movzx	 eax, cl
$LN37@DropJewell:

; 1714 : 	}
; 1715 : 	// ----
; 1716 : 	iLevel	= this->GetLevel(iDropItemNum);

  000a6	53		 push	 ebx
  000a7	8b ce		 mov	 ecx, esi
  000a9	89 45 08	 mov	 DWORD PTR _Y$[ebp], eax
  000ac	89 55 e8	 mov	 DWORD PTR _X$[ebp], edx
  000af	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000b4	0f b6 c8	 movzx	 ecx, al

; 1717 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  000b7	8d 14 de	 lea	 edx, DWORD PTR [esi+ebx*8]
  000ba	0f b6 84 13 1e
	02 00 00	 movzx	 eax, BYTE PTR [ebx+edx+542]
  000c2	03 da		 add	 ebx, edx
  000c4	89 4d 10	 mov	 DWORD PTR _iLevel$[ebp], ecx
  000c7	0f b6 8b 1d 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+541]
  000ce	50		 push	 eax
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000d5	8b f0		 mov	 esi, eax
  000d7	83 c4 08	 add	 esp, 8

; 1718 : 	// ----
; 1719 : 	if( iType == -1 )

  000da	83 fe ff	 cmp	 esi, -1
  000dd	75 0b		 jne	 SHORT $LN17@DropJewell

; 1720 : 	{
; 1721 : 		return false;

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	33 c0		 xor	 eax, eax
  000e3	5b		 pop	 ebx

; 1783 : 	// ----
; 1784 : 	return true;
; 1785 : }

  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 10 00	 ret	 16			; 00000010H
$LN17@DropJewell:

; 1722 : 	}
; 1723 : 	// ----
; 1724 : 	if( this->BagObject[iDropItemNum].m_isskill )

  000ea	80 bb 21 02 00
	00 00		 cmp	 BYTE PTR [ebx+545], 0
  000f1	74 07		 je	 SHORT $LN31@DropJewell

; 1725 : 	{
; 1726 : 		iOption1 = true;

  000f3	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN31@DropJewell:

; 1727 : 	}
; 1728 : 	// -----
; 1729 : 	if( this->BagObject[iDropItemNum].m_isluck )

  000fa	80 bb 22 02 00
	00 00		 cmp	 BYTE PTR [ebx+546], 0
  00101	74 21		 je	 SHORT $LN32@DropJewell

; 1730 : 	{
; 1731 : 		iOption2 = 0;

  00103	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1732 : 		// ----
; 1733 : 		if( !(rand() % 2) )

  0010a	e8 00 00 00 00	 call	 _rand
  0010f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00114	79 05		 jns	 SHORT $LN35@DropJewell
  00116	48		 dec	 eax
  00117	83 c8 fe	 or	 eax, -2			; fffffffeH
  0011a	40		 inc	 eax
$LN35@DropJewell:
  0011b	75 07		 jne	 SHORT $LN32@DropJewell

; 1734 : 		{
; 1735 : 			iOption2 = true;

  0011d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN32@DropJewell:

; 1736 : 		}
; 1737 : 	}
; 1738 : 	// ----
; 1739 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  00124	80 bb 23 02 00
	00 01		 cmp	 BYTE PTR [ebx+547], 1
  0012b	75 2b		 jne	 SHORT $LN11@DropJewell

; 1740 : 	{
; 1741 : 		if( rand() % 5 >= 1 )

  0012d	e8 00 00 00 00	 call	 _rand
  00132	99		 cdq
  00133	b9 05 00 00 00	 mov	 ecx, 5
  00138	f7 f9		 idiv	 ecx
  0013a	83 fa 01	 cmp	 edx, 1
  0013d	7c 12		 jl	 SHORT $LN12@DropJewell

; 1742 : 		{
; 1743 : 			iOption3 = rand() % 3;

  0013f	e8 00 00 00 00	 call	 _rand
  00144	99		 cdq
  00145	b9 03 00 00 00	 mov	 ecx, 3
  0014a	f7 f9		 idiv	 ecx
  0014c	89 55 fc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 1744 : 		}
; 1745 : 		else

  0014f	eb 07		 jmp	 SHORT $LN11@DropJewell
$LN12@DropJewell:

; 1746 : 		{
; 1747 : 			iOption3 = 3;

  00151	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN11@DropJewell:

; 1748 : 		}
; 1749 : 	}
; 1750 : 	// ----
; 1751 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  00158	80 bb 24 02 00
	00 00		 cmp	 BYTE PTR [ebx+548], 0
  0015f	74 13		 je	 SHORT $LN33@DropJewell

; 1752 : 	{
; 1753 : 		iExOption	= NewOptionRand(0);

  00161	33 db		 xor	 ebx, ebx
  00163	53		 push	 ebx
  00164	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  00169	0f b6 d0	 movzx	 edx, al
  0016c	83 c4 04	 add	 esp, 4
  0016f	89 55 ec	 mov	 DWORD PTR _iExOption$[ebp], edx
  00172	eb 02		 jmp	 SHORT $LN10@DropJewell
$LN33@DropJewell:
  00174	33 db		 xor	 ebx, ebx
$LN10@DropJewell:

; 1754 : 		//iOption2	= false;
; 1755 : 		//iOption1	= true;
; 1756 : 		//iLevel		= 0;
; 1757 : 	}
; 1758 : 	// ----
; 1759 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  00176	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  0017c	74 10		 je	 SHORT $LN8@DropJewell
  0017e	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  00184	74 08		 je	 SHORT $LN8@DropJewell
  00186	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  0018c	75 0c		 jne	 SHORT $LN9@DropJewell
$LN8@DropJewell:

; 1760 : 	{
; 1761 : 		iOption1	= false;

  0018e	89 5d f0	 mov	 DWORD PTR _iOption1$[ebp], ebx

; 1762 : 		iOption2	= false;

  00191	89 5d f8	 mov	 DWORD PTR _iOption2$[ebp], ebx

; 1763 : 		iOption3	= 0;

  00194	89 5d fc	 mov	 DWORD PTR _iOption3$[ebp], ebx

; 1764 : 		iLevel		= 0;

  00197	89 5d 10	 mov	 DWORD PTR _iLevel$[ebp], ebx
$LN9@DropJewell:

; 1765 : 	}
; 1766 : 	// ----
; 1767 : 	if( iType == 7238 || iType == 7239 )

  0019a	81 fe 46 1c 00
	00		 cmp	 esi, 7238		; 00001c46H
  001a0	74 30		 je	 SHORT $LN6@DropJewell
  001a2	81 fe 47 1c 00
	00		 cmp	 esi, 7239		; 00001c47H
  001a8	74 28		 je	 SHORT $LN6@DropJewell

; 1770 : 	}
; 1771 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  001aa	81 fe 55 1c 00
	00		 cmp	 esi, 7253		; 00001c55H
  001b0	74 18		 je	 SHORT $LN3@DropJewell
  001b2	81 fe 56 1c 00
	00		 cmp	 esi, 7254		; 00001c56H
  001b8	74 10		 je	 SHORT $LN3@DropJewell
  001ba	81 fe 57 1c 00
	00		 cmp	 esi, 7255		; 00001c57H
  001c0	74 08		 je	 SHORT $LN3@DropJewell

; 1772 : 	{
; 1773 : 		fDur = 10.0;
; 1774 : 	}
; 1775 : 	else if( iType == 7221 )

  001c2	81 fe 35 1c 00
	00		 cmp	 esi, 7221		; 00001c35H
  001c8	75 11		 jne	 SHORT $LN1@DropJewell
$LN3@DropJewell:

; 1776 : 	{
; 1777 : 		fDur = 10.0;

  001ca	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  001d0	eb 06		 jmp	 SHORT $LN38@DropJewell
$LN6@DropJewell:

; 1768 : 	{
; 1769 : 		fDur = 50.0;

  001d2	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42480000
$LN38@DropJewell:
  001d8	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropJewell:

; 1778 : 	}
; 1779 : 	// ----
; 1780 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  001db	8b 45 ec	 mov	 eax, DWORD PTR _iExOption$[ebp]
  001de	d9 45 f4	 fld	 DWORD PTR _fDur$[ebp]
  001e1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001e3	d9 7d 16	 fnstcw	 WORD PTR tv407[ebp]
  001e6	8b 55 fc	 mov	 edx, DWORD PTR _iOption3$[ebp]
  001e9	53		 push	 ebx
  001ea	50		 push	 eax
  001eb	8b 45 f8	 mov	 eax, DWORD PTR _iOption2$[ebp]
  001ee	51		 push	 ecx
  001ef	52		 push	 edx
  001f0	8b 55 f0	 mov	 edx, DWORD PTR _iOption1$[ebp]
  001f3	50		 push	 eax
  001f4	0f b7 45 16	 movzx	 eax, WORD PTR tv407[ebp]
  001f8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001fd	8b 5d 0c	 mov	 ebx, DWORD PTR _btMapNumber$[ebp]
  00200	89 45 f4	 mov	 DWORD PTR tv403[ebp], eax
  00203	52		 push	 edx
  00204	d9 6d f4	 fldcw	 WORD PTR tv403[ebp]
  00207	db 5d f4	 fistp	 DWORD PTR tv401[ebp]
  0020a	8a 45 f4	 mov	 al, BYTE PTR tv401[ebp]
  0020d	0f b6 d0	 movzx	 edx, al
  00210	8b 45 10	 mov	 eax, DWORD PTR _iLevel$[ebp]
  00213	d9 6d 16	 fldcw	 WORD PTR tv407[ebp]
  00216	52		 push	 edx
  00217	8b 55 08	 mov	 edx, DWORD PTR _Y$[ebp]
  0021a	50		 push	 eax
  0021b	8b 45 e8	 mov	 eax, DWORD PTR _X$[ebp]
  0021e	56		 push	 esi
  0021f	52		 push	 edx
  00220	50		 push	 eax
  00221	53		 push	 ebx
  00222	51		 push	 ecx
  00223	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1781 : 	LogAddTD("[TEMP_LOG] DropJewelleryCaseItem [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1782 : 		lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  00228	8b 4d ec	 mov	 ecx, DWORD PTR _iExOption$[ebp]
  0022b	8b 55 fc	 mov	 edx, DWORD PTR _iOption3$[ebp]
  0022e	8b 45 f8	 mov	 eax, DWORD PTR _iOption2$[ebp]
  00231	51		 push	 ecx
  00232	8b 4d f0	 mov	 ecx, DWORD PTR _iOption1$[ebp]
  00235	52		 push	 edx
  00236	8b 55 10	 mov	 edx, DWORD PTR _iLevel$[ebp]
  00239	50		 push	 eax
  0023a	8b 45 08	 mov	 eax, DWORD PTR _Y$[ebp]
  0023d	51		 push	 ecx
  0023e	8b 4d e8	 mov	 ecx, DWORD PTR _X$[ebp]
  00241	52		 push	 edx
  00242	56		 push	 esi
  00243	6b f6 70	 imul	 esi, 112		; 00000070H
  00246	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0024c	56		 push	 esi
  0024d	50		 push	 eax
  0024e	51		 push	 ecx
  0024f	0f b6 d3	 movzx	 edx, bl
  00252	52		 push	 edx
  00253	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00256	50		 push	 eax
  00257	83 c7 6c	 add	 edi, 108		; 0000006cH
  0025a	57		 push	 edi
  0025b	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@HNJFACKD@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00266	83 c4 68	 add	 esp, 104		; 00000068H
  00269	5f		 pop	 edi
  0026a	5e		 pop	 esi
  0026b	b8 01 00 00 00	 mov	 eax, 1
  00270	5b		 pop	 ebx

; 1783 : 	// ----
; 1784 : 	return true;
; 1785 : }

  00271	8b e5		 mov	 esp, ebp
  00273	5d		 pop	 ebp
  00274	c2 10 00	 ret	 16			; 00000010H
$LN21@DropJewell:

; 1695 : 	{
; 1696 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00277	0f b6 4d 14	 movzx	 ecx, BYTE PTR _cY$[ebp]
  0027b	0f b6 55 10	 movzx	 edx, BYTE PTR _cX$[ebp]
  0027f	8b 86 10 01 00
	00		 mov	 eax, DWORD PTR [esi+272]
  00285	51		 push	 ecx
  00286	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  0028d	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  00293	52		 push	 edx
  00294	50		 push	 eax
  00295	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0029b	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1697 : 		LogAddTD("[TEMP_LOG] DropJewelleryCaseItem [%s][%s] [%d Zen]",
; 1698 : 			lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  002a0	8b 8e 10 01 00
	00		 mov	 ecx, DWORD PTR [esi+272]
  002a6	51		 push	 ecx
  002a7	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  002aa	52		 push	 edx
  002ab	83 c7 6c	 add	 edi, 108		; 0000006cH
  002ae	57		 push	 edi
  002af	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PFOIKOLI@?$FLTEMP_LOG?$FN?5DropJewelleryCaseItem@
  002b4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002ba	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@DropJewell:

; 1699 : 		// ----
; 1700 : 		return true;

  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	b8 01 00 00 00	 mov	 eax, 1
  002c4	5b		 pop	 ebx

; 1783 : 	// ----
; 1784 : 	return true;
; 1785 : }

  002c5	8b e5		 mov	 esp, ebp
  002c7	5d		 pop	 ebp
  002c8	c2 10 00	 ret	 16			; 00000010H
?DropJewelleryCaseItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropJewelleryCaseItem
_TEXT	ENDS
PUBLIC	??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@ ; `string'
PUBLIC	?DropNewMonsterItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropNewMonsterItem
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
;	COMDAT ??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.h
CONST	SEGMENT
??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'%s] DropGroupMonsterItem [%s][%s] [%d Zen]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@
CONST	SEGMENT
??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@ DB '['
	DB	'%s] [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d'
	DB	' op3:%d ExOp:%d', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
CONST	ENDS
;	COMDAT ?DropNewMonsterItem@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_X$ = -24						; size = 4
_iExOption$ = -20					; size = 4
_iOption1$ = -16					; size = 4
tv403 = -12						; size = 4
tv401 = -12						; size = 4
_fDur$ = -12						; size = 4
_iOption2$ = -8						; size = 4
_iOption3$ = -4						; size = 4
_Y$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_iLevel$ = 16						; size = 4
_cX$ = 16						; size = 1
tv357 = 20						; size = 4
_cY$ = 20						; size = 1
tv406 = 22						; size = 2
?DropNewMonsterItem@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropNewMonsterItem, COMDAT
; _this$ = ecx

; 1790 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx

; 1791 : 	if( !this->m_bLoad )

  0000a	33 f6		 xor	 esi, esi
  0000c	39 73 04	 cmp	 DWORD PTR [ebx+4], esi
  0000f	75 0a		 jne	 SHORT $LN24@DropNewMon

; 1792 : 	{
; 1793 : 		return false;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 1912 : 	// ----
; 1913 : 	return true;
; 1914 : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN24@DropNewMon:

; 1794 : 	}
; 1795 : 	// ----
; 1796 : 	float fDur			= 0.0;

  0001b	d9 ee		 fldz
  0001d	57		 push	 edi

; 1797 : 	int iType			= 0;
; 1798 : 	int iLevel			= 0;
; 1799 : 	int X				= 0;
; 1800 : 	int Y				= 0;
; 1801 : 	int iOption1		= 0;
; 1802 : 	int iOption2		= 0;
; 1803 : 	int iOption3		= 0;
; 1804 : 	int nDropItemRate	= 0;
; 1805 : 	int nRateCnt		= 0;
; 1806 : 	int iExOption		= 0;
; 1807 : 	// ----
; 1808 : 	LPOBJ lpObj		= &gObj[aIndex];

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00021	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
  00024	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0002a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	89 75 f0	 mov	 DWORD PTR _iOption1$[ebp], esi
  00033	89 75 f8	 mov	 DWORD PTR _iOption2$[ebp], esi
  00036	89 75 fc	 mov	 DWORD PTR _iOption3$[ebp], esi
  00039	89 75 ec	 mov	 DWORD PTR _iExOption$[ebp], esi

; 1809 : 	// ----
; 1810 : 	if( this->GetBagCount() <= 0 )

  0003c	39 b3 20 01 00
	00		 cmp	 DWORD PTR [ebx+288], esi

; 1811 : 	{
; 1812 : 		return true;

  00042	0f 8e 97 02 00
	00		 jle	 $LN39@DropNewMon

; 1813 : 	}
; 1814 : 	// ----
; 1815 : 	int iDropItemRate = GetLargeRand() % 1000000;

  00048	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0004d	33 d2		 xor	 edx, edx
  0004f	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00054	f7 f1		 div	 ecx

; 1816 : 	// ----
; 1817 : 	if ( !this->m_iRateKindCount || iDropItemRate < 1000000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1] )

  00056	8b 83 04 08 00
	00		 mov	 eax, DWORD PTR [ebx+2052]
  0005c	3b c6		 cmp	 eax, esi
  0005e	0f 84 2d 02 00
	00		 je	 $LN21@DropNewMon
  00064	2b 8c 83 60 07
	00 00		 sub	 ecx, DWORD PTR [ebx+eax*4+1888]
  0006b	3b d1		 cmp	 edx, ecx
  0006d	0f 8c 1e 02 00
	00		 jl	 $LN21@DropNewMon

; 1824 : 	}
; 1825 : 	// ----
; 1826 : 	int iDropItemNum = rand() % this->GetBagCount();// this->GetDropItemNumberEx(iDropItemRate);

  00073	8b b3 20 01 00
	00		 mov	 esi, DWORD PTR [ebx+288]
  00079	e8 00 00 00 00	 call	 _rand
  0007e	99		 cdq
  0007f	f7 fe		 idiv	 esi

; 1827 : 	// ----
; 1828 : 	if( cX || cY )

  00081	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  00084	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00087	8b f2		 mov	 esi, edx
  00089	84 c0		 test	 al, al
  0008b	75 14		 jne	 SHORT $LN19@DropNewMon
  0008d	84 c9		 test	 cl, cl
  0008f	75 10		 jne	 SHORT $LN19@DropNewMon

; 1832 : 	}
; 1833 : 	else
; 1834 : 	{
; 1835 : 		X = lpObj->X;

  00091	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 1836 : 		Y = lpObj->Y;

  00098	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]
  0009f	eb 06		 jmp	 SHORT $LN40@DropNewMon
$LN19@DropNewMon:

; 1829 : 	{
; 1830 : 		X = cX;

  000a1	0f b6 d0	 movzx	 edx, al

; 1831 : 		Y = cY;

  000a4	0f b6 c1	 movzx	 eax, cl
$LN40@DropNewMon:

; 1837 : 	}
; 1838 : 	// ----
; 1839 : 	iLevel	= this->GetLevel(iDropItemNum);

  000a7	56		 push	 esi
  000a8	8b cb		 mov	 ecx, ebx
  000aa	89 45 08	 mov	 DWORD PTR _Y$[ebp], eax
  000ad	89 55 e8	 mov	 DWORD PTR _X$[ebp], edx
  000b0	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000b5	0f b6 c8	 movzx	 ecx, al

; 1840 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  000b8	8d 14 f3	 lea	 edx, DWORD PTR [ebx+esi*8]
  000bb	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000be	0f b6 90 1d 02
	00 00		 movzx	 edx, BYTE PTR [eax+541]
  000c5	89 4d 10	 mov	 DWORD PTR _iLevel$[ebp], ecx
  000c8	0f b6 88 1e 02
	00 00		 movzx	 ecx, BYTE PTR [eax+542]
  000cf	51		 push	 ecx
  000d0	52		 push	 edx
  000d1	89 45 14	 mov	 DWORD PTR tv357[ebp], eax
  000d4	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000d9	8b f0		 mov	 esi, eax
  000db	83 c4 08	 add	 esp, 8

; 1841 : 	// ----
; 1842 : 	if( iType == -1 )

  000de	83 fe ff	 cmp	 esi, -1
  000e1	75 0b		 jne	 SHORT $LN17@DropNewMon

; 1843 : 	{
; 1844 : 		return false;

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	33 c0		 xor	 eax, eax
  000e7	5b		 pop	 ebx

; 1912 : 	// ----
; 1913 : 	return true;
; 1914 : }

  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 10 00	 ret	 16			; 00000010H
$LN17@DropNewMon:

; 1845 : 	}
; 1846 : 	// ----
; 1847 : 	//if( this->BagObject[iDropItemNum].m_isSetItem )
; 1848 : 	//{
; 1849 : 	//		this->DropEventSetItem(aIndex, iType, btMapNumber, X, Y);
; 1850 : 	//		return true;
; 1851 : 	//}
; 1852 : 	// ----
; 1853 : 	if( this->BagObject[iDropItemNum].m_isskill )

  000ee	8b 45 14	 mov	 eax, DWORD PTR tv357[ebp]
  000f1	80 b8 21 02 00
	00 00		 cmp	 BYTE PTR [eax+545], 0
  000f8	74 07		 je	 SHORT $LN31@DropNewMon

; 1854 : 	{
; 1855 : 		iOption1 = true;

  000fa	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN31@DropNewMon:

; 1856 : 	}
; 1857 : 	// -----
; 1858 : 	if( this->BagObject[iDropItemNum].m_isluck )

  00101	80 b8 22 02 00
	00 00		 cmp	 BYTE PTR [eax+546], 0
  00108	74 21		 je	 SHORT $LN32@DropNewMon

; 1859 : 	{
; 1860 : 		iOption2 = 0;

  0010a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1861 : 		// ----
; 1862 : 		if( !(rand() % 2) )

  00111	e8 00 00 00 00	 call	 _rand
  00116	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0011b	79 05		 jns	 SHORT $LN38@DropNewMon
  0011d	48		 dec	 eax
  0011e	83 c8 fe	 or	 eax, -2			; fffffffeH
  00121	40		 inc	 eax
$LN38@DropNewMon:
  00122	75 07		 jne	 SHORT $LN32@DropNewMon

; 1863 : 		{
; 1864 : 			iOption2 = true;

  00124	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN32@DropNewMon:

; 1865 : 		}
; 1866 : 	}
; 1867 : 	// ----
; 1868 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  0012b	8b 45 14	 mov	 eax, DWORD PTR tv357[ebp]
  0012e	80 b8 23 02 00
	00 01		 cmp	 BYTE PTR [eax+547], 1
  00135	75 2b		 jne	 SHORT $LN34@DropNewMon

; 1869 : 	{
; 1870 : 		if( rand() % 5 >= 1 )

  00137	e8 00 00 00 00	 call	 _rand
  0013c	99		 cdq
  0013d	b9 05 00 00 00	 mov	 ecx, 5
  00142	f7 f9		 idiv	 ecx
  00144	83 fa 01	 cmp	 edx, 1
  00147	7c 12		 jl	 SHORT $LN12@DropNewMon

; 1871 : 		{
; 1872 : 			iOption3 = rand() % 3;

  00149	e8 00 00 00 00	 call	 _rand
  0014e	99		 cdq
  0014f	b9 03 00 00 00	 mov	 ecx, 3
  00154	f7 f9		 idiv	 ecx
  00156	89 55 fc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 1873 : 		}
; 1874 : 		else

  00159	eb 07		 jmp	 SHORT $LN34@DropNewMon
$LN12@DropNewMon:

; 1875 : 		{
; 1876 : 			iOption3 = 3;

  0015b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN34@DropNewMon:

; 1877 : 		}
; 1878 : 	}
; 1879 : 	// ----
; 1880 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  00162	8b 55 14	 mov	 edx, DWORD PTR tv357[ebp]
  00165	80 ba 24 02 00
	00 00		 cmp	 BYTE PTR [edx+548], 0
  0016c	74 10		 je	 SHORT $LN35@DropNewMon

; 1881 : 	{
; 1882 : 		iExOption	= NewOptionRand(0);

  0016e	6a 00		 push	 0
  00170	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  00175	0f b6 c0	 movzx	 eax, al
  00178	83 c4 04	 add	 esp, 4
  0017b	89 45 ec	 mov	 DWORD PTR _iExOption$[ebp], eax
$LN35@DropNewMon:

; 1883 : 		//iOption2	= false;
; 1884 : 		//iOption1	= true;
; 1885 : 		//iLevel		= 0;
; 1886 : 	}
; 1887 : 	// ----
; 1888 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  0017e	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  00184	74 10		 je	 SHORT $LN8@DropNewMon
  00186	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  0018c	74 08		 je	 SHORT $LN8@DropNewMon
  0018e	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  00194	75 10		 jne	 SHORT $LN36@DropNewMon
$LN8@DropNewMon:

; 1889 : 	{
; 1890 : 		iOption1	= false;

  00196	33 c0		 xor	 eax, eax
  00198	89 45 f0	 mov	 DWORD PTR _iOption1$[ebp], eax

; 1891 : 		iOption2	= false;

  0019b	89 45 f8	 mov	 DWORD PTR _iOption2$[ebp], eax

; 1892 : 		iOption3	= 0;

  0019e	89 45 fc	 mov	 DWORD PTR _iOption3$[ebp], eax

; 1893 : 		iLevel		= 0;

  001a1	89 45 10	 mov	 DWORD PTR _iLevel$[ebp], eax
  001a4	eb 02		 jmp	 SHORT $LN9@DropNewMon
$LN36@DropNewMon:
  001a6	33 c0		 xor	 eax, eax
$LN9@DropNewMon:

; 1894 : 	}
; 1895 : 	// ----
; 1896 : 	if( iType == 7238 || iType == 7239 )

  001a8	81 fe 46 1c 00
	00		 cmp	 esi, 7238		; 00001c46H
  001ae	74 30		 je	 SHORT $LN6@DropNewMon
  001b0	81 fe 47 1c 00
	00		 cmp	 esi, 7239		; 00001c47H
  001b6	74 28		 je	 SHORT $LN6@DropNewMon

; 1899 : 	}
; 1900 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  001b8	81 fe 55 1c 00
	00		 cmp	 esi, 7253		; 00001c55H
  001be	74 18		 je	 SHORT $LN3@DropNewMon
  001c0	81 fe 56 1c 00
	00		 cmp	 esi, 7254		; 00001c56H
  001c6	74 10		 je	 SHORT $LN3@DropNewMon
  001c8	81 fe 57 1c 00
	00		 cmp	 esi, 7255		; 00001c57H
  001ce	74 08		 je	 SHORT $LN3@DropNewMon

; 1901 : 	{
; 1902 : 		fDur = 10.0;
; 1903 : 	}
; 1904 : 	else if( iType == 7221 )

  001d0	81 fe 35 1c 00
	00		 cmp	 esi, 7221		; 00001c35H
  001d6	75 11		 jne	 SHORT $LN1@DropNewMon
$LN3@DropNewMon:

; 1905 : 	{
; 1906 : 		fDur = 10.0;

  001d8	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  001de	eb 06		 jmp	 SHORT $LN41@DropNewMon
$LN6@DropNewMon:

; 1897 : 	{
; 1898 : 		fDur = 50.0;

  001e0	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42480000
$LN41@DropNewMon:
  001e6	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropNewMon:

; 1907 : 	}
; 1908 : 	// ----
; 1909 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  001e9	8b 55 ec	 mov	 edx, DWORD PTR _iExOption$[ebp]
  001ec	d9 45 f4	 fld	 DWORD PTR _fDur$[ebp]
  001ef	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001f1	d9 7d 16	 fnstcw	 WORD PTR tv406[ebp]
  001f4	50		 push	 eax
  001f5	8b 45 fc	 mov	 eax, DWORD PTR _iOption3$[ebp]
  001f8	52		 push	 edx
  001f9	8b 55 f8	 mov	 edx, DWORD PTR _iOption2$[ebp]
  001fc	51		 push	 ecx
  001fd	50		 push	 eax
  001fe	8b 45 f0	 mov	 eax, DWORD PTR _iOption1$[ebp]
  00201	52		 push	 edx
  00202	50		 push	 eax
  00203	0f b7 45 16	 movzx	 eax, WORD PTR tv406[ebp]
  00207	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0020c	89 45 f4	 mov	 DWORD PTR tv403[ebp], eax
  0020f	d9 6d f4	 fldcw	 WORD PTR tv403[ebp]
  00212	db 5d f4	 fistp	 DWORD PTR tv401[ebp]
  00215	8a 55 f4	 mov	 dl, BYTE PTR tv401[ebp]
  00218	0f b6 c2	 movzx	 eax, dl
  0021b	8b 55 10	 mov	 edx, DWORD PTR _iLevel$[ebp]
  0021e	d9 6d 16	 fldcw	 WORD PTR tv406[ebp]
  00221	50		 push	 eax
  00222	8b 45 08	 mov	 eax, DWORD PTR _Y$[ebp]
  00225	52		 push	 edx
  00226	8b 55 e8	 mov	 edx, DWORD PTR _X$[ebp]
  00229	56		 push	 esi
  0022a	50		 push	 eax
  0022b	8b 45 0c	 mov	 eax, DWORD PTR _btMapNumber$[ebp]
  0022e	52		 push	 edx
  0022f	50		 push	 eax
  00230	51		 push	 ecx
  00231	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1910 : 	LogAddTD("[%s] [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1911 : 		this->GetEventName(), lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  00236	8b 4d ec	 mov	 ecx, DWORD PTR _iExOption$[ebp]
  00239	8b 55 fc	 mov	 edx, DWORD PTR _iOption3$[ebp]
  0023c	8b 45 f8	 mov	 eax, DWORD PTR _iOption2$[ebp]
  0023f	83 c4 34	 add	 esp, 52			; 00000034H
  00242	51		 push	 ecx
  00243	8b 4d f0	 mov	 ecx, DWORD PTR _iOption1$[ebp]
  00246	52		 push	 edx
  00247	8b 55 10	 mov	 edx, DWORD PTR _iLevel$[ebp]
  0024a	50		 push	 eax
  0024b	8b 45 08	 mov	 eax, DWORD PTR _Y$[ebp]
  0024e	51		 push	 ecx
  0024f	8b 4d e8	 mov	 ecx, DWORD PTR _X$[ebp]
  00252	52		 push	 edx
  00253	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  00257	56		 push	 esi
  00258	6b f6 70	 imul	 esi, 112		; 00000070H
  0025b	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00261	56		 push	 esi
  00262	50		 push	 eax
  00263	51		 push	 ecx
  00264	52		 push	 edx
  00265	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00268	50		 push	 eax
  00269	83 c7 6c	 add	 edi, 108		; 0000006cH
  0026c	57		 push	 edi
  0026d	8b cb		 mov	 ecx, ebx
  0026f	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  00274	50		 push	 eax
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00280	83 c4 38	 add	 esp, 56			; 00000038H
  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	b8 01 00 00 00	 mov	 eax, 1
  0028a	5b		 pop	 ebx

; 1912 : 	// ----
; 1913 : 	return true;
; 1914 : }

  0028b	8b e5		 mov	 esp, ebp
  0028d	5d		 pop	 ebp
  0028e	c2 10 00	 ret	 16			; 00000010H
$LN21@DropNewMon:

; 1818 : 	{
; 1819 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00291	0f b6 4d 14	 movzx	 ecx, BYTE PTR _cY$[ebp]
  00295	0f b6 55 10	 movzx	 edx, BYTE PTR _cX$[ebp]
  00299	8b 83 10 01 00
	00		 mov	 eax, DWORD PTR [ebx+272]
  0029f	51		 push	 ecx
  002a0	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  002a7	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  002ad	52		 push	 edx
  002ae	50		 push	 eax
  002af	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  002b5	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1820 : 		LogAddTD("[%s] DropGroupMonsterItem [%s][%s] [%d Zen]",
; 1821 : 			this->GetEventName(), lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  002ba	8b 8b 10 01 00
	00		 mov	 ecx, DWORD PTR [ebx+272]
  002c0	51		 push	 ecx
  002c1	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  002c4	52		 push	 edx
  002c5	83 c7 6c	 add	 edi, 108		; 0000006cH
  002c8	57		 push	 edi
  002c9	8b cb		 mov	 ecx, ebx
  002cb	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  002d0	50		 push	 eax
  002d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@
  002d6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002dc	83 c4 14	 add	 esp, 20			; 00000014H
$LN39@DropNewMon:

; 1822 : 		// ----
; 1823 : 		return true;

  002df	5f		 pop	 edi
  002e0	5e		 pop	 esi
  002e1	b8 01 00 00 00	 mov	 eax, 1
  002e6	5b		 pop	 ebx

; 1912 : 	// ----
; 1913 : 	return true;
; 1914 : }

  002e7	8b e5		 mov	 esp, ebp
  002e9	5d		 pop	 ebp
  002ea	c2 10 00	 ret	 16			; 00000010H
?DropNewMonsterItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropNewMonsterItem
_TEXT	ENDS
PUBLIC	?DropBoxOfGRPColorItem@CProbabilityItemBag@@QAEHHEEE@Z ; CProbabilityItemBag::DropBoxOfGRPColorItem
; Function compile flags: /Ogtp
;	COMDAT ?DropBoxOfGRPColorItem@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_X$ = -24						; size = 4
_iExOption$ = -20					; size = 4
_iOption1$ = -16					; size = 4
tv403 = -12						; size = 4
tv401 = -12						; size = 4
_fDur$ = -12						; size = 4
_iOption2$ = -8						; size = 4
_iOption3$ = -4						; size = 4
_Y$ = 8							; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_iLevel$ = 16						; size = 4
_cX$ = 16						; size = 1
tv357 = 20						; size = 4
_cY$ = 20						; size = 1
tv406 = 22						; size = 2
?DropBoxOfGRPColorItem@CProbabilityItemBag@@QAEHHEEE@Z PROC ; CProbabilityItemBag::DropBoxOfGRPColorItem, COMDAT
; _this$ = ecx

; 1919 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx

; 1920 : 	if( !this->m_bLoad )

  0000a	33 f6		 xor	 esi, esi
  0000c	39 73 04	 cmp	 DWORD PTR [ebx+4], esi
  0000f	75 0a		 jne	 SHORT $LN24@DropBoxOfG

; 1921 : 	{
; 1922 : 		return false;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 2041 : 	// ----
; 2042 : 	return true;
; 2043 : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN24@DropBoxOfG:

; 1923 : 	}
; 1924 : 	// ----
; 1925 : 	float fDur			= 0.0;

  0001b	d9 ee		 fldz
  0001d	57		 push	 edi

; 1926 : 	int iType			= 0;
; 1927 : 	int iLevel			= 0;
; 1928 : 	int X				= 0;
; 1929 : 	int Y				= 0;
; 1930 : 	int iOption1		= 0;
; 1931 : 	int iOption2		= 0;
; 1932 : 	int iOption3		= 0;
; 1933 : 	int nDropItemRate	= 0;
; 1934 : 	int nRateCnt		= 0;
; 1935 : 	int iExOption		= 0;
; 1936 : 	// ----
; 1937 : 	LPOBJ lpObj		= &gObj[aIndex];

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00021	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
  00024	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0002a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	89 75 f0	 mov	 DWORD PTR _iOption1$[ebp], esi
  00033	89 75 f8	 mov	 DWORD PTR _iOption2$[ebp], esi
  00036	89 75 fc	 mov	 DWORD PTR _iOption3$[ebp], esi
  00039	89 75 ec	 mov	 DWORD PTR _iExOption$[ebp], esi

; 1938 : 	// ----
; 1939 : 	if( this->GetBagCount() <= 0 )

  0003c	39 b3 20 01 00
	00		 cmp	 DWORD PTR [ebx+288], esi

; 1940 : 	{
; 1941 : 		return true;

  00042	0f 8e 97 02 00
	00		 jle	 $LN39@DropBoxOfG

; 1942 : 	}
; 1943 : 	// ----
; 1944 : 	int iDropItemRate = GetLargeRand() % 1000000;

  00048	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0004d	33 d2		 xor	 edx, edx
  0004f	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00054	f7 f1		 div	 ecx

; 1945 : 	// ----
; 1946 : 	if ( !this->m_iRateKindCount || iDropItemRate < 1000000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1] )

  00056	8b 83 04 08 00
	00		 mov	 eax, DWORD PTR [ebx+2052]
  0005c	3b c6		 cmp	 eax, esi
  0005e	0f 84 2d 02 00
	00		 je	 $LN21@DropBoxOfG
  00064	2b 8c 83 60 07
	00 00		 sub	 ecx, DWORD PTR [ebx+eax*4+1888]
  0006b	3b d1		 cmp	 edx, ecx
  0006d	0f 8c 1e 02 00
	00		 jl	 $LN21@DropBoxOfG

; 1953 : 	}
; 1954 : 	// ----
; 1955 : 	int iDropItemNum = rand() % this->GetBagCount();// this->GetDropItemNumberEx(iDropItemRate);

  00073	8b b3 20 01 00
	00		 mov	 esi, DWORD PTR [ebx+288]
  00079	e8 00 00 00 00	 call	 _rand
  0007e	99		 cdq
  0007f	f7 fe		 idiv	 esi

; 1956 : 	// ----
; 1957 : 	if( cX || cY )

  00081	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  00084	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  00087	8b f2		 mov	 esi, edx
  00089	84 c0		 test	 al, al
  0008b	75 14		 jne	 SHORT $LN19@DropBoxOfG
  0008d	84 c9		 test	 cl, cl
  0008f	75 10		 jne	 SHORT $LN19@DropBoxOfG

; 1961 : 	}
; 1962 : 	else
; 1963 : 	{
; 1964 : 		X = lpObj->X;

  00091	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 1965 : 		Y = lpObj->Y;

  00098	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]
  0009f	eb 06		 jmp	 SHORT $LN40@DropBoxOfG
$LN19@DropBoxOfG:

; 1958 : 	{
; 1959 : 		X = cX;

  000a1	0f b6 d0	 movzx	 edx, al

; 1960 : 		Y = cY;

  000a4	0f b6 c1	 movzx	 eax, cl
$LN40@DropBoxOfG:

; 1966 : 	}
; 1967 : 	// ----
; 1968 : 	iLevel	= this->GetLevel(iDropItemNum);

  000a7	56		 push	 esi
  000a8	8b cb		 mov	 ecx, ebx
  000aa	89 45 08	 mov	 DWORD PTR _Y$[ebp], eax
  000ad	89 55 e8	 mov	 DWORD PTR _X$[ebp], edx
  000b0	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000b5	0f b6 c8	 movzx	 ecx, al

; 1969 : 	iType	= ItemGetNumberMake(this->BagObject[iDropItemNum].m_type, this->BagObject[iDropItemNum].m_index);

  000b8	8d 14 f3	 lea	 edx, DWORD PTR [ebx+esi*8]
  000bb	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000be	0f b6 90 1d 02
	00 00		 movzx	 edx, BYTE PTR [eax+541]
  000c5	89 4d 10	 mov	 DWORD PTR _iLevel$[ebp], ecx
  000c8	0f b6 88 1e 02
	00 00		 movzx	 ecx, BYTE PTR [eax+542]
  000cf	51		 push	 ecx
  000d0	52		 push	 edx
  000d1	89 45 14	 mov	 DWORD PTR tv357[ebp], eax
  000d4	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000d9	8b f0		 mov	 esi, eax
  000db	83 c4 08	 add	 esp, 8

; 1970 : 	// ----
; 1971 : 	if( iType == -1 )

  000de	83 fe ff	 cmp	 esi, -1
  000e1	75 0b		 jne	 SHORT $LN17@DropBoxOfG

; 1972 : 	{
; 1973 : 		return false;

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	33 c0		 xor	 eax, eax
  000e7	5b		 pop	 ebx

; 2041 : 	// ----
; 2042 : 	return true;
; 2043 : }

  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 10 00	 ret	 16			; 00000010H
$LN17@DropBoxOfG:

; 1974 : 	}
; 1975 : 	// ----
; 1976 : 	//if( this->BagObject[iDropItemNum].m_isSetItem )
; 1977 : 	//{
; 1978 : 	//	this->DropEventSetItem(aIndex, iType, btMapNumber, X, Y);
; 1979 : 	//	return true;
; 1980 : 	//}
; 1981 : 	// ----
; 1982 : 	if( this->BagObject[iDropItemNum].m_isskill )

  000ee	8b 45 14	 mov	 eax, DWORD PTR tv357[ebp]
  000f1	80 b8 21 02 00
	00 00		 cmp	 BYTE PTR [eax+545], 0
  000f8	74 07		 je	 SHORT $LN31@DropBoxOfG

; 1983 : 	{
; 1984 : 		iOption1 = true;

  000fa	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _iOption1$[ebp], 1
$LN31@DropBoxOfG:

; 1985 : 	}
; 1986 : 	// -----
; 1987 : 	if( this->BagObject[iDropItemNum].m_isluck )

  00101	80 b8 22 02 00
	00 00		 cmp	 BYTE PTR [eax+546], 0
  00108	74 21		 je	 SHORT $LN32@DropBoxOfG

; 1988 : 	{
; 1989 : 		iOption2 = 0;

  0010a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 0

; 1990 : 		// ----
; 1991 : 		if( !(rand() % 2) )

  00111	e8 00 00 00 00	 call	 _rand
  00116	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0011b	79 05		 jns	 SHORT $LN38@DropBoxOfG
  0011d	48		 dec	 eax
  0011e	83 c8 fe	 or	 eax, -2			; fffffffeH
  00121	40		 inc	 eax
$LN38@DropBoxOfG:
  00122	75 07		 jne	 SHORT $LN32@DropBoxOfG

; 1992 : 		{
; 1993 : 			iOption2 = true;

  00124	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _iOption2$[ebp], 1
$LN32@DropBoxOfG:

; 1994 : 		}
; 1995 : 	}
; 1996 : 	// ----
; 1997 : 	if( this->BagObject[iDropItemNum].m_isoption == 1 )

  0012b	8b 45 14	 mov	 eax, DWORD PTR tv357[ebp]
  0012e	80 b8 23 02 00
	00 01		 cmp	 BYTE PTR [eax+547], 1
  00135	75 2b		 jne	 SHORT $LN34@DropBoxOfG

; 1998 : 	{
; 1999 : 		if( rand() % 5 >= 1 )

  00137	e8 00 00 00 00	 call	 _rand
  0013c	99		 cdq
  0013d	b9 05 00 00 00	 mov	 ecx, 5
  00142	f7 f9		 idiv	 ecx
  00144	83 fa 01	 cmp	 edx, 1
  00147	7c 12		 jl	 SHORT $LN12@DropBoxOfG

; 2000 : 		{
; 2001 : 			iOption3 = rand() % 3;

  00149	e8 00 00 00 00	 call	 _rand
  0014e	99		 cdq
  0014f	b9 03 00 00 00	 mov	 ecx, 3
  00154	f7 f9		 idiv	 ecx
  00156	89 55 fc	 mov	 DWORD PTR _iOption3$[ebp], edx

; 2002 : 		}
; 2003 : 		else

  00159	eb 07		 jmp	 SHORT $LN34@DropBoxOfG
$LN12@DropBoxOfG:

; 2004 : 		{
; 2005 : 			iOption3 = 3;

  0015b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _iOption3$[ebp], 3
$LN34@DropBoxOfG:

; 2006 : 		}
; 2007 : 	}
; 2008 : 	// ----
; 2009 : 	if( this->BagObject[iDropItemNum].m_isexitem )	//fixed

  00162	8b 55 14	 mov	 edx, DWORD PTR tv357[ebp]
  00165	80 ba 24 02 00
	00 00		 cmp	 BYTE PTR [edx+548], 0
  0016c	74 10		 je	 SHORT $LN35@DropBoxOfG

; 2010 : 	{
; 2011 : 		iExOption	= NewOptionRand(0);

  0016e	6a 00		 push	 0
  00170	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  00175	0f b6 c0	 movzx	 eax, al
  00178	83 c4 04	 add	 esp, 4
  0017b	89 45 ec	 mov	 DWORD PTR _iExOption$[ebp], eax
$LN35@DropBoxOfG:

; 2012 : 		//iOption2	= false;
; 2013 : 		//iOption1	= true;
; 2014 : 		//iLevel		= 0;
; 2015 : 	}
; 2016 : 	// ----
; 2017 : 	if( iType == ITEMGET(12, 15) || iType == ITEMGET(14, 13) || iType == ITEMGET(14, 14) )

  0017e	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  00184	74 10		 je	 SHORT $LN8@DropBoxOfG
  00186	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  0018c	74 08		 je	 SHORT $LN8@DropBoxOfG
  0018e	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  00194	75 10		 jne	 SHORT $LN36@DropBoxOfG
$LN8@DropBoxOfG:

; 2018 : 	{
; 2019 : 		iOption1	= false;

  00196	33 c0		 xor	 eax, eax
  00198	89 45 f0	 mov	 DWORD PTR _iOption1$[ebp], eax

; 2020 : 		iOption2	= false;

  0019b	89 45 f8	 mov	 DWORD PTR _iOption2$[ebp], eax

; 2021 : 		iOption3	= 0;

  0019e	89 45 fc	 mov	 DWORD PTR _iOption3$[ebp], eax

; 2022 : 		iLevel		= 0;

  001a1	89 45 10	 mov	 DWORD PTR _iLevel$[ebp], eax
  001a4	eb 02		 jmp	 SHORT $LN9@DropBoxOfG
$LN36@DropBoxOfG:
  001a6	33 c0		 xor	 eax, eax
$LN9@DropBoxOfG:

; 2023 : 	}
; 2024 : 	// ----
; 2025 : 	if( iType == 7238 || iType == 7239 )

  001a8	81 fe 46 1c 00
	00		 cmp	 esi, 7238		; 00001c46H
  001ae	74 30		 je	 SHORT $LN6@DropBoxOfG
  001b0	81 fe 47 1c 00
	00		 cmp	 esi, 7239		; 00001c47H
  001b6	74 28		 je	 SHORT $LN6@DropBoxOfG

; 2028 : 	}
; 2029 : 	else if( iType == 7253 || iType == 7254 || iType == 7255 )

  001b8	81 fe 55 1c 00
	00		 cmp	 esi, 7253		; 00001c55H
  001be	74 18		 je	 SHORT $LN3@DropBoxOfG
  001c0	81 fe 56 1c 00
	00		 cmp	 esi, 7254		; 00001c56H
  001c6	74 10		 je	 SHORT $LN3@DropBoxOfG
  001c8	81 fe 57 1c 00
	00		 cmp	 esi, 7255		; 00001c57H
  001ce	74 08		 je	 SHORT $LN3@DropBoxOfG

; 2030 : 	{
; 2031 : 		fDur = 10.0;
; 2032 : 	}
; 2033 : 	else if( iType == 7221 )

  001d0	81 fe 35 1c 00
	00		 cmp	 esi, 7221		; 00001c35H
  001d6	75 11		 jne	 SHORT $LN1@DropBoxOfG
$LN3@DropBoxOfG:

; 2034 : 	{
; 2035 : 		fDur = 10.0;

  001d8	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41200000
  001de	eb 06		 jmp	 SHORT $LN41@DropBoxOfG
$LN6@DropBoxOfG:

; 2026 : 	{
; 2027 : 		fDur = 50.0;

  001e0	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42480000
$LN41@DropBoxOfG:
  001e6	d9 5d f4	 fstp	 DWORD PTR _fDur$[ebp]
$LN1@DropBoxOfG:

; 2036 : 	}
; 2037 : 	// ----
; 2038 : 	ItemSerialCreateSend(lpObj->m_Index, btMapNumber, X, Y, iType, iLevel, fDur, iOption1, iOption2, iOption3, lpObj->m_Index, iExOption, 0);

  001e9	8b 55 ec	 mov	 edx, DWORD PTR _iExOption$[ebp]
  001ec	d9 45 f4	 fld	 DWORD PTR _fDur$[ebp]
  001ef	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001f1	d9 7d 16	 fnstcw	 WORD PTR tv406[ebp]
  001f4	50		 push	 eax
  001f5	8b 45 fc	 mov	 eax, DWORD PTR _iOption3$[ebp]
  001f8	52		 push	 edx
  001f9	8b 55 f8	 mov	 edx, DWORD PTR _iOption2$[ebp]
  001fc	51		 push	 ecx
  001fd	50		 push	 eax
  001fe	8b 45 f0	 mov	 eax, DWORD PTR _iOption1$[ebp]
  00201	52		 push	 edx
  00202	50		 push	 eax
  00203	0f b7 45 16	 movzx	 eax, WORD PTR tv406[ebp]
  00207	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0020c	89 45 f4	 mov	 DWORD PTR tv403[ebp], eax
  0020f	d9 6d f4	 fldcw	 WORD PTR tv403[ebp]
  00212	db 5d f4	 fistp	 DWORD PTR tv401[ebp]
  00215	8a 55 f4	 mov	 dl, BYTE PTR tv401[ebp]
  00218	0f b6 c2	 movzx	 eax, dl
  0021b	8b 55 10	 mov	 edx, DWORD PTR _iLevel$[ebp]
  0021e	d9 6d 16	 fldcw	 WORD PTR tv406[ebp]
  00221	50		 push	 eax
  00222	8b 45 08	 mov	 eax, DWORD PTR _Y$[ebp]
  00225	52		 push	 edx
  00226	8b 55 e8	 mov	 edx, DWORD PTR _X$[ebp]
  00229	56		 push	 esi
  0022a	50		 push	 eax
  0022b	8b 45 0c	 mov	 eax, DWORD PTR _btMapNumber$[ebp]
  0022e	52		 push	 edx
  0022f	50		 push	 eax
  00230	51		 push	 ecx
  00231	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 2039 : 	LogAddTD("[%s] [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 2040 : 		this->GetEventName(), lpObj->AccountID, lpObj->Name, btMapNumber, X, Y, ItemAttribute[iType].Name, iType, iLevel, iOption1, iOption2, iOption3, iExOption);

  00236	8b 4d ec	 mov	 ecx, DWORD PTR _iExOption$[ebp]
  00239	8b 55 fc	 mov	 edx, DWORD PTR _iOption3$[ebp]
  0023c	8b 45 f8	 mov	 eax, DWORD PTR _iOption2$[ebp]
  0023f	83 c4 34	 add	 esp, 52			; 00000034H
  00242	51		 push	 ecx
  00243	8b 4d f0	 mov	 ecx, DWORD PTR _iOption1$[ebp]
  00246	52		 push	 edx
  00247	8b 55 10	 mov	 edx, DWORD PTR _iLevel$[ebp]
  0024a	50		 push	 eax
  0024b	8b 45 08	 mov	 eax, DWORD PTR _Y$[ebp]
  0024e	51		 push	 ecx
  0024f	8b 4d e8	 mov	 ecx, DWORD PTR _X$[ebp]
  00252	52		 push	 edx
  00253	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  00257	56		 push	 esi
  00258	6b f6 70	 imul	 esi, 112		; 00000070H
  0025b	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00261	56		 push	 esi
  00262	50		 push	 eax
  00263	51		 push	 ecx
  00264	52		 push	 edx
  00265	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  00268	50		 push	 eax
  00269	83 c7 6c	 add	 edi, 108		; 0000006cH
  0026c	57		 push	 edi
  0026d	8b cb		 mov	 ecx, ebx
  0026f	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  00274	50		 push	 eax
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OHELLGH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CFd?1?$CFd?$CJ?5Item@
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00280	83 c4 38	 add	 esp, 56			; 00000038H
  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	b8 01 00 00 00	 mov	 eax, 1
  0028a	5b		 pop	 ebx

; 2041 : 	// ----
; 2042 : 	return true;
; 2043 : }

  0028b	8b e5		 mov	 esp, ebp
  0028d	5d		 pop	 ebp
  0028e	c2 10 00	 ret	 16			; 00000010H
$LN21@DropBoxOfG:

; 1947 : 	{
; 1948 : 		MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  00291	0f b6 4d 14	 movzx	 ecx, BYTE PTR _cY$[ebp]
  00295	0f b6 55 10	 movzx	 edx, BYTE PTR _cX$[ebp]
  00299	8b 83 10 01 00
	00		 mov	 eax, DWORD PTR [ebx+272]
  0029f	51		 push	 ecx
  002a0	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  002a7	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  002ad	52		 push	 edx
  002ae	50		 push	 eax
  002af	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  002b5	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1949 : 		LogAddTD("[%s] DropGroupMonsterItem [%s][%s] [%d Zen]",
; 1950 : 			this->GetEventName(), lpObj->AccountID, lpObj->Name, this->m_iDropZen);

  002ba	8b 8b 10 01 00
	00		 mov	 ecx, DWORD PTR [ebx+272]
  002c0	51		 push	 ecx
  002c1	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  002c4	52		 push	 edx
  002c5	83 c7 6c	 add	 edi, 108		; 0000006cH
  002c8	57		 push	 edi
  002c9	8b cb		 mov	 ecx, ebx
  002cb	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  002d0	50		 push	 eax
  002d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CHPEKLBL@?$FL?$CFs?$FN?5DropGroupMonsterItem?5?$FL?$CFs?$FN?$FL?$CF@
  002d6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002dc	83 c4 14	 add	 esp, 20			; 00000014H
$LN39@DropBoxOfG:

; 1951 : 		// ----
; 1952 : 		return true;

  002df	5f		 pop	 edi
  002e0	5e		 pop	 esi
  002e1	b8 01 00 00 00	 mov	 eax, 1
  002e6	5b		 pop	 ebx

; 2041 : 	// ----
; 2042 : 	return true;
; 2043 : }

  002e7	8b e5		 mov	 esp, ebp
  002e9	5d		 pop	 ebp
  002ea	c2 10 00	 ret	 16			; 00000010H
?DropBoxOfGRPColorItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP ; CProbabilityItemBag::DropBoxOfGRPColorItem
_TEXT	ENDS
PUBLIC	??0CItemBagDropMapInfo@@QAE@XZ			; CItemBagDropMapInfo::CItemBagDropMapInfo
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\itembagzt.h
;	COMDAT ??0CItemBagDropMapInfo@@QAE@XZ
_TEXT	SEGMENT
??0CItemBagDropMapInfo@@QAE@XZ PROC			; CItemBagDropMapInfo::CItemBagDropMapInfo, COMDAT
; _this$ = ecx

; 19   : 	CItemBagDropMapInfo()

  00000	8b c1		 mov	 eax, ecx

; 20   : 	{
; 21   : 		this->Init();

  00002	32 c9		 xor	 cl, cl
  00004	66 c7 00 00 00	 mov	 WORD PTR [eax], 0
  00009	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 22   : 	};

  0000c	c3		 ret	 0
??0CItemBagDropMapInfo@@QAE@XZ ENDP			; CItemBagDropMapInfo::CItemBagDropMapInfo
_TEXT	ENDS
PUBLIC	??0CProbabilityItemBag@@QAE@XZ			; CProbabilityItemBag::CProbabilityItemBag
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\probabilityitembag.cpp
;	COMDAT ??0CProbabilityItemBag@@QAE@XZ
_TEXT	SEGMENT
??0CProbabilityItemBag@@QAE@XZ PROC			; CProbabilityItemBag::CProbabilityItemBag, COMDAT
; _this$ = ecx

; 17   : {

  00000	53		 push	 ebx
  00001	8b c1		 mov	 eax, ecx
  00003	56		 push	 esi
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProbabilityItemBag@@6B@
  0000a	8d 90 24 01 00
	00		 lea	 edx, DWORD PTR [eax+292]
  00010	be 52 00 00 00	 mov	 esi, 82			; 00000052H
  00015	32 db		 xor	 bl, bl
$LL4@CProbabili:
  00017	88 1a		 mov	 BYTE PTR [edx], bl
  00019	88 5a 01	 mov	 BYTE PTR [edx+1], bl
  0001c	88 5a 02	 mov	 BYTE PTR [edx+2], bl
  0001f	83 c2 03	 add	 edx, 3
  00022	4e		 dec	 esi
  00023	79 f2		 jns	 SHORT $LL4@CProbabili
  00025	8d 90 1d 02 00
	00		 lea	 edx, DWORD PTR [eax+541]
  0002b	be 95 00 00 00	 mov	 esi, 149		; 00000095H
$LL12@CProbabili:
  00030	88 1a		 mov	 BYTE PTR [edx], bl
  00032	88 5a 01	 mov	 BYTE PTR [edx+1], bl
  00035	88 5a 02	 mov	 BYTE PTR [edx+2], bl
  00038	88 5a 03	 mov	 BYTE PTR [edx+3], bl
  0003b	88 5a 04	 mov	 BYTE PTR [edx+4], bl
  0003e	88 5a 05	 mov	 BYTE PTR [edx+5], bl
  00041	88 5a 06	 mov	 BYTE PTR [edx+6], bl
  00044	88 5a 07	 mov	 BYTE PTR [edx+7], bl
  00047	88 5a 08	 mov	 BYTE PTR [edx+8], bl
  0004a	83 c2 09	 add	 edx, 9
  0004d	4e		 dec	 esi
  0004e	79 e0		 jns	 SHORT $LL12@CProbabili

; 18   : 	return;
; 19   : }

  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	c3		 ret	 0
??0CProbabilityItemBag@@QAE@XZ ENDP			; CProbabilityItemBag::CProbabilityItemBag
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCProbabilityItemBag@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCProbabilityItemBag@@UAEPAXI@Z PROC			; CProbabilityItemBag::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CProbabilityItemBag@@UAE@XZ ; CProbabilityItemBag::~CProbabilityItemBag
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCProbabilityItemBag@@UAEPAXI@Z ENDP			; CProbabilityItemBag::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Init@CProbabilityItemBag@@QAEXPAD@Z		; CProbabilityItemBag::Init
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
; Function compile flags: /Ogtp
;	COMDAT ?Init@CProbabilityItemBag@@QAEXPAD@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
?Init@CProbabilityItemBag@@QAEXPAD@Z PROC		; CProbabilityItemBag::Init, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : 	this->m_bLoad = FALSE;

  00003	33 c0		 xor	 eax, eax
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 29   : 	this->m_sEventName[0] = 0;

  0000b	88 46 08	 mov	 BYTE PTR [esi+8], al

; 30   : 	this->m_iEventItemType = -1;
; 31   : 	this->m_iEventItemLevel = 0;

  0000e	89 86 0c 01 00
	00		 mov	 DWORD PTR [esi+268], eax

; 32   : 	this->m_iDropZen = 0;

  00014	89 86 10 01 00
	00		 mov	 DWORD PTR [esi+272], eax

; 33   : 	this->m_iEventItemDropRate = 0;

  0001a	89 86 14 01 00
	00		 mov	 DWORD PTR [esi+276], eax

; 34   : 	this->m_iItemDropRate = 0;

  00020	89 86 18 01 00
	00		 mov	 DWORD PTR [esi+280], eax

; 35   : 	this->m_iExItemDropRate = 0;

  00026	89 86 1c 01 00
	00		 mov	 DWORD PTR [esi+284], eax

; 36   : 	this->m_iBagObjectCount = 0;

  0002c	89 86 20 01 00
	00		 mov	 DWORD PTR [esi+288], eax

; 37   : 	this->m_iRateKindCount = 0;

  00032	89 86 04 08 00
	00		 mov	 DWORD PTR [esi+2052], eax

; 38   : 
; 39   : 	this->LoadItem(gDirPath.GetNewPath(name));

  00038	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0003b	50		 push	 eax
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00041	c7 86 08 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+264], -1
  0004b	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00050	50		 push	 eax
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?LoadItem@CProbabilityItemBag@@QAEXPAD@Z ; CProbabilityItemBag::LoadItem
  00058	5e		 pop	 esi

; 40   : }

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Init@CProbabilityItemBag@@QAEXPAD@Z ENDP		; CProbabilityItemBag::Init
_TEXT	ENDS
PUBLIC	?DropItem@CProbabilityItemBag@@QAEHHEEE@Z	; CProbabilityItemBag::DropItem
; Function compile flags: /Ogtp
;	COMDAT ?DropItem@CProbabilityItemBag@@QAEHHEEE@Z
_TEXT	SEGMENT
_loc16$ = -32						; size = 4
_dur$ = -28						; size = 4
_loc12$ = -24						; size = 4
_x$ = -20						; size = 4
_y$ = -16						; size = 4
_Option1$ = -12						; size = 4
_Option2$ = -8						; size = 4
_Option3$ = -4						; size = 4
tv419 = 8						; size = 4
tv416 = 8						; size = 4
_aIndex$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_level$ = 16						; size = 4
_cX$ = 16						; size = 1
tv356 = 20						; size = 4
_cY$ = 20						; size = 1
tv422 = 22						; size = 2
?DropItem@CProbabilityItemBag@@QAEHHEEE@Z PROC		; CProbabilityItemBag::DropItem, COMDAT
; _this$ = ecx

; 1025 : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx

; 1026 : 	if ( this->m_bLoad == FALSE )

  0000a	33 f6		 xor	 esi, esi
  0000c	39 73 04	 cmp	 DWORD PTR [ebx+4], esi
  0000f	75 0a		 jne	 SHORT $LN19@DropItem@2

; 1027 : 		return FALSE;

  00011	5e		 pop	 esi
  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 1148 : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
$LN19@DropItem@2:

; 1028 : 
; 1029 : 	float dur = 0;

  0001b	d9 ee		 fldz
  0001d	57		 push	 edi

; 1030 : 	int type = 0;
; 1031 : 	int level = 0;
; 1032 : 	int x = 0;
; 1033 : 	int y = 0;
; 1034 : 	int Option1 = 0;
; 1035 : 	int Option2 = 0;
; 1036 : 	int Option3 = 0;
; 1037 : 	int DropItemNum = 0;
; 1038 : 	int ExOption = 0;
; 1039 : 	int loc12 = 0;
; 1040 : 	LPOBJ lpObj = &gObj[aIndex];

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00021	d9 5d e4	 fstp	 DWORD PTR _dur$[ebp]
  00024	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0002a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	89 75 f4	 mov	 DWORD PTR _Option1$[ebp], esi
  00033	89 75 f8	 mov	 DWORD PTR _Option2$[ebp], esi
  00036	89 75 fc	 mov	 DWORD PTR _Option3$[ebp], esi
  00039	89 75 e8	 mov	 DWORD PTR _loc12$[ebp], esi

; 1041 : 	int loc14;
; 1042 : 	int loc15;
; 1043 : 	int loc16;
; 1044 : 
; 1045 : 	if ( this->GetBagCount() > 0 )

  0003c	39 b3 20 01 00
	00		 cmp	 DWORD PTR [ebx+288], esi
  00042	0f 8e c4 00 00
	00		 jle	 $LN18@DropItem@2

; 1046 : 	{
; 1047 : 		loc14 = rand()%10000;

  00048	e8 00 00 00 00	 call	 _rand
  0004d	99		 cdq
  0004e	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00053	f7 f9		 idiv	 ecx

; 1048 : 		if ( this->m_iRateKindCount == 0 || loc14 < 10000 - this->m_iEventItemDropRateZt[this->m_iRateKindCount-1])

  00055	8b 83 04 08 00
	00		 mov	 eax, DWORD PTR [ebx+2052]
  0005b	3b c6		 cmp	 eax, esi
  0005d	0f 84 8c 02 00
	00		 je	 $LN16@DropItem@2
  00063	2b 8c 83 60 07
	00 00		 sub	 ecx, DWORD PTR [ebx+eax*4+1888]
  0006a	3b d1		 cmp	 edx, ecx
  0006c	0f 8c 7d 02 00
	00		 jl	 $LN16@DropItem@2

; 1053 : 		}
; 1054 : 			
; 1055 : 		loc15 = this->m_iRateKindCount;
; 1056 : 		loc16 = this->SortItem(loc14);

  00072	52		 push	 edx
  00073	8b cb		 mov	 ecx, ebx
  00075	e8 00 00 00 00	 call	 ?SortItem@CProbabilityItemBag@@QAEHH@Z ; CProbabilityItemBag::SortItem

; 1057 : 
; 1058 : 		if ( cX == 0 && cY == 0 )

  0007a	8a 4d 14	 mov	 cl, BYTE PTR _cY$[ebp]
  0007d	8b f0		 mov	 esi, eax
  0007f	8a 45 10	 mov	 al, BYTE PTR _cX$[ebp]
  00082	89 75 e0	 mov	 DWORD PTR _loc16$[ebp], esi
  00085	84 c0		 test	 al, al
  00087	75 14		 jne	 SHORT $LN15@DropItem@2
  00089	84 c9		 test	 cl, cl
  0008b	75 10		 jne	 SHORT $LN15@DropItem@2

; 1059 : 		{
; 1060 : 			x = lpObj->X;

  0008d	0f bf 97 44 01
	00 00		 movsx	 edx, WORD PTR [edi+324]

; 1061 : 			y = lpObj->Y;

  00094	0f bf 87 46 01
	00 00		 movsx	 eax, WORD PTR [edi+326]

; 1062 : 		}
; 1063 : 		else

  0009b	eb 06		 jmp	 SHORT $LN32@DropItem@2
$LN15@DropItem@2:

; 1064 : 		{
; 1065 : 			x = cX;

  0009d	0f b6 d0	 movzx	 edx, al

; 1066 : 			y = cY;

  000a0	0f b6 c1	 movzx	 eax, cl
$LN32@DropItem@2:

; 1067 : 		}
; 1068 : 
; 1069 : 		level = this->GetLevel(loc16);

  000a3	56		 push	 esi
  000a4	8b cb		 mov	 ecx, ebx
  000a6	89 45 f0	 mov	 DWORD PTR _y$[ebp], eax
  000a9	89 55 ec	 mov	 DWORD PTR _x$[ebp], edx
  000ac	e8 00 00 00 00	 call	 ?GetLevel@CProbabilityItemBag@@AAEEH@Z ; CProbabilityItemBag::GetLevel
  000b1	0f b6 c8	 movzx	 ecx, al

; 1070 : 		type = ItemGetNumberMake(this->BagObject[loc16].m_type, this->BagObject[loc16].m_index);

  000b4	8d 14 f3	 lea	 edx, DWORD PTR [ebx+esi*8]
  000b7	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000ba	0f b6 90 1d 02
	00 00		 movzx	 edx, BYTE PTR [eax+541]
  000c1	89 4d 10	 mov	 DWORD PTR _level$[ebp], ecx
  000c4	0f b6 88 1e 02
	00 00		 movzx	 ecx, BYTE PTR [eax+542]
  000cb	51		 push	 ecx
  000cc	52		 push	 edx
  000cd	89 45 14	 mov	 DWORD PTR tv356[ebp], eax
  000d0	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  000d5	8b f0		 mov	 esi, eax
  000d7	83 c4 08	 add	 esp, 8

; 1071 : 
; 1072 : 		if ( type == -1 )

  000da	83 fe ff	 cmp	 esi, -1

; 1073 : 		{
; 1074 : 			return FALSE;

  000dd	0f 84 5a 02 00
	00		 je	 $LN33@DropItem@2

; 1075 : 		}
; 1076 : 
; 1077 : 		if ( this->BagObject[loc16].m_issetitem == 1 ) //season3 add-on

  000e3	8b 45 e0	 mov	 eax, DWORD PTR _loc16$[ebp]
  000e6	8d 8c c3 e8 01
	00 00		 lea	 ecx, DWORD PTR [ebx+eax*8+488]
  000ed	80 7c 08 3d 01	 cmp	 BYTE PTR [eax+ecx+61], 1
  000f2	75 26		 jne	 SHORT $LN12@DropItem@2

; 1078 : 		{
; 1079 : 			this->DropSetItem(aIndex, type, btMapNumber, x , y);

  000f4	8b 55 f0	 mov	 edx, DWORD PTR _y$[ebp]
  000f7	8b 45 ec	 mov	 eax, DWORD PTR _x$[ebp]
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _btMapNumber$[ebp]
  000fd	52		 push	 edx
  000fe	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00101	50		 push	 eax
  00102	51		 push	 ecx
  00103	56		 push	 esi
  00104	52		 push	 edx
  00105	8b cb		 mov	 ecx, ebx
  00107	e8 00 00 00 00	 call	 ?DropSetItem@CProbabilityItemBag@@QAEXHHEHH@Z ; CProbabilityItemBag::DropSetItem
$LN18@DropItem@2:

; 1145 : 
; 1146 : 	}
; 1147 : 	return 1;

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	b8 01 00 00 00	 mov	 eax, 1
  00113	5b		 pop	 ebx

; 1148 : }

  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 10 00	 ret	 16			; 00000010H
$LN12@DropItem@2:

; 1080 : 			return TRUE;
; 1081 : 		}
; 1082 : 
; 1083 : 		if ( this->BagObject[loc16].m_isskill != 0 )

  0011a	8b 45 14	 mov	 eax, DWORD PTR tv356[ebp]
  0011d	80 b8 21 02 00
	00 00		 cmp	 BYTE PTR [eax+545], 0
  00124	74 07		 je	 SHORT $LN24@DropItem@2

; 1084 : 		{
; 1085 : 			Option1 =1;

  00126	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN24@DropItem@2:

; 1086 : 		}
; 1087 : 
; 1088 : 		if ( this->BagObject[loc16].m_isluck != 0 )

  0012d	80 b8 22 02 00
	00 00		 cmp	 BYTE PTR [eax+546], 0
  00134	74 21		 je	 SHORT $LN25@DropItem@2

; 1089 : 		{
; 1090 : 			Option2 = 0;

  00136	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 0

; 1091 : 
; 1092 : 			if ( (rand()%2) == 0 )

  0013d	e8 00 00 00 00	 call	 _rand
  00142	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00147	79 05		 jns	 SHORT $LN31@DropItem@2
  00149	48		 dec	 eax
  0014a	83 c8 fe	 or	 eax, -2			; fffffffeH
  0014d	40		 inc	 eax
$LN31@DropItem@2:
  0014e	75 07		 jne	 SHORT $LN25@DropItem@2

; 1093 : 			{
; 1094 : 				Option2 = 1;

  00150	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN25@DropItem@2:

; 1095 : 			}
; 1096 : 		}
; 1097 : 
; 1098 : 		if ( this->BagObject[loc16].m_isoption != 0 )

  00157	8b 45 14	 mov	 eax, DWORD PTR tv356[ebp]
  0015a	80 b8 23 02 00
	00 00		 cmp	 BYTE PTR [eax+547], 0
  00161	74 2b		 je	 SHORT $LN27@DropItem@2

; 1099 : 		{
; 1100 : 			if ( rand()%5 < 1 )

  00163	e8 00 00 00 00	 call	 _rand
  00168	99		 cdq
  00169	b9 05 00 00 00	 mov	 ecx, 5
  0016e	f7 f9		 idiv	 ecx
  00170	83 fa 01	 cmp	 edx, 1
  00173	7d 09		 jge	 SHORT $LN7@DropItem@2

; 1101 : 			{
; 1102 : 				Option3 = 3;

  00175	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _Option3$[ebp], 3

; 1103 : 			}
; 1104 : 			else

  0017c	eb 10		 jmp	 SHORT $LN27@DropItem@2
$LN7@DropItem@2:

; 1105 : 			{
; 1106 : 				Option3 = rand()%3;

  0017e	e8 00 00 00 00	 call	 _rand
  00183	99		 cdq
  00184	b9 03 00 00 00	 mov	 ecx, 3
  00189	f7 f9		 idiv	 ecx
  0018b	89 55 fc	 mov	 DWORD PTR _Option3$[ebp], edx
$LN27@DropItem@2:

; 1107 : 			}
; 1108 : 		}
; 1109 : 
; 1110 : 		if ( this->BagObject[loc16].m_isexitem != 0 )

  0018e	8b 55 14	 mov	 edx, DWORD PTR tv356[ebp]
  00191	80 ba 24 02 00
	00 00		 cmp	 BYTE PTR [edx+548], 0
  00198	74 17		 je	 SHORT $LN28@DropItem@2

; 1111 : 		{
; 1112 : 			loc12 = NewOptionRand(0);

  0019a	6a 00		 push	 0
  0019c	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  001a1	0f b6 c0	 movzx	 eax, al
  001a4	83 c4 04	 add	 esp, 4
  001a7	89 45 e8	 mov	 DWORD PTR _loc12$[ebp], eax

; 1113 : 			//Option2 = 0;
; 1114 : 			Option1 = 1;

  001aa	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _Option1$[ebp], 1
$LN28@DropItem@2:

; 1115 : 			//level = 0;
; 1116 : 		}
; 1117 : 
; 1118 : 		if ( type == ITEMGET(12,15) || type == ITEMGET(14,13) || type == ITEMGET(14,14) || type == ITEMGET(14,22) )	// Chaos, Bless, Soul, Creation

  001b1	81 fe 0f 18 00
	00		 cmp	 esi, 6159		; 0000180fH
  001b7	74 18		 je	 SHORT $LN3@DropItem@2
  001b9	81 fe 0d 1c 00
	00		 cmp	 esi, 7181		; 00001c0dH
  001bf	74 10		 je	 SHORT $LN3@DropItem@2
  001c1	81 fe 0e 1c 00
	00		 cmp	 esi, 7182		; 00001c0eH
  001c7	74 08		 je	 SHORT $LN3@DropItem@2
  001c9	81 fe 16 1c 00
	00		 cmp	 esi, 7190		; 00001c16H
  001cf	75 10		 jne	 SHORT $LN29@DropItem@2
$LN3@DropItem@2:

; 1119 : 		{
; 1120 : 			Option1 = 0;

  001d1	33 c0		 xor	 eax, eax
  001d3	89 45 f4	 mov	 DWORD PTR _Option1$[ebp], eax

; 1121 : 			Option2 = 0;

  001d6	89 45 f8	 mov	 DWORD PTR _Option2$[ebp], eax

; 1122 : 			Option3 = 0;

  001d9	89 45 fc	 mov	 DWORD PTR _Option3$[ebp], eax

; 1123 : 			level = 0;

  001dc	89 45 10	 mov	 DWORD PTR _level$[ebp], eax
  001df	eb 02		 jmp	 SHORT $LN4@DropItem@2
$LN29@DropItem@2:
  001e1	33 c0		 xor	 eax, eax
$LN4@DropItem@2:

; 1124 : 		}
; 1125 : 
; 1126 : 		if ( type == ITEMGET(13,0) ||
; 1127 : 			 type == ITEMGET(13,1) ||
; 1128 : 			 type == ITEMGET(13,2) ||
; 1129 : 			 type == ITEMGET(13,8) ||
; 1130 : 			 type == ITEMGET(13,9) ||
; 1131 : 			 type == ITEMGET(13,12) ||
; 1132 : 			 type ==ITEMGET(13,13) ||
; 1133 : 			 type ==ITEMGET(13,38) ||
; 1134 : 			 type ==ITEMGET(13,39) ||
; 1135 : 			 type ==ITEMGET(13,40) ||
; 1136 : 			 type ==ITEMGET(13,41) )

  001e3	81 fe 00 1a 00
	00		 cmp	 esi, 6656		; 00001a00H
  001e9	74 50		 je	 SHORT $LN1@DropItem@2
  001eb	81 fe 01 1a 00
	00		 cmp	 esi, 6657		; 00001a01H
  001f1	74 48		 je	 SHORT $LN1@DropItem@2
  001f3	81 fe 02 1a 00
	00		 cmp	 esi, 6658		; 00001a02H
  001f9	74 40		 je	 SHORT $LN1@DropItem@2
  001fb	81 fe 08 1a 00
	00		 cmp	 esi, 6664		; 00001a08H
  00201	74 38		 je	 SHORT $LN1@DropItem@2
  00203	81 fe 09 1a 00
	00		 cmp	 esi, 6665		; 00001a09H
  00209	74 30		 je	 SHORT $LN1@DropItem@2
  0020b	81 fe 0c 1a 00
	00		 cmp	 esi, 6668		; 00001a0cH
  00211	74 28		 je	 SHORT $LN1@DropItem@2
  00213	81 fe 0d 1a 00
	00		 cmp	 esi, 6669		; 00001a0dH
  00219	74 20		 je	 SHORT $LN1@DropItem@2
  0021b	81 fe 26 1a 00
	00		 cmp	 esi, 6694		; 00001a26H
  00221	74 18		 je	 SHORT $LN1@DropItem@2
  00223	81 fe 27 1a 00
	00		 cmp	 esi, 6695		; 00001a27H
  00229	74 10		 je	 SHORT $LN1@DropItem@2
  0022b	81 fe 28 1a 00
	00		 cmp	 esi, 6696		; 00001a28H
  00231	74 08		 je	 SHORT $LN1@DropItem@2
  00233	81 fe 29 1a 00
	00		 cmp	 esi, 6697		; 00001a29H
  00239	75 0c		 jne	 SHORT $LN2@DropItem@2
$LN1@DropItem@2:

; 1137 : 		{
; 1138 : 			level = 0;
; 1139 : 			dur = 255;

  0023b	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@437f0000
  00241	89 45 10	 mov	 DWORD PTR _level$[ebp], eax
  00244	d9 5d e4	 fstp	 DWORD PTR _dur$[ebp]
$LN2@DropItem@2:

; 1140 : 		}
; 1141 : 
; 1142 : 		ItemSerialCreateSend(lpObj->m_Index, (BYTE)btMapNumber, (BYTE)x, (BYTE)y, type, (BYTE)level, (BYTE)dur, (BYTE)Option1, (BYTE)Option2, (BYTE)Option3, lpObj->m_Index, (BYTE)loc12, 0);

  00247	8b 55 e8	 mov	 edx, DWORD PTR _loc12$[ebp]
  0024a	d9 45 e4	 fld	 DWORD PTR _dur$[ebp]
  0024d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0024f	d9 7d 16	 fnstcw	 WORD PTR tv422[ebp]
  00252	50		 push	 eax
  00253	8b 45 fc	 mov	 eax, DWORD PTR _Option3$[ebp]
  00256	52		 push	 edx
  00257	8b 55 f8	 mov	 edx, DWORD PTR _Option2$[ebp]
  0025a	51		 push	 ecx
  0025b	50		 push	 eax
  0025c	8b 45 f4	 mov	 eax, DWORD PTR _Option1$[ebp]
  0025f	52		 push	 edx
  00260	50		 push	 eax
  00261	0f b7 45 16	 movzx	 eax, WORD PTR tv422[ebp]
  00265	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0026a	89 45 08	 mov	 DWORD PTR tv419[ebp], eax
  0026d	d9 6d 08	 fldcw	 WORD PTR tv419[ebp]
  00270	db 5d 08	 fistp	 DWORD PTR tv416[ebp]
  00273	8a 55 08	 mov	 dl, BYTE PTR tv416[ebp]
  00276	0f b6 c2	 movzx	 eax, dl
  00279	8b 55 10	 mov	 edx, DWORD PTR _level$[ebp]
  0027c	d9 6d 16	 fldcw	 WORD PTR tv422[ebp]
  0027f	50		 push	 eax
  00280	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  00283	52		 push	 edx
  00284	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  00287	56		 push	 esi
  00288	50		 push	 eax
  00289	8b 45 0c	 mov	 eax, DWORD PTR _btMapNumber$[ebp]
  0028c	52		 push	 edx
  0028d	50		 push	 eax
  0028e	51		 push	 ecx
  0028f	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 1143 : 		LogAddTD("[%s] Drop Item [%s][%s] : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",
; 1144 : 				this->GetEventName(), lpObj->AccountID, lpObj->Name, btMapNumber, x, y, ItemAttribute[type].Name, type, level, Option1, Option2, Option3, loc12);

  00294	8b 4d e8	 mov	 ecx, DWORD PTR _loc12$[ebp]
  00297	8b 55 fc	 mov	 edx, DWORD PTR _Option3$[ebp]
  0029a	8b 45 f8	 mov	 eax, DWORD PTR _Option2$[ebp]
  0029d	83 c4 34	 add	 esp, 52			; 00000034H
  002a0	51		 push	 ecx
  002a1	8b 4d f4	 mov	 ecx, DWORD PTR _Option1$[ebp]
  002a4	52		 push	 edx
  002a5	8b 55 10	 mov	 edx, DWORD PTR _level$[ebp]
  002a8	50		 push	 eax
  002a9	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  002ac	51		 push	 ecx
  002ad	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp]
  002b0	52		 push	 edx
  002b1	0f b6 55 0c	 movzx	 edx, BYTE PTR _btMapNumber$[ebp]
  002b5	56		 push	 esi
  002b6	6b f6 70	 imul	 esi, 112		; 00000070H
  002b9	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  002bf	56		 push	 esi
  002c0	50		 push	 eax
  002c1	51		 push	 ecx
  002c2	52		 push	 edx
  002c3	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  002c6	50		 push	 eax
  002c7	83 c7 6c	 add	 edi, 108		; 0000006cH
  002ca	57		 push	 edi
  002cb	8b cb		 mov	 ecx, ebx
  002cd	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  002d2	50		 push	 eax
  002d3	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@CMEKAOMC@?$FL?$CFs?$FN?5Drop?5Item?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5?$CI?$CFd?$CJ?$CI?$CF@
  002d8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002de	83 c4 38	 add	 esp, 56			; 00000038H
  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi

; 1145 : 
; 1146 : 	}
; 1147 : 	return 1;

  002e3	b8 01 00 00 00	 mov	 eax, 1
  002e8	5b		 pop	 ebx

; 1148 : }

  002e9	8b e5		 mov	 esp, ebp
  002eb	5d		 pop	 ebp
  002ec	c2 10 00	 ret	 16			; 00000010H
$LN16@DropItem@2:

; 1049 : 		{
; 1050 : 			MapC[lpObj->MapNumber].MoneyItemDrop(this->m_iDropZen, cX, cY);

  002ef	0f b6 4d 14	 movzx	 ecx, BYTE PTR _cY$[ebp]
  002f3	0f b6 55 10	 movzx	 edx, BYTE PTR _cX$[ebp]
  002f7	8b 83 10 01 00
	00		 mov	 eax, DWORD PTR [ebx+272]
  002fd	51		 push	 ecx
  002fe	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00305	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  0030b	52		 push	 edx
  0030c	50		 push	 eax
  0030d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00313	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop

; 1051 : 			LogAddTD("[%s] Drop Zen [%s][%s] [%d Zen]", this->GetEventName(), lpObj->AccountID, lpObj->Name,this->m_iDropZen);

  00318	8b 8b 10 01 00
	00		 mov	 ecx, DWORD PTR [ebx+272]
  0031e	51		 push	 ecx
  0031f	8d 57 77	 lea	 edx, DWORD PTR [edi+119]
  00322	52		 push	 edx
  00323	83 c7 6c	 add	 edi, 108		; 0000006cH
  00326	57		 push	 edi
  00327	8b cb		 mov	 ecx, ebx
  00329	e8 00 00 00 00	 call	 ?GetEventName@CProbabilityItemBag@@AAEPADXZ ; CProbabilityItemBag::GetEventName
  0032e	50		 push	 eax
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CCCPJAHG@?$FL?$CFs?$FN?5Drop?5Zen?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$FL?$CFd?5Zen?$FN?$AA@
  00334	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0033a	83 c4 14	 add	 esp, 20			; 00000014H
$LN33@DropItem@2:

; 1052 : 			return 0;

  0033d	5f		 pop	 edi
  0033e	5e		 pop	 esi
  0033f	33 c0		 xor	 eax, eax
  00341	5b		 pop	 ebx

; 1148 : }

  00342	8b e5		 mov	 esp, ebp
  00344	5d		 pop	 ebp
  00345	c2 10 00	 ret	 16			; 00000010H
?DropItem@CProbabilityItemBag@@QAEHHEEE@Z ENDP		; CProbabilityItemBag::DropItem
_TEXT	ENDS
END
