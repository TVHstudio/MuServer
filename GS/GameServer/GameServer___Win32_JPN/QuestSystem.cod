; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\QuestSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?S5Quest@@3VNewS5Quest@@A			; S5Quest
_BSS	SEGMENT
?S5Quest@@3VNewS5Quest@@A DB 03b928H DUP (?)		; S5Quest
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0DO@GEAGCICB@?$FLGensQuest?$FN?5Info?5file?5Load?5Fail?5@ ; `string'
PUBLIC	??_C@_0BM@DECMOAFE@?4?4?2Data?2Quest?2GensQuest?4ini?$AA@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DM@LFODNLCE@?$FLElfQuest?$FN?5Info?5file?5Load?5Fail?5?$FL@ ; `string'
PUBLIC	??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@		; `string'
PUBLIC	??_C@_0BL@POAKIAID@?4?4?2Data?2Quest?2ElfQuest?4ini?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?ReadConfig@NewS5Quest@@QAEXXZ			; NewS5Quest::ReadConfig
EXTRN	_fclose:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0DO@GEAGCICB@?$FLGensQuest?$FN?5Info?5file?5Load?5Fail?5@
; File e:\work\tranet_version\gs\gameserver\questsystem.cpp
CONST	SEGMENT
??_C@_0DO@GEAGCICB@?$FLGensQuest?$FN?5Info?5file?5Load?5Fail?5@ DB '[Gens'
	DB	'Quest] Info file Load Fail [..\Data\Quest\GensQuest.ini]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DECMOAFE@?4?4?2Data?2Quest?2GensQuest?4ini?$AA@
CONST	SEGMENT
??_C@_0BM@DECMOAFE@?4?4?2Data?2Quest?2GensQuest?4ini?$AA@ DB '..\Data\Que'
	DB	'st\GensQuest.ini', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LFODNLCE@?$FLElfQuest?$FN?5Info?5file?5Load?5Fail?5?$FL@
CONST	SEGMENT
??_C@_0DM@LFODNLCE@?$FLElfQuest?$FN?5Info?5file?5Load?5Fail?5?$FL@ DB '[E'
	DB	'lfQuest] Info file Load Fail [..\Data\Quest\ElfQuest.ini]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
CONST	SEGMENT
??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@ DB 'CRITICAL ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@POAKIAID@?4?4?2Data?2Quest?2ElfQuest?4ini?$AA@
CONST	SEGMENT
??_C@_0BL@POAKIAID@?4?4?2Data?2Quest?2ElfQuest?4ini?$AA@ DB '..\Data\Ques'
	DB	't\ElfQuest.ini', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReadConfig@NewS5Quest@@QAEXXZ
_TEXT	SEGMENT
?ReadConfig@NewS5Quest@@QAEXXZ PROC			; NewS5Quest::ReadConfig, COMDAT
; _this$ = ecx

; 12   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 13   : 	SMDFile = fopen(ELFQUEST_DIR, "r");

  00002	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@POAKIAID@?4?4?2Data?2Quest?2ElfQuest?4ini?$AA@
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 _fopen
  00013	83 c4 08	 add	 esp, 8
  00016	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 14   : 
; 15   : 	if ( SMDFile == NULL )

  0001b	85 c0		 test	 eax, eax
  0001d	75 1a		 jne	 SHORT $LN14@ReadConfig

; 16   : 	{
; 17   : 		MessageBoxA(0,"[ElfQuest] Info file Load Fail [..\\Data\\Quest\\ElfQuest.ini]","CRITICAL ERROR",0);

  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LFODNLCE@?$FLElfQuest?$FN?5Info?5file?5Load?5Fail?5?$FL@
  0002a	50		 push	 eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 18   : 		ExitProcess(1);

  00031	6a 01		 push	 1
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN55@ReadConfig:
$LN14@ReadConfig:

; 19   : 	}
; 20   : 
; 21   : 	int Token;
; 22   : 	int type = -1;
; 23   : 	this->eCount = 1;

  00039	bf 01 00 00 00	 mov	 edi, 1
  0003e	89 be 00 f4 01
	00		 mov	 DWORD PTR [esi+128000], edi

; 24   : 
; 25   : 	while ( true )
; 26   : 	{
; 27   : 	    Token = GetToken();

  00044	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 28   : 
; 29   :         if( Token == 2)

  00049	83 f8 02	 cmp	 eax, 2
  0004c	0f 84 81 01 00
	00		 je	 $LN33@ReadConfig
$LL13@ReadConfig:

; 30   : 		{
; 31   :             break;
; 32   : 		}
; 33   : 
; 34   : 		type = (int)TokenNumber;
; 35   : 
; 36   : 		while ( true )
; 37   : 		{
; 38   : 			//if ( type < 0 || type > 4 )
; 39   : 			//{
; 40   : 			//	break;
; 41   : 			//}
; 42   : 		    Token = GetToken();

  00052	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 43   : 
; 44   : 			if ( strcmp("end", TokenString ) == 0)

  00057	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL38@ReadConfig:
  00061	8a 10		 mov	 dl, BYTE PTR [eax]
  00063	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00065	75 1a		 jne	 SHORT $LN39@ReadConfig
  00067	84 d2		 test	 dl, dl
  00069	74 12		 je	 SHORT $LN40@ReadConfig
  0006b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0006e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00071	75 0e		 jne	 SHORT $LN39@ReadConfig
  00073	83 c0 02	 add	 eax, 2
  00076	83 c1 02	 add	 ecx, 2
  00079	84 d2		 test	 dl, dl
  0007b	75 e4		 jne	 SHORT $LL38@ReadConfig
$LN40@ReadConfig:
  0007d	33 c0		 xor	 eax, eax
  0007f	eb 05		 jmp	 SHORT $LN41@ReadConfig
$LN39@ReadConfig:
  00081	1b c0		 sbb	 eax, eax
  00083	83 d8 ff	 sbb	 eax, -1
$LN41@ReadConfig:
  00086	85 c0		 test	 eax, eax
  00088	0f 84 37 01 00
	00		 je	 $LN32@ReadConfig
  0008e	8b ff		 npad	 2
$LL10@ReadConfig:

; 45   : 			{
; 46   : 				break;
; 47   : 			}
; 48   : 
; 49   : 			this->ElfQuest[this->eCount].Mob = (int)TokenNumber;

  00090	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00096	e8 00 00 00 00	 call	 __ftol2_sse
  0009b	8b 8e 00 f4 01
	00		 mov	 ecx, DWORD PTR [esi+128000]
  000a1	c1 e1 07	 shl	 ecx, 7
  000a4	89 04 31	 mov	 DWORD PTR [ecx+esi], eax

; 50   : 
; 51   : 			Token = GetToken();

  000a7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 52   : 			this->ElfQuest[this->eCount].CountMob = (int)TokenNumber;

  000ac	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000b2	e8 00 00 00 00	 call	 __ftol2_sse
  000b7	8b 96 00 f4 01
	00		 mov	 edx, DWORD PTR [esi+128000]
  000bd	c1 e2 07	 shl	 edx, 7
  000c0	89 44 32 04	 mov	 DWORD PTR [edx+esi+4], eax

; 53   : 
; 54   : 			Token = GetToken();

  000c4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 55   : 			this->ElfQuest[this->eCount].Proc = (int)TokenNumber;

  000c9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000cf	e8 00 00 00 00	 call	 __ftol2_sse
  000d4	8b 8e 00 f4 01
	00		 mov	 ecx, DWORD PTR [esi+128000]
  000da	c1 e1 07	 shl	 ecx, 7
  000dd	89 44 31 08	 mov	 DWORD PTR [ecx+esi+8], eax

; 56   : 
; 57   : 			Token = GetToken();

  000e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 58   : 			strcpy(this->ElfQuest[this->eCount].MSG,TokenString);

  000e6	8b 96 00 f4 01
	00		 mov	 edx, DWORD PTR [esi+128000]
  000ec	c1 e2 07	 shl	 edx, 7
  000ef	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000f4	8d 54 32 0c	 lea	 edx, DWORD PTR [edx+esi+12]
$LL17@ReadConfig:
  000f8	8a 01		 mov	 al, BYTE PTR [ecx]
  000fa	88 02		 mov	 BYTE PTR [edx], al
  000fc	03 cf		 add	 ecx, edi
  000fe	03 d7		 add	 edx, edi
  00100	84 c0		 test	 al, al
  00102	75 f4		 jne	 SHORT $LL17@ReadConfig

; 59   : 
; 60   : 			Token = GetToken();

  00104	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 61   : 			strcpy(this->ElfQuest[this->eCount].MS2,TokenString);

  00109	8b 86 00 f4 01
	00		 mov	 eax, DWORD PTR [esi+128000]
  0010f	c1 e0 07	 shl	 eax, 7
  00112	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00117	8d 54 30 3e	 lea	 edx, DWORD PTR [eax+esi+62]
  0011b	eb 03 8d 49 00	 npad	 5
$LL18@ReadConfig:
  00120	8a 01		 mov	 al, BYTE PTR [ecx]
  00122	88 02		 mov	 BYTE PTR [edx], al
  00124	03 cf		 add	 ecx, edi
  00126	03 d7		 add	 edx, edi
  00128	84 c0		 test	 al, al
  0012a	75 f4		 jne	 SHORT $LL18@ReadConfig

; 62   : 
; 63   : 			Token = GetToken();

  0012c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 64   : 			this->ElfQuest[this->eCount].iType = (int)TokenNumber;

  00131	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00137	e8 00 00 00 00	 call	 __ftol2_sse
  0013c	8b 8e 00 f4 01
	00		 mov	 ecx, DWORD PTR [esi+128000]
  00142	c1 e1 07	 shl	 ecx, 7
  00145	89 44 31 70	 mov	 DWORD PTR [ecx+esi+112], eax

; 65   : 
; 66   : 			Token = GetToken();

  00149	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 67   : 			this->ElfQuest[this->eCount].iIndex = (int)TokenNumber;

  0014e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00154	e8 00 00 00 00	 call	 __ftol2_sse
  00159	8b 96 00 f4 01
	00		 mov	 edx, DWORD PTR [esi+128000]
  0015f	c1 e2 07	 shl	 edx, 7
  00162	89 44 32 74	 mov	 DWORD PTR [edx+esi+116], eax

; 68   : 
; 69   : 			Token = GetToken();

  00166	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 70   : 			this->ElfQuest[this->eCount].iLevel = (int)TokenNumber;

  0016b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00171	e8 00 00 00 00	 call	 __ftol2_sse
  00176	8b 8e 00 f4 01
	00		 mov	 ecx, DWORD PTR [esi+128000]
  0017c	c1 e1 07	 shl	 ecx, 7
  0017f	89 44 31 78	 mov	 DWORD PTR [ecx+esi+120], eax

; 71   : 
; 72   : 			this->eCount++;

  00183	01 be 00 f4 01
	00		 add	 DWORD PTR [esi+128000], edi
  00189	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0018e	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00193	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL42@ReadConfig:

; 43   : 
; 44   : 			if ( strcmp("end", TokenString ) == 0)

  00198	8a 10		 mov	 dl, BYTE PTR [eax]
  0019a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0019c	75 1a		 jne	 SHORT $LN43@ReadConfig
  0019e	84 d2		 test	 dl, dl
  001a0	74 12		 je	 SHORT $LN44@ReadConfig
  001a2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001a5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001a8	75 0e		 jne	 SHORT $LN43@ReadConfig
  001aa	83 c0 02	 add	 eax, 2
  001ad	83 c1 02	 add	 ecx, 2
  001b0	84 d2		 test	 dl, dl
  001b2	75 e4		 jne	 SHORT $LL42@ReadConfig
$LN44@ReadConfig:
  001b4	33 c0		 xor	 eax, eax
  001b6	eb 05		 jmp	 SHORT $LN45@ReadConfig
$LN43@ReadConfig:
  001b8	1b c0		 sbb	 eax, eax
  001ba	83 d8 ff	 sbb	 eax, -1
$LN45@ReadConfig:
  001bd	85 c0		 test	 eax, eax
  001bf	0f 85 cb fe ff
	ff		 jne	 $LL10@ReadConfig
$LN32@ReadConfig:

; 24   : 
; 25   : 	while ( true )
; 26   : 	{
; 27   : 	    Token = GetToken();

  001c5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 28   : 
; 29   :         if( Token == 2)

  001ca	83 f8 02	 cmp	 eax, 2
  001cd	0f 85 7f fe ff
	ff		 jne	 $LL13@ReadConfig
$LN33@ReadConfig:

; 73   : 		}
; 74   :     }
; 75   : 	fclose(SMDFile);

  001d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  001d9	52		 push	 edx
  001da	e8 00 00 00 00	 call	 _fclose

; 76   : 	// ---
; 77   : 	SMDFile = fopen(GENSQUEST_DIR, "r");

  001df	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DECMOAFE@?4?4?2Data?2Quest?2GensQuest?4ini?$AA@
  001e9	e8 00 00 00 00	 call	 _fopen
  001ee	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f1	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 78   : 
; 79   : 	if ( SMDFile == NULL )

  001f6	85 c0		 test	 eax, eax
  001f8	75 19		 jne	 SHORT $LN7@ReadConfig

; 80   : 	{
; 81   : 		MessageBoxA(0,"[GensQuest] Info file Load Fail [..\\Data\\Quest\\GensQuest.ini]","CRITICAL ERROR",0);

  001fa	50		 push	 eax
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  00200	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@GEAGCICB@?$FLGensQuest?$FN?5Info?5file?5Load?5Fail?5@
  00205	50		 push	 eax
  00206	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 82   : 		ExitProcess(1);

  0020c	57		 push	 edi
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitProcess@4
$LN56@ReadConfig:
$LN7@ReadConfig:

; 83   : 	}
; 84   : 
; 85   : 	Token = 0;
; 86   : 	int Tokentype = -1;
; 87   : 	this->gCount = 1;

  00213	89 be 24 b9 03
	00		 mov	 DWORD PTR [esi+244004], edi

; 88   : 
; 89   : 	while ( true )
; 90   : 	{
; 91   : 	    Token = GetToken();

  00219	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 92   : 
; 93   :         if( Token == 2)

  0021e	83 f8 02	 cmp	 eax, 2
  00221	0f 84 55 01 00
	00		 je	 $LN35@ReadConfig
$LL6@ReadConfig:

; 94   : 		{
; 95   :             break;
; 96   : 		}
; 97   : 
; 98   : 		Tokentype = (int)TokenNumber;
; 99   : 
; 100  : 		while ( true )
; 101  : 		{
; 102  : 			//if ( type < 0 || type > 4 )
; 103  : 			//{
; 104  : 			//	break;
; 105  : 			//}
; 106  : 		    Token = GetToken();

  00227	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 107  : 
; 108  : 			if ( strcmp("end", TokenString ) == 0)

  0022c	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00231	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL46@ReadConfig:
  00236	8a 10		 mov	 dl, BYTE PTR [eax]
  00238	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0023a	75 1a		 jne	 SHORT $LN47@ReadConfig
  0023c	84 d2		 test	 dl, dl
  0023e	74 12		 je	 SHORT $LN48@ReadConfig
  00240	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00243	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00246	75 0e		 jne	 SHORT $LN47@ReadConfig
  00248	83 c0 02	 add	 eax, 2
  0024b	83 c1 02	 add	 ecx, 2
  0024e	84 d2		 test	 dl, dl
  00250	75 e4		 jne	 SHORT $LL46@ReadConfig
$LN48@ReadConfig:
  00252	33 c0		 xor	 eax, eax
  00254	eb 05		 jmp	 SHORT $LN49@ReadConfig
$LN47@ReadConfig:
  00256	1b c0		 sbb	 eax, eax
  00258	83 d8 ff	 sbb	 eax, -1
$LN49@ReadConfig:
  0025b	85 c0		 test	 eax, eax
  0025d	0f 84 0b 01 00
	00		 je	 $LN34@ReadConfig
$LL3@ReadConfig:

; 109  : 			{
; 110  : 				break;
; 111  : 			}
; 112  : 
; 113  : 			this->GensQuest[this->gCount].Mob = (int)TokenNumber;

  00263	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00269	e8 00 00 00 00	 call	 __ftol2_sse
  0026e	8b 8e 24 b9 03
	00		 mov	 ecx, DWORD PTR [esi+244004]
  00274	6b c9 74	 imul	 ecx, 116		; 00000074H
  00277	89 84 31 04 f4
	01 00		 mov	 DWORD PTR [ecx+esi+128004], eax

; 114  : 
; 115  : 			Token = GetToken();

  0027e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 116  : 			this->GensQuest[this->gCount].CountMob = (int)TokenNumber;

  00283	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00289	e8 00 00 00 00	 call	 __ftol2_sse
  0028e	8b 96 24 b9 03
	00		 mov	 edx, DWORD PTR [esi+244004]
  00294	6b d2 74	 imul	 edx, 116		; 00000074H
  00297	89 84 32 08 f4
	01 00		 mov	 DWORD PTR [edx+esi+128008], eax

; 117  : 
; 118  : 			Token = GetToken();

  0029e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 119  : 			this->GensQuest[this->gCount].Proc = (int)TokenNumber;

  002a3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002a9	e8 00 00 00 00	 call	 __ftol2_sse
  002ae	8b 8e 24 b9 03
	00		 mov	 ecx, DWORD PTR [esi+244004]
  002b4	6b c9 74	 imul	 ecx, 116		; 00000074H
  002b7	89 84 31 0c f4
	01 00		 mov	 DWORD PTR [ecx+esi+128012], eax

; 120  : 
; 121  : 			Token = GetToken();

  002be	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 			strcpy(this->GensQuest[this->gCount].MSG,TokenString);

  002c3	8b 96 24 b9 03
	00		 mov	 edx, DWORD PTR [esi+244004]
  002c9	6b d2 74	 imul	 edx, 116		; 00000074H
  002cc	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  002d1	8d 94 32 10 f4
	01 00		 lea	 edx, DWORD PTR [edx+esi+128016]
$LL19@ReadConfig:
  002d8	8a 01		 mov	 al, BYTE PTR [ecx]
  002da	88 02		 mov	 BYTE PTR [edx], al
  002dc	03 cf		 add	 ecx, edi
  002de	03 d7		 add	 edx, edi
  002e0	84 c0		 test	 al, al
  002e2	75 f4		 jne	 SHORT $LL19@ReadConfig

; 123  : 
; 124  : 			Token = GetToken();

  002e4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 125  : 			strcpy(this->GensQuest[this->gCount].MS2,TokenString);

  002e9	8b 86 24 b9 03
	00		 mov	 eax, DWORD PTR [esi+244004]
  002ef	6b c0 74	 imul	 eax, 116		; 00000074H
  002f2	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  002f7	8d 94 30 42 f4
	01 00		 lea	 edx, DWORD PTR [eax+esi+128066]
  002fe	8b ff		 npad	 2
$LL20@ReadConfig:
  00300	8a 01		 mov	 al, BYTE PTR [ecx]
  00302	88 02		 mov	 BYTE PTR [edx], al
  00304	03 cf		 add	 ecx, edi
  00306	03 d7		 add	 edx, edi
  00308	84 c0		 test	 al, al
  0030a	75 f4		 jne	 SHORT $LL20@ReadConfig

; 126  : 
; 127  : 			Token = GetToken();

  0030c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 128  : 			this->GensQuest[this->gCount].Contribution = (int)TokenNumber;

  00311	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00317	e8 00 00 00 00	 call	 __ftol2_sse
  0031c	8b 8e 24 b9 03
	00		 mov	 ecx, DWORD PTR [esi+244004]
  00322	6b c9 74	 imul	 ecx, 116		; 00000074H
  00325	89 84 31 74 f4
	01 00		 mov	 DWORD PTR [ecx+esi+128116], eax

; 129  : 
; 130  : 			this->gCount++;

  0032c	01 be 24 b9 03
	00		 add	 DWORD PTR [esi+244004], edi
  00332	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00337	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0033c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL50@ReadConfig:

; 107  : 
; 108  : 			if ( strcmp("end", TokenString ) == 0)

  00341	8a 10		 mov	 dl, BYTE PTR [eax]
  00343	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00345	75 1a		 jne	 SHORT $LN51@ReadConfig
  00347	84 d2		 test	 dl, dl
  00349	74 12		 je	 SHORT $LN52@ReadConfig
  0034b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0034e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00351	75 0e		 jne	 SHORT $LN51@ReadConfig
  00353	83 c0 02	 add	 eax, 2
  00356	83 c1 02	 add	 ecx, 2
  00359	84 d2		 test	 dl, dl
  0035b	75 e4		 jne	 SHORT $LL50@ReadConfig
$LN52@ReadConfig:
  0035d	33 c0		 xor	 eax, eax
  0035f	eb 05		 jmp	 SHORT $LN53@ReadConfig
$LN51@ReadConfig:
  00361	1b c0		 sbb	 eax, eax
  00363	83 d8 ff	 sbb	 eax, -1
$LN53@ReadConfig:
  00366	85 c0		 test	 eax, eax
  00368	0f 85 f5 fe ff
	ff		 jne	 $LL3@ReadConfig
$LN34@ReadConfig:

; 88   : 
; 89   : 	while ( true )
; 90   : 	{
; 91   : 	    Token = GetToken();

  0036e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 92   : 
; 93   :         if( Token == 2)

  00373	83 f8 02	 cmp	 eax, 2
  00376	0f 85 ab fe ff
	ff		 jne	 $LL6@ReadConfig
$LN35@ReadConfig:

; 131  : 		}
; 132  :     }
; 133  : 	fclose(SMDFile);

  0037c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00382	52		 push	 edx
  00383	e8 00 00 00 00	 call	 _fclose
  00388	83 c4 04	 add	 esp, 4
  0038b	5f		 pop	 edi
  0038c	5e		 pop	 esi

; 134  : }

  0038d	c3		 ret	 0
$LN54@ReadConfig:
?ReadConfig@NewS5Quest@@QAEXXZ ENDP			; NewS5Quest::ReadConfig
_TEXT	ENDS
PUBLIC	?ElfMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ; NewS5Quest::ElfMainQuest
; Function compile flags: /Ogtp
;	COMDAT ?ElfMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ElfMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z PROC	; NewS5Quest::ElfMainQuest, COMDAT
; _this$ = ecx

; 162  : 	//if(lpObj->ElfQuestNum == 0) lpObj->ElfQuestNum++;
; 163  : 
; 164  : 	//int Num = lpObj->ElfQuestNum;
; 165  : 
; 166  : 	//if(Num >= this->eCount)
; 167  : 	//{
; 168  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: Finish!");
; 169  : 	//	return;
; 170  : 	//}
; 171  : 	//if(lpObj->ElfMonsterCount == this->ElfQuest[Num].CountMob)
; 172  : 	//{
; 173  : 	//	this->ElfReward(lpObj,Num);
; 174  : 	//	lpObj->ElfQuestNum++;
; 175  : 	//	lpObj->ElfMonsterCount = 0;
; 176  : 	//}
; 177  : 	//else
; 178  : 	//{
; 179  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: Mission #%d",Num);	//Fix
; 180  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: %s",this->ElfQuest[Num].MSG);
; 181  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: %s [%d/%d]",this->ElfQuest[Num].MS2,lpObj->ElfMonsterCount,this->ElfQuest[Num].CountMob);
; 182  : 	//}
; 183  : }

  00000	c2 04 00	 ret	 4
?ElfMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ENDP	; NewS5Quest::ElfMainQuest
_TEXT	ENDS
PUBLIC	?ElfMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z ; NewS5Quest::ElfMonsterKillProc
; Function compile flags: /Ogtp
;	COMDAT ?ElfMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?ElfMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z PROC ; NewS5Quest::ElfMonsterKillProc, COMDAT
; _this$ = ecx

; 187  : 	//int Num = lpTargetObj->ElfQuestNum;;
; 188  : 	//if(Num==0) return;
; 189  : 	//if(lpObj->Class == this->ElfQuest[Num].Mob)
; 190  : 	//{
; 191  : 	//	if(this->ElfQuest[Num].CountMob == lpTargetObj->ElfMonsterCount)
; 192  : 	//	{
; 193  : 	//		return;
; 194  : 	//	}
; 195  : 	//	srand(time(NULL));
; 196  : 	//	if(this->ElfQuest[Num].Proc > rand()%100)
; 197  : 	//	{
; 198  : 	//		lpTargetObj->ElfMonsterCount++;
; 199  : 	//		MessageChat(lpTargetObj->m_Index,"@[ElfQuest]: %s [%d/%d]",this->ElfQuest[Num].MS2,lpTargetObj->ElfMonsterCount,this->ElfQuest[Num].CountMob);
; 200  : 
; 201  : 	//		if(this->ElfQuest[Num].CountMob == lpTargetObj->ElfMonsterCount)
; 202  : 	//		{
; 203  : 	//			MessageChat(lpTargetObj->m_Index,"@[ElfQuest]: Mission accomplished!");
; 204  : 	//		}
; 205  : 	//	}
; 206  : 	//}
; 207  : }

  00000	c2 08 00	 ret	 8
?ElfMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z ENDP ; NewS5Quest::ElfMonsterKillProc
_TEXT	ENDS
PUBLIC	?ElfReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z	; NewS5Quest::ElfReward
EXTRN	?ZtFireCracker@@YAXHEE@Z:PROC			; ZtFireCracker
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
; Function compile flags: /Ogtp
;	COMDAT ?ElfReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_Rew$ = 12						; size = 4
?ElfReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z PROC	; NewS5Quest::ElfReward, COMDAT
; _this$ = ecx

; 210  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 211  : 	int Type = ITEMGET(this->ElfQuest[Rew].iType,this->ElfQuest[Rew].iIndex);
; 212  : 	ItemSerialCreateSend(lpObj->m_Index,(BYTE)lpObj->MapNumber,(BYTE)lpObj->X,(BYTE)lpObj->Y,Type,this->ElfQuest[Rew].iLevel,0,0,0,0,lpObj->m_Index,0,0);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _Rew$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000a	8b 16		 mov	 edx, DWORD PTR [esi]
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	52		 push	 edx
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	c1 e0 07	 shl	 eax, 7
  00018	03 c1		 add	 eax, ecx
  0001a	0f b6 48 78	 movzx	 ecx, BYTE PTR [eax+120]
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	51		 push	 ecx
  00023	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00026	c1 e1 09	 shl	 ecx, 9
  00029	03 48 74	 add	 ecx, DWORD PTR [eax+116]
  0002c	0f b6 86 46 01
	00 00		 movzx	 eax, BYTE PTR [esi+326]
  00033	51		 push	 ecx
  00034	0f b6 8e 44 01
	00 00		 movzx	 ecx, BYTE PTR [esi+324]
  0003b	50		 push	 eax
  0003c	0f b6 86 49 01
	00 00		 movzx	 eax, BYTE PTR [esi+329]
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 213  : 	ZtFireCracker(lpObj->m_Index, lpObj->X, lpObj->Y);

  0004b	0f b6 8e 46 01
	00 00		 movzx	 ecx, BYTE PTR [esi+326]
  00052	0f b6 96 44 01
	00 00		 movzx	 edx, BYTE PTR [esi+324]
  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	51		 push	 ecx
  0005c	52		 push	 edx
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?ZtFireCracker@@YAXHEE@Z ; ZtFireCracker
  00063	83 c4 40	 add	 esp, 64			; 00000040H
  00066	5e		 pop	 esi

; 214  : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
?ElfReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z ENDP	; NewS5Quest::ElfReward
_TEXT	ENDS
PUBLIC	?GensMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ; NewS5Quest::GensMainQuest
; Function compile flags: /Ogtp
;	COMDAT ?GensMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GensMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z PROC	; NewS5Quest::GensMainQuest, COMDAT
; _this$ = ecx

; 220  : 	//if(lpObj->GensQuestNum == 0) lpObj->GensQuestNum++;
; 221  : 
; 222  : 	//int Num = lpObj->GensQuestNum;
; 223  : 
; 224  : 	//if(Num >= this->eCount)
; 225  : 	//{
; 226  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: Finish!");
; 227  : 	//	return;
; 228  : 	//}
; 229  : 	//if(lpObj->GensMonsterCount == this->GensQuest[Num].CountMob)
; 230  : 	//{
; 231  : 	//	this->GensReward(lpObj,Num);
; 232  : 	//	lpObj->GensQuestNum++;
; 233  : 	//	lpObj->GensMonsterCount = 0;
; 234  : 	//}
; 235  : 	//else
; 236  : 	//{
; 237  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: Mission #%d",Num);	//Fix
; 238  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: %s",this->GensQuest[Num].MSG);
; 239  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: %s [%d/%d]",this->GensQuest[Num].MS2,lpObj->GensMonsterCount,this->GensQuest[Num].CountMob);
; 240  : 	//}
; 241  : }

  00000	c2 04 00	 ret	 4
?GensMainQuest@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@@Z ENDP	; NewS5Quest::GensMainQuest
_TEXT	ENDS
PUBLIC	?GensMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z ; NewS5Quest::GensMonsterKillProc
; Function compile flags: /Ogtp
;	COMDAT ?GensMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?GensMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z PROC ; NewS5Quest::GensMonsterKillProc, COMDAT
; _this$ = ecx

; 245  : 	//int Num = lpTargetObj->GensQuestNum;;
; 246  : 	//if(Num==0) return;
; 247  : 	//if(lpObj->Class == this->GensQuest[Num].Mob)
; 248  : 	//{
; 249  : 	//	if(this->GensQuest[Num].CountMob == lpTargetObj->GensMonsterCount)
; 250  : 	//	{
; 251  : 	//		return;
; 252  : 	//	}
; 253  : 	//	srand(time(NULL));
; 254  : 	//	if(this->GensQuest[Num].Proc > rand()%100)
; 255  : 	//	{
; 256  : 	//		lpTargetObj->GensMonsterCount++;
; 257  : 	//		MessageChat(lpTargetObj->m_Index,"~[GensQuest]: %s [%d/%d]",this->GensQuest[Num].MS2,lpTargetObj->GensMonsterCount,this->GensQuest[Num].CountMob);
; 258  : 
; 259  : 	//		if(this->ElfQuest[Num].CountMob == lpTargetObj->GensMonsterCount)
; 260  : 	//		{
; 261  : 	//			MessageChat(lpTargetObj->m_Index,"~[GensQuest]: Mission accomplished!");
; 262  : 	//		}
; 263  : 	//	}
; 264  : 	//}
; 265  : }

  00000	c2 08 00	 ret	 8
?GensMonsterKillProc@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@0@Z ENDP ; NewS5Quest::GensMonsterKillProc
_TEXT	ENDS
PUBLIC	?GensReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z ; NewS5Quest::GensReward
; Function compile flags: /Ogtp
;	COMDAT ?GensReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_Rew$ = 12						; size = 4
?GensReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z PROC	; NewS5Quest::GensReward, COMDAT
; _this$ = ecx

; 269  : 	//MessageChat(lpObj->m_Index,"~[GensQuest]: +%d Contribution!",this->GensQuest[Rew].Contribution);
; 270  : 	//lpObj->GensExp += this->GensQuest[Rew].Contribution;
; 271  : }

  00000	c2 08 00	 ret	 8
?GensReward@NewS5Quest@@AAEXPAUOBJECTSTRUCT@@H@Z ENDP	; NewS5Quest::GensReward
_TEXT	ENDS
PUBLIC	?MainKillMonster@NewS5Quest@@QAEXPAUOBJECTSTRUCT@@0@Z ; NewS5Quest::MainKillMonster
; Function compile flags: /Ogtp
;	COMDAT ?MainKillMonster@NewS5Quest@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?MainKillMonster@NewS5Quest@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; NewS5Quest::MainKillMonster, COMDAT
; _this$ = ecx

; 275  : 	//this->ElfMonsterKillProc(lpObj,lpTargetObj);
; 276  : 	//this->GensMonsterKillProc(lpObj,lpTargetObj);
; 277  : }

  00000	c2 08 00	 ret	 8
?MainKillMonster@NewS5Quest@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; NewS5Quest::MainKillMonster
_TEXT	ENDS
PUBLIC	?Info@NewS5Quest@@QAEXH@Z			; NewS5Quest::Info
; Function compile flags: /Ogtp
;	COMDAT ?Info@NewS5Quest@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?Info@NewS5Quest@@QAEXH@Z PROC				; NewS5Quest::Info, COMDAT
; _this$ = ecx

; 281  : 	//LPOBJ lpObj = &gObj[aIndex];
; 282  : 	//int eNum = lpObj->ElfQuestNum;
; 283  : 	//int gNum = lpObj->GensQuestNum;
; 284  : 	//if(eNum != 0)
; 285  : 	//{
; 286  : 	//	MessageChat(lpObj->m_Index,"@[ElfQuest]: %s [%d/%d]",this->ElfQuest[eNum].MS2,lpObj->ElfMonsterCount,this->ElfQuest[eNum].CountMob);
; 287  : 	//}
; 288  : 	//if(gNum != 0)
; 289  : 	//{
; 290  : 	//	MessageChat(lpObj->m_Index,"~[GensQuest]: %s [%d/%d]",this->GensQuest[gNum].MS2,lpObj->GensMonsterCount,this->GensQuest[gNum].CountMob);
; 291  : 	//}
; 292  : }

  00000	c2 04 00	 ret	 4
?Info@NewS5Quest@@QAEXH@Z ENDP				; NewS5Quest::Info
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?NPCQuest@NewS5Quest@@QAEXH@Z			; NewS5Quest::NPCQuest
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?NPCQuest@NewS5Quest@@QAEXH@Z
_TEXT	SEGMENT
_Packet$ = -204						; size = 200
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?NPCQuest@NewS5Quest@@QAEXH@Z PROC			; NewS5Quest::NPCQuest, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 137  : 	LPOBJ lpObj = &gObj[aIndex];
; 138  : 
; 139  : 	BYTE Packet[200] = {0};

  00017	68 c7 00 00 00	 push	 199			; 000000c7H
  0001c	8d 85 35 ff ff
	ff		 lea	 eax, DWORD PTR _Packet$[ebp+1]
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset

; 140  : 	Packet[0] = 0xC1;
; 141  : 	Packet[1] = 0x08;
; 142  : 	Packet[2] = 0xF6;
; 143  : 	Packet[3] = 0x0A;
; 144  : 	Packet[4] = 0x01;
; 145  : 	Packet[5] = 0x01;
; 146  : 	Packet[6] = 0x00;
; 147  : 	Packet[7] = 0x00;
; 148  : 
; 149  : 	if(lpObj->NPC == 257)
; 150  : 	{
; 151  : 		this->ElfMainQuest(lpObj);
; 152  : 	}
; 153  : 	else if(lpObj->NPC == 543 || lpObj->NPC == 544)
; 154  : 	{
; 155  : 		this->GensMainQuest(lpObj);
; 156  : 	}
; 157  : 	DataSend(aIndex,Packet,Packet[1]);

  0002a	6a 08		 push	 8
  0002c	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _Packet$[ebp]
  00032	51		 push	 ecx
  00033	56		 push	 esi
  00034	c7 85 34 ff ff
	ff c1 08 f6 0a	 mov	 DWORD PTR _Packet$[ebp], 183896257 ; 0af608c1H
  0003e	c7 85 38 ff ff
	ff 01 01 00 00	 mov	 DWORD PTR _Packet$[ebp+4], 257 ; 00000101H
  00048	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 158  : }

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00050	83 c4 18	 add	 esp, 24			; 00000018H
  00053	33 cd		 xor	 ecx, ebp
  00055	5e		 pop	 esi
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?NPCQuest@NewS5Quest@@QAEXH@Z ENDP			; NewS5Quest::NPCQuest
_TEXT	ENDS
END
