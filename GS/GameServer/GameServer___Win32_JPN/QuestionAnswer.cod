; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\QuestionAnswer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_C@_0O@MBBCCDIM@?$FLCredit?$FN?3?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0O@ECFCHPMI@?$FLWCoinG?$FN?3?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0O@DECMEHPK@?$FLWCoinP?$FN?3?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0O@MGBIHBDC@?$FLWCoinC?$FN?3?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	?Reward@CQuestionAnswer@@QAEXH@Z		; CQuestionAnswer::Reward
EXTRN	?GDSaveUserInfo@GameShop@@QAEXH@Z:PROC		; GameShop::GDSaveUserInfo
EXTRN	?gGameShop@@3VGameShop@@A:BYTE			; gGameShop
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0O@MBBCCDIM@?$FLCredit?$FN?3?5?$CL?$CFd?$AA@
; File e:\work\tranet_version\gs\gameserver\questionanswer.cpp
CONST	SEGMENT
??_C@_0O@MBBCCDIM@?$FLCredit?$FN?3?5?$CL?$CFd?$AA@ DB '[Credit]: +%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECFCHPMI@?$FLWCoinG?$FN?3?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@ECFCHPMI@?$FLWCoinG?$FN?3?5?$CL?$CFd?$AA@ DB '[WCoinG]: +%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DECMEHPK@?$FLWCoinP?$FN?3?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@DECMEHPK@?$FLWCoinP?$FN?3?5?$CL?$CFd?$AA@ DB '[WCoinP]: +%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MGBIHBDC@?$FLWCoinC?$FN?3?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@MGBIHBDC@?$FLWCoinC?$FN?3?5?$CL?$CFd?$AA@ DB '[WCoinC]: +%d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Reward@CQuestionAnswer@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?Reward@CQuestionAnswer@@QAEXH@Z PROC			; CQuestionAnswer::Reward, COMDAT
; _this$ = ecx

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 240  : 	if(!OBJMAX_RANGE(aIndex))

  00005	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000b	85 ff		 test	 edi, edi
  0000d	0f 88 db 00 00
	00		 js	 $LN1@Reward
  00013	33 c0		 xor	 eax, eax
  00015	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	0f 84 c8 00 00
	00		 je	 $LN1@Reward

; 241  : 	{
; 242  : 		return;
; 243  : 	}
; 244  : 
; 245  : 	LPOBJ lpObj = &gObj[aIndex];

  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	8b f7		 mov	 esi, edi
  0002a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00030	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 246  : 
; 247  : 	bool bWcoinSend = false;

  00036	32 db		 xor	 bl, bl

; 248  : 
; 249  : 	if(this->m_RewardWCoinC > 0)

  00038	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0003c	7e 26		 jle	 SHORT $LN5@Reward

; 250  : 	{
; 251  : 		lpObj->GameShop.WCoinC += this->m_RewardWCoinC;

  0003e	db 41 08	 fild	 DWORD PTR [ecx+8]
  00041	dc 86 00 23 00
	00		 fadd	 QWORD PTR [esi+8960]
  00047	dd 9e 00 23 00
	00		 fstp	 QWORD PTR [esi+8960]

; 252  : 		MsgOutput(aIndex, "[WCoinC]: +%d", this->m_RewardWCoinC);

  0004d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MGBIHBDC@?$FLWCoinC?$FN?3?5?$CL?$CFd?$AA@
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 253  : 		bWcoinSend = true;

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	b3 01		 mov	 bl, 1
$LN5@Reward:

; 254  : 	}
; 255  : 
; 256  : 	if(this->m_RewardWCoinP > 0)

  00064	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00068	7e 26		 jle	 SHORT $LN4@Reward

; 257  : 	{
; 258  : 		lpObj->GameShop.WCoinP += this->m_RewardWCoinP;

  0006a	db 41 0c	 fild	 DWORD PTR [ecx+12]
  0006d	dc 86 f8 22 00
	00		 fadd	 QWORD PTR [esi+8952]
  00073	dd 9e f8 22 00
	00		 fstp	 QWORD PTR [esi+8952]

; 259  : 		MsgOutput(aIndex, "[WCoinP]: +%d", this->m_RewardWCoinP);

  00079	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0007c	51		 push	 ecx
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DECMEHPK@?$FLWCoinP?$FN?3?5?$CL?$CFd?$AA@
  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 260  : 		bWcoinSend = true;

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	b3 01		 mov	 bl, 1
$LN4@Reward:

; 261  : 	}
; 262  : 
; 263  : 	if(this->m_RewardGoblin > 0)

  00090	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00094	7e 26		 jle	 SHORT $LN3@Reward

; 264  : 	{
; 265  : 		lpObj->GameShop.GoblinPoint += this->m_RewardGoblin;

  00096	db 41 10	 fild	 DWORD PTR [ecx+16]
  00099	dc 86 08 23 00
	00		 fadd	 QWORD PTR [esi+8968]
  0009f	dd 9e 08 23 00
	00		 fstp	 QWORD PTR [esi+8968]

; 266  : 		MsgOutput(aIndex, "[WCoinG]: +%d", this->m_RewardGoblin);

  000a5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a8	52		 push	 edx
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ECFCHPMI@?$FLWCoinG?$FN?3?5?$CL?$CFd?$AA@
  000ae	57		 push	 edi
  000af	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 267  : 		bWcoinSend = true;

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ba	b3 01		 mov	 bl, 1
$LN3@Reward:

; 268  : 	}
; 269  : 
; 270  : 	if(this->m_RewardCredit > 0)

  000bc	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  000c0	7e 1b		 jle	 SHORT $LN2@Reward

; 271  : 	{
; 272  : 		ZtUserDataSend(aIndex);

  000c2	57		 push	 edi
  000c3	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend

; 273  : 		MsgOutput(aIndex, "[Credit]: +%d", this->m_RewardCredit);

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ce	51		 push	 ecx
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MBBCCDIM@?$FLCredit?$FN?3?5?$CL?$CFd?$AA@
  000d4	57		 push	 edi
  000d5	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000da	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@Reward:

; 274  : 	}
; 275  : 
; 276  : 	if(bWcoinSend)

  000dd	5e		 pop	 esi
  000de	84 db		 test	 bl, bl
  000e0	5b		 pop	 ebx
  000e1	74 0b		 je	 SHORT $LN1@Reward

; 277  : 	{
; 278  : 		gGameShop.GDSaveUserInfo(aIndex);

  000e3	57		 push	 edi
  000e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  000e9	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
$LN1@Reward:
  000ee	5f		 pop	 edi

; 279  : 	}
; 280  : }

  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 04 00	 ret	 4
?Reward@CQuestionAnswer@@QAEXH@Z ENDP			; CQuestionAnswer::Reward
_TEXT	ENDS
PUBLIC	?size@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 07	 sar	 eax, 7

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEAAUQUESTIONANSWER_DATA@@I@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEAAUQUESTIONANSWER_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEAAUQUESTIONANSWER_DATA@@I@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	c1 e0 07	 shl	 eax, 7
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEAAUQUESTIONANSWER_DATA@@I@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBE_NPBUQUESTIONANSWER_DATA@@@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBE_NPBUQUESTIONANSWER_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBE_NPBUQUESTIONANSWER_DATA@@@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBE_NPBUQUESTIONANSWER_DATA@@@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEXPAUQUESTIONANSWER_DATA@@0@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEXPAUQUESTIONANSWER_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEXPAUQUESTIONANSWER_DATA@@0@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEXPAUQUESTIONANSWER_DATA@@0@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::~_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::~_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::~_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UQUESTIONANSWER_DATA@@@std@@QAE@XZ ; std::allocator<QUESTIONANSWER_DATA>::allocator<QUESTIONANSWER_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UQUESTIONANSWER_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UQUESTIONANSWER_DATA@@@std@@QAE@XZ PROC	; std::allocator<QUESTIONANSWER_DATA>::allocator<QUESTIONANSWER_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UQUESTIONANSWER_DATA@@@std@@QAE@XZ ENDP	; std::allocator<QUESTIONANSWER_DATA>::allocator<QUESTIONANSWER_DATA>
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBE_NPBUQUESTIONANSWER_TIME@@@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Inside
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBE_NPBUQUESTIONANSWER_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBE_NPBUQUESTIONANSWER_TIME@@@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside@2
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside@2:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBE_NPBUQUESTIONANSWER_TIME@@@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEXPAUQUESTIONANSWER_TIME@@0@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEXPAUQUESTIONANSWER_TIME@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEXPAUQUESTIONANSWER_TIME@@0@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEXPAUQUESTIONANSWER_TIME@@0@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ ; std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::~_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::~_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::~_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UQUESTIONANSWER_TIME@@@std@@QAE@XZ ; std::allocator<QUESTIONANSWER_TIME>::allocator<QUESTIONANSWER_TIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UQUESTIONANSWER_TIME@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UQUESTIONANSWER_TIME@@@std@@QAE@XZ PROC	; std::allocator<QUESTIONANSWER_TIME>::allocator<QUESTIONANSWER_TIME>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UQUESTIONANSWER_TIME@@@std@@QAE@XZ ENDP	; std::allocator<QUESTIONANSWER_TIME>::allocator<QUESTIONANSWER_TIME>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 07	 sar	 eax, 7

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEXXZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UQUESTIONANSWER_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<QUESTIONANSWER_DATA>::allocator<QUESTIONANSWER_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UQUESTIONANSWER_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UQUESTIONANSWER_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<QUESTIONANSWER_DATA>::allocator<QUESTIONANSWER_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UQUESTIONANSWER_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<QUESTIONANSWER_DATA>::allocator<QUESTIONANSWER_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@I@Z ; std::allocator<QUESTIONANSWER_DATA>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@I@Z PROC ; std::allocator<QUESTIONANSWER_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@I@Z ENDP ; std::allocator<QUESTIONANSWER_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEXXZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEXXZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000a	cc		 int	 3
?_Xlen@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEXXZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UQUESTIONANSWER_TIME@@@std@@QAE@ABV01@@Z ; std::allocator<QUESTIONANSWER_TIME>::allocator<QUESTIONANSWER_TIME>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UQUESTIONANSWER_TIME@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UQUESTIONANSWER_TIME@@@std@@QAE@ABV01@@Z PROC ; std::allocator<QUESTIONANSWER_TIME>::allocator<QUESTIONANSWER_TIME>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UQUESTIONANSWER_TIME@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<QUESTIONANSWER_TIME>::allocator<QUESTIONANSWER_TIME>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@I@Z ; std::allocator<QUESTIONANSWER_TIME>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@I@Z PROC ; std::allocator<QUESTIONANSWER_TIME>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@I@Z ENDP ; std::allocator<QUESTIONANSWER_TIME>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEABUQUESTIONANSWER_TIME@@XZ ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator*
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEABUQUESTIONANSWER_TIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEABUQUESTIONANSWER_TIME@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEABUQUESTIONANSWER_TIME@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 08	 add	 DWORD PTR [eax], 8

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UQUESTIONANSWER_DATA@@@std@@QBEIXZ ; std::allocator<QUESTIONANSWER_DATA>::max_size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UQUESTIONANSWER_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UQUESTIONANSWER_DATA@@@std@@QBEIXZ PROC ; std::allocator<QUESTIONANSWER_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UQUESTIONANSWER_DATA@@@std@@QBEIXZ ENDP ; std::allocator<QUESTIONANSWER_DATA>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UQUESTIONANSWER_TIME@@@std@@QBEIXZ ; std::allocator<QUESTIONANSWER_TIME>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UQUESTIONANSWER_TIME@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UQUESTIONANSWER_TIME@@@std@@QBEIXZ PROC ; std::allocator<QUESTIONANSWER_TIME>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UQUESTIONANSWER_TIME@@@std@@QBEIXZ ENDP ; std::allocator<QUESTIONANSWER_TIME>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUQUESTIONANSWER_DATA@@@std@@YAPBUQUESTIONANSWER_DATA@@ABU1@@Z ; std::addressof<QUESTIONANSWER_DATA const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUQUESTIONANSWER_DATA@@@std@@YAPBUQUESTIONANSWER_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUQUESTIONANSWER_DATA@@@std@@YAPBUQUESTIONANSWER_DATA@@ABU1@@Z PROC ; std::addressof<QUESTIONANSWER_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUQUESTIONANSWER_DATA@@@std@@YAPBUQUESTIONANSWER_DATA@@ABU1@@Z ENDP ; std::addressof<QUESTIONANSWER_DATA const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUQUESTIONANSWER_TIME@@@std@@YAPBUQUESTIONANSWER_TIME@@ABU1@@Z ; std::addressof<QUESTIONANSWER_TIME const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBUQUESTIONANSWER_TIME@@@std@@YAPBUQUESTIONANSWER_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUQUESTIONANSWER_TIME@@@std@@YAPBUQUESTIONANSWER_TIME@@ABU1@@Z PROC ; std::addressof<QUESTIONANSWER_TIME const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUQUESTIONANSWER_TIME@@@std@@YAPBUQUESTIONANSWER_TIME@@ABU1@@Z ENDP ; std::addressof<QUESTIONANSWER_TIME const >
_TEXT	ENDS
PUBLIC	??$forward@AAUQUESTIONANSWER_DATA@@@std@@YAAAUQUESTIONANSWER_DATA@@AAU1@@Z ; std::forward<QUESTIONANSWER_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUQUESTIONANSWER_DATA@@@std@@YAAAUQUESTIONANSWER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUQUESTIONANSWER_DATA@@@std@@YAAAUQUESTIONANSWER_DATA@@AAU1@@Z PROC ; std::forward<QUESTIONANSWER_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUQUESTIONANSWER_DATA@@@std@@YAAAUQUESTIONANSWER_DATA@@AAU1@@Z ENDP ; std::forward<QUESTIONANSWER_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAUQUESTIONANSWER_DATA@@@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@AAU2@@Z ; std::allocator<QUESTIONANSWER_DATA>::construct<QUESTIONANSWER_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUQUESTIONANSWER_DATA@@@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUQUESTIONANSWER_DATA@@@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@AAU2@@Z PROC ; std::allocator<QUESTIONANSWER_DATA>::construct<QUESTIONANSWER_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi

; 209  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@AAUQUESTIONANSWER_DATA@@@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@AAU2@@Z ENDP ; std::allocator<QUESTIONANSWER_DATA>::construct<QUESTIONANSWER_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABUQUESTIONANSWER_DATA@@@std@@YAABUQUESTIONANSWER_DATA@@ABU1@@Z ; std::forward<QUESTIONANSWER_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUQUESTIONANSWER_DATA@@@std@@YAABUQUESTIONANSWER_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUQUESTIONANSWER_DATA@@@std@@YAABUQUESTIONANSWER_DATA@@ABU1@@Z PROC ; std::forward<QUESTIONANSWER_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUQUESTIONANSWER_DATA@@@std@@YAABUQUESTIONANSWER_DATA@@ABU1@@Z ENDP ; std::forward<QUESTIONANSWER_DATA const &>
_TEXT	ENDS
PUBLIC	??$forward@AAUQUESTIONANSWER_TIME@@@std@@YAAAUQUESTIONANSWER_TIME@@AAU1@@Z ; std::forward<QUESTIONANSWER_TIME &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAUQUESTIONANSWER_TIME@@@std@@YAAAUQUESTIONANSWER_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUQUESTIONANSWER_TIME@@@std@@YAAAUQUESTIONANSWER_TIME@@AAU1@@Z PROC ; std::forward<QUESTIONANSWER_TIME &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUQUESTIONANSWER_TIME@@@std@@YAAAUQUESTIONANSWER_TIME@@AAU1@@Z ENDP ; std::forward<QUESTIONANSWER_TIME &>
_TEXT	ENDS
PUBLIC	??$construct@AAUQUESTIONANSWER_TIME@@@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@AAU2@@Z ; std::allocator<QUESTIONANSWER_TIME>::construct<QUESTIONANSWER_TIME &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUQUESTIONANSWER_TIME@@@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUQUESTIONANSWER_TIME@@@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@AAU2@@Z PROC ; std::allocator<QUESTIONANSWER_TIME>::construct<QUESTIONANSWER_TIME &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@2:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@AAUQUESTIONANSWER_TIME@@@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@AAU2@@Z ENDP ; std::allocator<QUESTIONANSWER_TIME>::construct<QUESTIONANSWER_TIME &>
_TEXT	ENDS
PUBLIC	??$forward@ABUQUESTIONANSWER_TIME@@@std@@YAABUQUESTIONANSWER_TIME@@ABU1@@Z ; std::forward<QUESTIONANSWER_TIME const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUQUESTIONANSWER_TIME@@@std@@YAABUQUESTIONANSWER_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUQUESTIONANSWER_TIME@@@std@@YAABUQUESTIONANSWER_TIME@@ABU1@@Z PROC ; std::forward<QUESTIONANSWER_TIME const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUQUESTIONANSWER_TIME@@@std@@YAABUQUESTIONANSWER_TIME@@ABU1@@Z ENDP ; std::forward<QUESTIONANSWER_TIME const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UQUESTIONANSWER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUQUESTIONANSWER_DATA@@0@Z ; std::_Ptr_cat<QUESTIONANSWER_DATA,QUESTIONANSWER_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UQUESTIONANSWER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUQUESTIONANSWER_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UQUESTIONANSWER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUQUESTIONANSWER_DATA@@0@Z PROC ; std::_Ptr_cat<QUESTIONANSWER_DATA,QUESTIONANSWER_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UQUESTIONANSWER_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUQUESTIONANSWER_DATA@@0@Z ENDP ; std::_Ptr_cat<QUESTIONANSWER_DATA,QUESTIONANSWER_DATA>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UQUESTIONANSWER_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUQUESTIONANSWER_TIME@@0@Z ; std::_Ptr_cat<QUESTIONANSWER_TIME,QUESTIONANSWER_TIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@UQUESTIONANSWER_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUQUESTIONANSWER_TIME@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UQUESTIONANSWER_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUQUESTIONANSWER_TIME@@0@Z PROC ; std::_Ptr_cat<QUESTIONANSWER_TIME,QUESTIONANSWER_TIME>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UQUESTIONANSWER_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUQUESTIONANSWER_TIME@@0@Z ENDP ; std::_Ptr_cat<QUESTIONANSWER_TIME,QUESTIONANSWER_TIME>
_TEXT	ENDS
PUBLIC	??$_Construct@UQUESTIONANSWER_DATA@@ABU1@@std@@YAXPAUQUESTIONANSWER_DATA@@ABU1@@Z ; std::_Construct<QUESTIONANSWER_DATA,QUESTIONANSWER_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UQUESTIONANSWER_DATA@@ABU1@@std@@YAXPAUQUESTIONANSWER_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UQUESTIONANSWER_DATA@@ABU1@@std@@YAXPAUQUESTIONANSWER_DATA@@ABU1@@Z PROC ; std::_Construct<QUESTIONANSWER_DATA,QUESTIONANSWER_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@Construct:
  00017	5f		 pop	 edi

; 49   : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Construct@UQUESTIONANSWER_DATA@@ABU1@@std@@YAXPAUQUESTIONANSWER_DATA@@ABU1@@Z ENDP ; std::_Construct<QUESTIONANSWER_DATA,QUESTIONANSWER_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UQUESTIONANSWER_TIME@@ABU1@@std@@YAXPAUQUESTIONANSWER_TIME@@ABU1@@Z ; std::_Construct<QUESTIONANSWER_TIME,QUESTIONANSWER_TIME const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@UQUESTIONANSWER_TIME@@ABU1@@std@@YAXPAUQUESTIONANSWER_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UQUESTIONANSWER_TIME@@ABU1@@std@@YAXPAUQUESTIONANSWER_TIME@@ABU1@@Z PROC ; std::_Construct<QUESTIONANSWER_TIME,QUESTIONANSWER_TIME const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct@2:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UQUESTIONANSWER_TIME@@ABU1@@std@@YAXPAUQUESTIONANSWER_TIME@@ABU1@@Z ENDP ; std::_Construct<QUESTIONANSWER_TIME,QUESTIONANSWER_TIME const &>
_TEXT	ENDS
PUBLIC	??$move@AAUQUESTIONANSWER_DATA@@@std@@YA$$QAUQUESTIONANSWER_DATA@@AAU1@@Z ; std::move<QUESTIONANSWER_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUQUESTIONANSWER_DATA@@@std@@YA$$QAUQUESTIONANSWER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUQUESTIONANSWER_DATA@@@std@@YA$$QAUQUESTIONANSWER_DATA@@AAU1@@Z PROC ; std::move<QUESTIONANSWER_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUQUESTIONANSWER_DATA@@@std@@YA$$QAUQUESTIONANSWER_DATA@@AAU1@@Z ENDP ; std::move<QUESTIONANSWER_DATA &>
_TEXT	ENDS
PUBLIC	??$move@AAUQUESTIONANSWER_TIME@@@std@@YA$$QAUQUESTIONANSWER_TIME@@AAU1@@Z ; std::move<QUESTIONANSWER_TIME &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAUQUESTIONANSWER_TIME@@@std@@YA$$QAUQUESTIONANSWER_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUQUESTIONANSWER_TIME@@@std@@YA$$QAUQUESTIONANSWER_TIME@@AAU1@@Z PROC ; std::move<QUESTIONANSWER_TIME &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUQUESTIONANSWER_TIME@@@std@@YA$$QAUQUESTIONANSWER_TIME@@AAU1@@Z ENDP ; std::move<QUESTIONANSWER_TIME &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUQUESTIONANSWER_DATA@@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@@Z ; std::_Val_type<QUESTIONANSWER_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUQUESTIONANSWER_DATA@@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUQUESTIONANSWER_DATA@@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@@Z PROC ; std::_Val_type<QUESTIONANSWER_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUQUESTIONANSWER_DATA@@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@@Z ENDP ; std::_Val_type<QUESTIONANSWER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUQUESTIONANSWER_TIME@@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@@Z ; std::_Val_type<QUESTIONANSWER_TIME *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAUQUESTIONANSWER_TIME@@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUQUESTIONANSWER_TIME@@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@@Z PROC ; std::_Val_type<QUESTIONANSWER_TIME *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUQUESTIONANSWER_TIME@@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@@Z ENDP ; std::_Val_type<QUESTIONANSWER_TIME *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UQUESTIONANSWER_DATA@@@std@@YAXPAUQUESTIONANSWER_DATA@@@Z ; std::_Destroy<QUESTIONANSWER_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UQUESTIONANSWER_DATA@@@std@@YAXPAUQUESTIONANSWER_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UQUESTIONANSWER_DATA@@@std@@YAXPAUQUESTIONANSWER_DATA@@@Z PROC ; std::_Destroy<QUESTIONANSWER_DATA>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UQUESTIONANSWER_DATA@@@std@@YAXPAUQUESTIONANSWER_DATA@@@Z ENDP ; std::_Destroy<QUESTIONANSWER_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy@UQUESTIONANSWER_TIME@@@std@@YAXPAUQUESTIONANSWER_TIME@@@Z ; std::_Destroy<QUESTIONANSWER_TIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@UQUESTIONANSWER_TIME@@@std@@YAXPAUQUESTIONANSWER_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UQUESTIONANSWER_TIME@@@std@@YAXPAUQUESTIONANSWER_TIME@@@Z PROC ; std::_Destroy<QUESTIONANSWER_TIME>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UQUESTIONANSWER_TIME@@@std@@YAXPAUQUESTIONANSWER_TIME@@@Z ENDP ; std::_Destroy<QUESTIONANSWER_TIME>
_TEXT	ENDS
PUBLIC	??$forward@UQUESTIONANSWER_DATA@@@std@@YA$$QAUQUESTIONANSWER_DATA@@AAU1@@Z ; std::forward<QUESTIONANSWER_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UQUESTIONANSWER_DATA@@@std@@YA$$QAUQUESTIONANSWER_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UQUESTIONANSWER_DATA@@@std@@YA$$QAUQUESTIONANSWER_DATA@@AAU1@@Z PROC ; std::forward<QUESTIONANSWER_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UQUESTIONANSWER_DATA@@@std@@YA$$QAUQUESTIONANSWER_DATA@@AAU1@@Z ENDP ; std::forward<QUESTIONANSWER_DATA>
_TEXT	ENDS
PUBLIC	??$forward@UQUESTIONANSWER_TIME@@@std@@YA$$QAUQUESTIONANSWER_TIME@@AAU1@@Z ; std::forward<QUESTIONANSWER_TIME>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@UQUESTIONANSWER_TIME@@@std@@YA$$QAUQUESTIONANSWER_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UQUESTIONANSWER_TIME@@@std@@YA$$QAUQUESTIONANSWER_TIME@@AAU1@@Z PROC ; std::forward<QUESTIONANSWER_TIME>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UQUESTIONANSWER_TIME@@@std@@YA$$QAUQUESTIONANSWER_TIME@@AAU1@@Z ENDP ; std::forward<QUESTIONANSWER_TIME>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?Search@CQuestionAnswer@@QAEXXZ			; CQuestionAnswer::Search
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\questionanswer.cpp
;	COMDAT ?Search@CQuestionAnswer@@QAEXXZ
_TEXT	SEGMENT
?Search@CQuestionAnswer@@QAEXXZ PROC			; CQuestionAnswer::Search, COMDAT
; _this$ = ecx

; 194  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 195  : 	int iDataSize = this->m_Data.size();

  00004	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  00007	2b 77 18	 sub	 esi, DWORD PTR [edi+24]
  0000a	c1 fe 07	 sar	 esi, 7

; 196  : 
; 197  : 	if(iDataSize <= 0)

  0000d	85 f6		 test	 esi, esi
  0000f	7e 1a		 jle	 SHORT $LN2@Search

; 198  : 	{
; 199  : 		return;
; 200  : 	}
; 201  : 
; 202  : 	this->m_NumData = rand() % iDataSize;

  00011	e8 00 00 00 00	 call	 _rand
  00016	99		 cdq
  00017	f7 fe		 idiv	 esi
  00019	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 203  : 
; 204  : 	AllSendServerMsg(this->m_Data[this->m_NumData].Question);

  0001c	c1 e2 07	 shl	 edx, 7
  0001f	03 57 18	 add	 edx, DWORD PTR [edi+24]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  00028	83 c4 04	 add	 esp, 4
$LN2@Search:

; 205  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	c3		 ret	 0
?Search@CQuestionAnswer@@QAEXXZ ENDP			; CQuestionAnswer::Search
_TEXT	ENDS
PUBLIC	??_C@_0BE@PEGBOLMA@?$FL?$CFs?$FN?5Correct?5Answer?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Chat@CQuestionAnswer@@QAEXHPAD@Z		; CQuestionAnswer::Chat
EXTRN	_sprintf:PROC
;	COMDAT ??_C@_0BE@PEGBOLMA@?$FL?$CFs?$FN?5Correct?5Answer?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BE@PEGBOLMA@?$FL?$CFs?$FN?5Correct?5Answer?$AA@ DB '[%s] Correct A'
	DB	'nswer', 00H					; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\questionanswer.cpp
CONST	ENDS
;	COMDAT ?Chat@CQuestionAnswer@@QAEXHPAD@Z
_TEXT	SEGMENT
_szText$211208 = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_Msg$ = 12						; size = 4
?Chat@CQuestionAnswer@@QAEXHPAD@Z PROC			; CQuestionAnswer::Chat, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 209  : 	if(!this->m_Enable)

  0001a	83 3f 00	 cmp	 DWORD PTR [edi], 0
  0001d	0f 84 9c 00 00
	00		 je	 $LN1@Chat

; 210  : 	{
; 211  : 		return;
; 212  : 	}
; 213  : 	
; 214  : 	if(this->m_NumData == -1)

  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	83 f8 ff	 cmp	 eax, -1
  00029	0f 84 90 00 00
	00		 je	 $LN1@Chat

; 215  : 	{
; 216  : 		return;
; 217  : 	}
; 218  : 
; 219  : 	if(!OBJMAX_RANGE(aIndex))

  0002f	85 db		 test	 ebx, ebx
  00031	0f 88 88 00 00
	00		 js	 $LN1@Chat
  00037	33 c9		 xor	 ecx, ecx
  00039	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0003f	0f 9e c1	 setle	 cl
  00042	85 c9		 test	 ecx, ecx
  00044	74 79		 je	 SHORT $LN1@Chat

; 220  : 	{
; 221  : 		return;
; 222  : 	}
; 223  : 
; 224  : 	LPOBJ lpObj = &gObj[aIndex];
; 225  : 
; 226  : 	if(!strcmp(Msg, this->m_Data[this->m_NumData].Answer))

  00046	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00049	56		 push	 esi
  0004a	8b f3		 mov	 esi, ebx
  0004c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00052	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00058	c1 e0 07	 shl	 eax, 7
  0005b	8d 4c 08 40	 lea	 ecx, DWORD PTR [eax+ecx+64]
  0005f	8b 45 0c	 mov	 eax, DWORD PTR _Msg$[ebp]
$LL11@Chat:
  00062	8a 10		 mov	 dl, BYTE PTR [eax]
  00064	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00066	75 1a		 jne	 SHORT $LN12@Chat
  00068	84 d2		 test	 dl, dl
  0006a	74 12		 je	 SHORT $LN13@Chat
  0006c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0006f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00072	75 0e		 jne	 SHORT $LN12@Chat
  00074	83 c0 02	 add	 eax, 2
  00077	83 c1 02	 add	 ecx, 2
  0007a	84 d2		 test	 dl, dl
  0007c	75 e4		 jne	 SHORT $LL11@Chat
$LN13@Chat:
  0007e	33 c0		 xor	 eax, eax
  00080	eb 05		 jmp	 SHORT $LN14@Chat
$LN12@Chat:
  00082	1b c0		 sbb	 eax, eax
  00084	83 d8 ff	 sbb	 eax, -1
$LN14@Chat:
  00087	85 c0		 test	 eax, eax
  00089	75 33		 jne	 SHORT $LN15@Chat

; 227  : 	{
; 228  : 		this->Reward(aIndex);

  0008b	53		 push	 ebx
  0008c	8b cf		 mov	 ecx, edi
  0008e	e8 00 00 00 00	 call	 ?Reward@CQuestionAnswer@@QAEXH@Z ; CQuestionAnswer::Reward

; 229  : 
; 230  : 		char szText[128];
; 231  : 		sprintf(szText, "[%s] Correct Answer", lpObj->Name);

  00093	83 c6 77	 add	 esi, 119		; 00000077H
  00096	56		 push	 esi
  00097	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _szText$211208[ebp]
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PEGBOLMA@?$FL?$CFs?$FN?5Correct?5Answer?$AA@
  000a2	52		 push	 edx
  000a3	e8 00 00 00 00	 call	 _sprintf

; 232  : 		AllSendServerMsg(szText);

  000a8	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szText$211208[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  000b4	83 c4 10	 add	 esp, 16			; 00000010H

; 233  : 	
; 234  : 		this->m_NumData = -1;

  000b7	c7 47 04 ff ff
	ff ff		 mov	 DWORD PTR [edi+4], -1
$LN15@Chat:
  000be	5e		 pop	 esi
$LN1@Chat:

; 235  : 	}
; 236  : }

  000bf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c2	5f		 pop	 edi
  000c3	33 cd		 xor	 ecx, ebp
  000c5	5b		 pop	 ebx
  000c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 08 00	 ret	 8
?Chat@CQuestionAnswer@@QAEXHPAD@Z ENDP			; CQuestionAnswer::Chat
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@V?$allocator@UQUESTIONANSWER_DATA@@@1@@Z ; std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@V?$allocator@UQUESTIONANSWER_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@V?$allocator@UQUESTIONANSWER_DATA@@@1@@Z PROC ; std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@V?$allocator@UQUESTIONANSWER_DATA@@@1@@Z ENDP ; std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@V?$allocator@UQUESTIONANSWER_TIME@@@1@@Z ; std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@V?$allocator@UQUESTIONANSWER_TIME@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@V?$allocator@UQUESTIONANSWER_TIME@@@1@@Z PROC ; std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@V?$allocator@UQUESTIONANSWER_TIME@@@1@@Z ENDP ; std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEAAUQUESTIONANSWER_TIME@@XZ ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEAAUQUESTIONANSWER_TIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEAAUQUESTIONANSWER_TIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEAAUQUESTIONANSWER_TIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 08	 add	 DWORD PTR [eax], 8

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEII@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 01	 mov	 edx, 33554431		; 01ffffffH
  0000d	c1 f8 07	 sar	 eax, 7
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEII@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEII@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0000d	c1 f8 03	 sar	 eax, 3
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to@2:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IBEII@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@AAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@2:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UQUESTIONANSWER_DATA@@@std@@YAPAUQUESTIONANSWER_DATA@@IPAU1@@Z ; std::_Allocate<QUESTIONANSWER_DATA>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UQUESTIONANSWER_DATA@@@std@@YAPAUQUESTIONANSWER_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T213331 = -12						; size = 12
$T213336 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UQUESTIONANSWER_DATA@@@std@@YAPAUQUESTIONANSWER_DATA@@IPAU1@@Z PROC ; std::_Allocate<QUESTIONANSWER_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 40		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	01		 cmp	 ecx, 33554431		; 01ffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	c1 e1 07	 shl	 ecx, 7
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	8d 45 08	 lea	 eax, DWORD PTR $T213336[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T213331[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T213336[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T213331[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T213331[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UQUESTIONANSWER_DATA@@@std@@YAPAUQUESTIONANSWER_DATA@@IPAU1@@Z ENDP ; std::_Allocate<QUESTIONANSWER_DATA>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Allocate@UQUESTIONANSWER_TIME@@@std@@YAPAUQUESTIONANSWER_TIME@@IPAU1@@Z ; std::_Allocate<QUESTIONANSWER_TIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@UQUESTIONANSWER_TIME@@@std@@YAPAUQUESTIONANSWER_TIME@@IPAU1@@Z
_TEXT	SEGMENT
$T213344 = -12						; size = 12
$T213348 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UQUESTIONANSWER_TIME@@@std@@YAPAUQUESTIONANSWER_TIME@@IPAU1@@Z PROC ; std::_Allocate<QUESTIONANSWER_TIME>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate@2
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T213348[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T213344[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T213348[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T213344[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T213344[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@UQUESTIONANSWER_TIME@@@std@@YAPAUQUESTIONANSWER_TIME@@IPAU1@@Z ENDP ; std::_Allocate<QUESTIONANSWER_TIME>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@ABU3@@Z ; std::allocator<QUESTIONANSWER_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@ABU3@@Z PROC ; std::allocator<QUESTIONANSWER_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN5@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN5@construct@3:
  00017	5f		 pop	 edi

; 198  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@ABU3@@Z ENDP ; std::allocator<QUESTIONANSWER_DATA>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@ABU3@@Z ; std::allocator<QUESTIONANSWER_TIME>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@ABU3@@Z PROC ; std::allocator<QUESTIONANSWER_TIME>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@4
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@4:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@ABU3@@Z ENDP ; std::allocator<QUESTIONANSWER_TIME>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUQUESTIONANSWER_DATA@@PAU1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUQUESTIONANSWER_DATA@@PAU1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUQUESTIONANSWER_DATA@@PAU1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN1@Move
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 ea 80	 sub	 edx, -128		; ffffff80H
  0001a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001f	83 e8 80	 sub	 eax, -128		; ffffff80H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL3@Move
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN1@Move:
  0002a	5b		 pop	 ebx

; 2515 : 	return (_Dest);
; 2516 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUQUESTIONANSWER_DATA@@PAU1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUQUESTIONANSWER_TIME@@PAU1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAUQUESTIONANSWER_TIME@@PAU1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUQUESTIONANSWER_TIME@@PAU1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN1@Move@2
  00010	56		 push	 esi
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL3@Move@2
  00025	5e		 pop	 esi
$LN1@Move@2:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUQUESTIONANSWER_TIME@@PAU1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@@Z ; std::allocator<QUESTIONANSWER_DATA>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@@Z PROC ; std::allocator<QUESTIONANSWER_DATA>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@@Z ENDP ; std::allocator<QUESTIONANSWER_DATA>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@@Z ; std::allocator<QUESTIONANSWER_TIME>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@@Z PROC ; std::allocator<QUESTIONANSWER_TIME>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@@Z ENDP ; std::allocator<QUESTIONANSWER_TIME>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@$$QAU3@@Z ; std::allocator<QUESTIONANSWER_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@$$QAU3@@Z PROC ; std::allocator<QUESTIONANSWER_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@5
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@5:
  00017	5f		 pop	 edi

; 203  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEXPAUQUESTIONANSWER_DATA@@$$QAU3@@Z ENDP ; std::allocator<QUESTIONANSWER_DATA>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@$$QAU3@@Z ; std::allocator<QUESTIONANSWER_TIME>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@$$QAU3@@Z PROC ; std::allocator<QUESTIONANSWER_TIME>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@6
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@6:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEXPAUQUESTIONANSWER_TIME@@$$QAU3@@Z ENDP ; std::allocator<QUESTIONANSWER_TIME>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >
_TEXT	ENDS
PUBLIC	??0?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >
_TEXT	ENDS
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEPAUQUESTIONANSWER_TIME@@XZ ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEPAUQUESTIONANSWER_TIME@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEPAUQUESTIONANSWER_TIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBEPAUQUESTIONANSWER_TIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator->
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 08	 add	 edx, 8
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_TIME@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Make_iter
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QAE@PAUQUESTIONANSWER_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::_Vector_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEPAUQUESTIONANSWER_DATA@@I@Z ; std::allocator<QUESTIONANSWER_DATA>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEPAUQUESTIONANSWER_DATA@@I@Z
_TEXT	SEGMENT
$T213587 = -12						; size = 12
$T213579 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEPAUQUESTIONANSWER_DATA@@I@Z PROC ; std::allocator<QUESTIONANSWER_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 40		 je	 SHORT $LN1@allocate
  0000f	81 f9 ff ff ff
	01		 cmp	 ecx, 33554431		; 01ffffffH
  00015	77 10		 ja	 SHORT $LN3@allocate
  00017	c1 e1 07	 shl	 ecx, 7
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  00027	8d 45 08	 lea	 eax, DWORD PTR $T213579[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T213587[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T213579[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T213587[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T213587[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEPAUQUESTIONANSWER_DATA@@I@Z ENDP ; std::allocator<QUESTIONANSWER_DATA>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEPAUQUESTIONANSWER_TIME@@I@Z ; std::allocator<QUESTIONANSWER_TIME>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEPAUQUESTIONANSWER_TIME@@I@Z
_TEXT	SEGMENT
$T213610 = -12						; size = 12
$T213602 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEPAUQUESTIONANSWER_TIME@@I@Z PROC ; std::allocator<QUESTIONANSWER_TIME>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate@2
  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate@2
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate@2
$LN3@allocate@2:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T213602[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T213610[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T213602[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T213610[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T213610[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@2:
$LN1@allocate@2:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate@2:
?allocate@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEPAUQUESTIONANSWER_TIME@@I@Z ENDP ; std::allocator<QUESTIONANSWER_TIME>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN9@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN9@Cons_val@3:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@ABU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@4
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@4:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUQUESTIONANSWER_DATA@@PAU1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00@Z ; std::_Move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUQUESTIONANSWER_DATA@@PAU1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUQUESTIONANSWER_DATA@@PAU1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00@Z PROC ; std::_Move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN5@Move@3
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL7@Move@3:
  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 ea 80	 sub	 edx, -128		; ffffff80H
  0001a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001f	83 e8 80	 sub	 eax, -128		; ffffff80H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL7@Move@3
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN5@Move@3:
  0002a	5b		 pop	 ebx

; 2536 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUQUESTIONANSWER_DATA@@PAU1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00@Z ENDP ; std::_Move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Move@PAUQUESTIONANSWER_TIME@@PAU1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00@Z ; std::_Move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAUQUESTIONANSWER_TIME@@PAU1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUQUESTIONANSWER_TIME@@PAU1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00@Z PROC ; std::_Move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 16		 je	 SHORT $LN5@Move@4
  00010	56		 push	 esi
$LL7@Move@4:
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c1 08	 add	 ecx, 8
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ca		 cmp	 ecx, edx
  00023	75 ec		 jne	 SHORT $LL7@Move@4
  00025	5e		 pop	 esi
$LN5@Move@4:

; 2536 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUQUESTIONANSWER_TIME@@PAU1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00@Z ENDP ; std::_Move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@@Z ; std::_Dest_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@@Z PROC ; std::_Dest_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@@Z ; std::_Dest_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@@Z PROC ; std::_Dest_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@@Z ENDP ; std::_Dest_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@5
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@5:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@6
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@6:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@XZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@XZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@XZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@XZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAXPAUQUESTIONANSWER_DATA@@0AAV?$allocator@UQUESTIONANSWER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<QUESTIONANSWER_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAXPAUQUESTIONANSWER_DATA@@0AAV?$allocator@UQUESTIONANSWER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAXPAUQUESTIONANSWER_DATA@@0AAV?$allocator@UQUESTIONANSWER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<QUESTIONANSWER_DATA> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAXPAUQUESTIONANSWER_DATA@@0AAV?$allocator@UQUESTIONANSWER_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<QUESTIONANSWER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAXPAUQUESTIONANSWER_TIME@@0AAV?$allocator@UQUESTIONANSWER_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<QUESTIONANSWER_TIME> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAXPAUQUESTIONANSWER_TIME@@0AAV?$allocator@UQUESTIONANSWER_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAXPAUQUESTIONANSWER_TIME@@0AAV?$allocator@UQUESTIONANSWER_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<QUESTIONANSWER_TIME> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAXPAUQUESTIONANSWER_TIME@@0AAV?$allocator@UQUESTIONANSWER_TIME@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<QUESTIONANSWER_TIME> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@U1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *,std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@U1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@U1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *,std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA>
  0001e	83 ee 80	 sub	 esi, -128		; ffffff80H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 ef 80	 sub	 edi, -128		; ffffff80H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@U1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *,std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@U1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *,std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@U1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@U1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *,std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov@2
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov@2:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@U3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@$$QAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME>
  0001e	83 c6 08	 add	 esi, 8
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 08	 add	 edi, 8
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov@2

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov@2:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@U1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *,std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Run@CQuestionAnswer@@QAEXXZ			; CQuestionAnswer::Run
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	?GetSecond@CTimerZt@@QAEHXZ:PROC		; CTimerZt::GetSecond
EXTRN	?g_TimerZt@@3VCTimerZt@@A:DWORD			; g_TimerZt
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\questionanswer.cpp
;	COMDAT ?Run@CQuestionAnswer@@QAEXXZ
_TEXT	SEGMENT
_systime$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?Run@CQuestionAnswer@@QAEXXZ PROC			; CQuestionAnswer::Run, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 164  : 	if(!this->m_Enable)

  00013	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00016	74 59		 je	 SHORT $LN2@Run

; 165  : 	{
; 166  : 		return;
; 167  : 	}
; 168  : 
; 169  : #if(NEWTIMEREX)
; 170  : 	if(g_TimerZt.GetSecond() != 00)

  00018	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_TimerZt@@3VCTimerZt@@A ; g_TimerZt
  0001d	e8 00 00 00 00	 call	 ?GetSecond@CTimerZt@@QAEHXZ ; CTimerZt::GetSecond
  00022	85 c0		 test	 eax, eax
  00024	75 4b		 jne	 SHORT $LN2@Run

; 171  : #else
; 172  : 	if(time.wSecond != 00)
; 173  : #endif
; 174  : 	{
; 175  : 		return;
; 176  : 	}
; 177  : 
; 178  : 	SYSTEMTIME systime;
; 179  : 
; 180  : 	GetLocalTime(&systime);

  00026	8d 45 ec	 lea	 eax, DWORD PTR _systime$[ebp]
  00029	50		 push	 eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 181  : 
; 182  : 	for(std::vector<QUESTIONANSWER_TIME>::iterator it = this->m_Time.begin(); it != this->m_Time.end(); it++)

  00030	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00033	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00036	3b c1		 cmp	 eax, ecx
  00038	74 37		 je	 SHORT $LN2@Run
  0003a	66 8b 55 f6	 mov	 dx, WORD PTR _systime$[ebp+10]
  0003e	57		 push	 edi
  0003f	0f b7 7d f4	 movzx	 edi, WORD PTR _systime$[ebp+8]
  00043	53		 push	 ebx
$LL21@Run:

; 183  : 	{
; 184  : 		if(it->Hour == systime.wHour && it->Min == systime.wMinute)

  00044	39 38		 cmp	 DWORD PTR [eax], edi
  00046	75 08		 jne	 SHORT $LN3@Run
  00048	0f b7 da	 movzx	 ebx, dx
  0004b	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0004e	74 18		 je	 SHORT $LN56@Run
$LN3@Run:

; 181  : 
; 182  : 	for(std::vector<QUESTIONANSWER_TIME>::iterator it = this->m_Time.begin(); it != this->m_Time.end(); it++)

  00050	83 c0 08	 add	 eax, 8
  00053	3b c1		 cmp	 eax, ecx
  00055	75 ed		 jne	 SHORT $LL21@Run
  00057	5b		 pop	 ebx
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 187  : 
; 188  : 			return;
; 189  : 		}
; 190  : 	}
; 191  : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
$LN56@Run:

; 185  : 		{
; 186  : 			this->Search();

  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?Search@CQuestionAnswer@@QAEXXZ ; CQuestionAnswer::Search
  0006f	5b		 pop	 ebx
  00070	5f		 pop	 edi
$LN2@Run:

; 187  : 
; 188  : 			return;
; 189  : 		}
; 190  : 	}
; 191  : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	33 cd		 xor	 ecx, ebp
  00076	5e		 pop	 esi
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
?Run@CQuestionAnswer@@QAEXXZ ENDP			; CQuestionAnswer::Run
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAXPAUQUESTIONANSWER_DATA@@0AAV?$allocator@UQUESTIONANSWER_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<QUESTIONANSWER_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAXPAUQUESTIONANSWER_DATA@@0AAV?$allocator@UQUESTIONANSWER_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAXPAUQUESTIONANSWER_DATA@@0AAV?$allocator@UQUESTIONANSWER_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<QUESTIONANSWER_DATA> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAXPAUQUESTIONANSWER_DATA@@0AAV?$allocator@UQUESTIONANSWER_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<QUESTIONANSWER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAXPAUQUESTIONANSWER_TIME@@0AAV?$allocator@UQUESTIONANSWER_TIME@@@0@@Z ; std::_Destroy_range<std::allocator<QUESTIONANSWER_TIME> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAXPAUQUESTIONANSWER_TIME@@0AAV?$allocator@UQUESTIONANSWER_TIME@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAXPAUQUESTIONANSWER_TIME@@0AAV?$allocator@UQUESTIONANSWER_TIME@@@0@@Z PROC ; std::_Destroy_range<std::allocator<QUESTIONANSWER_TIME> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAXPAUQUESTIONANSWER_TIME@@0AAV?$allocator@UQUESTIONANSWER_TIME@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<QUESTIONANSWER_TIME> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@@Z ; std::_Uninitialized_move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *,std::allocator<QUESTIONANSWER_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$214092 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@@Z PROC ; std::_Uninitialized_move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *,std::allocator<QUESTIONANSWER_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$214092[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@U1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *,std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *,std::allocator<QUESTIONANSWER_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@@Z ; std::_Uninitialized_move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *,std::allocator<QUESTIONANSWER_TIME> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@@Z
_TEXT	SEGMENT
__Cat$214102 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@@Z PROC ; std::_Uninitialized_move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *,std::allocator<QUESTIONANSWER_TIME> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$214102[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@U1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *,std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@@Z ENDP ; std::_Uninitialized_move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *,std::allocator<QUESTIONANSWER_TIME> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXPAUQUESTIONANSWER_DATA@@0@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXPAUQUESTIONANSWER_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXPAUQUESTIONANSWER_DATA@@0@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXPAUQUESTIONANSWER_DATA@@0@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXPAUQUESTIONANSWER_TIME@@0@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXPAUQUESTIONANSWER_TIME@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXPAUQUESTIONANSWER_TIME@@0@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXPAUQUESTIONANSWER_TIME@@0@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUQUESTIONANSWER_DATA@@@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEPAUQUESTIONANSWER_DATA@@PAU2@00@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Umove<QUESTIONANSWER_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUQUESTIONANSWER_DATA@@@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEPAUQUESTIONANSWER_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$214127 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUQUESTIONANSWER_DATA@@@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEPAUQUESTIONANSWER_DATA@@PAU2@00@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Umove<QUESTIONANSWER_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$214127[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@U1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *,std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUQUESTIONANSWER_DATA@@@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEPAUQUESTIONANSWER_DATA@@PAU2@00@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Umove<QUESTIONANSWER_DATA *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUQUESTIONANSWER_TIME@@@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEPAUQUESTIONANSWER_TIME@@PAU2@00@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Umove<QUESTIONANSWER_TIME *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUQUESTIONANSWER_TIME@@@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEPAUQUESTIONANSWER_TIME@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$214146 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUQUESTIONANSWER_TIME@@@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEPAUQUESTIONANSWER_TIME@@PAU2@00@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Umove<QUESTIONANSWER_TIME *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$214146[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@U1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *,std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUQUESTIONANSWER_TIME@@@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEPAUQUESTIONANSWER_TIME@@PAU2@00@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Umove<QUESTIONANSWER_TIME *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@0@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR __First_arg$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	89 1e		 mov	 DWORD PTR [esi], ebx
  00014	3b da		 cmp	 ebx, edx
  00016	74 27		 je	 SHORT $LN39@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	3b d0		 cmp	 edx, eax
  0001d	74 1d		 je	 SHORT $LN30@erase
  0001f	57		 push	 edi
$LL32@erase:
  00020	8b f2		 mov	 esi, edx
  00022	8b fb		 mov	 edi, ebx
  00024	83 ea 80	 sub	 edx, -128		; ffffff80H
  00027	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002c	83 eb 80	 sub	 ebx, -128		; ffffff80H
  0002f	f3 a5		 rep movsd
  00031	3b d0		 cmp	 edx, eax
  00033	75 eb		 jne	 SHORT $LL32@erase
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	5f		 pop	 edi
$LN30@erase:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  0003c	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN39@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 1214 : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXXZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@0@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@0@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __First_arg$[ebp]
  0000d	89 30		 mov	 DWORD PTR [eax], esi
  0000f	3b f2		 cmp	 esi, edx
  00011	74 26		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00013	57		 push	 edi
  00014	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00017	3b d7		 cmp	 edx, edi
  00019	74 1a		 je	 SHORT $LN30@erase@2
  0001b	53		 push	 ebx
  0001c	8d 64 24 00	 npad	 4
$LL32@erase@2:
  00020	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00022	89 1e		 mov	 DWORD PTR [esi], ebx
  00024	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  00027	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0002a	83 c2 08	 add	 edx, 8
  0002d	83 c6 08	 add	 esi, 8
  00030	3b d7		 cmp	 edx, edi
  00032	75 ec		 jne	 SHORT $LL32@erase@2
  00034	5b		 pop	 ebx
$LN30@erase@2:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00035	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00038	5f		 pop	 edi
$LN1@erase@2:
  00039	5e		 pop	 esi

; 1212 : 			}
; 1213 : 		return (_First);
; 1214 : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@@2@0@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXXZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXXZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXXZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$211592 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$214431 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 01	 cmp	 eax, 33554431		; 01ffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 07	 sar	 ecx, 7
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 57		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UQUESTIONANSWER_DATA@@@std@@QAEPAUQUESTIONANSWER_DATA@@I@Z ; std::allocator<QUESTIONANSWER_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$214431[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$211592[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUQUESTIONANSWER_DATA@@PAU1@V?$allocator@UQUESTIONANSWER_DATA@@@std@@U1@@std@@YAPAUQUESTIONANSWER_DATA@@PAU1@00AAV?$allocator@UQUESTIONANSWER_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<QUESTIONANSWER_DATA *,QUESTIONANSWER_DATA *,std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	83 c4 18	 add	 esp, 24			; 00000018H
  00080	2b f8		 sub	 edi, eax

; 761  : 			if (this->_Myfirst != 0)

  00082	85 c0		 test	 eax, eax
  00084	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008c	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  0008f	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00092	c1 e0 07	 shl	 eax, 7
  00095	03 c3		 add	 eax, ebx

; 770  : 			this->_Mylast = _Ptr + _Size;

  00097	83 e7 80	 and	 edi, -128		; ffffff80H
  0009a	03 fb		 add	 edi, ebx
  0009c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0009f	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a2	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b8	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$211592[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c1	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c4	6a 00		 push	 0
  000c6	6a 00		 push	 0
  000c8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000cd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::reserve
PUBLIC	?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::reserve
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$211633 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$214516 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 03	 sar	 ecx, 3
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 56		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UQUESTIONANSWER_TIME@@@std@@QAEPAUQUESTIONANSWER_TIME@@I@Z ; std::allocator<QUESTIONANSWER_TIME>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$214516[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$211633[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUQUESTIONANSWER_TIME@@PAU1@V?$allocator@UQUESTIONANSWER_TIME@@@std@@U1@@std@@YAPAUQUESTIONANSWER_TIME@@PAU1@00AAV?$allocator@UQUESTIONANSWER_TIME@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<QUESTIONANSWER_TIME *,QUESTIONANSWER_TIME *,std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	2b f8		 sub	 edi, eax
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	c1 ff 03	 sar	 edi, 3

; 761  : 			if (this->_Myfirst != 0)

  00085	85 c0		 test	 eax, eax
  00087	74 09		 je	 SHORT $LN35@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008f	83 c4 04	 add	 esp, 4
$LN35@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00095	8d 0c c3	 lea	 ecx, DWORD PTR [ebx+eax*8]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00098	8d 14 fb	 lea	 edx, DWORD PTR [ebx+edi*8]
  0009b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0009e	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b7	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$211633[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@2:
$LN41@reserve@2:
  000cc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::reserve
PUBLIC	??1?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::~vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::~vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::~vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXXZ ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	53		 push	 ebx
  00008	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	3b da		 cmp	 ebx, edx
  0000f	74 2c		 je	 SHORT $LN19@clear
  00011	8b c2		 mov	 eax, edx
  00013	3b d2		 cmp	 edx, edx
  00015	74 23		 je	 SHORT $LN48@clear
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL50@clear:
  00020	8b f0		 mov	 esi, eax
  00022	8b fb		 mov	 edi, ebx
  00024	83 e8 80	 sub	 eax, -128		; ffffff80H
  00027	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002c	83 eb 80	 sub	 ebx, -128		; ffffff80H
  0002f	f3 a5		 rep movsd
  00031	3b c2		 cmp	 eax, edx
  00033	75 eb		 jne	 SHORT $LL50@clear
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
$LN48@clear:
  0003a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN19@clear:
  0003d	5b		 pop	 ebx

; 1219 : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?clear@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::~vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::~vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@3
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@3:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::~vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXXZ ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXXZ PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::clear, COMDAT
; _this$ = ecx

; 1218 : 		erase(begin(), end());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00006	3b d6		 cmp	 edx, esi
  00008	74 1f		 je	 SHORT $LN19@clear@2
  0000a	8b c6		 mov	 eax, esi
  0000c	3b f6		 cmp	 esi, esi
  0000e	74 16		 je	 SHORT $LN48@clear@2
  00010	57		 push	 edi
$LL50@clear@2:
  00011	8b 38		 mov	 edi, DWORD PTR [eax]
  00013	89 3a		 mov	 DWORD PTR [edx], edi
  00015	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00018	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  0001b	83 c0 08	 add	 eax, 8
  0001e	83 c2 08	 add	 edx, 8
  00021	3b c6		 cmp	 eax, esi
  00023	75 ec		 jne	 SHORT $LL50@clear@2
  00025	5f		 pop	 edi
$LN48@clear@2:
  00026	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN19@clear@2:
  00029	5e		 pop	 esi

; 1219 : 		}

  0002a	c3		 ret	 0
?clear@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXXZ ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXI@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 01	 mov	 edi, 33554431		; 01ffffffH
  00014	c1 f8 07	 sar	 eax, 7
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 07	 sar	 edx, 7
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 01	 mov	 edi, 33554431		; 01ffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::reserve
$LN1@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXI@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXI@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00014	c1 f8 03	 sar	 eax, 3
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 03	 sar	 edx, 3
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve@2
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve@2
$LN23@Reserve@2:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve@2:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve@2
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve@2:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::reserve
$LN1@Reserve@2:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve@2:
?_Reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXI@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Reserve
_TEXT	ENDS
PUBLIC	??1CQuestionAnswer@@QAE@XZ			; CQuestionAnswer::~CQuestionAnswer
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\questionanswer.cpp
;	COMDAT ??1CQuestionAnswer@@QAE@XZ
_TEXT	SEGMENT
??1CQuestionAnswer@@QAE@XZ PROC				; CQuestionAnswer::~CQuestionAnswer, COMDAT
; _this$ = ecx

; 20   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 21   : }

  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	57		 push	 edi
  00007	33 ff		 xor	 edi, edi
  00009	3b c7		 cmp	 eax, edi
  0000b	74 09		 je	 SHORT $LN12@CQuestionA
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN12@CQuestionA:
  00016	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  00019	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  0001c	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  0001f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00022	3b c7		 cmp	 eax, edi
  00024	74 09		 je	 SHORT $LN23@CQuestionA
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4
$LN23@CQuestionA:
  0002f	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00032	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00035	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	c3		 ret	 0
??1CQuestionAnswer@@QAE@XZ ENDP				; CQuestionAnswer::~CQuestionAnswer
_TEXT	ENDS
PUBLIC	?Init@CQuestionAnswer@@QAEXXZ			; CQuestionAnswer::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CQuestionAnswer@@QAEXXZ
_TEXT	SEGMENT
$T215335 = -4						; size = 4
?Init@CQuestionAnswer@@QAEXXZ PROC			; CQuestionAnswer::Init, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b d1		 mov	 edx, ecx

; 25   : 	this->m_Enable = false;

  00006	33 c0		 xor	 eax, eax
  00008	53		 push	 ebx
  00009	89 02		 mov	 DWORD PTR [edx], eax

; 26   : 	this->m_NumData = -1;

  0000b	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 27   : 
; 28   : 	this->m_RewardWCoinC = 0;

  00012	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 29   : 	this->m_RewardWCoinP = 0;

  00015	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 30   : 	this->m_RewardGoblin = 0;

  00018	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 31   : 	this->m_RewardCredit = 0;

  0001b	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 32   : 
; 33   : 	this->m_Data.clear();

  0001e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00021	8b 5a 1c	 mov	 ebx, DWORD PTR [edx+28]
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	3b c3		 cmp	 eax, ebx
  00028	74 26		 je	 SHORT $LN21@Init
  0002a	89 45 fc	 mov	 DWORD PTR $T215335[ebp], eax
  0002d	8b c3		 mov	 eax, ebx
  0002f	3b db		 cmp	 ebx, ebx
  00031	74 17		 je	 SHORT $LN50@Init
$LL115@Init:
  00033	8b 7d fc	 mov	 edi, DWORD PTR $T215335[ebp]
  00036	83 6d fc 80	 sub	 DWORD PTR $T215335[ebp], -128 ; ffffff80H
  0003a	8b f0		 mov	 esi, eax
  0003c	83 e8 80	 sub	 eax, -128		; ffffff80H
  0003f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00044	f3 a5		 rep movsd
  00046	3b c3		 cmp	 eax, ebx
  00048	75 e9		 jne	 SHORT $LL115@Init
$LN50@Init:
  0004a	8b 45 fc	 mov	 eax, DWORD PTR $T215335[ebp]
  0004d	89 42 1c	 mov	 DWORD PTR [edx+28], eax
$LN21@Init:

; 34   : 	this->m_Time.clear();

  00050	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00053	8b 72 2c	 mov	 esi, DWORD PTR [edx+44]
  00056	3b ce		 cmp	 ecx, esi
  00058	74 1d		 je	 SHORT $LN75@Init
  0005a	8b c6		 mov	 eax, esi
  0005c	3b f6		 cmp	 esi, esi
  0005e	74 14		 je	 SHORT $LN104@Init
$LL106@Init:
  00060	8b 38		 mov	 edi, DWORD PTR [eax]
  00062	89 39		 mov	 DWORD PTR [ecx], edi
  00064	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00067	89 79 04	 mov	 DWORD PTR [ecx+4], edi
  0006a	83 c0 08	 add	 eax, 8
  0006d	83 c1 08	 add	 ecx, 8
  00070	3b c6		 cmp	 eax, esi
  00072	75 ec		 jne	 SHORT $LL106@Init
$LN104@Init:
  00074	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx
$LN75@Init:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 35   : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?Init@CQuestionAnswer@@QAEXXZ ENDP			; CQuestionAnswer::Init
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXABUQUESTIONANSWER_DATA@@@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXABUQUESTIONANSWER_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXABUQUESTIONANSWER_DATA@@@Z PROC ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 36		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 30		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXI@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 e7 80	 and	 edi, -128		; ffffff80H
  0002d	03 3e		 add	 edi, DWORD PTR [esi]
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	57		 push	 edi
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0003d	83 6e 04 80	 sub	 DWORD PTR [esi+4], -128	; ffffff80H
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00047	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004a	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004c	6a 01		 push	 1
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@IAEXI@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00055	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00058	57		 push	 edi
  00059	52		 push	 edx
  0005a	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA const &>
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00066	83 6e 04 80	 sub	 DWORD PTR [esi+4], -128	; ffffff80H
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?push_back@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXABUQUESTIONANSWER_DATA@@@Z ENDP ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXABUQUESTIONANSWER_TIME@@@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXABUQUESTIONANSWER_TIME@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXABUQUESTIONANSWER_TIME@@@Z PROC ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back@2
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXI@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c f8	 lea	 ecx, DWORD PTR [eax+edi*8]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@AAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back@2:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@IAEXI@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@ABU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXABUQUESTIONANSWER_TIME@@@Z ENDP ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::push_back
_TEXT	ENDS
PUBLIC	??0CQuestionAnswer@@QAE@XZ			; CQuestionAnswer::CQuestionAnswer
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\questionanswer.cpp
;	COMDAT ??0CQuestionAnswer@@QAE@XZ
_TEXT	SEGMENT
??0CQuestionAnswer@@QAE@XZ PROC				; CQuestionAnswer::CQuestionAnswer, COMDAT
; _this$ = ecx

; 15   : {

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00008	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0000b	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0000e	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00011	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00014	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 16   : 	this->Init();

  00017	e8 00 00 00 00	 call	 ?Init@CQuestionAnswer@@QAEXXZ ; CQuestionAnswer::Init

; 17   : }

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	c3		 ret	 0
??0CQuestionAnswer@@QAE@XZ ENDP				; CQuestionAnswer::CQuestionAnswer
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	_filename$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@CQuestionAnswer@@QAEXPAD@Z		; CQuestionAnswer::Read
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\questionanswer.cpp
CONST	ENDS
;	COMDAT ?Read@CQuestionAnswer@@QAEXPAD@Z
_TEXT	SEGMENT
_filename$GSCopy$ = -152				; size = 4
_List$211018 = -148					; size = 8
_this$GSCopy$ = -140					; size = 4
_iType$ = -136						; size = 4
_List$211031 = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Read@CQuestionAnswer@@QAEXPAD@Z PROC			; CQuestionAnswer::Read, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00018	8b d9		 mov	 ebx, ecx

; 57   : 	SMDFile = fopen(filename, "r");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001f	56		 push	 esi

; 150  : 				memcpy(List.Answer, TokenString, sizeof(List.Answer));
; 151  : 
; 152  : 				this->m_Data.push_back(List);

  00020	89 9d 74 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00026	89 b5 68 ff ff
	ff		 mov	 DWORD PTR _filename$GSCopy$[ebp], esi
  0002c	e8 00 00 00 00	 call	 _fopen
  00031	83 c4 08	 add	 esp, 8
  00034	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  00039	85 c0		 test	 eax, eax
  0003b	75 2c		 jne	 SHORT $LN19@Read

; 58   : 
; 59   : 	if(SMDFile == NULL)
; 60   : 	{
; 61   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), filename);

  0003d	56		 push	 esi
  0003e	68 c6 01 00 00	 push	 454			; 000001c6H
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00048	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00054	83 c4 08	 add	 esp, 8
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx

; 160  : }

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	33 cd		 xor	 ecx, ebp
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
$LN19@Read:

; 62   : 		return;
; 63   : 	}
; 64   : 
; 65   : 	SMDToken Token;
; 66   : 
; 67   : 	int iType = -1;
; 68   : 
; 69   : 	while(true)
; 70   : 	{
; 71   : 		Token = GetToken();

  00069	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 
; 73   :         if(Token == END)

  0006e	83 f8 02	 cmp	 eax, 2
  00071	0f 84 e5 03 00
	00		 je	 $LN14@Read
  00077	57		 push	 edi
  00078	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL18@Read:

; 74   : 		{
; 75   :             break;
; 76   : 		}
; 77   : 
; 78   : 		iType = (int)TokenNumber;

  00080	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00086	e8 00 00 00 00	 call	 __ftol2_sse
  0008b	8b f8		 mov	 edi, eax
  0008d	89 bd 78 ff ff
	ff		 mov	 DWORD PTR _iType$[ebp], edi

; 79   : 
; 80   : 		if(iType < 0 || iType > 3)

  00093	85 ff		 test	 edi, edi
  00095	0f 88 c0 03 00
	00		 js	 $LN225@Read
  0009b	83 ff 03	 cmp	 edi, 3
  0009e	0f 8f b7 03 00
	00		 jg	 $LN225@Read
$LL13@Read:

; 81   : 		{
; 82   : 			break;
; 83   : 		}
; 84   : 
; 85   : 		while(true)
; 86   : 		{
; 87   : 			if(iType == 0)

  000a4	85 ff		 test	 edi, edi
  000a6	75 4b		 jne	 SHORT $LN11@Read

; 88   : 			{
; 89   : 				Token = GetToken();

  000a8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 
; 91   : 				if(!strcmp("end", TokenString))

  000ad	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000b2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL204@Read:
  000b7	8a 10		 mov	 dl, BYTE PTR [eax]
  000b9	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000bb	75 1a		 jne	 SHORT $LN205@Read
  000bd	84 d2		 test	 dl, dl
  000bf	74 12		 je	 SHORT $LN222@Read
  000c1	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000c4	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c7	75 0e		 jne	 SHORT $LN205@Read
  000c9	83 c0 02	 add	 eax, 2
  000cc	83 c1 02	 add	 ecx, 2
  000cf	84 d2		 test	 dl, dl
  000d1	75 e4		 jne	 SHORT $LL204@Read
$LN222@Read:
  000d3	33 c0		 xor	 eax, eax
  000d5	eb 05		 jmp	 SHORT $LN207@Read
$LN205@Read:
  000d7	1b c0		 sbb	 eax, eax
  000d9	83 d8 ff	 sbb	 eax, -1
$LN207@Read:
  000dc	85 c0		 test	 eax, eax
  000de	0f 84 69 03 00
	00		 je	 $LN224@Read

; 92   : 				{
; 93   : 					break;
; 94   : 				}
; 95   : 
; 96   : 				this->m_Enable = (int)TokenNumber;

  000e4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ea	e8 00 00 00 00	 call	 __ftol2_sse
  000ef	89 03		 mov	 DWORD PTR [ebx], eax
  000f1	eb b1		 jmp	 SHORT $LL13@Read
$LN11@Read:

; 97   : 			}
; 98   : 			else if(iType == 1)

  000f3	83 ff 01	 cmp	 edi, 1
  000f6	0f 85 60 01 00
	00		 jne	 $LN8@Read

; 99   : 			{
; 100  : 				Token = GetToken();

  000fc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 
; 102  : 				if(!strcmp("end", TokenString))

  00101	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00106	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0010b	eb 03 8d 49 00	 npad	 5
$LL208@Read:
  00110	8a 10		 mov	 dl, BYTE PTR [eax]
  00112	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00114	75 1a		 jne	 SHORT $LN209@Read
  00116	84 d2		 test	 dl, dl
  00118	74 12		 je	 SHORT $LN223@Read
  0011a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0011d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00120	75 0e		 jne	 SHORT $LN209@Read
  00122	83 c0 02	 add	 eax, 2
  00125	83 c1 02	 add	 ecx, 2
  00128	84 d2		 test	 dl, dl
  0012a	75 e4		 jne	 SHORT $LL208@Read
$LN223@Read:
  0012c	33 c0		 xor	 eax, eax
  0012e	eb 05		 jmp	 SHORT $LN211@Read
$LN209@Read:
  00130	1b c0		 sbb	 eax, eax
  00132	83 d8 ff	 sbb	 eax, -1
$LN211@Read:
  00135	85 c0		 test	 eax, eax
  00137	0f 84 10 03 00
	00		 je	 $LN224@Read

; 103  : 				{
; 104  : 					break;
; 105  : 				}
; 106  : 
; 107  : 				QUESTIONANSWER_TIME List;
; 108  : 
; 109  : 				List.Hour = (int)TokenNumber;

  0013d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00143	e8 00 00 00 00	 call	 __ftol2_sse
  00148	89 85 6c ff ff
	ff		 mov	 DWORD PTR _List$211018[ebp], eax

; 110  : 
; 111  : 				Token = GetToken();

  0014e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 112  : 				List.Min = (int)TokenNumber;

  00153	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00159	e8 00 00 00 00	 call	 __ftol2_sse

; 113  : 
; 114  : 				this->m_Time.push_back(List);

  0015e	8d 73 28	 lea	 esi, DWORD PTR [ebx+40]
  00161	89 85 70 ff ff
	ff		 mov	 DWORD PTR _List$211018[ebp+4], eax
  00167	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0016a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _List$211018[ebp]
  00170	3b c8		 cmp	 ecx, eax
  00172	73 7c		 jae	 SHORT $LN25@Read
  00174	8b 16		 mov	 edx, DWORD PTR [esi]
  00176	3b d1		 cmp	 edx, ecx
  00178	77 76		 ja	 SHORT $LN25@Read
  0017a	8b f9		 mov	 edi, ecx
  0017c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0017f	2b fa		 sub	 edi, edx
  00181	c1 ff 03	 sar	 edi, 3
  00184	3b c1		 cmp	 eax, ecx
  00186	75 43		 jne	 SHORT $LN36@Read
  00188	2b c2		 sub	 eax, edx
  0018a	c1 f8 03	 sar	 eax, 3
  0018d	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  00192	0f 87 f7 02 00
	00		 ja	 $LN194@Read
  00198	2b ca		 sub	 ecx, edx
  0019a	40		 inc	 eax
  0019b	c1 f9 03	 sar	 ecx, 3
  0019e	3b c1		 cmp	 eax, ecx
  001a0	76 29		 jbe	 SHORT $LN36@Read
  001a2	8b d1		 mov	 edx, ecx
  001a4	d1 ea		 shr	 edx, 1
  001a6	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
  001ab	2b da		 sub	 ebx, edx
  001ad	3b d9		 cmp	 ebx, ecx
  001af	73 04		 jae	 SHORT $LN58@Read
  001b1	33 c9		 xor	 ecx, ecx
  001b3	eb 02		 jmp	 SHORT $LN59@Read
$LN58@Read:
  001b5	03 ca		 add	 ecx, edx
$LN59@Read:
  001b7	3b c8		 cmp	 ecx, eax
  001b9	73 02		 jae	 SHORT $LN55@Read
  001bb	8b c8		 mov	 ecx, eax
$LN55@Read:
  001bd	51		 push	 ecx
  001be	8b ce		 mov	 ecx, esi
  001c0	e8 00 00 00 00	 call	 ?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::reserve
  001c5	8b 9d 74 ff ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
$LN36@Read:
  001cb	8b 16		 mov	 edx, DWORD PTR [esi]
  001cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  001d0	8d 04 fa	 lea	 eax, DWORD PTR [edx+edi*8]
  001d3	50		 push	 eax
  001d4	51		 push	 ecx
  001d5	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  001d8	52		 push	 edx
  001d9	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@AAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME &>
  001de	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _iType$[ebp]
  001e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e7	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  001eb	e9 b4 fe ff ff	 jmp	 $LL13@Read
$LN25@Read:
  001f0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001f3	3b c1		 cmp	 eax, ecx
  001f5	75 45		 jne	 SHORT $LN71@Read
  001f7	8b 16		 mov	 edx, DWORD PTR [esi]
  001f9	2b c2		 sub	 eax, edx
  001fb	c1 f8 03	 sar	 eax, 3
  001fe	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  00203	0f 87 86 02 00
	00		 ja	 $LN194@Read
  00209	2b ca		 sub	 ecx, edx
  0020b	40		 inc	 eax
  0020c	c1 f9 03	 sar	 ecx, 3
  0020f	3b c1		 cmp	 eax, ecx
  00211	76 29		 jbe	 SHORT $LN71@Read
  00213	8b d1		 mov	 edx, ecx
  00215	d1 ea		 shr	 edx, 1
  00217	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  0021c	2b fa		 sub	 edi, edx
  0021e	3b f9		 cmp	 edi, ecx
  00220	73 04		 jae	 SHORT $LN93@Read
  00222	33 c9		 xor	 ecx, ecx
  00224	eb 02		 jmp	 SHORT $LN94@Read
$LN93@Read:
  00226	03 ca		 add	 ecx, edx
$LN94@Read:
  00228	3b c8		 cmp	 ecx, eax
  0022a	73 02		 jae	 SHORT $LN90@Read
  0022c	8b c8		 mov	 ecx, eax
$LN90@Read:
  0022e	51		 push	 ecx
  0022f	8b ce		 mov	 ecx, esi
  00231	e8 00 00 00 00	 call	 ?reserve@?$vector@UQUESTIONANSWER_TIME@@V?$allocator@UQUESTIONANSWER_TIME@@@std@@@std@@QAEXI@Z ; std::vector<QUESTIONANSWER_TIME,std::allocator<QUESTIONANSWER_TIME> >::reserve
  00236	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _iType$[ebp]
$LN71@Read:
  0023c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0023f	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _List$211018[ebp]
  00245	50		 push	 eax
  00246	51		 push	 ecx
  00247	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0024a	52		 push	 edx
  0024b	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_TIME@@@std@@UQUESTIONANSWER_TIME@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_TIME@@@0@PAUQUESTIONANSWER_TIME@@ABU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_TIME>,QUESTIONANSWER_TIME,QUESTIONANSWER_TIME const &>
  00250	83 c4 0c	 add	 esp, 12			; 0000000cH
  00253	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00257	e9 48 fe ff ff	 jmp	 $LL13@Read
$LN8@Read:

; 115  : 			}
; 116  : 			else if(iType == 2)

  0025c	83 ff 02	 cmp	 edi, 2
  0025f	0f 85 88 00 00
	00		 jne	 $LN5@Read

; 117  : 			{
; 118  : 				Token = GetToken();

  00265	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 119  : 
; 120  : 				if(!strcmp("end", TokenString))

  0026a	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0026f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL212@Read:
  00274	8a 10		 mov	 dl, BYTE PTR [eax]
  00276	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00278	75 1a		 jne	 SHORT $LN213@Read
  0027a	84 d2		 test	 dl, dl
  0027c	74 12		 je	 SHORT $LN214@Read
  0027e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00281	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00284	75 0e		 jne	 SHORT $LN213@Read
  00286	83 c0 02	 add	 eax, 2
  00289	83 c1 02	 add	 ecx, 2
  0028c	84 d2		 test	 dl, dl
  0028e	75 e4		 jne	 SHORT $LL212@Read
$LN214@Read:
  00290	33 c0		 xor	 eax, eax
  00292	eb 05		 jmp	 SHORT $LN215@Read
$LN213@Read:
  00294	1b c0		 sbb	 eax, eax
  00296	83 d8 ff	 sbb	 eax, -1
$LN215@Read:
  00299	85 c0		 test	 eax, eax
  0029b	0f 84 ac 01 00
	00		 je	 $LN224@Read

; 121  : 				{
; 122  : 					break;
; 123  : 				}
; 124  : 
; 125  : 				this->m_RewardWCoinC = (int)TokenNumber;

  002a1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002a7	e8 00 00 00 00	 call	 __ftol2_sse
  002ac	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 126  : 
; 127  : 				Token = GetToken();

  002af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 128  : 				this->m_RewardWCoinP = (int)TokenNumber;

  002b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ba	e8 00 00 00 00	 call	 __ftol2_sse
  002bf	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 129  : 
; 130  : 				Token = GetToken();

  002c2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 131  : 				this->m_RewardGoblin = (int)TokenNumber;

  002c7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002cd	e8 00 00 00 00	 call	 __ftol2_sse
  002d2	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 132  : 
; 133  : 				Token = GetToken();

  002d5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 134  : 				this->m_RewardCredit = (int)TokenNumber;

  002da	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002e0	e8 00 00 00 00	 call	 __ftol2_sse
  002e5	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  002e8	e9 b7 fd ff ff	 jmp	 $LL13@Read
$LN5@Read:

; 135  : 			}
; 136  : 			else if(iType == 3)

  002ed	83 ff 03	 cmp	 edi, 3
  002f0	0f 85 ae fd ff
	ff		 jne	 $LL13@Read

; 137  : 			{
; 138  : 				Token = GetToken();

  002f6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 139  : 
; 140  : 				if(!strcmp("end", TokenString))

  002fb	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00300	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL216@Read:
  00305	8a 10		 mov	 dl, BYTE PTR [eax]
  00307	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00309	75 1a		 jne	 SHORT $LN217@Read
  0030b	84 d2		 test	 dl, dl
  0030d	74 12		 je	 SHORT $LN218@Read
  0030f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00312	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00315	75 0e		 jne	 SHORT $LN217@Read
  00317	83 c0 02	 add	 eax, 2
  0031a	83 c1 02	 add	 ecx, 2
  0031d	84 d2		 test	 dl, dl
  0031f	75 e4		 jne	 SHORT $LL216@Read
$LN218@Read:
  00321	33 c0		 xor	 eax, eax
  00323	eb 05		 jmp	 SHORT $LN219@Read
$LN217@Read:
  00325	1b c0		 sbb	 eax, eax
  00327	83 d8 ff	 sbb	 eax, -1
$LN219@Read:
  0032a	85 c0		 test	 eax, eax
  0032c	0f 84 1b 01 00
	00		 je	 $LN224@Read

; 141  : 				{
; 142  : 					break;
; 143  : 				}
; 144  : 
; 145  : 				QUESTIONANSWER_DATA List;
; 146  : 
; 147  : 				memcpy(List.Question, TokenString, sizeof(List.Question));

  00332	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00337	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  0033c	8d bd 7c ff ff
	ff		 lea	 edi, DWORD PTR _List$211031[ebp]
  00342	f3 a5		 rep movsd

; 148  : 
; 149  : 				Token = GetToken();

  00344	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 150  : 				memcpy(List.Answer, TokenString, sizeof(List.Answer));
; 151  : 
; 152  : 				this->m_Data.push_back(List);

  00349	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0034c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00351	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00356	8d 7d bc	 lea	 edi, DWORD PTR _List$211031[ebp+64]
  00359	f3 a5		 rep movsd
  0035b	8d 73 18	 lea	 esi, DWORD PTR [ebx+24]
  0035e	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _List$211031[ebp]
  00364	3b c8		 cmp	 ecx, eax
  00366	73 79		 jae	 SHORT $LN109@Read
  00368	8b 16		 mov	 edx, DWORD PTR [esi]
  0036a	3b d1		 cmp	 edx, ecx
  0036c	77 73		 ja	 SHORT $LN109@Read
  0036e	8b f9		 mov	 edi, ecx
  00370	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00373	2b fa		 sub	 edi, edx
  00375	3b c1		 cmp	 eax, ecx
  00377	75 43		 jne	 SHORT $LN120@Read
  00379	2b c2		 sub	 eax, edx
  0037b	c1 f8 07	 sar	 eax, 7
  0037e	3d fe ff ff 01	 cmp	 eax, 33554430		; 01fffffeH
  00383	0f 87 06 01 00
	00		 ja	 $LN194@Read
  00389	2b ca		 sub	 ecx, edx
  0038b	40		 inc	 eax
  0038c	c1 f9 07	 sar	 ecx, 7
  0038f	3b c1		 cmp	 eax, ecx
  00391	76 29		 jbe	 SHORT $LN120@Read
  00393	8b d1		 mov	 edx, ecx
  00395	d1 ea		 shr	 edx, 1
  00397	bb ff ff ff 01	 mov	 ebx, 33554431		; 01ffffffH
  0039c	2b da		 sub	 ebx, edx
  0039e	3b d9		 cmp	 ebx, ecx
  003a0	73 04		 jae	 SHORT $LN142@Read
  003a2	33 c9		 xor	 ecx, ecx
  003a4	eb 02		 jmp	 SHORT $LN143@Read
$LN142@Read:
  003a6	03 ca		 add	 ecx, edx
$LN143@Read:
  003a8	3b c8		 cmp	 ecx, eax
  003aa	73 02		 jae	 SHORT $LN139@Read
  003ac	8b c8		 mov	 ecx, eax
$LN139@Read:
  003ae	51		 push	 ecx
  003af	8b ce		 mov	 ecx, esi
  003b1	e8 00 00 00 00	 call	 ?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::reserve
  003b6	8b 9d 74 ff ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
$LN120@Read:
  003bc	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  003bf	83 e7 80	 and	 edi, -128		; ffffff80H
  003c2	03 3e		 add	 edi, DWORD PTR [esi]
  003c4	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  003c7	57		 push	 edi
  003c8	52		 push	 edx
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@AAU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA &>
  003cf	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _iType$[ebp]
  003d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d8	83 6e 04 80	 sub	 DWORD PTR [esi+4], -128	; ffffff80H
  003dc	e9 c3 fc ff ff	 jmp	 $LL13@Read
$LN109@Read:
  003e1	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  003e4	3b c1		 cmp	 eax, ecx
  003e6	75 3f		 jne	 SHORT $LN155@Read
  003e8	8b 16		 mov	 edx, DWORD PTR [esi]
  003ea	2b c2		 sub	 eax, edx
  003ec	c1 f8 07	 sar	 eax, 7
  003ef	3d fe ff ff 01	 cmp	 eax, 33554430		; 01fffffeH
  003f4	0f 87 95 00 00
	00		 ja	 $LN194@Read
  003fa	2b ca		 sub	 ecx, edx
  003fc	40		 inc	 eax
  003fd	c1 f9 07	 sar	 ecx, 7
  00400	3b c1		 cmp	 eax, ecx
  00402	76 23		 jbe	 SHORT $LN155@Read
  00404	8b d1		 mov	 edx, ecx
  00406	d1 ea		 shr	 edx, 1
  00408	bf ff ff ff 01	 mov	 edi, 33554431		; 01ffffffH
  0040d	2b fa		 sub	 edi, edx
  0040f	3b f9		 cmp	 edi, ecx
  00411	73 04		 jae	 SHORT $LN177@Read
  00413	33 c9		 xor	 ecx, ecx
  00415	eb 02		 jmp	 SHORT $LN178@Read
$LN177@Read:
  00417	03 ca		 add	 ecx, edx
$LN178@Read:
  00419	3b c8		 cmp	 ecx, eax
  0041b	73 02		 jae	 SHORT $LN174@Read
  0041d	8b c8		 mov	 ecx, eax
$LN174@Read:
  0041f	51		 push	 ecx
  00420	8b ce		 mov	 ecx, esi
  00422	e8 00 00 00 00	 call	 ?reserve@?$vector@UQUESTIONANSWER_DATA@@V?$allocator@UQUESTIONANSWER_DATA@@@std@@@std@@QAEXI@Z ; std::vector<QUESTIONANSWER_DATA,std::allocator<QUESTIONANSWER_DATA> >::reserve
$LN155@Read:
  00427	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0042a	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _List$211031[ebp]
  00430	51		 push	 ecx
  00431	52		 push	 edx
  00432	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00435	50		 push	 eax
  00436	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UQUESTIONANSWER_DATA@@@std@@UQUESTIONANSWER_DATA@@ABU3@@std@@YAXAAV?$allocator@UQUESTIONANSWER_DATA@@@0@PAUQUESTIONANSWER_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<QUESTIONANSWER_DATA>,QUESTIONANSWER_DATA,QUESTIONANSWER_DATA const &>

; 153  : 			}
; 154  : 		}

  0043b	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _iType$[ebp]
  00441	83 c4 0c	 add	 esp, 12			; 0000000cH
  00444	83 6e 04 80	 sub	 DWORD PTR [esi+4], -128	; ffffff80H
  00448	e9 57 fc ff ff	 jmp	 $LL13@Read
$LN224@Read:

; 62   : 		return;
; 63   : 	}
; 64   : 
; 65   : 	SMDToken Token;
; 66   : 
; 67   : 	int iType = -1;
; 68   : 
; 69   : 	while(true)
; 70   : 	{
; 71   : 		Token = GetToken();

  0044d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 
; 73   :         if(Token == END)

  00452	83 f8 02	 cmp	 eax, 2
  00455	0f 85 25 fc ff
	ff		 jne	 $LL18@Read
$LN225@Read:
  0045b	5f		 pop	 edi
$LN14@Read:

; 155  : 	}
; 156  : 
; 157  : 	fclose(SMDFile);

  0045c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00462	51		 push	 ecx
  00463	e8 00 00 00 00	 call	 _fclose

; 158  : 
; 159  : 	LogAdd("%s file load!", filename);

  00468	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _filename$GSCopy$[ebp]
  0046e	52		 push	 edx
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00474	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 160  : }

  0047a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00480	5e		 pop	 esi
  00481	33 cd		 xor	 ecx, ebp
  00483	5b		 pop	 ebx
  00484	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00489	8b e5		 mov	 esp, ebp
  0048b	5d		 pop	 ebp
  0048c	c2 04 00	 ret	 4
$LN194@Read:

; 113  : 
; 114  : 				this->m_Time.push_back(List);

  0048f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00494	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN227@Read:
$LN226@Read:
  00499	cc		 int	 3
?Read@CQuestionAnswer@@QAEXPAD@Z ENDP			; CQuestionAnswer::Read
_TEXT	ENDS
PUBLIC	??_C@_0CB@FAAPIKMI@ZtData?2Events?2QuestionAnswer?4dat@ ; `string'
PUBLIC	?Load@CQuestionAnswer@@QAEXXZ			; CQuestionAnswer::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?GetCustom@CZtLicense@@QAEHXZ:PROC		; CZtLicense::GetCustom
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
;	COMDAT ??_C@_0CB@FAAPIKMI@ZtData?2Events?2QuestionAnswer?4dat@
CONST	SEGMENT
??_C@_0CB@FAAPIKMI@ZtData?2Events?2QuestionAnswer?4dat@ DB 'ZtData\Events'
	DB	'\QuestionAnswer.dat', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CQuestionAnswer@@QAEXXZ
_TEXT	SEGMENT
?Load@CQuestionAnswer@@QAEXXZ PROC			; CQuestionAnswer::Load, COMDAT
; _this$ = ecx

; 38   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 39   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@CQuestionAnswer@@QAEXXZ ; CQuestionAnswer::Init

; 40   : 
; 41   : 	if(!g_ZtLicense.CheckUser(eZtUB::Local)  &&
; 42   : 	   !g_ZtLicense.CheckUser(eZtUB::eternalmu) &&
; 43   : 	   !g_ZtLicense.CheckUser(eZtUB::Artem) &&
; 44   : 	   !g_ZtLicense.CheckUser(eZtUB::Artem2))

  00008	6a 00		 push	 0
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00014	84 c0		 test	 al, al
  00016	75 3e		 jne	 SHORT $LN1@Load
  00018	6a 4f		 push	 79			; 0000004fH
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00024	84 c0		 test	 al, al
  00026	75 2e		 jne	 SHORT $LN1@Load
  00028	6a 30		 push	 48			; 00000030H
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00034	84 c0		 test	 al, al
  00036	75 1e		 jne	 SHORT $LN1@Load
  00038	6a 31		 push	 49			; 00000031H
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00044	84 c0		 test	 al, al
  00046	75 0e		 jne	 SHORT $LN1@Load

; 45   : 	{
; 46   : 		if(!g_ZtLicense.GetCustom())

  00048	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0004d	e8 00 00 00 00	 call	 ?GetCustom@CZtLicense@@QAEHXZ ; CZtLicense::GetCustom
  00052	85 c0		 test	 eax, eax
  00054	74 17		 je	 SHORT $LN3@Load
$LN1@Load:

; 47   : 		{
; 48   : 			return;
; 49   : 		}
; 50   : 	}
; 51   : 
; 52   : 	this->Read(gDirPath.GetNewPath("ZtData\\Events\\QuestionAnswer.dat"));

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FAAPIKMI@ZtData?2Events?2QuestionAnswer?4dat@
  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00060	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00065	50		 push	 eax
  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?Read@CQuestionAnswer@@QAEXPAD@Z ; CQuestionAnswer::Read
$LN3@Load:
  0006d	5e		 pop	 esi

; 53   : }

  0006e	c3		 ret	 0
?Load@CQuestionAnswer@@QAEXXZ ENDP			; CQuestionAnswer::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_QuestionAnswer@@YAXXZ
text$yc	SEGMENT
??__Eg_QuestionAnswer@@YAXXZ PROC			; `dynamic initializer for 'g_QuestionAnswer'', COMDAT

; 12   : CQuestionAnswer g_QuestionAnswer;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_QuestionAnswer@@3VCQuestionAnswer@@A ; g_QuestionAnswer
  00005	e8 00 00 00 00	 call	 ??0CQuestionAnswer@@QAE@XZ ; CQuestionAnswer::CQuestionAnswer
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_QuestionAnswer@@YAXXZ ; `dynamic atexit destructor for 'g_QuestionAnswer''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_QuestionAnswer@@YAXXZ ENDP			; `dynamic initializer for 'g_QuestionAnswer''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_QuestionAnswer@@YAXXZ
text$yd	SEGMENT
??__Fg_QuestionAnswer@@YAXXZ PROC			; `dynamic atexit destructor for 'g_QuestionAnswer'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_QuestionAnswer@@3VCQuestionAnswer@@A ; g_QuestionAnswer
  00005	e9 00 00 00 00	 jmp	 ??1CQuestionAnswer@@QAE@XZ ; CQuestionAnswer::~CQuestionAnswer
??__Fg_QuestionAnswer@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_QuestionAnswer''
text$yd	ENDS
PUBLIC	?g_QuestionAnswer@@3VCQuestionAnswer@@A		; g_QuestionAnswer
_BSS	SEGMENT
?g_QuestionAnswer@@3VCQuestionAnswer@@A DB 038H DUP (?)	; g_QuestionAnswer
_BSS	ENDS
CRT$XCU	SEGMENT
_g_QuestionAnswer$initializer$ DD FLAT:??__Eg_QuestionAnswer@@YAXXZ
CRT$XCU	ENDS
END
