; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ReferralSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	?set@PWMSG_HEAD2@@QAEXPAEEEH@Z			; PWMSG_HEAD2::set
; Function compile flags: /Ogtp
;	COMDAT ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z PROC			; PWMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 149  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 		lpBuf[0] = 0xC2;
; 151  : 		lpBuf[1] = SET_NUMBERH(size);

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00009	8b d1		 mov	 edx, ecx
  0000b	c1 ea 08	 shr	 edx, 8
  0000e	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 152  : 		lpBuf[2] = SET_NUMBERL(size);
; 153  : 		lpBuf[3] = head;
; 154  : 		lpBuf[4] = sub;

  00011	8a 55 10	 mov	 dl, BYTE PTR _sub$[ebp]
  00014	88 48 02	 mov	 BYTE PTR [eax+2], cl
  00017	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0001a	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H
  0001d	88 48 03	 mov	 BYTE PTR [eax+3], cl
  00020	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 155  : 	}

  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ENDP			; PWMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqMasterInfo@CReferralSystem@@QAEXHH@Z	; CReferralSystem::GDReqMasterInfo
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\referralsystem.cpp
;	COMDAT ?GDReqMasterInfo@CReferralSystem@@QAEXHH@Z
_TEXT	SEGMENT
_szName$ = -40						; size = 11
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_Page$ = 12						; size = 4
?GDReqMasterInfo@CReferralSystem@@QAEXHH@Z PROC		; CReferralSystem::GDReqMasterInfo, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 159  : 	if(!this->m_bActive)

  00010	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00013	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00016	74 60		 je	 SHORT $LN3@GDReqMaste

; 160  : 	{
; 161  : 		return;
; 162  : 	}
; 163  : 
; 164  : 	if(!OBJMAX_RANGE(aIndex))

  00018	85 d2		 test	 edx, edx
  0001a	78 5c		 js	 SHORT $LN3@GDReqMaste
  0001c	33 c0		 xor	 eax, eax
  0001e	81 fa 97 3a 00
	00		 cmp	 edx, 14999		; 00003a97H
  00024	0f 9e c0	 setle	 al
  00027	85 c0		 test	 eax, eax
  00029	74 4d		 je	 SHORT $LN3@GDReqMaste

; 165  : 	{
; 166  : 		return;
; 167  : 	}
; 168  : 
; 169  : 	LPOBJ lpUser = &gObj[aIndex];

  0002b	8b c2		 mov	 eax, edx
  0002d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00033	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 170  : 
; 171  : 	PMSG_GDREQ_REFERRAL_INFO pMsg;
; 172  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x14, sizeof(pMsg));
; 173  : 	pMsg.aIndex = aIndex;

  00039	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+4], edx
  0003c	c7 45 e4 c1 18
	eb 14		 mov	 DWORD PTR _pMsg$[ebp], 350951617 ; 14eb18c1H

; 174  : 
; 175  : 	char szName[11] = { 0 };
; 176  : 	memcpy(szName, lpUser->Name, sizeof(szName));

  00043	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00046	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00049	56		 push	 esi
  0004a	66 8b 70 7f	 mov	 si, WORD PTR [eax+127]
  0004e	8a 80 81 00 00
	00		 mov	 al, BYTE PTR [eax+129]

; 177  : 	szName[10] = 0;
; 178  : 
; 179  : 	memcpy(pMsg.Name, szName, sizeof(szName)-1);

  00054	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 180  : 	pMsg.PageNumber = Page;

  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _Page$[ebp]
  0005a	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+12], edx

; 181  : 
; 182  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0005d	6a 18		 push	 24			; 00000018H
  0005f	8d 55 e4	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00062	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+20], ecx
  00065	52		 push	 edx
  00066	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0006b	88 45 e2	 mov	 BYTE PTR _szName$[ebp+10], al
  0006e	66 89 75 f4	 mov	 WORD PTR _pMsg$[ebp+16], si
  00072	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  00077	5e		 pop	 esi
$LN3@GDReqMaste:

; 183  : }

  00078	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007b	33 cd		 xor	 ecx, ebp
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?GDReqMasterInfo@CReferralSystem@@QAEXHH@Z ENDP		; CReferralSystem::GDReqMasterInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqMasterUpdate@CReferralSystem@@QAEXHPADH@Z	; CReferralSystem::GDReqMasterUpdate
; Function compile flags: /Ogtp
;	COMDAT ?GDReqMasterUpdate@CReferralSystem@@QAEXHPADH@Z
_TEXT	SEGMENT
_szAccount$ = -52					; size = 11
_szName$ = -52						; size = 11
_pMsg$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_Name$ = 12						; size = 4
_Num$ = 16						; size = 4
?GDReqMasterUpdate@CReferralSystem@@QAEXHPADH@Z PROC	; CReferralSystem::GDReqMasterUpdate, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 313  : 	if(!this->m_bActive)

  00010	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00013	8b 55 0c	 mov	 edx, DWORD PTR _Name$[ebp]
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0001a	74 79		 je	 SHORT $LN3@GDReqMaste@2

; 314  : 	{
; 315  : 		return;
; 316  : 	}
; 317  : 
; 318  : 	if(!OBJMAX_RANGE(aIndex))

  0001c	85 f6		 test	 esi, esi
  0001e	78 75		 js	 SHORT $LN3@GDReqMaste@2
  00020	33 c0		 xor	 eax, eax
  00022	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00028	0f 9e c0	 setle	 al
  0002b	85 c0		 test	 eax, eax
  0002d	74 66		 je	 SHORT $LN3@GDReqMaste@2

; 319  : 	{
; 320  : 		return;
; 321  : 	}
; 322  : 
; 323  : 	LPOBJ lpUser = &gObj[aIndex];
; 324  : 
; 325  : 	PMSG_GD_REFERRAL_MASTER_UPDATE pMsg;
; 326  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x15, sizeof(pMsg));
; 327  : 	pMsg.aIndex = aIndex;
; 328  : 	pMsg.Number = Num;

  0002f	8b 4d 10	 mov	 ecx, DWORD PTR _Num$[ebp]
  00032	8b c6		 mov	 eax, esi
  00034	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00043	89 75 dc	 mov	 DWORD PTR _pMsg$[ebp+4], esi
  00046	c7 45 d8 c1 24
	eb 15		 mov	 DWORD PTR _pMsg$[ebp], 367731905 ; 15eb24c1H

; 329  : 
; 330  : 	char szName[11] = { 0 };
; 331  : 	memcpy(szName, lpUser->Name, sizeof(szName));

  0004d	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00050	8b 70 7b	 mov	 esi, DWORD PTR [eax+123]
  00053	57		 push	 edi
  00054	66 8b 78 7f	 mov	 di, WORD PTR [eax+127]
  00058	8a 80 81 00 00
	00		 mov	 al, BYTE PTR [eax+129]
  0005e	88 45 d6	 mov	 BYTE PTR _szName$[ebp+10], al

; 332  : 	szName[10] = 0;
; 333  : 	memcpy(pMsg.Name, szName, sizeof(szName)-1);
; 334  : 
; 335  : 	char szAccount[11] = { 0 };
; 336  : 	memcpy(szAccount, Name, sizeof(szAccount));

  00061	8b 02		 mov	 eax, DWORD PTR [edx]
  00063	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  00066	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00069	89 75 e8	 mov	 DWORD PTR _pMsg$[ebp+16], esi
  0006c	66 8b 72 08	 mov	 si, WORD PTR [edx+8]
  00070	8a 52 0a	 mov	 dl, BYTE PTR [edx+10]

; 337  : 	szAccount[10] = 0;
; 338  : 	memcpy(pMsg.ReferalName, szAccount, sizeof(szAccount)-1);

  00073	89 45 ef	 mov	 DWORD PTR _pMsg$[ebp+23], eax

; 339  : 
; 340  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00076	6a 24		 push	 36			; 00000024H
  00078	8d 45 d8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0007b	89 4d f3	 mov	 DWORD PTR _pMsg$[ebp+27], ecx
  0007e	50		 push	 eax
  0007f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00084	66 89 7d ec	 mov	 WORD PTR _pMsg$[ebp+20], di
  00088	88 55 d6	 mov	 BYTE PTR _szAccount$[ebp+10], dl
  0008b	66 89 75 f7	 mov	 WORD PTR _pMsg$[ebp+31], si
  0008f	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  00094	5f		 pop	 edi
$LN3@GDReqMaste@2:

; 341  : }

  00095	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 0c 00	 ret	 12			; 0000000cH
?GDReqMasterUpdate@CReferralSystem@@QAEXHPADH@Z ENDP	; CReferralSystem::GDReqMasterUpdate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqUserInfo@CReferralSystem@@QAEXH@Z		; CReferralSystem::GDReqUserInfo
; Function compile flags: /Ogtp
;	COMDAT ?GDReqUserInfo@CReferralSystem@@QAEXH@Z
_TEXT	SEGMENT
_szName$ = -36						; size = 11
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GDReqUserInfo@CReferralSystem@@QAEXH@Z PROC		; CReferralSystem::GDReqUserInfo, COMDAT
; _this$ = ecx

; 451  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 452  : 	if(!this->m_bActive)

  00010	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00013	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00016	74 57		 je	 SHORT $LN3@GDReqUserI

; 453  : 	{
; 454  : 		return;
; 455  : 	}
; 456  : 
; 457  : 	if(!OBJMAX_RANGE(aIndex))

  00018	85 d2		 test	 edx, edx
  0001a	78 53		 js	 SHORT $LN3@GDReqUserI
  0001c	33 c0		 xor	 eax, eax
  0001e	81 fa 97 3a 00
	00		 cmp	 edx, 14999		; 00003a97H
  00024	0f 9e c0	 setle	 al
  00027	85 c0		 test	 eax, eax
  00029	74 44		 je	 SHORT $LN3@GDReqUserI

; 458  : 	{
; 459  : 		return;
; 460  : 	}
; 461  : 
; 462  : 	LPOBJ lpUser = &gObj[aIndex];

  0002b	8b c2		 mov	 eax, edx
  0002d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00033	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 463  : 
; 464  : 	PMSG_GDREQ_REFERRAL_USER_INFO pMsg;
; 465  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x16, sizeof(pMsg));

  00039	c7 45 e8 c1 14
	eb 16		 mov	 DWORD PTR _pMsg$[ebp], 384505025 ; 16eb14c1H

; 466  : 	pMsg.aIndex = aIndex;

  00040	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+4], edx

; 467  : 
; 468  : 	char szName[11] = { 0 };
; 469  : 	memcpy(szName, lpUser->AccountID, sizeof(szName));

  00043	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00046	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00049	56		 push	 esi
  0004a	66 8b 70 74	 mov	 si, WORD PTR [eax+116]
  0004e	8a 40 76	 mov	 al, BYTE PTR [eax+118]

; 470  : 	szName[10] = 0;
; 471  : 
; 472  : 	memcpy(pMsg.Name, szName, sizeof(szName)-1);

  00051	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 473  : 
; 474  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00054	6a 14		 push	 20			; 00000014H
  00056	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00059	51		 push	 ecx
  0005a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005f	88 45 e6	 mov	 BYTE PTR _szName$[ebp+10], al
  00062	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00065	66 89 75 f8	 mov	 WORD PTR _pMsg$[ebp+16], si
  00069	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  0006e	5e		 pop	 esi
$LN3@GDReqUserI:

; 475  : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	33 cd		 xor	 ecx, ebp
  00074	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?GDReqUserInfo@CReferralSystem@@QAEXH@Z ENDP		; CReferralSystem::GDReqUserInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GDReqUserUpdate@CReferralSystem@@QAEXH@Z	; CReferralSystem::GDReqUserUpdate
; Function compile flags: /Ogtp
;	COMDAT ?GDReqUserUpdate@CReferralSystem@@QAEXH@Z
_TEXT	SEGMENT
_szAccount$ = -36					; size = 11
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GDReqUserUpdate@CReferralSystem@@QAEXH@Z PROC		; CReferralSystem::GDReqUserUpdate, COMDAT
; _this$ = ecx

; 571  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 572  : 	if(!this->m_bActive)

  00010	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00013	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00016	74 57		 je	 SHORT $LN3@GDReqUserU

; 573  : 	{
; 574  : 		return;
; 575  : 	}
; 576  : 
; 577  : 	if(!OBJMAX_RANGE(aIndex))

  00018	85 d2		 test	 edx, edx
  0001a	78 53		 js	 SHORT $LN3@GDReqUserU
  0001c	33 c0		 xor	 eax, eax
  0001e	81 fa 97 3a 00
	00		 cmp	 edx, 14999		; 00003a97H
  00024	0f 9e c0	 setle	 al
  00027	85 c0		 test	 eax, eax
  00029	74 44		 je	 SHORT $LN3@GDReqUserU

; 578  : 	{
; 579  : 		return;
; 580  : 	}
; 581  : 
; 582  : 	LPOBJ lpUser = &gObj[aIndex];

  0002b	8b c2		 mov	 eax, edx
  0002d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00033	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 583  : 
; 584  : 	PMSG_GD_REFERRAL_USER_UPDATE pMsg;
; 585  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEB, 0x17, sizeof(pMsg));

  00039	c7 45 e8 c1 14
	eb 17		 mov	 DWORD PTR _pMsg$[ebp], 401282241 ; 17eb14c1H

; 586  : 	pMsg.aIndex = aIndex;

  00040	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+4], edx

; 587  : 
; 588  : 	char szAccount[11] = { 0 };
; 589  : 	memcpy(szAccount, lpUser->AccountID, sizeof(szAccount));

  00043	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00046	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00049	56		 push	 esi
  0004a	66 8b 70 74	 mov	 si, WORD PTR [eax+116]
  0004e	8a 40 76	 mov	 al, BYTE PTR [eax+118]

; 590  : 	szAccount[10] = 0;
; 591  : 	memcpy(pMsg.ReferalName, szAccount, sizeof(szAccount)-1);

  00051	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 592  : 
; 593  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00054	6a 14		 push	 20			; 00000014H
  00056	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00059	51		 push	 ecx
  0005a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005f	88 45 e6	 mov	 BYTE PTR _szAccount$[ebp+10], al
  00062	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00065	66 89 75 f8	 mov	 WORD PTR _pMsg$[ebp+16], si
  00069	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  0006e	5e		 pop	 esi
$LN3@GDReqUserU:

; 594  : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	33 cd		 xor	 ecx, ebp
  00074	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?GDReqUserUpdate@CReferralSystem@@QAEXH@Z ENDP		; CReferralSystem::GDReqUserUpdate
_TEXT	ENDS
PUBLIC	?size@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 05	 sar	 edx, 5
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 880  : 		}

  00016	c3		 ret	 0
?size@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEAAUREFERRAL_DATA@@I@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEAAUREFERRAL_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEAAUREFERRAL_DATA@@I@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8b d0		 mov	 edx, eax
  00008	c1 e2 04	 shl	 edx, 4
  0000b	03 d0		 add	 edx, eax
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 941  : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??A?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEAAUREFERRAL_DATA@@I@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBE_NPBUREFERRAL_DATA@@@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBE_NPBUREFERRAL_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBE_NPBUREFERRAL_DATA@@@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBE_NPBUREFERRAL_DATA@@@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEXPAUREFERRAL_DATA@@0@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEXPAUREFERRAL_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEXPAUREFERRAL_DATA@@0@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEXPAUREFERRAL_DATA@@0@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::~_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::~_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::~_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UREFERRAL_DATA@@@std@@QAE@XZ	; std::allocator<REFERRAL_DATA>::allocator<REFERRAL_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UREFERRAL_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UREFERRAL_DATA@@@std@@QAE@XZ PROC	; std::allocator<REFERRAL_DATA>::allocator<REFERRAL_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UREFERRAL_DATA@@@std@@QAE@XZ ENDP	; std::allocator<REFERRAL_DATA>::allocator<REFERRAL_DATA>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 05	 sar	 edx, 5
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 778  : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEXXZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UREFERRAL_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<REFERRAL_DATA>::allocator<REFERRAL_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UREFERRAL_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UREFERRAL_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<REFERRAL_DATA>::allocator<REFERRAL_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UREFERRAL_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<REFERRAL_DATA>::allocator<REFERRAL_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@I@Z ; std::allocator<REFERRAL_DATA>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@I@Z PROC ; std::allocator<REFERRAL_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@I@Z ENDP ; std::allocator<REFERRAL_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UREFERRAL_DATA@@@std@@QBEIXZ ; std::allocator<REFERRAL_DATA>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UREFERRAL_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UREFERRAL_DATA@@@std@@QBEIXZ PROC	; std::allocator<REFERRAL_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 c3 c3 c3 03	 mov	 eax, 63161283		; 03c3c3c3H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UREFERRAL_DATA@@@std@@QBEIXZ ENDP	; std::allocator<REFERRAL_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUREFERRAL_DATA@@@std@@YAPBUREFERRAL_DATA@@ABU1@@Z ; std::addressof<REFERRAL_DATA const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUREFERRAL_DATA@@@std@@YAPBUREFERRAL_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUREFERRAL_DATA@@@std@@YAPBUREFERRAL_DATA@@ABU1@@Z PROC ; std::addressof<REFERRAL_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUREFERRAL_DATA@@@std@@YAPBUREFERRAL_DATA@@ABU1@@Z ENDP ; std::addressof<REFERRAL_DATA const >
_TEXT	ENDS
PUBLIC	??$forward@AAUREFERRAL_DATA@@@std@@YAAAUREFERRAL_DATA@@AAU1@@Z ; std::forward<REFERRAL_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUREFERRAL_DATA@@@std@@YAAAUREFERRAL_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUREFERRAL_DATA@@@std@@YAAAUREFERRAL_DATA@@AAU1@@Z PROC ; std::forward<REFERRAL_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUREFERRAL_DATA@@@std@@YAAAUREFERRAL_DATA@@AAU1@@Z ENDP ; std::forward<REFERRAL_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAUREFERRAL_DATA@@@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@AAU2@@Z ; std::allocator<REFERRAL_DATA>::construct<REFERRAL_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUREFERRAL_DATA@@@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUREFERRAL_DATA@@@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@AAU2@@Z PROC ; std::allocator<REFERRAL_DATA>::construct<REFERRAL_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi

; 209  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@AAUREFERRAL_DATA@@@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@AAU2@@Z ENDP ; std::allocator<REFERRAL_DATA>::construct<REFERRAL_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABUREFERRAL_DATA@@@std@@YAABUREFERRAL_DATA@@ABU1@@Z ; std::forward<REFERRAL_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUREFERRAL_DATA@@@std@@YAABUREFERRAL_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUREFERRAL_DATA@@@std@@YAABUREFERRAL_DATA@@ABU1@@Z PROC ; std::forward<REFERRAL_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUREFERRAL_DATA@@@std@@YAABUREFERRAL_DATA@@ABU1@@Z ENDP ; std::forward<REFERRAL_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UREFERRAL_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUREFERRAL_DATA@@0@Z ; std::_Ptr_cat<REFERRAL_DATA,REFERRAL_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UREFERRAL_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUREFERRAL_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UREFERRAL_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUREFERRAL_DATA@@0@Z PROC ; std::_Ptr_cat<REFERRAL_DATA,REFERRAL_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UREFERRAL_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUREFERRAL_DATA@@0@Z ENDP ; std::_Ptr_cat<REFERRAL_DATA,REFERRAL_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UREFERRAL_DATA@@ABU1@@std@@YAXPAUREFERRAL_DATA@@ABU1@@Z ; std::_Construct<REFERRAL_DATA,REFERRAL_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UREFERRAL_DATA@@ABU1@@std@@YAXPAUREFERRAL_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UREFERRAL_DATA@@ABU1@@std@@YAXPAUREFERRAL_DATA@@ABU1@@Z PROC ; std::_Construct<REFERRAL_DATA,REFERRAL_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@Construct:
  00017	5f		 pop	 edi

; 49   : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Construct@UREFERRAL_DATA@@ABU1@@std@@YAXPAUREFERRAL_DATA@@ABU1@@Z ENDP ; std::_Construct<REFERRAL_DATA,REFERRAL_DATA const &>
_TEXT	ENDS
PUBLIC	??$move@AAUREFERRAL_DATA@@@std@@YA$$QAUREFERRAL_DATA@@AAU1@@Z ; std::move<REFERRAL_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUREFERRAL_DATA@@@std@@YA$$QAUREFERRAL_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUREFERRAL_DATA@@@std@@YA$$QAUREFERRAL_DATA@@AAU1@@Z PROC ; std::move<REFERRAL_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUREFERRAL_DATA@@@std@@YA$$QAUREFERRAL_DATA@@AAU1@@Z ENDP ; std::move<REFERRAL_DATA &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUREFERRAL_DATA@@@std@@YAPAUREFERRAL_DATA@@PAU1@@Z ; std::_Val_type<REFERRAL_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUREFERRAL_DATA@@@std@@YAPAUREFERRAL_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUREFERRAL_DATA@@@std@@YAPAUREFERRAL_DATA@@PAU1@@Z PROC ; std::_Val_type<REFERRAL_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUREFERRAL_DATA@@@std@@YAPAUREFERRAL_DATA@@PAU1@@Z ENDP ; std::_Val_type<REFERRAL_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UREFERRAL_DATA@@@std@@YAXPAUREFERRAL_DATA@@@Z ; std::_Destroy<REFERRAL_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UREFERRAL_DATA@@@std@@YAXPAUREFERRAL_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UREFERRAL_DATA@@@std@@YAXPAUREFERRAL_DATA@@@Z PROC ; std::_Destroy<REFERRAL_DATA>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UREFERRAL_DATA@@@std@@YAXPAUREFERRAL_DATA@@@Z ENDP ; std::_Destroy<REFERRAL_DATA>
_TEXT	ENDS
PUBLIC	??$forward@UREFERRAL_DATA@@@std@@YA$$QAUREFERRAL_DATA@@AAU1@@Z ; std::forward<REFERRAL_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UREFERRAL_DATA@@@std@@YA$$QAUREFERRAL_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UREFERRAL_DATA@@@std@@YA$$QAUREFERRAL_DATA@@AAU1@@Z PROC ; std::forward<REFERRAL_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UREFERRAL_DATA@@@std@@YA$$QAUREFERRAL_DATA@@AAU1@@Z ENDP ; std::forward<REFERRAL_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?CGReqMasterInfo@CReferralSystem@@QAEXPAUPMSG_REQ_REFERRAL_MASTER_INFO@@H@Z ; CReferralSystem::CGReqMasterInfo
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\referralsystem.cpp
;	COMDAT ?CGReqMasterInfo@CReferralSystem@@QAEXPAUPMSG_REQ_REFERRAL_MASTER_INFO@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqMasterInfo@CReferralSystem@@QAEXPAUPMSG_REQ_REFERRAL_MASTER_INFO@@H@Z PROC ; CReferralSystem::CGReqMasterInfo, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 137  : 	if(!this->m_bActive)

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	74 39		 je	 SHORT $LN4@CGReqMaste

; 138  : 	{
; 139  : 		return;
; 140  : 	}
; 141  : 
; 142  : 	if(!OBJMAX_RANGE(aIndex))

  00008	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000b	85 c0		 test	 eax, eax
  0000d	78 32		 js	 SHORT $LN4@CGReqMaste
  0000f	33 d2		 xor	 edx, edx
  00011	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00016	0f 9e c2	 setle	 dl
  00019	85 d2		 test	 edx, edx
  0001b	74 24		 je	 SHORT $LN4@CGReqMaste

; 143  : 	{
; 144  : 		return;
; 145  : 	}
; 146  : 
; 147  : 	LPOBJ lpUser = &gObj[aIndex];

  0001d	8b d0		 mov	 edx, eax
  0001f	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00025	56		 push	 esi

; 148  : 
; 149  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00026	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	83 7c 32 04 03	 cmp	 DWORD PTR [edx+esi+4], 3
  00031	5e		 pop	 esi
  00032	7c 0d		 jl	 SHORT $LN4@CGReqMaste

; 150  : 	{
; 151  : 		return;
; 152  : 	}
; 153  : 
; 154  : 	this->GDReqMasterInfo(aIndex, lpMsg->PageNumber);

  00034	8b 55 08	 mov	 edx, DWORD PTR _lpMsg$[ebp]
  00037	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0003a	52		 push	 edx
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?GDReqMasterInfo@CReferralSystem@@QAEXHH@Z ; CReferralSystem::GDReqMasterInfo
$LN4@CGReqMaste:

; 155  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?CGReqMasterInfo@CReferralSystem@@QAEXPAUPMSG_REQ_REFERRAL_MASTER_INFO@@H@Z ENDP ; CReferralSystem::CGReqMasterInfo
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?DGAnsMasterInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_MASTER_INFO@@@Z ; CReferralSystem::DGAnsMasterInfo
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObjGetIndex@@YAHPAD@Z:PROC			; gObjGetIndex
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?DGAnsMasterInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_MASTER_INFO@@@Z
_TEXT	SEGMENT
_aIndex$ = -756						; size = 4
_this$GSCopy$ = -752					; size = 4
tv1037 = -748						; size = 4
_pMsg$ = -744						; size = 740
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGAnsMasterInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_MASTER_INFO@@@Z PROC ; CReferralSystem::DGAnsMasterInfo, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 02 00
	00		 sub	 esp, 756		; 000002f4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]

; 187  : 	int aIndex = lpMsg->aIndex;

  00019	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0001c	8b f1		 mov	 esi, ecx
  0001e	89 b5 10 fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00024	89 9d 0c fd ff
	ff		 mov	 DWORD PTR _aIndex$[ebp], ebx

; 188  : 
; 189  : 	if(!OBJMAX_RANGE(aIndex))

  0002a	85 db		 test	 ebx, ebx
  0002c	0f 88 94 01 00
	00		 js	 $LN8@DGAnsMaste
  00032	33 c0		 xor	 eax, eax
  00034	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0003a	0f 9e c0	 setle	 al
  0003d	85 c0		 test	 eax, eax
  0003f	0f 84 81 01 00
	00		 je	 $LN8@DGAnsMaste

; 190  : 	{
; 191  : 		return;
; 192  : 	}
; 193  : 
; 194  : 	LPOBJ lpUser = &gObj[aIndex];

  00045	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  0004b	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 195  : 
; 196  : 	PMSG_ANS_REFERRAL_MASTER_INFO pMsg;
; 197  : 	memset(&pMsg, 0, sizeof(pMsg));

  00051	68 e4 02 00 00	 push	 740			; 000002e4H
  00056	8d 85 18 fd ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0005c	6a 00		 push	 0
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _memset

; 198  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFA, 0xAE, sizeof(pMsg));
; 199  : 	pMsg.RefferalMaxStage = this->m_Data.size();

  00064	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00067	2b 4e 04	 sub	 ecx, DWORD PTR [esi+4]
  0006a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0006f	f7 e9		 imul	 ecx

; 200  : 	pMsg.ReferralCount = lpMsg->Count;
; 201  : 	pMsg.ReferralTotal = lpMsg->TotalCount;

  00071	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00074	c1 fa 05	 sar	 edx, 5
  00077	8b ca		 mov	 ecx, edx
  00079	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0007c	03 ca		 add	 ecx, edx
  0007e	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH
  00084	83 c7 20	 add	 edi, 32			; 00000020H
  00087	c7 85 18 fd ff
	ff c2 02 e4 fa	 mov	 DWORD PTR _pMsg$[ebp], -85720382 ; fae402c2H
  00091	c6 85 1c fd ff
	ff ae		 mov	 BYTE PTR _pMsg$[ebp+4], 174 ; 000000aeH
  00098	89 8d 20 fd ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  0009e	89 95 24 fd ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+12], edx
  000a4	89 85 28 fd ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+16], eax
  000aa	8d b5 3c fd ff
	ff		 lea	 esi, DWORD PTR _pMsg$[ebp+36]
  000b0	81 c3 5c 2a 00
	00		 add	 ebx, 10844		; 00002a5cH
  000b6	c7 85 14 fd ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv1037[ebp], 10 ; 0000000aH
$LL6@DGAnsMaste:

; 204  : 	{
; 205  : 		lpUser->RefferalMaster[i] = lpMsg->Player[i].RefferalMaster;

  000c0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000c2	89 4b d8	 mov	 DWORD PTR [ebx-40], ecx

; 206  : 		lpUser->RefferalUserLevel[i] = lpMsg->Player[i].RefferalUserLevel;

  000c5	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000c8	89 13		 mov	 DWORD PTR [ebx], edx

; 207  : 		lpUser->RefferalUserReset[i] = lpMsg->Player[i].RefferalUserReset;

  000ca	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000cd	89 43 28	 mov	 DWORD PTR [ebx+40], eax

; 208  : 		lpUser->RefferalUserGrand[i] = lpMsg->Player[i].RefferalUserGrand;

  000d0	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000d3	89 4b 50	 mov	 DWORD PTR [ebx+80], ecx

; 209  : 
; 210  : 		memcpy(pMsg.Data[i].RefferalName, lpMsg->Player[i].RefferalName, sizeof(lpMsg->Player[i].RefferalName)-1);

  000d6	8b 57 f4	 mov	 edx, DWORD PTR [edi-12]
  000d9	8b 4f f8	 mov	 ecx, DWORD PTR [edi-8]
  000dc	8d 46 f0	 lea	 eax, DWORD PTR [esi-16]
  000df	89 10		 mov	 DWORD PTR [eax], edx
  000e1	66 8b 57 fc	 mov	 dx, WORD PTR [edi-4]
  000e5	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 211  : 
; 212  : 		pMsg.Data[i].RefferalMaster = lpMsg->Player[i].RefferalMaster;

  000e8	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 213  : 		pMsg.Data[i].UserOnline = 0;
; 214  : 
; 215  : 		int ReferralIndex = gObjGetIndex(pMsg.Data[i].RefferalName);

  000ea	50		 push	 eax
  000eb	66 89 50 08	 mov	 WORD PTR [eax+8], dx
  000ef	89 4e fc	 mov	 DWORD PTR [esi-4], ecx
  000f2	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000f8	e8 00 00 00 00	 call	 ?gObjGetIndex@@YAHPAD@Z	; gObjGetIndex
  000fd	83 c4 04	 add	 esp, 4

; 216  : 
; 217  : 		if(OBJMAX_RANGE(ReferralIndex))

  00100	85 c0		 test	 eax, eax
  00102	78 27		 js	 SHORT $LN22@DGAnsMaste
  00104	33 c9		 xor	 ecx, ecx
  00106	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0010b	0f 9e c1	 setle	 cl
  0010e	85 c9		 test	 ecx, ecx
  00110	74 19		 je	 SHORT $LN22@DGAnsMaste

; 218  : 		{
; 219  : 			LPOBJ lpReferral = &gObj[ReferralIndex];
; 220  : 
; 221  : 			if(lpReferral->Connected == PLAYER_PLAYING)

  00112	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00118	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0011e	83 7c 10 04 03	 cmp	 DWORD PTR [eax+edx+4], 3
  00123	75 06		 jne	 SHORT $LN22@DGAnsMaste

; 222  : 			{
; 223  : 				pMsg.Data[i].UserOnline = 1;

  00125	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
$LN22@DGAnsMaste:

; 224  : 			}
; 225  : 		}
; 226  : 
; 227  : 		pMsg.Data[i].UserLevel = lpMsg->Player[i].RefferalUserLevel;

  0012b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 228  : 		pMsg.Data[i].UserReset = lpMsg->Player[i].RefferalUserReset;

  0012e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 229  : 		pMsg.Data[i].UserGrand = lpMsg->Player[i].RefferalUserGrand;

  00131	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00134	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 230  : 
; 231  : 		int iStage = pMsg.Data[i].RefferalMaster;

  00137	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  0013a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0013d	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 232  : 
; 233  : 		if(pMsg.RefferalMaxStage < iStage)

  00140	39 85 20 fd ff
	ff		 cmp	 DWORD PTR _pMsg$[ebp+8], eax
  00146	7c 4e		 jl	 SHORT $LN5@DGAnsMaste

; 234  : 		{
; 235  : 			continue;
; 236  : 		}
; 237  : 
; 238  : 		REFERRAL_DATA * pData = &this->m_Data[iStage];

  00148	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  0014e	8b c8		 mov	 ecx, eax
  00150	c1 e1 04	 shl	 ecx, 4
  00153	03 c8		 add	 ecx, eax
  00155	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00158	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 239  : 
; 240  : 		pMsg.Data[i].UserNeedLevel = pData->UserNeedLevel;

  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 241  : 		pMsg.Data[i].UserNeedReset = pData->UserNeedReset;

  00160	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00163	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 242  : 		pMsg.Data[i].UserNeedGrand = pData->UserNeedGrand;

  00166	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00169	89 4e 18	 mov	 DWORD PTR [esi+24], ecx

; 243  : 		pMsg.Data[i].MasterRewardCredit = pData->MasterRewardCredit;

  0016c	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0016f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 244  : 		pMsg.Data[i].MasterRewardWCoinC = pData->MasterRewardWCoinC;

  00172	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00175	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 245  : 		pMsg.Data[i].MasterRewardWCoinP = pData->MasterRewardWCoinP;

  00178	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0017b	89 56 24	 mov	 DWORD PTR [esi+36], edx

; 246  : 		pMsg.Data[i].MasterRewardWcoinG = pData->MasterRewardWCoinG;

  0017e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00181	89 4e 28	 mov	 DWORD PTR [esi+40], ecx

; 247  : 		pMsg.Data[i].MasterRewardBonus = pData->MasterRewardBonus;

  00184	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00187	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 248  : 		pMsg.Data[i].MasterRewardPremiumType = pData->MasterRewardPremiumType;

  0018a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0018d	89 4e 30	 mov	 DWORD PTR [esi+48], ecx

; 249  : 		pMsg.Data[i].MasterRewardPremiumTime = pData->MasterRewardPremiumTime;

  00190	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00193	89 56 34	 mov	 DWORD PTR [esi+52], edx
$LN5@DGAnsMaste:

; 202  : 
; 203  : 	for(int i = 0; i < REFERRAL_MAXDATA; i++)

  00196	83 c3 04	 add	 ebx, 4
  00199	83 c7 1c	 add	 edi, 28			; 0000001cH
  0019c	83 c6 48	 add	 esi, 72			; 00000048H
  0019f	ff 8d 14 fd ff
	ff		 dec	 DWORD PTR tv1037[ebp]
  001a5	0f 85 15 ff ff
	ff		 jne	 $LL6@DGAnsMaste

; 250  : 	}
; 251  : 
; 252  : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  001ab	8b 8d 0c fd ff
	ff		 mov	 ecx, DWORD PTR _aIndex$[ebp]
  001b1	68 e4 02 00 00	 push	 740			; 000002e4H
  001b6	8d 85 18 fd ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  001bc	50		 push	 eax
  001bd	51		 push	 ecx
  001be	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001c3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@DGAnsMaste:

; 253  : }

  001c6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	33 cd		 xor	 ecx, ebp
  001cd	5b		 pop	 ebx
  001ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c2 04 00	 ret	 4
?DGAnsMasterInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_MASTER_INFO@@@Z ENDP ; CReferralSystem::DGAnsMasterInfo
_TEXT	ENDS
PUBLIC	??_C@_0BO@FHOPBPJD@?$FLReferral?$FN?5Master?5Check?5Error?$AA@ ; `string'
PUBLIC	??_C@_0BO@LOJGEHCH@?$FLReferral?$FN?5Master?5Stage?5Error?$AA@ ; `string'
PUBLIC	?CGMasterResult@CReferralSystem@@QAEXPAUPMSG_CGREQ_REFERRAL_MASTER_REWARD@@H@Z ; CReferralSystem::CGMasterResult
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
;	COMDAT ??_C@_0BO@FHOPBPJD@?$FLReferral?$FN?5Master?5Check?5Error?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BO@FHOPBPJD@?$FLReferral?$FN?5Master?5Check?5Error?$AA@ DB '[Refer'
	DB	'ral] Master Check Error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LOJGEHCH@?$FLReferral?$FN?5Master?5Stage?5Error?$AA@
CONST	SEGMENT
??_C@_0BO@LOJGEHCH@?$FLReferral?$FN?5Master?5Stage?5Error?$AA@ DB '[Refer'
	DB	'ral] Master Stage Error', 00H		; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\referralsystem.cpp
CONST	ENDS
;	COMDAT ?CGMasterResult@CReferralSystem@@QAEXPAUPMSG_CGREQ_REFERRAL_MASTER_REWARD@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bResult$ = -1						; size = 1
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGMasterResult@CReferralSystem@@QAEXPAUPMSG_CGREQ_REFERRAL_MASTER_REWARD@@H@Z PROC ; CReferralSystem::CGMasterResult, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b c1		 mov	 eax, ecx

; 257  : 	if(!this->m_bActive)

  00008	80 38 00	 cmp	 BYTE PTR [eax], 0
  0000b	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
  0000e	0f 84 f0 00 00
	00		 je	 $LN9@CGMasterRe

; 258  : 	{
; 259  : 		return;
; 260  : 	}
; 261  : 
; 262  : 	if(!OBJMAX_RANGE(aIndex))

  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00017	85 c9		 test	 ecx, ecx
  00019	0f 88 e5 00 00
	00		 js	 $LN9@CGMasterRe
  0001f	33 d2		 xor	 edx, edx
  00021	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  00027	0f 9e c2	 setle	 dl
  0002a	85 d2		 test	 edx, edx
  0002c	0f 84 d2 00 00
	00		 je	 $LN9@CGMasterRe

; 263  : 	{
; 264  : 		return;
; 265  : 	}
; 266  : 
; 267  : 	LPOBJ lpUser = &gObj[aIndex];
; 268  : 
; 269  : 	int iNumber = lpMsg->ReferralNumber;

  00032	8b 55 08	 mov	 edx, DWORD PTR _lpMsg$[ebp]
  00035	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0003b	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00041	56		 push	 esi
  00042	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 270  : 
; 271  : 	if(!CHECK_LIMIT(iNumber, REFERRAL_MAXDATA))

  00045	85 f6		 test	 esi, esi
  00047	0f 88 b6 00 00
	00		 js	 $LN22@CGMasterRe
  0004d	33 d2		 xor	 edx, edx
  0004f	83 fe 09	 cmp	 esi, 9
  00052	0f 9e c2	 setle	 dl
  00055	85 d2		 test	 edx, edx
  00057	0f 84 a6 00 00
	00		 je	 $LN22@CGMasterRe

; 272  : 	{
; 273  : 		return;
; 274  : 	}
; 275  : 
; 276  : 	int iStage = lpUser->RefferalMaster[iNumber];
; 277  : 
; 278  : 	bool bResult = true;
; 279  : 
; 280  : 	if(iStage >= this->m_Data.size())

  0005d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00060	53		 push	 ebx
  00061	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00064	2b d3		 sub	 edx, ebx
  00066	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0006b	f7 ea		 imul	 edx
  0006d	c1 fa 05	 sar	 edx, 5
  00070	8b c2		 mov	 eax, edx
  00072	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00075	57		 push	 edi
  00076	8b bc b1 34 2a
	00 00		 mov	 edi, DWORD PTR [ecx+esi*4+10804]
  0007d	03 c2		 add	 eax, edx
  0007f	c6 45 ff 01	 mov	 BYTE PTR _bResult$[ebp], 1
  00083	3b f8		 cmp	 edi, eax
  00085	72 1a		 jb	 SHORT $LN5@CGMasterRe

; 281  : 	{
; 282  : 		MsgOutput(aIndex, "[Referral] Master Stage Error");

  00087	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LOJGEHCH@?$FLReferral?$FN?5Master?5Stage?5Error?$AA@
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00095	83 c4 08	 add	 esp, 8
  00098	5f		 pop	 edi
  00099	5b		 pop	 ebx
  0009a	5e		 pop	 esi

; 309  : }

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 08 00	 ret	 8
$LN5@CGMasterRe:

; 283  : 		return;
; 284  : 	}
; 285  : 
; 286  : 	REFERRAL_DATA * pData = &this->m_Data[iStage];

  000a1	8b d7		 mov	 edx, edi
  000a3	c1 e2 04	 shl	 edx, 4
  000a6	03 d7		 add	 edx, edi
  000a8	8d 04 93	 lea	 eax, DWORD PTR [ebx+edx*4]

; 287  : 
; 288  : 	if(lpUser->RefferalUserLevel[iNumber] < pData->UserNeedLevel)

  000ab	8b 94 b1 5c 2a
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+10844]
  000b2	3b 10		 cmp	 edx, DWORD PTR [eax]
  000b4	7d 04		 jge	 SHORT $LN20@CGMasterRe

; 289  : 	{
; 290  : 		bResult = false;

  000b6	c6 45 ff 00	 mov	 BYTE PTR _bResult$[ebp], 0
$LN20@CGMasterRe:

; 291  : 	}
; 292  : 
; 293  : 	if(lpUser->RefferalUserReset[iNumber] < pData->UserNeedReset)

  000ba	8b 94 b1 84 2a
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+10884]
  000c1	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000c4	7d 04		 jge	 SHORT $LN3@CGMasterRe

; 294  : 	{
; 295  : 		bResult = false;

  000c6	c6 45 ff 00	 mov	 BYTE PTR _bResult$[ebp], 0
$LN3@CGMasterRe:

; 296  : 	}
; 297  : 
; 298  : 	if(lpUser->RefferalUserGrand[iNumber] < pData->UserNeedGrand)

  000ca	8b 8c b1 ac 2a
	00 00		 mov	 ecx, DWORD PTR [ecx+esi*4+10924]
  000d1	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]

; 299  : 	{
; 300  : 		bResult = false;
; 301  : 	}
; 302  : 
; 303  : 	if(bResult == false)

  000d4	7c 06		 jl	 SHORT $LN19@CGMasterRe
  000d6	80 7d ff 00	 cmp	 BYTE PTR _bResult$[ebp], 0
  000da	75 11		 jne	 SHORT $LN21@CGMasterRe
$LN19@CGMasterRe:

; 304  : 	{
; 305  : 		MsgOutput(aIndex, "[Referral] Master Check Error");

  000dc	8b 55 0c	 mov	 edx, DWORD PTR _aIndex$[ebp]
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FHOPBPJD@?$FLReferral?$FN?5Master?5Check?5Error?$AA@
  000e4	52		 push	 edx
  000e5	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000ea	83 c4 08	 add	 esp, 8
$LN21@CGMasterRe:

; 306  : 	}
; 307  : 
; 308  : 	this->GDReqMasterUpdate(aIndex, lpMsg->ReferalName, iNumber);

  000ed	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  000f0	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  000f3	56		 push	 esi
  000f4	83 c0 08	 add	 eax, 8
  000f7	50		 push	 eax
  000f8	51		 push	 ecx
  000f9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	e8 00 00 00 00	 call	 ?GDReqMasterUpdate@CReferralSystem@@QAEXHPADH@Z ; CReferralSystem::GDReqMasterUpdate
  00101	5f		 pop	 edi
  00102	5b		 pop	 ebx
$LN22@CGMasterRe:
  00103	5e		 pop	 esi
$LN9@CGMasterRe:

; 309  : }

  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 08 00	 ret	 8
?CGMasterResult@CReferralSystem@@QAEXPAUPMSG_CGREQ_REFERRAL_MASTER_REWARD@@H@Z ENDP ; CReferralSystem::CGMasterResult
_TEXT	ENDS
PUBLIC	??_C@_0DA@IOKCCFHI@?$EA?$FLReferral?$FN?5Master?5Premium?5Type?3@ ; `string'
PUBLIC	??_C@_0BO@KNFFDLCI@?$EA?$FLReferral?$FN?5Master?5WCoinG?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BO@LDIGAJAL@?$EA?$FLReferral?$FN?5Master?5WCoinP?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BO@DGMEHJDO@?$EA?$FLReferral?$FN?5Master?5WCoinC?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BO@HHOMLILM@?$EA?$FLReferral?$FN?5Master?5Crecit?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BI@IHMJLPIA@?$FLReferral?5Update?5Error?$FN?$AA@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?DGAnsMasterUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_MASTER_UPDATE@@@Z ; CReferralSystem::DGAnsMasterUpdate
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
EXTRN	?GDSaveUserInfo@GameShop@@QAEXH@Z:PROC		; GameShop::GDSaveUserInfo
EXTRN	?gGameShop@@3VGameShop@@A:BYTE			; gGameShop
EXTRN	?MessageChat@@YAXHPADZZ:PROC			; MessageChat
;	COMDAT ??_C@_0DA@IOKCCFHI@?$EA?$FLReferral?$FN?5Master?5Premium?5Type?3@
; File e:\work\tranet_version\gs\include\prodef.h
CONST	SEGMENT
??_C@_0DA@IOKCCFHI@?$EA?$FLReferral?$FN?5Master?5Premium?5Type?3@ DB '@[R'
	DB	'eferral] Master Premium Type: %d Time: +%d h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KNFFDLCI@?$EA?$FLReferral?$FN?5Master?5WCoinG?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0BO@KNFFDLCI@?$EA?$FLReferral?$FN?5Master?5WCoinG?5?$CL?$CFd?$AA@ DB '@'
	DB	'[Referral] Master WCoinG +%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LDIGAJAL@?$EA?$FLReferral?$FN?5Master?5WCoinP?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0BO@LDIGAJAL@?$EA?$FLReferral?$FN?5Master?5WCoinP?5?$CL?$CFd?$AA@ DB '@'
	DB	'[Referral] Master WCoinP +%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DGMEHJDO@?$EA?$FLReferral?$FN?5Master?5WCoinC?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0BO@DGMEHJDO@?$EA?$FLReferral?$FN?5Master?5WCoinC?5?$CL?$CFd?$AA@ DB '@'
	DB	'[Referral] Master WCoinC +%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HHOMLILM@?$EA?$FLReferral?$FN?5Master?5Crecit?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0BO@HHOMLILM@?$EA?$FLReferral?$FN?5Master?5Crecit?5?$CL?$CFd?$AA@ DB '@'
	DB	'[Referral] Master Crecit +%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IHMJLPIA@?$FLReferral?5Update?5Error?$FN?$AA@
CONST	SEGMENT
??_C@_0BI@IHMJLPIA@?$FLReferral?5Update?5Error?$FN?$AA@ DB '[Referral Upd'
	DB	'ate Error]', 00H				; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\referralsystem.cpp
CONST	ENDS
;	COMDAT ?DGAnsMasterUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_MASTER_UPDATE@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -64					; size = 4
_iNumber$ = -60						; size = 4
tv382 = -56						; size = 4
tv373 = -56						; size = 4
tv364 = -56						; size = 4
_pMsg$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGAnsMasterUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_MASTER_UPDATE@@@Z PROC ; CReferralSystem::DGAnsMasterUpdate, COMDAT
; _this$ = ecx

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00013	53		 push	 ebx

; 345  : 	int aIndex = lpMsg->aIndex;

  00014	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 403  : 	}
; 404  : 
; 405  : 	ZtUserDataSend(aIndex);

  0001a	89 7d c0	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0001d	85 db		 test	 ebx, ebx
  0001f	0f 88 fb 01 00
	00		 js	 $LN9@DGAnsMaste@2

; 346  : 
; 347  : 	if(!OBJMAX_RANGE(aIndex))

  00025	33 d2		 xor	 edx, edx
  00027	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0002d	0f 9e c2	 setle	 dl
  00030	85 d2		 test	 edx, edx
  00032	0f 84 e8 01 00
	00		 je	 $LN9@DGAnsMaste@2

; 348  : 	{
; 349  : 		return;
; 350  : 	}
; 351  : 
; 352  : 	if(!lpMsg->Result)

  00038	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0003c	75 20		 jne	 SHORT $LN7@DGAnsMaste@2

; 353  : 	{
; 354  : 		MsgOutput(aIndex, "[Referral Update Error]");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IHMJLPIA@?$FLReferral?5Update?5Error?$FN?$AA@
  00043	53		 push	 ebx
  00044	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00049	83 c4 08	 add	 esp, 8
  0004c	5f		 pop	 edi
  0004d	5b		 pop	 ebx

; 426  : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	33 cd		 xor	 ecx, ebp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN7@DGAnsMaste@2:

; 355  : 		return;
; 356  : 	}
; 357  : 
; 358  : 	LPOBJ lpUser = &gObj[aIndex];
; 359  : 
; 360  : 	int iNumber = lpMsg->Number;

  0005e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00061	56		 push	 esi
  00062	8b f3		 mov	 esi, ebx
  00064	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0006a	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00070	89 45 c4	 mov	 DWORD PTR _iNumber$[ebp], eax

; 361  : 
; 362  : 	if(!CHECK_LIMIT(iNumber, REFERRAL_MAXDATA))

  00073	85 c0		 test	 eax, eax
  00075	0f 88 a4 01 00
	00		 js	 $LN21@DGAnsMaste@2
  0007b	33 d2		 xor	 edx, edx
  0007d	83 f8 09	 cmp	 eax, 9
  00080	0f 9e c2	 setle	 dl
  00083	85 d2		 test	 edx, edx
  00085	0f 84 94 01 00
	00		 je	 $LN21@DGAnsMaste@2

; 363  : 	{
; 364  : 		return;
; 365  : 	}
; 366  : 
; 367  : 	int iStage = lpUser->RefferalMaster[iNumber];
; 368  : 
; 369  : 	REFERRAL_DATA * pData = &this->m_Data[iStage];

  0008b	8b 84 86 34 2a
	00 00		 mov	 eax, DWORD PTR [esi+eax*4+10804]
  00092	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00095	8b c8		 mov	 ecx, eax
  00097	c1 e1 04	 shl	 ecx, 4
  0009a	03 c8		 add	 ecx, eax

; 370  : 
; 371  : 	if(pData->MasterRewardCredit > 0)

  0009c	83 7c 8a 0c 00	 cmp	 DWORD PTR [edx+ecx*4+12], 0
  000a1	8d 3c 8a	 lea	 edi, DWORD PTR [edx+ecx*4]
  000a4	7e 21		 jle	 SHORT $LN5@DGAnsMaste@2

; 372  : 	{
; 373  : 		lpUser->ZtCred += pData->MasterRewardCredit;

  000a6	db 47 0c	 fild	 DWORD PTR [edi+12]
  000a9	d8 86 a8 22 00
	00		 fadd	 DWORD PTR [esi+8872]
  000af	d9 9e a8 22 00
	00		 fstp	 DWORD PTR [esi+8872]

; 374  : 		MessageChat(aIndex, "@[Referral] Master Crecit +%d", pData->MasterRewardCredit);

  000b5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000b8	50		 push	 eax
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@HHOMLILM@?$EA?$FLReferral?$FN?5Master?5Crecit?5?$CL?$CFd?$AA@
  000be	53		 push	 ebx
  000bf	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@DGAnsMaste@2:

; 375  : 	}
; 376  : 
; 377  : 	if(pData->MasterRewardWCoinC > 0)

  000c7	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000ca	89 45 c8	 mov	 DWORD PTR tv364[ebp], eax
  000cd	85 c0		 test	 eax, eax
  000cf	7e 2c		 jle	 SHORT $LN4@DGAnsMaste@2

; 378  : 	{
; 379  : 		lpUser->GameShop.WCoinC += pData->MasterRewardWCoinC;

  000d1	db 45 c8	 fild	 DWORD PTR tv364[ebp]

; 380  : 		gGameShop.GDSaveUserInfo(aIndex);

  000d4	53		 push	 ebx
  000d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  000da	dc 86 00 23 00
	00		 fadd	 QWORD PTR [esi+8960]
  000e0	dd 9e 00 23 00
	00		 fstp	 QWORD PTR [esi+8960]
  000e6	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 381  : 		MessageChat(aIndex, "@[Referral] Master WCoinC +%d", pData->MasterRewardWCoinC);

  000eb	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000ee	51		 push	 ecx
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DGMEHJDO@?$EA?$FLReferral?$FN?5Master?5WCoinC?5?$CL?$CFd?$AA@
  000f4	53		 push	 ebx
  000f5	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@DGAnsMaste@2:

; 382  : 	}
; 383  : 
; 384  : 	if(pData->MasterRewardWCoinP > 0)

  000fd	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00100	89 45 c8	 mov	 DWORD PTR tv373[ebp], eax
  00103	85 c0		 test	 eax, eax
  00105	7e 2c		 jle	 SHORT $LN3@DGAnsMaste@2

; 385  : 	{
; 386  : 		lpUser->GameShop.WCoinP += pData->MasterRewardWCoinP;

  00107	db 45 c8	 fild	 DWORD PTR tv373[ebp]

; 387  : 		gGameShop.GDSaveUserInfo(aIndex);

  0010a	53		 push	 ebx
  0010b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00110	dc 86 f8 22 00
	00		 fadd	 QWORD PTR [esi+8952]
  00116	dd 9e f8 22 00
	00		 fstp	 QWORD PTR [esi+8952]
  0011c	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 388  : 		MessageChat(aIndex, "@[Referral] Master WCoinP +%d", pData->MasterRewardWCoinP);

  00121	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00124	52		 push	 edx
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LDIGAJAL@?$EA?$FLReferral?$FN?5Master?5WCoinP?5?$CL?$CFd?$AA@
  0012a	53		 push	 ebx
  0012b	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@DGAnsMaste@2:

; 389  : 	}
; 390  : 
; 391  : 	if(pData->MasterRewardWCoinG > 0)

  00133	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00136	89 45 c8	 mov	 DWORD PTR tv382[ebp], eax
  00139	85 c0		 test	 eax, eax
  0013b	7e 2c		 jle	 SHORT $LN2@DGAnsMaste@2

; 392  : 	{
; 393  : 		lpUser->GameShop.GoblinPoint += pData->MasterRewardWCoinG;

  0013d	db 45 c8	 fild	 DWORD PTR tv382[ebp]

; 394  : 		gGameShop.GDSaveUserInfo(aIndex);

  00140	53		 push	 ebx
  00141	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00146	dc 86 08 23 00
	00		 fadd	 QWORD PTR [esi+8968]
  0014c	dd 9e 08 23 00
	00		 fstp	 QWORD PTR [esi+8968]
  00152	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 395  : 		MessageChat(aIndex, "@[Referral] Master WCoinG +%d", pData->MasterRewardWCoinG);

  00157	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0015a	50		 push	 eax
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KNFFDLCI@?$EA?$FLReferral?$FN?5Master?5WCoinG?5?$CL?$CFd?$AA@
  00160	53		 push	 ebx
  00161	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  00166	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@DGAnsMaste@2:

; 396  : 	}
; 397  : 
; 398  : 	if(pData->MasterRewardPremiumType > 0 && pData->MasterRewardPremiumTime > 0)

  00169	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  0016d	7e 34		 jle	 SHORT $LN1@DGAnsMaste@2
  0016f	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00173	7e 2e		 jle	 SHORT $LN1@DGAnsMaste@2

; 399  : 	{
; 400  : 		lpUser->PremiumTimeType = pData->MasterRewardPremiumType;

  00175	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00178	89 8e bc 22 00
	00		 mov	 DWORD PTR [esi+8892], ecx

; 401  : 		lpUser->PremiumTime += pData->MasterRewardPremiumTime * 3600;

  0017e	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  00181	69 d2 10 0e 00
	00		 imul	 edx, 3600		; 00000e10H
  00187	01 96 b8 22 00
	00		 add	 DWORD PTR [esi+8888], edx

; 402  : 		MessageChat(aIndex, "@[Referral] Master Premium Type: %d Time: +%d h", pData->MasterRewardPremiumType, pData->MasterRewardPremiumTime);

  0018d	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00190	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00193	50		 push	 eax
  00194	51		 push	 ecx
  00195	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IOKCCFHI@?$EA?$FLReferral?$FN?5Master?5Premium?5Type?3@
  0019a	53		 push	 ebx
  0019b	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  001a0	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@DGAnsMaste@2:

; 403  : 	}
; 404  : 
; 405  : 	ZtUserDataSend(aIndex);

  001a3	53		 push	 ebx
  001a4	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend

; 406  : 
; 407  : 	lpUser->RefferalMaster[iNumber]++;

  001a9	8b 4d c4	 mov	 ecx, DWORD PTR _iNumber$[ebp]
  001ac	ff 84 8e 34 2a
	00 00		 inc	 DWORD PTR [esi+ecx*4+10804]
  001b3	8b b4 8e 34 2a
	00 00		 mov	 esi, DWORD PTR [esi+ecx*4+10804]

; 408  : 	iStage = lpUser->RefferalMaster[iNumber];
; 409  : 
; 410  : 	pData = &this->m_Data[iStage];

  001ba	8b 45 c0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  001bd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 411  : 
; 412  : 	PMSG_CGANS_REFERRAL_MASTER_REWARD pMsg;
; 413  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xAE, sizeof(pMsg));

  001c0	c7 45 cc c1 30
	fb ae		 mov	 DWORD PTR _pMsg$[ebp], -1359269695 ; aefb30c1H

; 414  : 	pMsg.ReferralNumber = iNumber;

  001c7	89 4d d0	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  001ca	8b d6		 mov	 edx, esi
  001cc	c1 e2 04	 shl	 edx, 4
  001cf	03 d6		 add	 edx, esi

; 415  : 	pMsg.UserNeedLevel = pData->UserNeedLevel;

  001d1	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  001d4	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  001d7	89 4d d4	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 416  : 	pMsg.UserNeedReset = pData->UserNeedReset;

  001da	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001dd	89 55 d8	 mov	 DWORD PTR _pMsg$[ebp+12], edx

; 417  : 	pMsg.UserNeedGrand = pData->UserNeedGrand;

  001e0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001e3	89 4d dc	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 418  : 	pMsg.MasterRewardCredit = pData->MasterRewardCredit;

  001e6	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  001e9	89 55 e0	 mov	 DWORD PTR _pMsg$[ebp+20], edx

; 419  : 	pMsg.MasterRewardWCoinC = pData->MasterRewardWCoinC;

  001ec	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001ef	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+24], ecx

; 420  : 	pMsg.MasterRewardWCoinP = pData->MasterRewardWCoinP;

  001f2	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  001f5	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+28], edx

; 421  : 	pMsg.MasterRewardWcoinG = pData->MasterRewardWCoinG;

  001f8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001fb	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 422  : 	pMsg.MasterRewardBonus = pData->MasterRewardBonus;

  001fe	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00201	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+36], edx

; 423  : 	pMsg.MasterRewardPremiumType = pData->MasterRewardPremiumType;

  00204	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00207	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+40], ecx

; 424  : 	pMsg.MasterRewardPremiumTime = pData->MasterRewardPremiumTime;

  0020a	8b 50 24	 mov	 edx, DWORD PTR [eax+36]

; 425  : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  0020d	6a 30		 push	 48			; 00000030H
  0020f	8d 45 cc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00212	50		 push	 eax
  00213	53		 push	 ebx
  00214	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+44], edx
  00217	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0021c	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@DGAnsMaste@2:
  0021f	5e		 pop	 esi
$LN9@DGAnsMaste@2:

; 426  : }

  00220	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00223	5f		 pop	 edi
  00224	33 cd		 xor	 ecx, ebp
  00226	5b		 pop	 ebx
  00227	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022c	8b e5		 mov	 esp, ebp
  0022e	5d		 pop	 ebp
  0022f	c2 04 00	 ret	 4
?DGAnsMasterUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_MASTER_UPDATE@@@Z ENDP ; CReferralSystem::DGAnsMasterUpdate
_TEXT	ENDS
PUBLIC	?CGReqUserInfo@CReferralSystem@@QAEXPAUPMSG_REQ_REFERRAL_USER_INFO@@H@Z ; CReferralSystem::CGReqUserInfo
; Function compile flags: /Ogtp
;	COMDAT ?CGReqUserInfo@CReferralSystem@@QAEXPAUPMSG_REQ_REFERRAL_USER_INFO@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqUserInfo@CReferralSystem@@QAEXPAUPMSG_REQ_REFERRAL_USER_INFO@@H@Z PROC ; CReferralSystem::CGReqUserInfo, COMDAT
; _this$ = ecx

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 430  : 	if(!this->m_bActive)

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	74 32		 je	 SHORT $LN4@CGReqUserI

; 431  : 	{
; 432  : 		return;
; 433  : 	}
; 434  : 
; 435  : 	if(!OBJMAX_RANGE(aIndex))

  00008	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000b	85 c0		 test	 eax, eax
  0000d	78 2b		 js	 SHORT $LN4@CGReqUserI
  0000f	33 d2		 xor	 edx, edx
  00011	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00016	0f 9e c2	 setle	 dl
  00019	85 d2		 test	 edx, edx
  0001b	74 1d		 je	 SHORT $LN4@CGReqUserI

; 436  : 	{
; 437  : 		return;
; 438  : 	}
; 439  : 
; 440  : 	LPOBJ lpUser = &gObj[aIndex];

  0001d	8b d0		 mov	 edx, eax
  0001f	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00025	56		 push	 esi

; 441  : 
; 442  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00026	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	83 7c 32 04 03	 cmp	 DWORD PTR [edx+esi+4], 3
  00031	5e		 pop	 esi
  00032	7c 06		 jl	 SHORT $LN4@CGReqUserI

; 443  : 	{
; 444  : 		return;
; 445  : 	}
; 446  : 
; 447  : 	this->GDReqUserInfo(aIndex);

  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?GDReqUserInfo@CReferralSystem@@QAEXH@Z ; CReferralSystem::GDReqUserInfo
$LN4@CGReqUserI:

; 448  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
?CGReqUserInfo@CReferralSystem@@QAEXPAUPMSG_REQ_REFERRAL_USER_INFO@@H@Z ENDP ; CReferralSystem::CGReqUserInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DGAnsUserInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_USER_INFO@@@Z ; CReferralSystem::DGAnsUserInfo
; Function compile flags: /Ogtp
;	COMDAT ?DGAnsUserInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_USER_INFO@@@Z
_TEXT	SEGMENT
_aIndex$ = -60						; size = 4
_pMsg$ = -56						; size = 52
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGAnsUserInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_USER_INFO@@@Z PROC ; CReferralSystem::DGAnsUserInfo, COMDAT
; _this$ = ecx

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 479  : 	if(!lpMsg->Result)

  00013	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00017	53		 push	 ebx
  00018	8b d9		 mov	 ebx, ecx
  0001a	0f 84 d2 00 00
	00		 je	 $LN4@DGAnsUserI

; 480  : 	{
; 481  : 		return;
; 482  : 	}
; 483  : 
; 484  : 	int aIndex = lpMsg->aIndex;

  00020	56		 push	 esi
  00021	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00024	89 75 c4	 mov	 DWORD PTR _aIndex$[ebp], esi

; 485  : 
; 486  : 	if(!OBJMAX_RANGE(aIndex))

  00027	85 f6		 test	 esi, esi
  00029	0f 88 c2 00 00
	00		 js	 $LN16@DGAnsUserI
  0002f	33 c9		 xor	 ecx, ecx
  00031	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00037	0f 9e c1	 setle	 cl
  0003a	85 c9		 test	 ecx, ecx
  0003c	0f 84 af 00 00
	00		 je	 $LN16@DGAnsUserI

; 487  : 	{
; 488  : 		return;
; 489  : 	}
; 490  : 
; 491  : 	LPOBJ lpUser = &gObj[aIndex];

  00042	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00048	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004e	57		 push	 edi

; 492  : 
; 493  : 	lpUser->RefferalUser = lpMsg->RefferalUser;

  0004f	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]

; 494  : 
; 495  : 	int iStage = lpUser->RefferalUser;
; 496  : 
; 497  : 	PMSG_ANS_REFERRAL_USER_INFO pMsg;
; 498  : 	memset(&pMsg, 0, sizeof(pMsg));

  00052	6a 34		 push	 52			; 00000034H
  00054	8d 45 c8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00057	6a 00		 push	 0
  00059	50		 push	 eax
  0005a	89 be 30 2a 00
	00		 mov	 DWORD PTR [esi+10800], edi
  00060	e8 00 00 00 00	 call	 _memset

; 499  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xAF, sizeof(pMsg));
; 500  : 
; 501  : 	if(iStage < this->m_Data.size())

  00065	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00068	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
  0006b	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00070	f7 e9		 imul	 ecx
  00072	c1 fa 05	 sar	 edx, 5
  00075	8b ca		 mov	 ecx, edx
  00077	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0007a	03 ca		 add	 ecx, edx
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007f	c7 45 c8 c1 34
	fb af		 mov	 DWORD PTR _pMsg$[ebp], -1342491455 ; affb34c1H
  00086	3b f9		 cmp	 edi, ecx
  00088	73 54		 jae	 SHORT $LN1@DGAnsUserI

; 502  : 	{
; 503  : 		REFERRAL_DATA * pData = &this->m_Data[iStage];

  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 504  : 		pMsg.RefferalMaxStage = this->m_Data.size();

  0008d	89 4d cc	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 505  : 		pMsg.User.RefferalUser = lpUser->RefferalUser;

  00090	8b 8e 30 2a 00
	00		 mov	 ecx, DWORD PTR [esi+10800]
  00096	89 4d d0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00099	8b d7		 mov	 edx, edi
  0009b	c1 e2 04	 shl	 edx, 4
  0009e	03 d7		 add	 edx, edi
  000a0	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 506  : 		pMsg.User.ReferralNeedLevel = pData->UserNeedLevel;

  000a3	8b 10		 mov	 edx, DWORD PTR [eax]
  000a5	89 55 d4	 mov	 DWORD PTR _pMsg$[ebp+12], edx

; 507  : 		pMsg.User.ReferralNeedReset = pData->UserNeedReset;

  000a8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ab	89 4d d8	 mov	 DWORD PTR _pMsg$[ebp+16], ecx

; 508  : 		pMsg.User.ReferralNeedGrand = pData->UserNeedGrand;

  000ae	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000b1	89 55 dc	 mov	 DWORD PTR _pMsg$[ebp+20], edx

; 509  : 		pMsg.User.ReferralRewardCredit = pData->UserRewardCredit;

  000b4	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000b7	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+24], ecx

; 510  : 		pMsg.User.ReferralRewardWCoinC = pData->UserRewardWCoinC;

  000ba	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  000bd	89 55 e4	 mov	 DWORD PTR _pMsg$[ebp+28], edx

; 511  : 		pMsg.User.ReferralRewardWCoinP = pData->UserRewardWCoinP;

  000c0	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000c3	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 512  : 		pMsg.User.ReferralRewardWcoinG = pData->UserRewardWCoinG;

  000c6	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  000c9	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+36], edx

; 513  : 		pMsg.User.ReferralRewardBonus = pData->UserRewardBonus;

  000cc	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000cf	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+40], ecx

; 514  : 		pMsg.User.ReferralRewardPremiumType = pData->UserRewardPremiumType;

  000d2	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  000d5	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+44], edx

; 515  : 		pMsg.User.ReferralRewardPremiumTime = pData->UserRewardPremiumTime;

  000d8	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  000db	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+48], eax
$LN1@DGAnsUserI:

; 516  : 	}
; 517  : 
; 518  : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  000de	8b 55 c4	 mov	 edx, DWORD PTR _aIndex$[ebp]
  000e1	6a 34		 push	 52			; 00000034H
  000e3	8d 4d c8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000e6	51		 push	 ecx
  000e7	52		 push	 edx
  000e8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	5f		 pop	 edi
$LN16@DGAnsUserI:
  000f1	5e		 pop	 esi
$LN4@DGAnsUserI:

; 519  : }

  000f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f5	33 cd		 xor	 ecx, ebp
  000f7	5b		 pop	 ebx
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
?DGAnsUserInfo@CReferralSystem@@QAEXPAUPMSG_DGANS_REFERRAL_USER_INFO@@@Z ENDP ; CReferralSystem::DGAnsUserInfo
_TEXT	ENDS
PUBLIC	??_C@_0BM@JECJCPAM@?$FLReferral?$FN?5User?5Check?5Error?$AA@ ; `string'
PUBLIC	??_C@_0BM@HNFAHHLI@?$FLReferral?$FN?5User?5Stage?5Error?$AA@ ; `string'
PUBLIC	?CGUserResult@CReferralSystem@@QAEXPAUPMSG_CGREQ_REFERRAL_USER_REWARD@@H@Z ; CReferralSystem::CGUserResult
;	COMDAT ??_C@_0BM@JECJCPAM@?$FLReferral?$FN?5User?5Check?5Error?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0BM@JECJCPAM@?$FLReferral?$FN?5User?5Check?5Error?$AA@ DB '[Referra'
	DB	'l] User Check Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HNFAHHLI@?$FLReferral?$FN?5User?5Stage?5Error?$AA@
CONST	SEGMENT
??_C@_0BM@HNFAHHLI@?$FLReferral?$FN?5User?5Stage?5Error?$AA@ DB '[Referra'
	DB	'l] User Stage Error', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\referralsystem.cpp
CONST	ENDS
;	COMDAT ?CGUserResult@CReferralSystem@@QAEXPAUPMSG_CGREQ_REFERRAL_USER_REWARD@@H@Z
_TEXT	SEGMENT
_bResult$ = -1						; size = 1
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGUserResult@CReferralSystem@@QAEXPAUPMSG_CGREQ_REFERRAL_USER_REWARD@@H@Z PROC ; CReferralSystem::CGUserResult, COMDAT
; _this$ = ecx

; 522  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 523  : 	if(!this->m_bActive)

  00007	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  0000a	0f 84 c5 00 00
	00		 je	 $LN8@CGUserResu

; 524  : 	{
; 525  : 		return;
; 526  : 	}
; 527  : 
; 528  : 	if(!OBJMAX_RANGE(aIndex))

  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00013	85 c9		 test	 ecx, ecx
  00015	0f 88 ba 00 00
	00		 js	 $LN8@CGUserResu
  0001b	33 c0		 xor	 eax, eax
  0001d	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  00023	0f 9e c0	 setle	 al
  00026	85 c0		 test	 eax, eax
  00028	0f 84 a7 00 00
	00		 je	 $LN8@CGUserResu

; 529  : 	{
; 530  : 		return;
; 531  : 	}
; 532  : 
; 533  : 	LPOBJ lpUser = &gObj[aIndex];
; 534  : 
; 535  : 	bool bResult = true;
; 536  : 
; 537  : 	int iStage = lpUser->RefferalUser;
; 538  : 
; 539  : 	if(iStage >= this->m_Data.size())

  0002e	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00031	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00037	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003d	56		 push	 esi
  0003e	8b b1 30 2a 00
	00		 mov	 esi, DWORD PTR [ecx+10800]
  00044	57		 push	 edi
  00045	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00048	2b d7		 sub	 edx, edi
  0004a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0004f	f7 ea		 imul	 edx
  00051	c1 fa 05	 sar	 edx, 5
  00054	8b c2		 mov	 eax, edx
  00056	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00059	03 c2		 add	 eax, edx
  0005b	c6 45 ff 01	 mov	 BYTE PTR _bResult$[ebp], 1
  0005f	3b f0		 cmp	 esi, eax
  00061	72 1a		 jb	 SHORT $LN5@CGUserResu

; 540  : 	{
; 541  : 		MsgOutput(aIndex, "[Referral] User Stage Error");

  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HNFAHHLI@?$FLReferral?$FN?5User?5Stage?5Error?$AA@
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00071	83 c4 08	 add	 esp, 8
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx

; 568  : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
$LN5@CGUserResu:

; 542  : 		return;
; 543  : 	}
; 544  : 
; 545  : 	REFERRAL_DATA * pData = &this->m_Data[iStage];
; 546  : 
; 547  : 	if(lpUser->Level < pData->UserNeedLevel)

  0007d	0f bf 81 be 00
	00 00		 movsx	 eax, WORD PTR [ecx+190]
  00084	8b d6		 mov	 edx, esi
  00086	c1 e2 04	 shl	 edx, 4
  00089	03 d6		 add	 edx, esi
  0008b	3b 04 97	 cmp	 eax, DWORD PTR [edi+edx*4]
  0008e	8d 34 97	 lea	 esi, DWORD PTR [edi+edx*4]
  00091	7d 04		 jge	 SHORT $LN17@CGUserResu

; 548  : 	{
; 549  : 		bResult = false;

  00093	c6 45 ff 00	 mov	 BYTE PTR _bResult$[ebp], 0
$LN17@CGUserResu:

; 550  : 	}
; 551  : 
; 552  : 	if(lpUser->Reset < pData->UserNeedReset)

  00097	8b 91 90 22 00
	00		 mov	 edx, DWORD PTR [ecx+8848]
  0009d	3b 56 04	 cmp	 edx, DWORD PTR [esi+4]
  000a0	7d 04		 jge	 SHORT $LN3@CGUserResu

; 553  : 	{
; 554  : 		bResult = false;

  000a2	c6 45 ff 00	 mov	 BYTE PTR _bResult$[ebp], 0
$LN3@CGUserResu:

; 555  : 	}
; 556  : 
; 557  : 	if(lpUser->GReset < pData->UserNeedGrand)

  000a6	8b 81 94 22 00
	00		 mov	 eax, DWORD PTR [ecx+8852]
  000ac	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]

; 558  : 	{
; 559  : 		bResult = false;
; 560  : 	}
; 561  : 
; 562  : 	if(bResult == false)

  000af	7c 06		 jl	 SHORT $LN16@CGUserResu
  000b1	80 7d ff 00	 cmp	 BYTE PTR _bResult$[ebp], 0
  000b5	75 11		 jne	 SHORT $LN18@CGUserResu
$LN16@CGUserResu:

; 563  : 	{
; 564  : 		MsgOutput(aIndex, "[Referral] User Check Error");

  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JECJCPAM@?$FLReferral?$FN?5User?5Check?5Error?$AA@
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000c5	83 c4 08	 add	 esp, 8
$LN18@CGUserResu:

; 565  : 	}
; 566  : 
; 567  : 	this->GDReqUserUpdate(aIndex);

  000c8	8b 55 0c	 mov	 edx, DWORD PTR _aIndex$[ebp]
  000cb	52		 push	 edx
  000cc	8b cb		 mov	 ecx, ebx
  000ce	e8 00 00 00 00	 call	 ?GDReqUserUpdate@CReferralSystem@@QAEXH@Z ; CReferralSystem::GDReqUserUpdate
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
$LN8@CGUserResu:
  000d5	5b		 pop	 ebx

; 568  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 08 00	 ret	 8
?CGUserResult@CReferralSystem@@QAEXPAUPMSG_CGREQ_REFERRAL_USER_REWARD@@H@Z ENDP ; CReferralSystem::CGUserResult
_TEXT	ENDS
PUBLIC	??_C@_0CO@JKABGNNC@?$EA?$FLReferral?$FN?5User?5Premium?5Type?3?5?$CF@ ; `string'
PUBLIC	??_C@_0BM@IDAPGKBF@?$EA?$FLReferral?$FN?5User?5WCoinG?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BM@JNNMFIDG@?$EA?$FLReferral?$FN?5User?5WCoinP?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BM@BIJOCIAD@?$EA?$FLReferral?$FN?5User?5WCoinC?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BM@FJLGOJIB@?$EA?$FLReferral?$FN?5User?5Crecit?5?$CL?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BN@KLNODJJH@?$FLReferral?$FN?5User?5Update?5Error?$AA@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?DGAnsUserUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_USER_UPDATE@@@Z ; CReferralSystem::DGAnsUserUpdate
;	COMDAT ??_C@_0CO@JKABGNNC@?$EA?$FLReferral?$FN?5User?5Premium?5Type?3?5?$CF@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0CO@JKABGNNC@?$EA?$FLReferral?$FN?5User?5Premium?5Type?3?5?$CF@ DB '@'
	DB	'[Referral] User Premium Type: %d Time: +%d h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IDAPGKBF@?$EA?$FLReferral?$FN?5User?5WCoinG?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0BM@IDAPGKBF@?$EA?$FLReferral?$FN?5User?5WCoinG?5?$CL?$CFd?$AA@ DB '@'
	DB	'[Referral] User WCoinG +%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JNNMFIDG@?$EA?$FLReferral?$FN?5User?5WCoinP?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0BM@JNNMFIDG@?$EA?$FLReferral?$FN?5User?5WCoinP?5?$CL?$CFd?$AA@ DB '@'
	DB	'[Referral] User WCoinP +%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BIJOCIAD@?$EA?$FLReferral?$FN?5User?5WCoinC?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0BM@BIJOCIAD@?$EA?$FLReferral?$FN?5User?5WCoinC?5?$CL?$CFd?$AA@ DB '@'
	DB	'[Referral] User WCoinC +%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FJLGOJIB@?$EA?$FLReferral?$FN?5User?5Crecit?5?$CL?$CFd?$AA@
CONST	SEGMENT
??_C@_0BM@FJLGOJIB@?$EA?$FLReferral?$FN?5User?5Crecit?5?$CL?$CFd?$AA@ DB '@'
	DB	'[Referral] User Crecit +%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KLNODJJH@?$FLReferral?$FN?5User?5Update?5Error?$AA@
CONST	SEGMENT
??_C@_0BN@KLNODJJH@?$FLReferral?$FN?5User?5Update?5Error?$AA@ DB '[Referr'
	DB	'al] User Update Error', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\referralsystem.cpp
CONST	ENDS
;	COMDAT ?DGAnsUserUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_USER_UPDATE@@@Z
_TEXT	SEGMENT
tv344 = -64						; size = 4
_iStage$ = -60						; size = 4
_this$GSCopy$ = -56					; size = 4
tv382 = -52						; size = 4
tv373 = -52						; size = 4
tv364 = -52						; size = 4
_pMsg$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?DGAnsUserUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_USER_UPDATE@@@Z PROC ; CReferralSystem::DGAnsUserUpdate, COMDAT
; _this$ = ecx

; 597  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 598  : 	int aIndex = lpMsg->aIndex;

  00015	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00018	8b c1		 mov	 eax, ecx

; 667  : 	}
; 668  : 
; 669  : 	pMsg.UserNeedLevel = pData->UserNeedLevel;

  0001a	89 45 c8	 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  0001d	85 db		 test	 ebx, ebx
  0001f	0f 88 3d 02 00
	00		 js	 $LN10@DGAnsUserU

; 599  : 
; 600  : 	if(!OBJMAX_RANGE(aIndex))

  00025	33 c9		 xor	 ecx, ecx
  00027	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0002d	0f 9e c1	 setle	 cl
  00030	85 c9		 test	 ecx, ecx
  00032	0f 84 2a 02 00
	00		 je	 $LN10@DGAnsUserU

; 601  : 	{
; 602  : 		return;
; 603  : 	}
; 604  : 
; 605  : 	if(!lpMsg->Result)

  00038	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  0003c	75 20		 jne	 SHORT $LN8@DGAnsUserU

; 606  : 	{
; 607  : 		MsgOutput(aIndex, "[Referral] User Update Error");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KLNODJJH@?$FLReferral?$FN?5User?5Update?5Error?$AA@
  00043	53		 push	 ebx
  00044	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00049	83 c4 08	 add	 esp, 8
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 682  : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	33 cd		 xor	 ecx, ebp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN8@DGAnsUserU:

; 608  : 		return;
; 609  : 	}
; 610  : 
; 611  : 	LPOBJ lpUser = &gObj[aIndex];
; 612  : 
; 613  : 	int iStage = lpUser->RefferalUser;
; 614  : 
; 615  : 	if(iStage >= this->m_Data.size())

  0005e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00061	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  00064	57		 push	 edi
  00065	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0006a	f7 e9		 imul	 ecx
  0006c	8b fb		 mov	 edi, ebx
  0006e	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00074	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007a	c1 fa 05	 sar	 edx, 5
  0007d	8b b7 30 2a 00
	00		 mov	 esi, DWORD PTR [edi+10800]
  00083	8b c2		 mov	 eax, edx
  00085	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00088	03 c2		 add	 eax, edx
  0008a	89 75 c4	 mov	 DWORD PTR _iStage$[ebp], esi
  0008d	3b f0		 cmp	 esi, eax
  0008f	72 21		 jb	 SHORT $LN7@DGAnsUserU

; 616  : 	{
; 617  : 		MsgOutput(aIndex, "[Referral] User Stage Error");

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HNFAHHLI@?$FLReferral?$FN?5User?5Stage?5Error?$AA@
  00096	53		 push	 ebx
  00097	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0009c	83 c4 08	 add	 esp, 8
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 682  : }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
$LN7@DGAnsUserU:

; 618  : 		return;
; 619  : 	}
; 620  : 
; 621  : 	REFERRAL_DATA * pData = &this->m_Data[iStage];

  000b2	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000b5	8b c6		 mov	 eax, esi
  000b7	c1 e0 04	 shl	 eax, 4
  000ba	03 c6		 add	 eax, esi
  000bc	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000bf	03 c0		 add	 eax, eax
  000c1	03 c0		 add	 eax, eax
  000c3	03 f0		 add	 esi, eax

; 622  : 
; 623  : 	if(pData->UserRewardCredit > 0)

  000c5	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  000c9	89 45 c0	 mov	 DWORD PTR tv344[ebp], eax
  000cc	7e 21		 jle	 SHORT $LN6@DGAnsUserU

; 624  : 	{
; 625  : 		lpUser->ZtCred += pData->UserRewardCredit;

  000ce	db 46 28	 fild	 DWORD PTR [esi+40]
  000d1	d8 87 a8 22 00
	00		 fadd	 DWORD PTR [edi+8872]
  000d7	d9 9f a8 22 00
	00		 fstp	 DWORD PTR [edi+8872]

; 626  : 		MessageChat(aIndex, "@[Referral] User Crecit +%d", pData->UserRewardCredit);

  000dd	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FJLGOJIB@?$EA?$FLReferral?$FN?5User?5Crecit?5?$CL?$CFd?$AA@
  000e6	53		 push	 ebx
  000e7	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@DGAnsUserU:

; 627  : 	}
; 628  : 
; 629  : 	if(pData->UserRewardWCoinC > 0)

  000ef	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000f2	89 45 cc	 mov	 DWORD PTR tv364[ebp], eax
  000f5	85 c0		 test	 eax, eax
  000f7	7e 2c		 jle	 SHORT $LN5@DGAnsUserU

; 630  : 	{
; 631  : 		lpUser->GameShop.WCoinC += pData->UserRewardWCoinC;

  000f9	db 45 cc	 fild	 DWORD PTR tv364[ebp]

; 632  : 		gGameShop.GDSaveUserInfo(aIndex);

  000fc	53		 push	 ebx
  000fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00102	dc 87 00 23 00
	00		 fadd	 QWORD PTR [edi+8960]
  00108	dd 9f 00 23 00
	00		 fstp	 QWORD PTR [edi+8960]
  0010e	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 633  : 		MessageChat(aIndex, "@[Referral] User WCoinC +%d", pData->UserRewardWCoinC);

  00113	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00116	50		 push	 eax
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BIJOCIAD@?$EA?$FLReferral?$FN?5User?5WCoinC?5?$CL?$CFd?$AA@
  0011c	53		 push	 ebx
  0011d	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@DGAnsUserU:

; 634  : 	}
; 635  : 
; 636  : 	if(pData->UserRewardWCoinP > 0)

  00125	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00128	89 45 cc	 mov	 DWORD PTR tv373[ebp], eax
  0012b	85 c0		 test	 eax, eax
  0012d	7e 2c		 jle	 SHORT $LN4@DGAnsUserU

; 637  : 	{
; 638  : 		lpUser->GameShop.WCoinP += pData->UserRewardWCoinP;

  0012f	db 45 cc	 fild	 DWORD PTR tv373[ebp]

; 639  : 		gGameShop.GDSaveUserInfo(aIndex);

  00132	53		 push	 ebx
  00133	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00138	dc 87 f8 22 00
	00		 fadd	 QWORD PTR [edi+8952]
  0013e	dd 9f f8 22 00
	00		 fstp	 QWORD PTR [edi+8952]
  00144	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 640  : 		MessageChat(aIndex, "@[Referral] User WCoinP +%d", pData->UserRewardWCoinP);

  00149	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0014c	51		 push	 ecx
  0014d	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JNNMFIDG@?$EA?$FLReferral?$FN?5User?5WCoinP?5?$CL?$CFd?$AA@
  00152	53		 push	 ebx
  00153	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@DGAnsUserU:

; 641  : 	}
; 642  : 
; 643  : 	if(pData->UserRewardWCoinG > 0)

  0015b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0015e	89 45 cc	 mov	 DWORD PTR tv382[ebp], eax
  00161	85 c0		 test	 eax, eax
  00163	7e 2c		 jle	 SHORT $LN3@DGAnsUserU

; 644  : 	{
; 645  : 		lpUser->GameShop.GoblinPoint += pData->UserRewardWCoinG;

  00165	db 45 cc	 fild	 DWORD PTR tv382[ebp]

; 646  : 		gGameShop.GDSaveUserInfo(aIndex);

  00168	53		 push	 ebx
  00169	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  0016e	dc 87 08 23 00
	00		 fadd	 QWORD PTR [edi+8968]
  00174	dd 9f 08 23 00
	00		 fstp	 QWORD PTR [edi+8968]
  0017a	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 647  : 		MessageChat(aIndex, "@[Referral] User WCoinG +%d", pData->UserRewardWCoinG);

  0017f	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IDAPGKBF@?$EA?$FLReferral?$FN?5User?5WCoinG?5?$CL?$CFd?$AA@
  00188	53		 push	 ebx
  00189	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  0018e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@DGAnsUserU:

; 648  : 	}
; 649  : 
; 650  : 	if(pData->UserRewardPremiumType > 0 && pData->UserRewardPremiumTime > 0)

  00191	83 7e 3c 00	 cmp	 DWORD PTR [esi+60], 0
  00195	7e 34		 jle	 SHORT $LN2@DGAnsUserU
  00197	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0019b	7e 2e		 jle	 SHORT $LN2@DGAnsUserU

; 651  : 	{
; 652  : 		lpUser->PremiumTimeType = pData->UserRewardPremiumType;

  0019d	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  001a0	89 87 bc 22 00
	00		 mov	 DWORD PTR [edi+8892], eax

; 653  : 		lpUser->PremiumTime += pData->UserRewardPremiumTime * 3600;

  001a6	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  001a9	69 c9 10 0e 00
	00		 imul	 ecx, 3600		; 00000e10H
  001af	01 8f b8 22 00
	00		 add	 DWORD PTR [edi+8888], ecx

; 654  : 		MessageChat(aIndex, "@[Referral] User Premium Type: %d Time: +%d h", pData->UserRewardPremiumType, pData->UserRewardPremiumTime);

  001b5	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  001b8	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  001bb	52		 push	 edx
  001bc	50		 push	 eax
  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@JKABGNNC@?$EA?$FLReferral?$FN?5User?5Premium?5Type?3?5?$CF@
  001c2	53		 push	 ebx
  001c3	e8 00 00 00 00	 call	 ?MessageChat@@YAXHPADZZ	; MessageChat
  001c8	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@DGAnsUserU:

; 655  : 	}
; 656  : 
; 657  : 	ZtUserDataSend(aIndex);

  001cb	53		 push	 ebx
  001cc	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend

; 658  : 
; 659  : 	PMSG_GCANS_REFERRAL_USER_REWARD pMsg;
; 660  : 	memset(&pMsg, 0, sizeof(pMsg));

  001d1	6a 2c		 push	 44			; 0000002cH
  001d3	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  001d6	6a 00		 push	 0
  001d8	51		 push	 ecx
  001d9	e8 00 00 00 00	 call	 _memset

; 661  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xB3, sizeof(pMsg));
; 662  : 
; 663  : 	if(iStage < this->m_Data.size())

  001de	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001e1	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001e4	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  001e7	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  001ec	f7 ea		 imul	 edx
  001ee	c1 fa 05	 sar	 edx, 5
  001f1	8b c2		 mov	 eax, edx
  001f3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001f6	03 c2		 add	 eax, edx
  001f8	83 c4 10	 add	 esp, 16			; 00000010H
  001fb	c7 45 d0 c1 2c
	fb b3		 mov	 DWORD PTR _pMsg$[ebp], -1275384639 ; b3fb2cc1H
  00202	39 45 c4	 cmp	 DWORD PTR _iStage$[ebp], eax
  00205	73 0a		 jae	 SHORT $LN1@DGAnsUserU

; 664  : 	{
; 665  : 		iStage++;
; 666  : 		pData = &this->m_Data[iStage];

  00207	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0020a	8b 55 c0	 mov	 edx, DWORD PTR tv344[ebp]
  0020d	8d 74 11 44	 lea	 esi, DWORD PTR [ecx+edx+68]
$LN1@DGAnsUserU:

; 667  : 	}
; 668  : 
; 669  : 	pMsg.UserNeedLevel = pData->UserNeedLevel;

  00211	8b 06		 mov	 eax, DWORD PTR [esi]
  00213	89 45 d4	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 670  : 	pMsg.UserNeedReset = pData->UserNeedReset;

  00216	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00219	89 4d d8	 mov	 DWORD PTR _pMsg$[ebp+8], ecx

; 671  : 	pMsg.UserNeedGrand = pData->UserNeedGrand;

  0021c	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0021f	89 55 dc	 mov	 DWORD PTR _pMsg$[ebp+12], edx

; 672  : 	pMsg.UserRewardCredit = pData->UserRewardCredit;

  00222	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00225	89 45 e0	 mov	 DWORD PTR _pMsg$[ebp+16], eax

; 673  : 	pMsg.UserRewardWCoinC = pData->UserRewardWCoinC;

  00228	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0022b	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 674  : 	pMsg.UserRewardWCoinP = pData->UserRewardWCoinP;

  0022e	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00231	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+24], edx

; 675  : 	pMsg.UserRewardWcoinG = pData->UserRewardWCoinG;

  00234	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00237	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+28], eax

; 676  : 	pMsg.UserRewardBonus = pData->UserRewardBonus;

  0023a	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0023d	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+32], ecx

; 677  : 	pMsg.UserRewardPremiumType = pData->UserRewardPremiumType;

  00240	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]

; 678  : 	pMsg.UserRewardPremiumTime = pData->UserRewardPremiumTime;
; 679  : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  00243	6a 2c		 push	 44			; 0000002cH
  00245	8d 4d d0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00248	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+36], edx
  0024b	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0024e	51		 push	 ecx
  0024f	53		 push	 ebx
  00250	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+40], eax
  00253	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00258	83 c4 0c	 add	 esp, 12			; 0000000cH

; 680  : 
; 681  : 	lpUser->RefferalUser++;

  0025b	ff 87 30 2a 00
	00		 inc	 DWORD PTR [edi+10800]
  00261	5f		 pop	 edi
$LN10@DGAnsUserU:

; 682  : }

  00262	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00265	5e		 pop	 esi
  00266	33 cd		 xor	 ecx, ebp
  00268	5b		 pop	 ebx
  00269	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026e	8b e5		 mov	 esp, ebp
  00270	5d		 pop	 ebp
  00271	c2 04 00	 ret	 4
?DGAnsUserUpdate@CReferralSystem@@QAEXPAUPMSG_GDANS_REFERRAL_USER_UPDATE@@@Z ENDP ; CReferralSystem::DGAnsUserUpdate
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@V?$allocator@UREFERRAL_DATA@@@1@@Z ; std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@V?$allocator@UREFERRAL_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@V?$allocator@UREFERRAL_DATA@@@1@@Z PROC ; std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@V?$allocator@UREFERRAL_DATA@@@1@@Z ENDP ; std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 c3 c3 c3 03	 mov	 eax, 63161283		; 03c3c3c3H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEII@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	2b 11		 sub	 edx, DWORD PTR [ecx]
  00008	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000d	f7 ea		 imul	 edx
  0000f	c1 fa 05	 sar	 edx, 5
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00019	8b c8		 mov	 ecx, eax
  0001b	d1 e9		 shr	 ecx, 1
  0001d	ba c3 c3 c3 03	 mov	 edx, 63161283		; 03c3c3c3H
  00022	2b d1		 sub	 edx, ecx
  00024	3b d0		 cmp	 edx, eax
  00026	73 04		 jae	 SHORT $LN4@Grow_to
  00028	33 c0		 xor	 eax, eax
  0002a	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0002c	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	3b c1		 cmp	 eax, ecx
  00033	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00035	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Grow_to@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QAE@PAUREFERRAL_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QAE@PAUREFERRAL_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QAE@PAUREFERRAL_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QAE@PAUREFERRAL_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@AAU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@AAU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@AAU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@AAU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UREFERRAL_DATA@@@std@@YAPAUREFERRAL_DATA@@IPAU1@@Z ; std::_Allocate<REFERRAL_DATA>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UREFERRAL_DATA@@@std@@YAPAUREFERRAL_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T212541 = -12						; size = 12
$T212546 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UREFERRAL_DATA@@@std@@YAPAUREFERRAL_DATA@@IPAU1@@Z PROC ; std::_Allocate<REFERRAL_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 48		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 c3 c3 c3
	03		 cmp	 ecx, 63161283		; 03c3c3c3H
  00015	77 18		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 04	 shl	 eax, 4
  0001c	03 c1		 add	 eax, ecx
  0001e	03 c0		 add	 eax, eax
  00020	03 c0		 add	 eax, eax
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	83 c4 04	 add	 esp, 4
  0002b	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0002d	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002f	8d 4d 08	 lea	 ecx, DWORD PTR $T212546[ebp]
  00032	51		 push	 ecx
  00033	8d 4d f4	 lea	 ecx, DWORD PTR $T212541[ebp]
  00036	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T212546[ebp], 0
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00042	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00047	8d 55 f4	 lea	 edx, DWORD PTR $T212541[ebp]
  0004a	52		 push	 edx
  0004b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T212541[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UREFERRAL_DATA@@@std@@YAPAUREFERRAL_DATA@@IPAU1@@Z ENDP ; std::_Allocate<REFERRAL_DATA>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@ABU3@@Z ; std::allocator<REFERRAL_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@ABU3@@Z PROC ; std::allocator<REFERRAL_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN5@construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN5@construct@2:
  00017	5f		 pop	 edi

; 198  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@ABU3@@Z ENDP ; std::allocator<REFERRAL_DATA>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUREFERRAL_DATA@@PAU1@@std@@YAPAUREFERRAL_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<REFERRAL_DATA *,REFERRAL_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUREFERRAL_DATA@@PAU1@@std@@YAPAUREFERRAL_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUREFERRAL_DATA@@PAU1@@std@@YAPAUREFERRAL_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<REFERRAL_DATA *,REFERRAL_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN1@Move
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 44	 add	 edx, 68			; 00000044H
  0001a	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0001f	83 c0 44	 add	 eax, 68			; 00000044H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL3@Move
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN1@Move:
  0002a	5b		 pop	 ebx

; 2515 : 	return (_Dest);
; 2516 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUREFERRAL_DATA@@PAU1@@std@@YAPAUREFERRAL_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<REFERRAL_DATA *,REFERRAL_DATA *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@@Z ; std::allocator<REFERRAL_DATA>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@@Z PROC ; std::allocator<REFERRAL_DATA>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@@Z ENDP ; std::allocator<REFERRAL_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@$$QAU3@@Z ; std::allocator<REFERRAL_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@$$QAU3@@Z PROC ; std::allocator<REFERRAL_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct@3
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct@3:
  00017	5f		 pop	 edi

; 203  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@UREFERRAL_DATA@@@std@@QAEXPAUREFERRAL_DATA@@$$QAU3@@Z ENDP ; std::allocator<REFERRAL_DATA>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QAE@PAUREFERRAL_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::_Vector_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QAE@PAUREFERRAL_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QAE@PAUREFERRAL_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::_Vector_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QAE@PAUREFERRAL_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::_Vector_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<REFERRAL_DATA,std::allocator<REFERRAL_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UREFERRAL_DATA@@@std@@QAEPAUREFERRAL_DATA@@I@Z ; std::allocator<REFERRAL_DATA>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UREFERRAL_DATA@@@std@@QAEPAUREFERRAL_DATA@@I@Z
_TEXT	SEGMENT
$T212649 = -12						; size = 12
$T212647 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UREFERRAL_DATA@@@std@@QAEPAUREFERRAL_DATA@@I@Z PROC ; std::allocator<REFERRAL_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 48		 je	 SHORT $LN1@allocate
  0000f	81 f9 c3 c3 c3
	03		 cmp	 ecx, 63161283		; 03c3c3c3H
  00015	77 18		 ja	 SHORT $LN3@allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 04	 shl	 eax, 4
  0001c	03 c1		 add	 eax, ecx
  0001e	03 c0		 add	 eax, eax
  00020	03 c0		 add	 eax, eax
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	83 c4 04	 add	 esp, 4
  0002b	85 c0		 test	 eax, eax
  0002d	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002f	8d 4d 08	 lea	 ecx, DWORD PTR $T212647[ebp]
  00032	51		 push	 ecx
  00033	8d 4d f4	 lea	 ecx, DWORD PTR $T212649[ebp]
  00036	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T212647[ebp], 0
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00042	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00047	8d 55 f4	 lea	 edx, DWORD PTR $T212649[ebp]
  0004a	52		 push	 edx
  0004b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T212649[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UREFERRAL_DATA@@@std@@QAEPAUREFERRAL_DATA@@I@Z ENDP ; std::allocator<REFERRAL_DATA>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@ABU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@ABU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@ABU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN9@Cons_val@2
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN9@Cons_val@2:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@ABU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUREFERRAL_DATA@@PAU1@@std@@YAPAUREFERRAL_DATA@@PAU1@00@Z ; std::_Move<REFERRAL_DATA *,REFERRAL_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUREFERRAL_DATA@@PAU1@@std@@YAPAUREFERRAL_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUREFERRAL_DATA@@PAU1@@std@@YAPAUREFERRAL_DATA@@PAU1@00@Z PROC ; std::_Move<REFERRAL_DATA *,REFERRAL_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 19		 je	 SHORT $LN5@Move@2
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL7@Move@2:
  00013	8b f2		 mov	 esi, edx
  00015	8b f8		 mov	 edi, eax
  00017	83 c2 44	 add	 edx, 68			; 00000044H
  0001a	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0001f	83 c0 44	 add	 eax, 68			; 00000044H
  00022	f3 a5		 rep movsd
  00024	3b d3		 cmp	 edx, ebx
  00026	75 eb		 jne	 SHORT $LL7@Move@2
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$LN5@Move@2:
  0002a	5b		 pop	 ebx

; 2536 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Move@PAUREFERRAL_DATA@@PAU1@@std@@YAPAUREFERRAL_DATA@@PAU1@00@Z ENDP ; std::_Move<REFERRAL_DATA *,REFERRAL_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@@Z ; std::_Dest_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@@Z PROC ; std::_Dest_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@U3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@U3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@U3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@Cons_val@3:
  00017	5f		 pop	 edi

; 281  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@U3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@XZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@XZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAXPAUREFERRAL_DATA@@0AAV?$allocator@UREFERRAL_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<REFERRAL_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAXPAUREFERRAL_DATA@@0AAV?$allocator@UREFERRAL_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAXPAUREFERRAL_DATA@@0AAV?$allocator@UREFERRAL_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<REFERRAL_DATA> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAXPAUREFERRAL_DATA@@0AAV?$allocator@UREFERRAL_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<REFERRAL_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@U1@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<REFERRAL_DATA *,REFERRAL_DATA *,std::allocator<REFERRAL_DATA>,REFERRAL_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@U1@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@U1@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<REFERRAL_DATA *,REFERRAL_DATA *,std::allocator<REFERRAL_DATA>,REFERRAL_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@U3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA>
  0001e	83 c6 44	 add	 esi, 68			; 00000044H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 44	 add	 edi, 68			; 00000044H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@U1@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<REFERRAL_DATA *,REFERRAL_DATA *,std::allocator<REFERRAL_DATA>,REFERRAL_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAXPAUREFERRAL_DATA@@0AAV?$allocator@UREFERRAL_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<REFERRAL_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAXPAUREFERRAL_DATA@@0AAV?$allocator@UREFERRAL_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAXPAUREFERRAL_DATA@@0AAV?$allocator@UREFERRAL_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<REFERRAL_DATA> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAXPAUREFERRAL_DATA@@0AAV?$allocator@UREFERRAL_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<REFERRAL_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@@Z ; std::_Uninitialized_move<REFERRAL_DATA *,REFERRAL_DATA *,std::allocator<REFERRAL_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$212842 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@@Z PROC ; std::_Uninitialized_move<REFERRAL_DATA *,REFERRAL_DATA *,std::allocator<REFERRAL_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$212842[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@U1@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<REFERRAL_DATA *,REFERRAL_DATA *,std::allocator<REFERRAL_DATA>,REFERRAL_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<REFERRAL_DATA *,REFERRAL_DATA *,std::allocator<REFERRAL_DATA> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXPAUREFERRAL_DATA@@0@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXPAUREFERRAL_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXPAUREFERRAL_DATA@@0@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXPAUREFERRAL_DATA@@0@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUREFERRAL_DATA@@@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEPAUREFERRAL_DATA@@PAU2@00@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Umove<REFERRAL_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUREFERRAL_DATA@@@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEPAUREFERRAL_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$212864 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUREFERRAL_DATA@@@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEPAUREFERRAL_DATA@@PAU2@00@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Umove<REFERRAL_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$212864[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@U1@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<REFERRAL_DATA *,REFERRAL_DATA *,std::allocator<REFERRAL_DATA>,REFERRAL_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUREFERRAL_DATA@@@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEPAUREFERRAL_DATA@@PAU2@00@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Umove<REFERRAL_DATA *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@0@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR __First_arg$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	89 1e		 mov	 DWORD PTR [esi], ebx
  00014	3b da		 cmp	 ebx, edx
  00016	74 27		 je	 SHORT $LN39@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	3b d0		 cmp	 edx, eax
  0001d	74 1d		 je	 SHORT $LN30@erase
  0001f	57		 push	 edi
$LL32@erase:
  00020	8b f2		 mov	 esi, edx
  00022	8b fb		 mov	 edi, ebx
  00024	83 c2 44	 add	 edx, 68			; 00000044H
  00027	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0002c	83 c3 44	 add	 ebx, 68			; 00000044H
  0002f	f3 a5		 rep movsd
  00031	3b d0		 cmp	 edx, eax
  00033	75 eb		 jne	 SHORT $LL32@erase
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	5f		 pop	 edi
$LN30@erase:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  0003c	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN39@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 1214 : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXXZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$211424 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$213034 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	81 fb c3 c3 c3
	03		 cmp	 ebx, 63161283		; 03c3c3c3H
  00036	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00047	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0004c	f7 e9		 imul	 ecx
  0004e	c1 fa 05	 sar	 edx, 5
  00051	8b c2		 mov	 eax, edx
  00053	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00056	03 c2		 add	 eax, edx
  00058	3b c3		 cmp	 eax, ebx
  0005a	73 73		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0005c	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005f	53		 push	 ebx
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@UREFERRAL_DATA@@@std@@QAEPAUREFERRAL_DATA@@I@Z ; std::allocator<REFERRAL_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00067	8b 5d 08	 mov	 ebx, DWORD PTR __Cat$213034[ebp]
  0006a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006d	8b 16		 mov	 edx, DWORD PTR [esi]
  0006f	53		 push	 ebx
  00070	6a 00		 push	 0
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	52		 push	 edx
  00076	89 45 ec	 mov	 DWORD PTR __Ptr$211424[ebp], eax
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00080	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUREFERRAL_DATA@@PAU1@V?$allocator@UREFERRAL_DATA@@@std@@U1@@std@@YAPAUREFERRAL_DATA@@PAU1@00AAV?$allocator@UREFERRAL_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<REFERRAL_DATA *,REFERRAL_DATA *,std::allocator<REFERRAL_DATA>,REFERRAL_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00085	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00087	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0008a	2b cb		 sub	 ecx, ebx
  0008c	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00091	f7 e9		 imul	 ecx
  00093	c1 fa 05	 sar	 edx, 5
  00096	8b fa		 mov	 edi, edx
  00098	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	03 fa		 add	 edi, edx

; 761  : 			if (this->_Myfirst != 0)

  000a0	85 db		 test	 ebx, ebx
  000a2	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000ad	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000b0	8b c8		 mov	 ecx, eax
  000b2	c1 e1 04	 shl	 ecx, 4
  000b5	03 c8		 add	 ecx, eax
  000b7	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$211424[ebp]
  000ba	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]

; 770  : 			this->_Mylast = _Ptr + _Size;

  000bd	8b cf		 mov	 ecx, edi
  000bf	c1 e1 04	 shl	 ecx, 4
  000c2	03 cf		 add	 ecx, edi
  000c4	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000c7	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000ca	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000cd	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000e3	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$211424[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ec	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000ef	6a 00		 push	 0
  000f1	6a 00		 push	 0
  000f3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::reserve
PUBLIC	??1?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::~vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::~vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::~vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXXZ ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	53		 push	 ebx
  00008	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000d	3b da		 cmp	 ebx, edx
  0000f	74 2c		 je	 SHORT $LN19@clear
  00011	8b c2		 mov	 eax, edx
  00013	3b d2		 cmp	 edx, edx
  00015	74 23		 je	 SHORT $LN48@clear
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL50@clear:
  00020	8b f0		 mov	 esi, eax
  00022	8b fb		 mov	 edi, ebx
  00024	83 c0 44	 add	 eax, 68			; 00000044H
  00027	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0002c	83 c3 44	 add	 ebx, 68			; 00000044H
  0002f	f3 a5		 rep movsd
  00031	3b c2		 cmp	 eax, edx
  00033	75 eb		 jne	 SHORT $LL50@clear
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
$LN48@clear:
  0003a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
$LN19@clear:
  0003d	5b		 pop	 ebx

; 1219 : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?clear@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXI@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 39		 mov	 edi, DWORD PTR [ecx]
  0000a	2b d7		 sub	 edx, edi
  0000c	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00011	f7 ea		 imul	 edx

; 1292 : 		if (max_size() - _Count < _Size)

  00013	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00016	c1 fa 05	 sar	 edx, 5
  00019	8b f2		 mov	 esi, edx
  0001b	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001e	03 f2		 add	 esi, edx
  00020	ba c3 c3 c3 03	 mov	 edx, 63161283		; 03c3c3c3H
  00025	2b d0		 sub	 edx, eax
  00027	3b d6		 cmp	 edx, esi
  00029	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00030	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	03 f0		 add	 esi, eax
  0003a	2b d7		 sub	 edx, edi
  0003c	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00041	f7 ea		 imul	 edx
  00043	c1 fa 05	 sar	 edx, 5
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	3b f0		 cmp	 esi, eax
  0004f	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00051	8b d0		 mov	 edx, eax
  00053	d1 ea		 shr	 edx, 1
  00055	bf c3 c3 c3 03	 mov	 edi, 63161283		; 03c3c3c3H
  0005a	2b fa		 sub	 edi, edx
  0005c	3b f8		 cmp	 edi, eax
  0005e	73 04		 jae	 SHORT $LN23@Reserve
  00060	33 c0		 xor	 eax, eax
  00062	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00064	03 c2		 add	 eax, edx
$LN24@Reserve:
  00066	3b c6		 cmp	 eax, esi
  00068	73 02		 jae	 SHORT $LN20@Reserve
  0006a	8b c6		 mov	 eax, esi
$LN20@Reserve:
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::reserve
$LN1@Reserve:
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi

; 1298 : 		}

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	??0CReferralSystem@@QAE@XZ			; CReferralSystem::CReferralSystem
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\referralsystem.cpp
;	COMDAT ??0CReferralSystem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CReferralSystem@@QAE@XZ PROC				; CReferralSystem::CReferralSystem, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	33 c0		 xor	 eax, eax
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 18   : 	this->m_bActive = true;

  0000f	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 19   : 
; 20   : 	this->m_Data.clear();

  00012	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00015	53		 push	 ebx
  00016	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	3b c3		 cmp	 eax, ebx
  0001e	74 25		 je	 SHORT $LN68@CReferralS
  00020	8b d3		 mov	 edx, ebx
  00022	3b db		 cmp	 ebx, ebx
  00024	74 1c		 je	 SHORT $LN59@CReferralS
  00026	56		 push	 esi
  00027	57		 push	 edi
$LL61@CReferralS:
  00028	8b f2		 mov	 esi, edx
  0002a	8b f8		 mov	 edi, eax
  0002c	83 c2 44	 add	 edx, 68			; 00000044H
  0002f	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00034	83 c0 44	 add	 eax, 68			; 00000044H
  00037	f3 a5		 rep movsd
  00039	3b d3		 cmp	 edx, ebx
  0003b	75 eb		 jne	 SHORT $LL61@CReferralS
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
$LN59@CReferralS:
  00042	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN68@CReferralS:

; 21   : }

  00045	8b c1		 mov	 eax, ecx
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??0CReferralSystem@@QAE@XZ ENDP				; CReferralSystem::CReferralSystem
_TEXT	ENDS
PUBLIC	??1CReferralSystem@@QAE@XZ			; CReferralSystem::~CReferralSystem
; Function compile flags: /Ogtp
;	COMDAT ??1CReferralSystem@@QAE@XZ
_TEXT	SEGMENT
??1CReferralSystem@@QAE@XZ PROC				; CReferralSystem::~CReferralSystem, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 25   : }

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN11@CReferralS@2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN11@CReferralS@2:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1CReferralSystem@@QAE@XZ ENDP				; CReferralSystem::~CReferralSystem
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXABUREFERRAL_DATA@@@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXABUREFERRAL_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXABUREFERRAL_DATA@@@Z PROC ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4e		 jae	 SHORT $LN4@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 48		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 05	 sar	 edx, 5
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 980  : 			if (this->_Mylast == this->_Myend)

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXI@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b c7		 mov	 eax, edi
  0003c	c1 e0 04	 shl	 eax, 4
  0003f	03 c7		 add	 eax, edi
  00041	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00044	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00047	52		 push	 edx
  00048	50		 push	 eax
  00049	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@AAU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00055	83 46 04 44	 add	 DWORD PTR [esi+4], 68	; 00000044H
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0005f	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00062	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  00064	6a 01		 push	 1
  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@IAEXI@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0006d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00070	57		 push	 edi
  00071	52		 push	 edx
  00072	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@ABU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA const &>
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0007e	83 46 04 44	 add	 DWORD PTR [esi+4], 68	; 00000044H
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?push_back@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXABUREFERRAL_DATA@@@Z ENDP ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CE@CDFOJCP@?$FLReferral?5System?$FN?5?$CFs?5file?5not?5fo@ ; `string'
PUBLIC	_FileName$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@CReferralSystem@@QAEXPAD@Z		; CReferralSystem::Read
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CDFOJCP@?$FLReferral?5System?$FN?5?$CFs?5file?5not?5fo@
CONST	SEGMENT
??_C@_0CE@CDFOJCP@?$FLReferral?5System?$FN?5?$CFs?5file?5not?5fo@ DB '[Re'
	DB	'ferral System] %s file not found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\referralsystem.cpp
CONST	ENDS
;	COMDAT ?Read@CReferralSystem@@QAEXPAD@Z
_TEXT	SEGMENT
_FileName$GSCopy$ = -80					; size = 4
_this$GSCopy$ = -76					; size = 4
_Info$210973 = -72					; size = 68
__$ArrayPad$ = -4					; size = 4
_FileName$ = 8						; size = 4
?Read@CReferralSystem@@QAEXPAD@Z PROC			; CReferralSystem::Read, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _FileName$[ebp]

; 44   : 	SMDToken Token;
; 45   : 
; 46   : 	SMDFile = fopen(FileName, "r");

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00019	56		 push	 esi
  0001a	89 4d b4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 125  : 
; 126  : 			this->m_Data.push_back(Info);

  0001d	89 75 b0	 mov	 DWORD PTR _FileName$GSCopy$[ebp], esi
  00020	e8 00 00 00 00	 call	 _fopen
  00025	83 c4 08	 add	 esp, 8
  00028	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  0002d	85 c0		 test	 eax, eax
  0002f	75 1f		 jne	 SHORT $LN95@Read

; 47   : 
; 48   : 	if(!SMDFile)
; 49   : 	{
; 50   : 		MsgBox("[Referral System] %s file not found", FileName);

  00031	56		 push	 esi
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CDFOJCP@?$FLReferral?5System?$FN?5?$CFs?5file?5not?5fo@
  00037	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0003c	83 c4 08	 add	 esp, 8
  0003f	5e		 pop	 esi

; 133  : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
$LN95@Read:

; 51   : 		return;
; 52   : 	}
; 53   : 
; 54   : 	while(true)
; 55   : 	{
; 56   : 		Token = GetToken();

  00050	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 57   : 
; 58   : 		if(Token == END)

  00055	83 f8 02	 cmp	 eax, 2
  00058	0f 84 12 03 00
	00		 je	 $LN101@Read
  0005e	53		 push	 ebx
  0005f	57		 push	 edi
$LL6@Read:

; 59   : 		{
; 60   : 			break;
; 61   : 		}
; 62   : 
; 63   : 		int iGroup = (int)TokenNumber;
; 64   : 
; 65   : 		while(true)
; 66   : 		{
; 67   : 			Token = GetToken();

  00060	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 68   : 
; 69   : 			if(!strcmp("end", TokenString))

  00065	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0006a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0006f	90		 npad	 1
$LL103@Read:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN104@Read
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN105@Read
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN104@Read
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL103@Read
$LN105@Read:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN106@Read
$LN104@Read:
  00090	1b c0		 sbb	 eax, eax
  00092	83 d8 ff	 sbb	 eax, -1
$LN106@Read:
  00095	85 c0		 test	 eax, eax
  00097	0f 84 c3 02 00
	00		 je	 $LN98@Read
  0009d	8d 49 00	 npad	 3
$LL3@Read:

; 70   : 			{
; 71   : 				break;
; 72   : 			}
; 73   : 
; 74   : 			REFERRAL_DATA Info;
; 75   : 
; 76   : 			Info.UserNeedLevel = (int)TokenNumber;

  000a0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000a6	e8 00 00 00 00	 call	 __ftol2_sse
  000ab	89 45 b8	 mov	 DWORD PTR _Info$210973[ebp], eax

; 77   : 
; 78   : 			Token = GetToken();

  000ae	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 79   : 			Info.UserNeedReset = (int)TokenNumber;

  000b3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000b9	e8 00 00 00 00	 call	 __ftol2_sse
  000be	89 45 bc	 mov	 DWORD PTR _Info$210973[ebp+4], eax

; 80   : 
; 81   : 			Token = GetToken();

  000c1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 82   : 			Info.UserNeedGrand = (int)TokenNumber;

  000c6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000cc	e8 00 00 00 00	 call	 __ftol2_sse
  000d1	89 45 c0	 mov	 DWORD PTR _Info$210973[ebp+8], eax

; 83   : 
; 84   : 			Token = GetToken();

  000d4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 			Info.MasterRewardCredit = (int)TokenNumber;

  000d9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000df	e8 00 00 00 00	 call	 __ftol2_sse
  000e4	89 45 c4	 mov	 DWORD PTR _Info$210973[ebp+12], eax

; 86   : 
; 87   : 			Token = GetToken();

  000e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 			Info.MasterRewardWCoinC = (int)TokenNumber;

  000ec	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000f2	e8 00 00 00 00	 call	 __ftol2_sse
  000f7	89 45 c8	 mov	 DWORD PTR _Info$210973[ebp+16], eax

; 89   : 
; 90   : 			Token = GetToken();

  000fa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 91   : 			Info.MasterRewardWCoinP = (int)TokenNumber;

  000ff	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00105	e8 00 00 00 00	 call	 __ftol2_sse
  0010a	89 45 cc	 mov	 DWORD PTR _Info$210973[ebp+20], eax

; 92   : 
; 93   : 			Token = GetToken();

  0010d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 94   : 			Info.MasterRewardWCoinG = (int)TokenNumber;

  00112	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00118	e8 00 00 00 00	 call	 __ftol2_sse
  0011d	89 45 d0	 mov	 DWORD PTR _Info$210973[ebp+24], eax

; 95   : 
; 96   : 			Token = GetToken();

  00120	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 			Info.MasterRewardPremiumType = (int)TokenNumber;

  00125	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0012b	e8 00 00 00 00	 call	 __ftol2_sse
  00130	89 45 d8	 mov	 DWORD PTR _Info$210973[ebp+32], eax

; 98   : 
; 99   : 			Token = GetToken();

  00133	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 100  : 			Info.MasterRewardPremiumTime = (int)TokenNumber;

  00138	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0013e	e8 00 00 00 00	 call	 __ftol2_sse
  00143	89 45 dc	 mov	 DWORD PTR _Info$210973[ebp+36], eax

; 101  : 
; 102  : 			Token = GetToken();

  00146	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 103  : 			Info.MasterRewardBonus = (int)TokenNumber;

  0014b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00151	e8 00 00 00 00	 call	 __ftol2_sse
  00156	89 45 d4	 mov	 DWORD PTR _Info$210973[ebp+28], eax

; 104  : 
; 105  : 			Token = GetToken();

  00159	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 106  : 			Info.UserRewardCredit = (int)TokenNumber;

  0015e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00164	e8 00 00 00 00	 call	 __ftol2_sse
  00169	89 45 e0	 mov	 DWORD PTR _Info$210973[ebp+40], eax

; 107  : 
; 108  : 			Token = GetToken();

  0016c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 109  : 			Info.UserRewardWCoinC = (int)TokenNumber;

  00171	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00177	e8 00 00 00 00	 call	 __ftol2_sse
  0017c	89 45 e4	 mov	 DWORD PTR _Info$210973[ebp+44], eax

; 110  : 
; 111  : 			Token = GetToken();

  0017f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 112  : 			Info.UserRewardWCoinP = (int)TokenNumber;

  00184	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018a	e8 00 00 00 00	 call	 __ftol2_sse
  0018f	89 45 e8	 mov	 DWORD PTR _Info$210973[ebp+48], eax

; 113  : 
; 114  : 			Token = GetToken();

  00192	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 115  : 			Info.UserRewardWCoinG = (int)TokenNumber;

  00197	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0019d	e8 00 00 00 00	 call	 __ftol2_sse
  001a2	89 45 ec	 mov	 DWORD PTR _Info$210973[ebp+52], eax

; 116  : 
; 117  : 			Token = GetToken();

  001a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 118  : 			Info.UserRewardPremiumType = (int)TokenNumber;

  001aa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b0	e8 00 00 00 00	 call	 __ftol2_sse
  001b5	89 45 f4	 mov	 DWORD PTR _Info$210973[ebp+60], eax

; 119  : 
; 120  : 			Token = GetToken();

  001b8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 121  : 			Info.UserRewardPremiumTime = (int)TokenNumber;

  001bd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c3	e8 00 00 00 00	 call	 __ftol2_sse
  001c8	89 45 f8	 mov	 DWORD PTR _Info$210973[ebp+64], eax

; 122  : 
; 123  : 			Token = GetToken();

  001cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 124  : 			Info.UserRewardBonus = (int)TokenNumber;

  001d0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001d6	e8 00 00 00 00	 call	 __ftol2_sse

; 125  : 
; 126  : 			this->m_Data.push_back(Info);

  001db	8b 5d b4	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  001de	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  001e1	89 45 f0	 mov	 DWORD PTR _Info$210973[ebp+56], eax
  001e4	8d 45 b8	 lea	 eax, DWORD PTR _Info$210973[ebp]
  001e7	3b c1		 cmp	 eax, ecx
  001e9	0f 83 b2 00 00
	00		 jae	 $LN13@Read
  001ef	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  001f2	8b d0		 mov	 edx, eax
  001f4	3b fa		 cmp	 edi, edx
  001f6	0f 87 a5 00 00
	00		 ja	 $LN13@Read
  001fc	2b d7		 sub	 edx, edi
  001fe	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00203	f7 ea		 imul	 edx
  00205	8b 45 b4	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00208	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  0020b	c1 fa 05	 sar	 edx, 5
  0020e	8b da		 mov	 ebx, edx
  00210	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00213	03 da		 add	 ebx, edx
  00215	3b ce		 cmp	 ecx, esi
  00217	75 5e		 jne	 SHORT $LN24@Read
  00219	2b cf		 sub	 ecx, edi
  0021b	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00220	f7 e9		 imul	 ecx
  00222	c1 fa 05	 sar	 edx, 5
  00225	8b ca		 mov	 ecx, edx
  00227	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0022a	03 ca		 add	 ecx, edx
  0022c	81 f9 c2 c3 c3
	03		 cmp	 ecx, 63161282		; 03c3c3c2H
  00232	0f 87 64 01 00
	00		 ja	 $LN99@Read
  00238	2b f7		 sub	 esi, edi
  0023a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0023f	f7 ee		 imul	 esi
  00241	c1 fa 05	 sar	 edx, 5
  00244	8b c2		 mov	 eax, edx
  00246	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00249	41		 inc	 ecx
  0024a	03 c2		 add	 eax, edx
  0024c	3b c8		 cmp	 ecx, eax
  0024e	76 27		 jbe	 SHORT $LN24@Read
  00250	8b d0		 mov	 edx, eax
  00252	d1 ea		 shr	 edx, 1
  00254	be c3 c3 c3 03	 mov	 esi, 63161283		; 03c3c3c3H
  00259	2b f2		 sub	 esi, edx
  0025b	3b f0		 cmp	 esi, eax
  0025d	73 04		 jae	 SHORT $LN46@Read
  0025f	33 c0		 xor	 eax, eax
  00261	eb 02		 jmp	 SHORT $LN47@Read
$LN46@Read:
  00263	03 c2		 add	 eax, edx
$LN47@Read:
  00265	3b c1		 cmp	 eax, ecx
  00267	73 02		 jae	 SHORT $LN43@Read
  00269	8b c1		 mov	 eax, ecx
$LN43@Read:
  0026b	8b 4d b4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0026e	50		 push	 eax
  0026f	83 c1 04	 add	 ecx, 4
  00272	e8 00 00 00 00	 call	 ?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::reserve
$LN24@Read:
  00277	8b 75 b4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0027a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0027d	8b c3		 mov	 eax, ebx
  0027f	c1 e0 04	 shl	 eax, 4
  00282	03 c3		 add	 eax, ebx
  00284	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00287	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0028a	52		 push	 edx
  0028b	50		 push	 eax
  0028c	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0028f	51		 push	 ecx
  00290	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@AAU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA &>
  00295	83 c4 0c	 add	 esp, 12			; 0000000cH
  00298	83 46 08 44	 add	 DWORD PTR [esi+8], 68	; 00000044H
  0029c	e9 7d 00 00 00	 jmp	 $LN11@Read
$LN13@Read:
  002a1	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  002a4	3b ce		 cmp	 ecx, esi
  002a6	75 5e		 jne	 SHORT $LN112@Read
  002a8	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  002ab	2b cf		 sub	 ecx, edi
  002ad	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  002b2	f7 e9		 imul	 ecx
  002b4	c1 fa 05	 sar	 edx, 5
  002b7	8b ca		 mov	 ecx, edx
  002b9	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  002bc	03 ca		 add	 ecx, edx
  002be	81 f9 c2 c3 c3
	03		 cmp	 ecx, 63161282		; 03c3c3c2H
  002c4	0f 87 d2 00 00
	00		 ja	 $LN99@Read
  002ca	2b f7		 sub	 esi, edi
  002cc	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  002d1	f7 ee		 imul	 esi
  002d3	c1 fa 05	 sar	 edx, 5
  002d6	8b c2		 mov	 eax, edx
  002d8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002db	41		 inc	 ecx
  002dc	03 c2		 add	 eax, edx
  002de	3b c8		 cmp	 ecx, eax
  002e0	76 24		 jbe	 SHORT $LN112@Read
  002e2	8b d0		 mov	 edx, eax
  002e4	d1 ea		 shr	 edx, 1
  002e6	be c3 c3 c3 03	 mov	 esi, 63161283		; 03c3c3c3H
  002eb	2b f2		 sub	 esi, edx
  002ed	3b f0		 cmp	 esi, eax
  002ef	73 04		 jae	 SHORT $LN81@Read
  002f1	33 c0		 xor	 eax, eax
  002f3	eb 02		 jmp	 SHORT $LN82@Read
$LN81@Read:
  002f5	03 c2		 add	 eax, edx
$LN82@Read:
  002f7	3b c1		 cmp	 eax, ecx
  002f9	73 02		 jae	 SHORT $LN78@Read
  002fb	8b c1		 mov	 eax, ecx
$LN78@Read:
  002fd	50		 push	 eax
  002fe	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00301	e8 00 00 00 00	 call	 ?reserve@?$vector@UREFERRAL_DATA@@V?$allocator@UREFERRAL_DATA@@@std@@@std@@QAEXI@Z ; std::vector<REFERRAL_DATA,std::allocator<REFERRAL_DATA> >::reserve
$LN112@Read:
  00306	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00309	8d 55 b8	 lea	 edx, DWORD PTR _Info$210973[ebp]
  0030c	52		 push	 edx
  0030d	50		 push	 eax
  0030e	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  00311	51		 push	 ecx
  00312	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UREFERRAL_DATA@@@std@@UREFERRAL_DATA@@ABU3@@std@@YAXAAV?$allocator@UREFERRAL_DATA@@@0@PAUREFERRAL_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<REFERRAL_DATA>,REFERRAL_DATA,REFERRAL_DATA const &>
  00317	83 c4 0c	 add	 esp, 12			; 0000000cH
  0031a	83 43 08 44	 add	 DWORD PTR [ebx+8], 68	; 00000044H
$LN11@Read:

; 68   : 
; 69   : 			if(!strcmp("end", TokenString))

  0031e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00323	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00328	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0032d	8d 49 00	 npad	 3
$LL107@Read:
  00330	8a 10		 mov	 dl, BYTE PTR [eax]
  00332	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00334	75 1a		 jne	 SHORT $LN108@Read
  00336	84 d2		 test	 dl, dl
  00338	74 12		 je	 SHORT $LN109@Read
  0033a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0033d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00340	75 0e		 jne	 SHORT $LN108@Read
  00342	83 c0 02	 add	 eax, 2
  00345	83 c1 02	 add	 ecx, 2
  00348	84 d2		 test	 dl, dl
  0034a	75 e4		 jne	 SHORT $LL107@Read
$LN109@Read:
  0034c	33 c0		 xor	 eax, eax
  0034e	eb 05		 jmp	 SHORT $LN110@Read
$LN108@Read:
  00350	1b c0		 sbb	 eax, eax
  00352	83 d8 ff	 sbb	 eax, -1
$LN110@Read:
  00355	85 c0		 test	 eax, eax
  00357	0f 85 43 fd ff
	ff		 jne	 $LL3@Read
  0035d	8b 75 b0	 mov	 esi, DWORD PTR _FileName$GSCopy$[ebp]
$LN98@Read:

; 51   : 		return;
; 52   : 	}
; 53   : 
; 54   : 	while(true)
; 55   : 	{
; 56   : 		Token = GetToken();

  00360	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 57   : 
; 58   : 		if(Token == END)

  00365	83 f8 02	 cmp	 eax, 2
  00368	0f 85 f2 fc ff
	ff		 jne	 $LL6@Read
  0036e	5f		 pop	 edi
  0036f	5b		 pop	 ebx
$LN101@Read:

; 127  : 		}
; 128  : 	}
; 129  : 
; 130  : 	fclose(SMDFile);

  00370	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00376	52		 push	 edx
  00377	e8 00 00 00 00	 call	 _fclose

; 131  : 
; 132  : 	LogAdd("%s file load!", FileName);

  0037c	56		 push	 esi
  0037d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00382	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 133  : }

  00388	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0038e	33 cd		 xor	 ecx, ebp
  00390	5e		 pop	 esi
  00391	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00396	8b e5		 mov	 esp, ebp
  00398	5d		 pop	 ebp
  00399	c2 04 00	 ret	 4
$LN99@Read:

; 125  : 
; 126  : 			this->m_Data.push_back(Info);

  0039c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  003a1	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN115@Read:
$LN114@Read:
  003a6	cc		 int	 3
?Read@CReferralSystem@@QAEXPAD@Z ENDP			; CReferralSystem::Read
_TEXT	ENDS
PUBLIC	??_C@_0BK@EDCGONO@ZtData?2ReferralSystem?4ini?$AA@ ; `string'
PUBLIC	?Load@CReferralSystem@@QAEXXZ			; CReferralSystem::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
;	COMDAT ??_C@_0BK@EDCGONO@ZtData?2ReferralSystem?4ini?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
CONST	SEGMENT
??_C@_0BK@EDCGONO@ZtData?2ReferralSystem?4ini?$AA@ DB 'ZtData\ReferralSys'
	DB	'tem.ini', 00H				; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\referralsystem.cpp
CONST	ENDS
;	COMDAT ?Load@CReferralSystem@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Load@CReferralSystem@@QAEXXZ PROC			; CReferralSystem::Load, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 29   : 	this->m_bActive = true;

  00007	c6 06 01	 mov	 BYTE PTR [esi], 1

; 30   : 
; 31   : 	if(!g_ZtLicense.user.ReferralSystem)

  0000a	80 3d f2 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+242, 0
  00011	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00014	75 08		 jne	 SHORT $LN1@Load

; 32   : 	{
; 33   : 		this->m_bActive = false;

  00016	c6 06 00	 mov	 BYTE PTR [esi], 0
  00019	5e		 pop	 esi

; 40   : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN1@Load:

; 34   : 		return;
; 35   : 	}
; 36   : 
; 37   : 	this->m_Data.clear();

  0001e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00021	53		 push	 ebx
  00022	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00025	3b da		 cmp	 ebx, edx
  00027	74 23		 je	 SHORT $LN22@Load
  00029	8b c2		 mov	 eax, edx
  0002b	3b d2		 cmp	 edx, edx
  0002d	74 1a		 je	 SHORT $LN51@Load
  0002f	57		 push	 edi
$LL53@Load:
  00030	8b f0		 mov	 esi, eax
  00032	8b fb		 mov	 edi, ebx
  00034	83 c0 44	 add	 eax, 68			; 00000044H
  00037	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0003c	83 c3 44	 add	 ebx, 68			; 00000044H
  0003f	f3 a5		 rep movsd
  00041	3b c2		 cmp	 eax, edx
  00043	75 eb		 jne	 SHORT $LL53@Load
  00045	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00048	5f		 pop	 edi
$LN51@Load:
  00049	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
$LN22@Load:

; 38   : 
; 39   : 	this->Read(gDirPath.GetNewPath("ZtData\\ReferralSystem.ini"));

  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EDCGONO@ZtData?2ReferralSystem?4ini?$AA@
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00056	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0005b	50		 push	 eax
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?Read@CReferralSystem@@QAEXPAD@Z ; CReferralSystem::Read
  00063	5b		 pop	 ebx
  00064	5e		 pop	 esi

; 40   : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?Load@CReferralSystem@@QAEXXZ ENDP			; CReferralSystem::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ReferralSystem@@YAXXZ
text$yc	SEGMENT
??__Eg_ReferralSystem@@YAXXZ PROC			; `dynamic initializer for 'g_ReferralSystem'', COMDAT

; 14   : CReferralSystem g_ReferralSystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ReferralSystem@@3VCReferralSystem@@A ; g_ReferralSystem
  00005	e8 00 00 00 00	 call	 ??0CReferralSystem@@QAE@XZ ; CReferralSystem::CReferralSystem
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ReferralSystem@@YAXXZ ; `dynamic atexit destructor for 'g_ReferralSystem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ReferralSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_ReferralSystem''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ReferralSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_ReferralSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_ReferralSystem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ReferralSystem@@3VCReferralSystem@@A ; g_ReferralSystem
  00005	e9 00 00 00 00	 jmp	 ??1CReferralSystem@@QAE@XZ ; CReferralSystem::~CReferralSystem
??__Fg_ReferralSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_ReferralSystem''
text$yd	ENDS
PUBLIC	?g_ReferralSystem@@3VCReferralSystem@@A		; g_ReferralSystem
_BSS	SEGMENT
?g_ReferralSystem@@3VCReferralSystem@@A DB 014H DUP (?)	; g_ReferralSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ReferralSystem$initializer$ DD FLAT:??__Eg_ReferralSystem@@YAXXZ
CRT$XCU	ENDS
END
