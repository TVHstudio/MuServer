; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\SProtocol.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?SetBill@BILL_CLASS@@QAEHEEKPAD@Z		; BILL_CLASS::SetBill
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\user.h
;	COMDAT ?SetBill@BILL_CLASS@@QAEHEEKPAD@Z
_TEXT	SEGMENT
_certify_type$ = 8					; size = 1
_pay$ = 12						; size = 1
_end_time$ = 16						; size = 4
_ends_days$ = 20					; size = 4
?SetBill@BILL_CLASS@@QAEHEEKPAD@Z PROC			; BILL_CLASS::SetBill, COMDAT
; _this$ = ecx

; 1804 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1805 : 		BOOL bRet=0;

  00003	33 c0		 xor	 eax, eax

; 1806 : 
; 1807 : 		if ( this->cCertifyType == -1 )

  00005	80 39 ff	 cmp	 BYTE PTR [ecx], -1
  00008	75 05		 jne	 SHORT $LN1@SetBill

; 1808 : 		{
; 1809 : 			bRet = 1;

  0000a	b8 01 00 00 00	 mov	 eax, 1
$LN1@SetBill:

; 1810 : 		}
; 1811 : 
; 1812 : 		this->cCertifyType = certify_type;

  0000f	8a 55 08	 mov	 dl, BYTE PTR _certify_type$[ebp]
  00012	88 11		 mov	 BYTE PTR [ecx], dl

; 1813 : 		this->PayCode = pay;

  00014	8a 55 0c	 mov	 dl, BYTE PTR _pay$[ebp]
  00017	88 51 01	 mov	 BYTE PTR [ecx+1], dl

; 1814 : 		this->EndTime = end_time;

  0001a	8b 55 10	 mov	 edx, DWORD PTR _end_time$[ebp]
  0001d	56		 push	 esi
  0001e	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1815 : 		strcpy(this->EndsDays, ends_days);

  00021	8b 55 14	 mov	 edx, DWORD PTR _ends_days$[ebp]
  00024	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  00027	2b f2		 sub	 esi, edx
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL4@SetBill:
  00030	8a 0a		 mov	 cl, BYTE PTR [edx]
  00032	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00035	42		 inc	 edx
  00036	84 c9		 test	 cl, cl
  00038	75 f6		 jne	 SHORT $LL4@SetBill
  0003a	5e		 pop	 esi

; 1816 : 		return bRet;
; 1817 : 	}

  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
?SetBill@BILL_CLASS@@QAEHEEKPAD@Z ENDP			; BILL_CLASS::SetBill
_TEXT	ENDS
PUBLIC	?GetState@CDragonEvent@@QAEEXZ			; CDragonEvent::GetState
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\dragonevent.h
;	COMDAT ?GetState@CDragonEvent@@QAEEXZ
_TEXT	SEGMENT
?GetState@CDragonEvent@@QAEEXZ PROC			; CDragonEvent::GetState, COMDAT
; _this$ = ecx

; 16   : 	BYTE GetState(){return this->EventState;}

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]
  00003	c3		 ret	 0
?GetState@CDragonEvent@@QAEEXZ ENDP			; CDragonEvent::GetState
_TEXT	ENDS
PUBLIC	?_ARGB@@YAKEEEE@Z				; _ARGB
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\tnotice.h
;	COMDAT ?_ARGB@@YAKEEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_r$ = 12						; size = 1
_g$ = 16						; size = 1
_b$ = 20						; size = 1
?_ARGB@@YAKEEEE@Z PROC					; _ARGB, COMDAT

; 9    : __inline DWORD _ARGB(BYTE a, BYTE r, BYTE g, BYTE b){ return a*16777216 + b*65536 + g*256 + r;}; // in tnotice.h : line 8

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _a$[ebp]
  00007	0f b6 4d 14	 movzx	 ecx, BYTE PTR _b$[ebp]
  0000b	0f b6 55 10	 movzx	 edx, BYTE PTR _g$[ebp]
  0000f	c1 e0 08	 shl	 eax, 8
  00012	03 c1		 add	 eax, ecx
  00014	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _r$[ebp]
  00018	c1 e0 08	 shl	 eax, 8
  0001b	03 c2		 add	 eax, edx
  0001d	c1 e0 08	 shl	 eax, 8
  00020	03 c1		 add	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_ARGB@@YAKEEEE@Z ENDP					; _ARGB
_TEXT	ENDS
PUBLIC	?GetMapSvrGroup@CMapServerManager@@QAEHXZ	; CMapServerManager::GetMapSvrGroup
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
;	COMDAT ?GetMapSvrGroup@CMapServerManager@@QAEHXZ
_TEXT	SEGMENT
?GetMapSvrGroup@CMapServerManager@@QAEHXZ PROC		; CMapServerManager::GetMapSvrGroup, COMDAT
; _this$ = ecx

; 50   : 		if ( this->m_lpThisMapSvrData != NULL )

  00000	8b 81 c0 32 01
	00		 mov	 eax, DWORD PTR [ecx+78528]
  00006	85 c0		 test	 eax, eax
  00008	74 05		 je	 SHORT $LN1@GetMapSvrG

; 51   : 		{
; 52   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]

; 55   : 	}

  0000e	c3		 ret	 0
$LN1@GetMapSvrG:

; 53   : 		}
; 54   : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1

; 55   : 	}

  00012	c3		 ret	 0
?GetMapSvrGroup@CMapServerManager@@QAEHXZ ENDP		; CMapServerManager::GetMapSvrGroup
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJServerLogin@@YAXXZ				; GJServerLogin
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?wsJServerCli@@3VwsJoinServerCli@@A:BYTE	; wsJServerCli
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	?GameServerPort@@3HA:DWORD			; GameServerPort
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\sprotocol.cpp
;	COMDAT ?GJServerLogin@@YAXXZ
_TEXT	SEGMENT
_pInfo$ = -64						; size = 58
__$ArrayPad$ = -4					; size = 4
?GJServerLogin@@YAXXZ PROC				; GJServerLogin, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	SDHP_SERVERINFO pInfo;
; 103  : 
; 104  : 	pInfo.h.c = 0xC1;
; 105  : 	pInfo.h.size = sizeof(SDHP_SERVERINFO);
; 106  : 	pInfo.h.headcode = 0x00;
; 107  : 	pInfo.Port = GameServerPort;

  00010	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?GameServerPort@@3HA
  00016	66 89 45 c4	 mov	 WORD PTR _pInfo$[ebp+4], ax
  0001a	c7 45 c0 c1 3a
	00 01		 mov	 DWORD PTR _pInfo$[ebp], 16792257 ; 01003ac1H

; 108  : 	pInfo.Type = 1;
; 109  : 	strcpy(pInfo.ServerName , szServerName);

  00021	33 c0		 xor	 eax, eax
$LL3@GJServerLo:
  00023	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?szServerName@@3PADA[eax]
  00029	88 4c 05 c6	 mov	 BYTE PTR _pInfo$[ebp+eax+6], cl
  0002d	40		 inc	 eax
  0002e	84 c9		 test	 cl, cl
  00030	75 f1		 jne	 SHORT $LL3@GJServerLo

; 110  : 	pInfo.ServerCode = gGameServerCode;
; 111  : 
; 112  : 	wsJServerCli.DataSend((char*)&pInfo, pInfo.h.size);

  00032	0f b6 55 c1	 movzx	 edx, BYTE PTR _pInfo$[ebp+1]
  00036	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  0003d	52		 push	 edx
  0003e	8d 45 c0	 lea	 eax, DWORD PTR _pInfo$[ebp]
  00041	66 89 4d f8	 mov	 WORD PTR _pInfo$[ebp+56], cx
  00045	50		 push	 eax
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  0004b	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 113  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?GJServerLogin@@YAXXZ ENDP				; GJServerLogin
_TEXT	ENDS
PUBLIC	?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z	; JGServerLoginResult
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	?JoinServerConnected@@3HA:DWORD			; JoinServerConnected
EXTRN	?gServerReady@@3HA:DWORD			; gServerReady
EXTRN	?ghWnd@@3PAUHWND__@@A:DWORD			; ghWnd
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
; Function compile flags: /Ogtp
;	COMDAT ?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z PROC	; JGServerLoginResult, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 118  : 	if ( lpMsg->Result == false )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	80 78 03 00	 cmp	 BYTE PTR [eax+3], 0
  0000a	75 1b		 jne	 SHORT $LN1@JGServerLo

; 119  : 	{
; 120  : 		LogAdd(lMsg.Get(MSGGET(1, 210)));

  0000c	68 d2 01 00 00	 push	 466			; 000001d2H
  00011	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00016	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0001b	50		 push	 eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00022	83 c4 04	 add	 esp, 4

; 127  : 
; 128  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@JGServerLo:

; 121  : 		return;
; 122  : 	}
; 123  : 
; 124  : 	JoinServerConnected=TRUE;
; 125  : 	gServerReady++;
; 126  : 	SendMessage(ghWnd, WM_START_SERVER, 0, 0);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	01 05 00 00 00
	00		 add	 DWORD PTR ?gServerReady@@3HA, eax ; gServerReady
  0003c	68 05 04 00 00	 push	 1029			; 00000405H
  00041	51		 push	 ecx
  00042	a3 00 00 00 00	 mov	 DWORD PTR ?JoinServerConnected@@3HA, eax ; JoinServerConnected
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 127  : 
; 128  : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z ENDP	; JGServerLoginResult
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPUserClose@@YAXPAD@Z				; GJPUserClose
; Function compile flags: /Ogtp
;	COMDAT ?GJPUserClose@@YAXPAD@Z
_TEXT	SEGMENT
_pClose$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_szAccountID$ = 8					; size = 4
?GJPUserClose@@YAXPAD@Z PROC				; GJPUserClose, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szAccountID$[ebp]

; 133  : 	SDHP_USERCLOSE_ID pClose;
; 134  : 
; 135  : 	pClose.h.c =0xC1;
; 136  : 	pClose.h.size= sizeof(SDHP_USERCLOSE_ID);
; 137  : 	pClose.h.headcode = 0x05;
; 138  : 	memcpy(pClose.szId , szAccountID, 10);

  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]
  0001c	89 4d e3	 mov	 DWORD PTR _pClose$[ebp+3], ecx

; 139  : 
; 140  : 	wsJServerCli.DataSend((char*)&pClose, pClose.h.size);

  0001f	6a 1c		 push	 28			; 0000001cH
  00021	8d 4d e0	 lea	 ecx, DWORD PTR _pClose$[ebp]
  00024	51		 push	 ecx
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  0002a	66 c7 45 e0 c1
	1c		 mov	 WORD PTR _pClose$[ebp], 7361 ; 00001cc1H
  00030	c6 45 e2 05	 mov	 BYTE PTR _pClose$[ebp+2], 5
  00034	89 55 e7	 mov	 DWORD PTR _pClose$[ebp+7], edx
  00037	66 89 45 eb	 mov	 WORD PTR _pClose$[ebp+11], ax
  0003b	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 141  : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?GJPUserClose@@YAXPAD@Z ENDP				; GJPUserClose
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPUserClose@@YAXPAUOBJECTSTRUCT@@@Z		; GJPUserClose
; Function compile flags: /Ogtp
;	COMDAT ?GJPUserClose@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pClose$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GJPUserClose@@YAXPAUOBJECTSTRUCT@@@Z PROC		; GJPUserClose, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 146  : 	SDHP_USERCLOSE_ID pClose;
; 147  : 
; 148  : 	pClose.h.c =0xC1;
; 149  : 	pClose.h.size= sizeof(SDHP_USERCLOSE_ID);
; 150  : 	pClose.h.headcode = 0x05;
; 151  : 	memcpy(pClose.szId , lpObj->AccountID, 10);

  00013	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00016	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00019	89 4d e3	 mov	 DWORD PTR _pClose$[ebp+3], ecx
  0001c	0f b7 48 74	 movzx	 ecx, WORD PTR [eax+116]
  00020	89 55 e7	 mov	 DWORD PTR _pClose$[ebp+7], edx

; 152  : 	memcpy(pClose.szName, lpObj->BackName, 10);

  00023	8b 90 d9 10 00
	00		 mov	 edx, DWORD PTR [eax+4313]
  00029	66 89 4d eb	 mov	 WORD PTR _pClose$[ebp+11], cx
  0002d	8b 88 dd 10 00
	00		 mov	 ecx, DWORD PTR [eax+4317]
  00033	89 55 ed	 mov	 DWORD PTR _pClose$[ebp+13], edx
  00036	66 8b 90 e1 10
	00 00		 mov	 dx, WORD PTR [eax+4321]
  0003d	89 4d f1	 mov	 DWORD PTR _pClose$[ebp+17], ecx

; 153  : 	pClose.Level = lpObj->Level;

  00040	0f b7 88 be 00
	00 00		 movzx	 ecx, WORD PTR [eax+190]
  00047	66 89 55 f5	 mov	 WORD PTR _pClose$[ebp+21], dx

; 154  : 	pClose.DbClass = lpObj->DbClass;

  0004b	8a 90 ba 00 00
	00		 mov	 dl, BYTE PTR [eax+186]

; 155  : 
; 156  : 	wsJServerCli.DataSend((char*)&pClose, pClose.h.size);

  00051	6a 1c		 push	 28			; 0000001cH
  00053	8d 45 e0	 lea	 eax, DWORD PTR _pClose$[ebp]
  00056	66 89 4d f8	 mov	 WORD PTR _pClose$[ebp+24], cx
  0005a	50		 push	 eax
  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00060	66 c7 45 e0 c1
	1c		 mov	 WORD PTR _pClose$[ebp], 7361 ; 00001cc1H
  00066	c6 45 e2 05	 mov	 BYTE PTR _pClose$[ebp+2], 5
  0006a	88 55 fa	 mov	 BYTE PTR _pClose$[ebp+26], dl
  0006d	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 157  : }

  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
?GJPUserClose@@YAXPAUOBJECTSTRUCT@@@Z ENDP		; GJPUserClose
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPAccountFail@@YAXFPADHH@Z			; GJPAccountFail
; Function compile flags: /Ogtp
;	COMDAT ?GJPAccountFail@@YAXFPADHH@Z
_TEXT	SEGMENT
_pMsg$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_number$ = 8						; size = 2
_Id$ = 12						; size = 4
_DBNumber$ = 16						; size = 4
_UserNumber$ = 20					; size = 4
?GJPAccountFail@@YAXFPADHH@Z PROC			; GJPAccountFail, COMDAT

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 285  : 	SDHP_JOINFAIL pMsg;
; 286  : 
; 287  : 	memset(&pMsg, 0, sizeof(SDHP_JOINFAIL));
; 288  : 
; 289  : 	pMsg.h.c=0xC1;
; 290  : 	pMsg.h.headcode= 0x02;
; 291  : 	pMsg.h.size = sizeof (SDHP_JOINFAIL);
; 292  : 	pMsg.Number = number;
; 293  : 	pMsg.DBNumber = DBNumber;
; 294  : 	pMsg.UserNumber = UserNumber;

  00010	8b 55 14	 mov	 edx, DWORD PTR _UserNumber$[ebp]
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _DBNumber$[ebp]
  00016	33 c0		 xor	 eax, eax
  00018	89 45 e0	 mov	 DWORD PTR _pMsg$[ebp], eax
  0001b	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  0001e	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+20], eax
  00021	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  00024	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00027	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  0002a	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  0002d	66 8b 45 08	 mov	 ax, WORD PTR _number$[ebp]
  00031	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+20], edx
  00034	66 89 45 e4	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 295  : 
; 296  : 	strcpy(pMsg.Id , Id);

  00038	8b 45 0c	 mov	 eax, DWORD PTR _Id$[ebp]
  0003b	8d 55 e6	 lea	 edx, DWORD PTR _pMsg$[ebp+6]
  0003e	c6 45 e0 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00042	66 c7 45 e1 1c
	02		 mov	 WORD PTR _pMsg$[ebp+1], 540 ; 0000021cH
  00048	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  0004b	2b d0		 sub	 edx, eax
  0004d	8d 49 00	 npad	 3
$LL3@GJPAccount:
  00050	8a 08		 mov	 cl, BYTE PTR [eax]
  00052	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00055	40		 inc	 eax
  00056	84 c9		 test	 cl, cl
  00058	75 f6		 jne	 SHORT $LL3@GJPAccount

; 297  : 
; 298  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  0005a	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0005e	50		 push	 eax
  0005f	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00062	51		 push	 ecx
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00068	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 299  : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?GJPAccountFail@@YAXFPADHH@Z ENDP			; GJPAccountFail
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPAccountBlock@@YAXFPADHHH@Z			; GJPAccountBlock
; Function compile flags: /Ogtp
;	COMDAT ?GJPAccountBlock@@YAXFPADHHH@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_number$ = 8						; size = 2
_Id$ = 12						; size = 4
_DBNumber$ = 16						; size = 4
_UserNumber$ = 20					; size = 4
_BlockCode$ = 24					; size = 4
?GJPAccountBlock@@YAXFPADHHH@Z PROC			; GJPAccountBlock, COMDAT

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 304  : 	SDHP_COMMAND_BLOCK pMsg;
; 305  : 
; 306  : 	memset(&pMsg, 0, sizeof(SDHP_COMMAND_BLOCK));
; 307  : 
; 308  : 	pMsg.h.c=0xC1;
; 309  : 	pMsg.h.headcode= 0x04;
; 310  : 	pMsg.h.size = sizeof (SDHP_COMMAND_BLOCK);
; 311  : 	pMsg.Number = number;
; 312  : 	pMsg.DBNumber = DBNumber;
; 313  : 	pMsg.UserNumber = UserNumber;

  00010	8b 55 14	 mov	 edx, DWORD PTR _UserNumber$[ebp]
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _DBNumber$[ebp]
  00016	33 c0		 xor	 eax, eax
  00018	89 45 dc	 mov	 DWORD PTR _pMsg$[ebp], eax
  0001b	89 45 e0	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  0001e	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+20], eax
  00021	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  00024	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+28], eax
  00027	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  0002a	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  0002d	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  00030	66 8b 45 08	 mov	 ax, WORD PTR _number$[ebp]
  00034	66 89 45 e0	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 314  : 	pMsg.BlockCode = BlockCode;

  00038	8a 45 18	 mov	 al, BYTE PTR _BlockCode$[ebp]
  0003b	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+20], edx
  0003e	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+28], al

; 315  : 
; 316  : 	strcpy(pMsg.Id , Id);

  00041	8b 45 0c	 mov	 eax, DWORD PTR _Id$[ebp]
  00044	8d 55 e2	 lea	 edx, DWORD PTR _pMsg$[ebp+6]
  00047	c6 45 dc c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  0004b	66 c7 45 dd 20
	04		 mov	 WORD PTR _pMsg$[ebp+1], 1056 ; 00000420H
  00051	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  00054	2b d0		 sub	 edx, eax
$LL3@GJPAccount@2:
  00056	8a 08		 mov	 cl, BYTE PTR [eax]
  00058	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0005b	40		 inc	 eax
  0005c	84 c9		 test	 cl, cl
  0005e	75 f6		 jne	 SHORT $LL3@GJPAccount@2

; 317  : 
; 318  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00060	0f b6 4d dd	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00064	51		 push	 ecx
  00065	8d 55 dc	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00068	52		 push	 edx
  00069	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  0006e	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 319  : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?GJPAccountBlock@@YAXFPADHHH@Z ENDP			; GJPAccountBlock
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z ; GJPBillCeckRecv
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?m_ObjBill@@3PAVBILL_CLASS@@A:BYTE		; m_ObjBill
EXTRN	?gObjIsAccontConnect@@YAHHPAD@Z:PROC		; gObjIsAccontConnect
; Function compile flags: /Ogtp
;	COMDAT ?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z
_TEXT	SEGMENT
_szId$ = -32						; size = 11
_EndsDays$ = -20					; size = 13
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z PROC	; GJPBillCeckRecv, COMDAT

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 324  : 	int aIndex = lpMsg->Number ;
; 325  : 	char szId[11];
; 326  : 	char EndsDays[13];
; 327  : 
; 328  : 	szId[10] = 0;
; 329  : 
; 330  : 	memcpy(szId, lpMsg->Id, sizeof(lpMsg->Id));

  00014	8b 46 03	 mov	 eax, DWORD PTR [esi+3]
  00017	8b 4e 07	 mov	 ecx, DWORD PTR [esi+7]
  0001a	66 8b 56 0b	 mov	 dx, WORD PTR [esi+11]
  0001e	57		 push	 edi
  0001f	0f bf 7e 0e	 movsx	 edi, WORD PTR [esi+14]
  00023	89 45 e0	 mov	 DWORD PTR _szId$[ebp], eax

; 331  : 
; 332  : 	if (gObjIsAccontConnect(aIndex, szId) == 0 )

  00026	8d 45 e0	 lea	 eax, DWORD PTR _szId$[ebp]
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	c6 45 ea 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  0002f	89 4d e4	 mov	 DWORD PTR _szId$[ebp+4], ecx
  00032	66 89 55 e8	 mov	 WORD PTR _szId$[ebp+8], dx
  00036	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003b	83 c4 08	 add	 esp, 8
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 88 00 00
	00		 je	 $LN1@GJPBillCec

; 333  : 	{
; 334  : 		return ;
; 335  : 	}
; 336  : 
; 337  : 	memset(EndsDays, 0, sizeof(EndsDays));
; 338  : 	memcpy(EndsDays, lpMsg->EndsDays, sizeof(lpMsg->EndsDays));

  00046	8b 4e 12	 mov	 ecx, DWORD PTR [esi+18]
  00049	8b 56 16	 mov	 edx, DWORD PTR [esi+22]
  0004c	33 c0		 xor	 eax, eax
  0004e	89 45 ec	 mov	 DWORD PTR _EndsDays$[ebp], eax
  00051	89 45 f0	 mov	 DWORD PTR _EndsDays$[ebp+4], eax
  00054	89 45 f4	 mov	 DWORD PTR _EndsDays$[ebp+8], eax
  00057	88 45 f8	 mov	 BYTE PTR _EndsDays$[ebp+12], al
  0005a	8b 46 1a	 mov	 eax, DWORD PTR [esi+26]
  0005d	89 45 f4	 mov	 DWORD PTR _EndsDays$[ebp+8], eax

; 339  : 
; 340  : 	if ( m_ObjBill[aIndex].SetBill( lpMsg->cCertifyType , lpMsg->PayCode, lpMsg->EndTime , EndsDays) == TRUE )

  00060	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00063	53		 push	 ebx
  00064	8a 5e 10	 mov	 bl, BYTE PTR [esi+16]
  00067	89 4d ec	 mov	 DWORD PTR _EndsDays$[ebp], ecx
  0006a	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0006d	89 55 f0	 mov	 DWORD PTR _EndsDays$[ebp+4], edx
  00070	8a 56 11	 mov	 dl, BYTE PTR [esi+17]
  00073	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?m_ObjBill@@3PAVBILL_CLASS@@A[eax*8]
  0007a	33 f6		 xor	 esi, esi
  0007c	80 38 ff	 cmp	 BYTE PTR [eax], -1
  0007f	75 05		 jne	 SHORT $LN5@GJPBillCec
  00081	be 01 00 00 00	 mov	 esi, 1
$LN5@GJPBillCec:
  00086	88 50 01	 mov	 BYTE PTR [eax+1], dl
  00089	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0008c	88 18		 mov	 BYTE PTR [eax], bl
  0008e	8d 4d ec	 lea	 ecx, DWORD PTR _EndsDays$[ebp]
  00091	8d 50 08	 lea	 edx, DWORD PTR [eax+8]
  00094	8b c1		 mov	 eax, ecx
  00096	2b d0		 sub	 edx, eax
  00098	5b		 pop	 ebx
  00099	8d a4 24 00 00
	00 00		 npad	 7
$LL8@GJPBillCec:
  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000a5	41		 inc	 ecx
  000a6	84 c0		 test	 al, al
  000a8	75 f6		 jne	 SHORT $LL8@GJPBillCec
  000aa	83 fe 01	 cmp	 esi, 1
  000ad	75 1f		 jne	 SHORT $LN1@GJPBillCec

; 341  : 	{
; 342  : 		gObjAddMsgSendDelay(&gObj[aIndex], 1000, aIndex, 100, 0);

  000af	6a 00		 push	 0
  000b1	6a 64		 push	 100			; 00000064H
  000b3	57		 push	 edi
  000b4	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  000ba	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c0	68 e8 03 00 00	 push	 1000			; 000003e8H
  000c5	57		 push	 edi
  000c6	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  000cb	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@GJPBillCec:

; 343  : 	}
; 344  : }

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	5f		 pop	 edi
  000d2	33 cd		 xor	 ecx, ebp
  000d4	5e		 pop	 esi
  000d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z ENDP	; GJPBillCeckRecv
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z	; GJPUserKillRecv
EXTRN	?gObjUserKill@@YAXH@Z:PROC			; gObjUserKill
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
; Function compile flags: /Ogtp
;	COMDAT ?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z
_TEXT	SEGMENT
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z PROC	; GJPUserKillRecv, COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 349  : 	char szId[11];
; 350  : 	int number;
; 351  : 	szId[10] = 0;
; 352  : 
; 353  : 	memcpy(szId, lpMsg->Id , sizeof(lpMsg->Id) );

  00013	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  00016	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  00019	56		 push	 esi

; 354  : 	number = lpMsg->Number;

  0001a	0f bf 70 0e	 movsx	 esi, WORD PTR [eax+14]
  0001e	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx

; 355  : 
; 356  : 	if (gObjIsAccontConnect(number, szId) == 0 )

  00021	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00024	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx
  00027	66 8b 48 0b	 mov	 cx, WORD PTR [eax+11]
  0002b	52		 push	 edx
  0002c	56		 push	 esi
  0002d	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  00031	66 89 4d f8	 mov	 WORD PTR _szId$[ebp+8], cx
  00035	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003a	83 c4 08	 add	 esp, 8
  0003d	85 c0		 test	 eax, eax
  0003f	74 21		 je	 SHORT $LN2@GJPUserKil

; 357  : 	{
; 358  : 		return;
; 359  : 	}
; 360  : 
; 361  : 	GCServerMsgStringSend(lMsg.Get( MSGGET(6, 66)), number, 0);

  00041	6a 00		 push	 0
  00043	56		 push	 esi
  00044	68 42 06 00 00	 push	 1602			; 00000642H
  00049	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0004e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 362  : 	gObjUserKill(number);

  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?gObjUserKill@@YAXH@Z	; gObjUserKill
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@GJPUserKil:

; 363  : }

  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	33 cd		 xor	 ecx, ebp
  00067	5e		 pop	 esi
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ENDP	; GJPUserKillRecv
_TEXT	ENDS
PUBLIC	?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z	; JGOtherJoin
; Function compile flags: /Ogtp
;	COMDAT ?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z
_TEXT	SEGMENT
_szId$ = -12						; size = 11
_lpMsg$ = 8						; size = 4
?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z PROC		; JGOtherJoin, COMDAT

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 368  : 	char szId[11];
; 369  : 	szId[10]=0;
; 370  : 	int n;
; 371  : 
; 372  : 	memcpy(szId, lpMsg->AccountID, sizeof(lpMsg->AccountID));

  00006	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00009	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  0000c	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  0000f	66 8b 40 0b	 mov	 ax, WORD PTR [eax+11]
  00013	56		 push	 esi
  00014	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001a	57		 push	 edi
  0001b	c6 45 fe 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  0001f	89 4d f4	 mov	 DWORD PTR _szId$[ebp], ecx
  00022	89 55 f8	 mov	 DWORD PTR _szId$[ebp+4], edx
  00025	66 89 45 fc	 mov	 WORD PTR _szId$[ebp+8], ax

; 373  : 
; 374  : 	for (n= OBJ_STARTUSERINDZT; n<OBJMAX;n++)

  00029	bf b0 36 00 00	 mov	 edi, 14000		; 000036b0H
  0002e	81 c6 6c a7 40
	09		 add	 esi, 155232108		; 0940a76cH
$LL7@JGOtherJoi:

; 375  : 	{
; 376  : 		if ( gObj[n].Connected >= PLAYER_LOGGED )

  00034	83 7e 98 02	 cmp	 DWORD PTR [esi-104], 2
  00038	7c 3f		 jl	 SHORT $LN6@JGOtherJoi

; 377  : 		{
; 378  : 			if ( gObj[n].AccountID[0] == szId[0] )

  0003a	8a 4d f4	 mov	 cl, BYTE PTR _szId$[ebp]
  0003d	38 0e		 cmp	 BYTE PTR [esi], cl
  0003f	75 38		 jne	 SHORT $LN6@JGOtherJoi

; 379  : 			{
; 380  : 				if ( gObj[n].AccountID[1] == szId[1] )

  00041	8a 55 f5	 mov	 dl, BYTE PTR _szId$[ebp+1]
  00044	38 56 01	 cmp	 BYTE PTR [esi+1], dl
  00047	75 30		 jne	 SHORT $LN6@JGOtherJoi

; 381  : 				{
; 382  : 					if ( strcmp(gObj[n].AccountID , szId) == 0 )

  00049	8d 4d f4	 lea	 ecx, DWORD PTR _szId$[ebp]
  0004c	8b c6		 mov	 eax, esi
  0004e	8b ff		 npad	 2
$LL13@JGOtherJoi:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN14@JGOtherJoi
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN15@JGOtherJoi
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN14@JGOtherJoi
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL13@JGOtherJoi
$LN15@JGOtherJoi:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN16@JGOtherJoi
$LN14@JGOtherJoi:
  00070	1b c0		 sbb	 eax, eax
  00072	83 d8 ff	 sbb	 eax, -1
$LN16@JGOtherJoi:
  00075	85 c0		 test	 eax, eax
  00077	74 15		 je	 SHORT $LN11@JGOtherJoi
$LN6@JGOtherJoi:

; 373  : 
; 374  : 	for (n= OBJ_STARTUSERINDZT; n<OBJMAX;n++)

  00079	47		 inc	 edi
  0007a	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  00080	81 ff 98 3a 00
	00		 cmp	 edi, 15000		; 00003a98H
  00086	7c ac		 jl	 SHORT $LL7@JGOtherJoi
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi

; 385  : 						break;
; 386  : 					}
; 387  : 				}
; 388  : 			}
; 389  : 		}
; 390  : 	}
; 391  : }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
$LN11@JGOtherJoi:

; 383  : 					{
; 384  : 						GCServerMsgStringSend(lMsg.Get( MSGGET(4, 107)), n, 1 );

  0008e	6a 01		 push	 1
  00090	57		 push	 edi
  00091	68 6b 04 00 00	 push	 1131			; 0000046bH
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0009b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi

; 385  : 						break;
; 386  : 					}
; 387  : 				}
; 388  : 			}
; 389  : 		}
; 390  : 	}
; 391  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z ENDP		; JGOtherJoin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ; GJPUserDisconnectRecv
EXTRN	?SendClose@ConnectZt@@QAEXHH@Z:PROC		; ConnectZt::SendClose
EXTRN	?g_ConnectZt@@3VConnectZt@@A:QWORD		; g_ConnectZt
; Function compile flags: /Ogtp
;	COMDAT ?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z
_TEXT	SEGMENT
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z PROC ; GJPUserDisconnectRecv, COMDAT

; 395  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 396  : 	char szId[11];
; 397  : 	szId[10]=0;
; 398  : 	int number;
; 399  : 
; 400  : 	memcpy( szId, lpMsg->Id , sizeof( lpMsg->Id ) );

  00013	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  00016	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  00019	56		 push	 esi

; 401  : 	number = lpMsg->Number;

  0001a	0f bf 70 0e	 movsx	 esi, WORD PTR [eax+14]
  0001e	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx

; 402  : 
; 403  : 	if ( gObjIsAccontConnect(number, szId ) == 0 )

  00021	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00024	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx
  00027	66 8b 48 0b	 mov	 cx, WORD PTR [eax+11]
  0002b	52		 push	 edx
  0002c	56		 push	 esi
  0002d	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  00031	66 89 4d f8	 mov	 WORD PTR _szId$[ebp+8], cx
  00035	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003a	83 c4 08	 add	 esp, 8
  0003d	85 c0		 test	 eax, eax
  0003f	74 2e		 je	 SHORT $LN2@GJPUserDis

; 404  : 	{
; 405  : 		return;
; 406  : 	}
; 407  : 
; 408  : #if _RECONNECT_
; 409  : 	g_ConnectZt.SendClose(number,0);

  00041	6a 00		 push	 0
  00043	56		 push	 esi
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectZt@@3VConnectZt@@A ; g_ConnectZt
  00049	e8 00 00 00 00	 call	 ?SendClose@ConnectZt@@QAEXHH@Z ; ConnectZt::SendClose

; 410  : #endif
; 411  : 
; 412  : 	GCServerMsgStringSend(lMsg.Get( MSGGET(6, 67) ), number, 0 );

  0004e	6a 00		 push	 0
  00050	56		 push	 esi
  00051	68 43 06 00 00	 push	 1603			; 00000643H
  00056	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0005b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 413  : 	gObjUserKill(number);

  00066	56		 push	 esi
  00067	e8 00 00 00 00	 call	 ?gObjUserKill@@YAXH@Z	; gObjUserKill
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@GJPUserDis:

; 414  : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	33 cd		 xor	 ecx, ebp
  00074	5e		 pop	 esi
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ENDP ; GJPUserDisconnectRecv
_TEXT	ENDS
PUBLIC	?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z	; JGPExitCodeRecv
; Function compile flags: /Ogtp
;	COMDAT ?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z PROC		; JGPExitCodeRecv, COMDAT

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 419  : 	if ( lpMsg->ExitCode[0] == 70 && lpMsg->ExitCode[1] == 70 && lpMsg->ExitCode[2] == 88 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	b1 46		 mov	 cl, 70			; 00000046H
  00008	38 48 03	 cmp	 BYTE PTR [eax+3], cl
  0000b	75 23		 jne	 SHORT $LN1@JGPExitCod
  0000d	38 48 04	 cmp	 BYTE PTR [eax+4], cl
  00010	75 1e		 jne	 SHORT $LN1@JGPExitCod
  00012	80 78 05 58	 cmp	 BYTE PTR [eax+5], 88	; 00000058H
  00016	75 18		 jne	 SHORT $LN1@JGPExitCod

; 420  : 	{
; 421  : 		SendMessage( ghWnd, WM_COMMAND, IDM_3_MINUTE_CLOSE, 0 );

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  0001d	6a 00		 push	 0
  0001f	68 12 80 00 00	 push	 32786			; 00008012H
  00024	68 11 01 00 00	 push	 273			; 00000111H
  00029	50		 push	 eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN1@JGPExitCod:

; 422  : 	}
; 423  : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z ENDP		; JGPExitCodeRecv
_TEXT	ENDS
PUBLIC	?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z	; JGPEventStart
EXTRN	?Start@CDragonEvent@@QAEXXZ:PROC		; CDragonEvent::Start
EXTRN	?End@CDragonEvent@@QAEXXZ:PROC			; CDragonEvent::End
EXTRN	?DragonEvent@@3PAVCDragonEvent@@A:DWORD		; DragonEvent
; Function compile flags: /Ogtp
;	COMDAT ?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z PROC		; JGPEventStart, COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  : 	if ( lpMsg->Event == 1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	80 78 03 01	 cmp	 BYTE PTR [eax+3], 1
  0000a	75 18		 jne	 SHORT $LN1@JGPEventSt

; 429  : 	{
; 430  : 		if (DragonEvent->GetState() != 0 )

  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DragonEvent@@3PAVCDragonEvent@@A ; DragonEvent
  00012	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00016	74 06		 je	 SHORT $LN2@JGPEventSt

; 437  : 		}
; 438  : 	}
; 439  : }

  00018	5d		 pop	 ebp

; 431  : 		{
; 432  : 			DragonEvent->End();

  00019	e9 00 00 00 00	 jmp	 ?End@CDragonEvent@@QAEXXZ ; CDragonEvent::End
$LN2@JGPEventSt:

; 437  : 		}
; 438  : 	}
; 439  : }

  0001e	5d		 pop	 ebp

; 433  : 		}
; 434  : 		else
; 435  : 		{
; 436  : 			DragonEvent->Start();

  0001f	e9 00 00 00 00	 jmp	 ?Start@CDragonEvent@@QAEXXZ ; CDragonEvent::Start
$LN1@JGPEventSt:

; 437  : 		}
; 438  : 	}
; 439  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z ENDP		; JGPEventStart
_TEXT	ENDS
PUBLIC	?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z	; JGPEventControl
EXTRN	?gMedalEvent@@3HA:DWORD				; gMedalEvent
EXTRN	?gHeartOfLoveEvent@@3HA:DWORD			; gHeartOfLoveEvent
EXTRN	?gFireCrackerEvent@@3HA:DWORD			; gFireCrackerEvent
EXTRN	?gXMasEvent@@3HA:DWORD				; gXMasEvent
; Function compile flags: /Ogtp
;	COMDAT ?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z PROC	; JGPEventControl, COMDAT

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 444  : 	switch ( lpMsg->Event  )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0000a	83 f9 04	 cmp	 ecx, 4
  0000d	77 51		 ja	 SHORT $LN9@JGPEventCo
  0000f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN17@JGPEventCo[ecx*4]
$LN8@JGPEventCo:

; 445  : 	{
; 446  : 		case DRAGON_EVENT:
; 447  : 			if ( lpMsg->Stat != 0 )

  00016	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0

; 448  : 			{
; 449  : 				if (DragonEvent->GetState() == 0 )

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DragonEvent@@3PAVCDragonEvent@@A ; DragonEvent
  00020	74 0c		 je	 SHORT $LN7@JGPEventCo
  00022	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00026	75 38		 jne	 SHORT $LN9@JGPEventCo

; 474  : 			break;
; 475  : 	}
; 476  : }

  00028	5d		 pop	 ebp

; 450  : 				{
; 451  : 					DragonEvent->Start();

  00029	e9 00 00 00 00	 jmp	 ?Start@CDragonEvent@@QAEXXZ ; CDragonEvent::Start
$LN7@JGPEventCo:

; 474  : 			break;
; 475  : 	}
; 476  : }

  0002e	5d		 pop	 ebp

; 452  : 				}
; 453  : 			}
; 454  : 			else
; 455  : 			{
; 456  : 				DragonEvent->End();

  0002f	e9 00 00 00 00	 jmp	 ?End@CDragonEvent@@QAEXXZ ; CDragonEvent::End
$LN4@JGPEventCo:

; 457  : 			}
; 458  : 			break;
; 459  : 
; 460  : 		case XMAS_EVENT:
; 461  : 			gXMasEvent = lpMsg->Stat  ;

  00034	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00038	a3 00 00 00 00	 mov	 DWORD PTR ?gXMasEvent@@3HA, eax ; gXMasEvent

; 474  : 			break;
; 475  : 	}
; 476  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN3@JGPEventCo:

; 462  : 			break;
; 463  : 
; 464  : 		case FIRECRACKER_EVENT:
; 465  : 			gFireCrackerEvent = lpMsg->Stat  ;

  0003f	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00043	89 0d 00 00 00
	00		 mov	 DWORD PTR ?gFireCrackerEvent@@3HA, ecx ; gFireCrackerEvent

; 474  : 			break;
; 475  : 	}
; 476  : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN2@JGPEventCo:

; 466  : 			break;
; 467  : 
; 468  : 		case HEARTOFLOVE_EVENT:
; 469  : 			gHeartOfLoveEvent = lpMsg->Stat  ;

  0004b	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  0004f	89 15 00 00 00
	00		 mov	 DWORD PTR ?gHeartOfLoveEvent@@3HA, edx ; gHeartOfLoveEvent

; 474  : 			break;
; 475  : 	}
; 476  : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN1@JGPEventCo:

; 470  : 			break;
; 471  : 
; 472  : 		case MEDAL_EVENT:
; 473  : 			gMedalEvent = lpMsg->Stat  ;

  00057	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?gMedalEvent@@3HA, eax ; gMedalEvent
$LN9@JGPEventCo:

; 474  : 			break;
; 475  : 	}
; 476  : }

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
  00062	8b ff		 npad	 2
$LN17@JGPEventCo:
  00064	00 00 00 00	 DD	 $LN8@JGPEventCo
  00068	00 00 00 00	 DD	 $LN4@JGPEventCo
  0006c	00 00 00 00	 DD	 $LN3@JGPEventCo
  00070	00 00 00 00	 DD	 $LN2@JGPEventCo
  00074	00 00 00 00	 DD	 $LN1@JGPEventCo
?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z ENDP	; JGPEventControl
_TEXT	ENDS
PUBLIC	?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z	; JGPOptionControl
EXTRN	?ReadGameEtcInfo@@YAXW4MU_ETC_TYPE@@@Z:PROC	; ReadGameEtcInfo
EXTRN	?ReadEventInfo@@YAXW4MU_EVENT_TYPE@@@Z:PROC	; ReadEventInfo
EXTRN	?ShopDataLoad@@YAHXZ:PROC			; ShopDataLoad
EXTRN	?GameMonsterAllCloseAndReLoad@@YAXXZ:PROC	; GameMonsterAllCloseAndReLoad
EXTRN	?ReadCommonServerInfo@@YAXXZ:PROC		; ReadCommonServerInfo
; Function compile flags: /Ogtp
;	COMDAT ?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z PROC	; JGPOptionControl, COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	switch ( lpMsg->Option )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  0000a	83 f8 05	 cmp	 eax, 5
  0000d	77 39		 ja	 SHORT $LN7@JGPOptionC
  0000f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@JGPOptionC[eax*4]
$LN6@JGPOptionC:

; 507  : 			break;
; 508  : 	}
; 509  : }

  00016	5d		 pop	 ebp

; 482  : 	{
; 483  : 		case OPTION_RELOAD:
; 484  : 			ReadCommonServerInfo();

  00017	e9 00 00 00 00	 jmp	 ?ReadCommonServerInfo@@YAXXZ ; ReadCommonServerInfo
$LN5@JGPOptionC:

; 507  : 			break;
; 508  : 	}
; 509  : }

  0001c	5d		 pop	 ebp

; 485  : 			break;
; 486  : 
; 487  : 		case MONSTER_RELOAD:
; 488  : 			GameMonsterAllCloseAndReLoad();

  0001d	e9 00 00 00 00	 jmp	 ?GameMonsterAllCloseAndReLoad@@YAXXZ ; GameMonsterAllCloseAndReLoad
$LN3@JGPOptionC:

; 489  : 			break;
; 490  : 
; 491  : 		case SHOP_RELOAD:
; 492  : 			ShopDataLoad();
; 493  : 			break;
; 494  : 
; 495  : 		case ALLOPTION_RELOAD:
; 496  : 			ReadCommonServerInfo();

  00022	e8 00 00 00 00	 call	 ?ReadCommonServerInfo@@YAXXZ ; ReadCommonServerInfo

; 497  : 			GameMonsterAllCloseAndReLoad();

  00027	e8 00 00 00 00	 call	 ?GameMonsterAllCloseAndReLoad@@YAXXZ ; GameMonsterAllCloseAndReLoad
$LN4@JGPOptionC:

; 507  : 			break;
; 508  : 	}
; 509  : }

  0002c	5d		 pop	 ebp

; 498  : 			ShopDataLoad();

  0002d	e9 00 00 00 00	 jmp	 ?ShopDataLoad@@YAHXZ	; ShopDataLoad
$LN2@JGPOptionC:

; 499  : 			break;
; 500  : 
; 501  : 		case EVENTINFO_RELOAD:
; 502  : 			ReadEventInfo(MU_EVENT_ALL );

  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?ReadEventInfo@@YAXW4MU_EVENT_TYPE@@@Z ; ReadEventInfo

; 503  : 			break;
; 504  : 
; 505  : 		case ETCINFO_RELOAD:
; 506  : 			ReadGameEtcInfo(MU_ETC_ALL );

  00039	83 c4 04	 add	 esp, 4

; 507  : 			break;
; 508  : 	}
; 509  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN1@JGPOptionC:

; 503  : 			break;
; 504  : 
; 505  : 		case ETCINFO_RELOAD:
; 506  : 			ReadGameEtcInfo(MU_ETC_ALL );

  0003e	6a 00		 push	 0
  00040	e8 00 00 00 00	 call	 ?ReadGameEtcInfo@@YAXW4MU_ETC_TYPE@@@Z ; ReadGameEtcInfo
  00045	83 c4 04	 add	 esp, 4
$LN7@JGPOptionC:

; 507  : 			break;
; 508  : 	}
; 509  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
  0004a	8b ff		 npad	 2
$LN14@JGPOptionC:
  0004c	00 00 00 00	 DD	 $LN6@JGPOptionC
  00050	00 00 00 00	 DD	 $LN5@JGPOptionC
  00054	00 00 00 00	 DD	 $LN4@JGPOptionC
  00058	00 00 00 00	 DD	 $LN3@JGPOptionC
  0005c	00 00 00 00	 DD	 $LN2@JGPOptionC
  00060	00 00 00 00	 DD	 $LN1@JGPOptionC
?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z ENDP	; JGPOptionControl
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoveHeartEventSend@@YAXHPAD0@Z			; LoveHeartEventSend
; Function compile flags: /Ogtp
;	COMDAT ?LoveHeartEventSend@@YAXHPAD0@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 23
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_AcountId$ = 12						; size = 4
_Name$ = 16						; size = 4
?LoveHeartEventSend@@YAXHPAD0@Z PROC			; LoveHeartEventSend, COMDAT

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _AcountId$[ebp]

; 514  : 	SDHP_LOVEHEARTEVENT pMsg;
; 515  : 
; 516  : 	pMsg.h.c = 0xC1;
; 517  : 	pMsg.h.headcode = 0x30;
; 518  : 	pMsg.h.size = sizeof(SDHP_LOVEHEARTEVENT);
; 519  : 
; 520  : 	memcpy(pMsg.Account , AcountId, sizeof(pMsg.Account));

  00013	8b 10		 mov	 edx, DWORD PTR [eax]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _Name$[ebp]
  00018	89 55 e7	 mov	 DWORD PTR _pMsg$[ebp+3], edx
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]
  00022	89 55 eb	 mov	 DWORD PTR _pMsg$[ebp+7], edx

; 521  : 	memcpy(pMsg.Name , Name, sizeof(pMsg.Name) );

  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	66 89 45 ef	 mov	 WORD PTR _pMsg$[ebp+11], ax
  0002b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002e	66 8b 49 08	 mov	 cx, WORD PTR [ecx+8]
  00032	89 55 f1	 mov	 DWORD PTR _pMsg$[ebp+13], edx

; 522  : 
; 523  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00035	6a 17		 push	 23			; 00000017H
  00037	8d 55 e4	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0003a	66 89 4d f9	 mov	 WORD PTR _pMsg$[ebp+21], cx
  0003e	52		 push	 edx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00044	c6 45 e4 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00048	66 c7 45 e5 17
	30		 mov	 WORD PTR _pMsg$[ebp+1], 12311 ; 00003017H
  0004e	89 45 f5	 mov	 DWORD PTR _pMsg$[ebp+17], eax
  00051	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 524  : }

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	33 cd		 xor	 ecx, ebp
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?LoveHeartEventSend@@YAXHPAD0@Z ENDP			; LoveHeartEventSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z ; LoveHeartEventRecv
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
EXTRN	__imp__wsprintfA:PROC
; Function compile flags: /Ogtp
;	COMDAT ?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z
_TEXT	SEGMENT
_Msg$ = -272						; size = 256
_szName$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z PROC ; LoveHeartEventRecv, COMDAT

; 528  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 529  : 	char szName[11];
; 530  : 	int number;
; 531  : 	char Msg[256];
; 532  : 
; 533  : 	szName[10]=0;
; 534  : 
; 535  : 	memcpy(szName, lpMsg->Name, sizeof(lpMsg->Name));

  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001c	89 4d f0	 mov	 DWORD PTR _szName$[ebp], ecx
  0001f	66 8b 48 0c	 mov	 cx, WORD PTR [eax+12]
  00023	66 89 4d f8	 mov	 WORD PTR _szName$[ebp+8], cx

; 536  : 	number = lpMsg->Number;

  00027	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 537  : 
; 538  : 	switch ( lpMsg->Result )

  0002a	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  0002e	83 e8 00	 sub	 eax, 0
  00031	c6 45 fa 00	 mov	 BYTE PTR _szName$[ebp+10], 0
  00035	89 55 f4	 mov	 DWORD PTR _szName$[ebp+4], edx
  00038	74 46		 je	 SHORT $LN9@LoveHeartE
  0003a	48		 dec	 eax
  0003b	0f 85 1a 01 00
	00		 jne	 $LN6@LoveHeartE

; 557  : 									return;
; 558  : 								}
; 559  : 							}
; 560  : 						}
; 561  : 					}
; 562  : 					continue;
; 563  : 				} // For
; 564  : 			}
; 565  : 		break;
; 566  : 
; 567  : 		case 1: // Winner of the Love Pang Pang Event
; 568  : 			wsprintf(Msg, lMsg.Get( MSGGET ( 4, 82 ) ), szName, number);

  00041	51		 push	 ecx
  00042	8d 55 f0	 lea	 edx, DWORD PTR _szName$[ebp]
  00045	52		 push	 edx
  00046	68 52 04 00 00	 push	 1106			; 00000452H
  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00050	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00055	50		 push	 eax
  00056	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Msg$[ebp]
  0005c	50		 push	 eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 569  : 			AllSendServerMsg(Msg);

  00063	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Msg$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  0006f	83 c4 14	 add	 esp, 20			; 00000014H

; 570  : 			break;
; 571  : 	}
; 572  : }

  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN9@LoveHeartE:
  00080	56		 push	 esi
  00081	57		 push	 edi

; 539  : 	{
; 540  : 		case 0: // Registered Hearts of Love PangPangEvent
; 541  : 			{
; 542  : 				wsprintf(Msg, lMsg.Get( MSGGET(4, 80)), number );

  00082	51		 push	 ecx
  00083	68 50 04 00 00	 push	 1104			; 00000450H
  00088	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0008d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00092	50		 push	 eax
  00093	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _Msg$[ebp]
  00099	52		 push	 edx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000a0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 543  : 
; 544  : 				for (int n = OBJ_STARTUSERINDZT;n<OBJMAX;n++)

  000a9	bf b0 36 00 00	 mov	 edi, 14000		; 000036b0H
  000ae	81 c6 77 a7 40
	09		 add	 esi, 155232119		; 0940a777H
$LL8@LoveHeartE:

; 545  : 				{
; 546  : 					if ( gObj[n].Connected >= PLAYER_LOGGED )

  000b4	83 7e 8d 02	 cmp	 DWORD PTR [esi-115], 2
  000b8	7c 3f		 jl	 SHORT $LN7@LoveHeartE

; 547  : 					{
; 548  : 						if (gObj[n].Name[0] == szName[0] )

  000ba	8a 45 f0	 mov	 al, BYTE PTR _szName$[ebp]
  000bd	38 06		 cmp	 BYTE PTR [esi], al
  000bf	75 38		 jne	 SHORT $LN7@LoveHeartE

; 549  : 						{
; 550  : 							if ( gObj[n].Name[1] == szName[1] )

  000c1	8a 4d f1	 mov	 cl, BYTE PTR _szName$[ebp+1]
  000c4	38 4e 01	 cmp	 BYTE PTR [esi+1], cl
  000c7	75 30		 jne	 SHORT $LN7@LoveHeartE

; 551  : 							{
; 552  : 								if ( strcmp( gObj[n].Name, szName ) == 0 )

  000c9	8d 4d f0	 lea	 ecx, DWORD PTR _szName$[ebp]
  000cc	8b c6		 mov	 eax, esi
  000ce	8b ff		 npad	 2
$LL17@LoveHeartE:
  000d0	8a 10		 mov	 dl, BYTE PTR [eax]
  000d2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000d4	75 1a		 jne	 SHORT $LN18@LoveHeartE
  000d6	84 d2		 test	 dl, dl
  000d8	74 12		 je	 SHORT $LN19@LoveHeartE
  000da	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000dd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000e0	75 0e		 jne	 SHORT $LN18@LoveHeartE
  000e2	83 c0 02	 add	 eax, 2
  000e5	83 c1 02	 add	 ecx, 2
  000e8	84 d2		 test	 dl, dl
  000ea	75 e4		 jne	 SHORT $LL17@LoveHeartE
$LN19@LoveHeartE:
  000ec	33 c0		 xor	 eax, eax
  000ee	eb 05		 jmp	 SHORT $LN20@LoveHeartE
$LN18@LoveHeartE:
  000f0	1b c0		 sbb	 eax, eax
  000f2	83 d8 ff	 sbb	 eax, -1
$LN20@LoveHeartE:
  000f5	85 c0		 test	 eax, eax
  000f7	74 1f		 je	 SHORT $LN15@LoveHeartE
$LN7@LoveHeartE:

; 543  : 
; 544  : 				for (int n = OBJ_STARTUSERINDZT;n<OBJMAX;n++)

  000f9	47		 inc	 edi
  000fa	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  00100	81 ff 98 3a 00
	00		 cmp	 edi, 15000		; 00003a98H
  00106	7c ac		 jl	 SHORT $LL8@LoveHeartE
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi

; 570  : 			break;
; 571  : 	}
; 572  : }

  0010a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010d	33 cd		 xor	 ecx, ebp
  0010f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
$LN15@LoveHeartE:

; 553  : 								{
; 554  : 									GCServerMsgStringSend(Msg, n, 1);

  00118	6a 01		 push	 1
  0011a	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _Msg$[ebp]
  00120	57		 push	 edi
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00127	83 c4 0c	 add	 esp, 12			; 0000000cH

; 555  : 									wsprintf(Msg, lMsg.Get( MSGGET( 4, 81 ) ) );

  0012a	68 51 04 00 00	 push	 1105			; 00000451H
  0012f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00134	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00139	50		 push	 eax
  0013a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Msg$[ebp]
  00140	50		 push	 eax
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 556  : 									GCServerMsgStringSend(Msg, n, 1);

  00147	6a 01		 push	 1
  00149	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Msg$[ebp]
  0014f	57		 push	 edi
  00150	51		 push	 ecx
  00151	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00156	83 c4 14	 add	 esp, 20			; 00000014H
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
$LN6@LoveHeartE:

; 570  : 			break;
; 571  : 	}
; 572  : }

  0015b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015e	33 cd		 xor	 ecx, ebp
  00160	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z ENDP ; LoveHeartEventRecv
_TEXT	ENDS
PUBLIC	?LoveHeartCreateSend@@YAXXZ			; LoveHeartCreateSend
; Function compile flags: /Ogtp
;	COMDAT ?LoveHeartCreateSend@@YAXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
?LoveHeartCreateSend@@YAXXZ PROC			; LoveHeartCreateSend, COMDAT

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 577  : 	SDHP_LOVEHEARTCREATE pMsg;
; 578  : 
; 579  : 	pMsg.h.c= 0xC1;
; 580  : 	pMsg.h.headcode = 0x31;
; 581  : 	pMsg.h.size=sizeof(SDHP_LOVEHEARTCREATE);
; 582  : 
; 583  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00006	6a 06		 push	 6
  00008	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000b	50		 push	 eax
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00011	c6 45 f8 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00015	66 c7 45 f9 06
	31		 mov	 WORD PTR _pMsg$[ebp+1], 12550 ; 00003106H
  0001b	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 584  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?LoveHeartCreateSend@@YAXXZ ENDP			; LoveHeartCreateSend
_TEXT	ENDS
PUBLIC	??_C@_0CG@EHIHJKDO@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3AL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z		; AllNoticeRecv
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0CG@EHIHJKDO@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3AL@
CONST	SEGMENT
??_C@_0CG@EHIHJKDO@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3AL@ DB '['
	DB	'Mu Manager][Notice Log][Type:ALL] %s', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z
_TEXT	SEGMENT
_szNotice$ = -68					; size = 61
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z PROC		; AllNoticeRecv, COMDAT

; 588  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]
  00014	57		 push	 edi

; 589  : 	char szNotice[61];
; 590  : 
; 591  : 	szNotice[60]=0;
; 592  : 
; 593  : 	memcpy(szNotice, lpMsg->Notice , sizeof(lpMsg->Notice)-1);
; 594  : 
; 595  : 	LogAddTD("[Mu Manager][Notice Log][Type:ALL] %s", szNotice);

  00015	8d 45 bc	 lea	 eax, DWORD PTR _szNotice$[ebp]
  00018	50		 push	 eax
  00019	c6 45 f8 00	 mov	 BYTE PTR _szNotice$[ebp+60], 0
  0001d	83 c6 03	 add	 esi, 3
  00020	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00025	8d 7d bc	 lea	 edi, DWORD PTR _szNotice$[ebp]
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EHIHJKDO@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3AL@
  0002d	f3 a5		 rep movsd
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00035	83 c4 08	 add	 esp, 8

; 596  : 
; 597  : 	if ( strlen(szNotice) > 1 )

  00038	8d 45 bc	 lea	 eax, DWORD PTR _szNotice$[ebp]
  0003b	5f		 pop	 edi
  0003c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0003f	5e		 pop	 esi
$LL4@AllNoticeR:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL4@AllNoticeR
  00047	2b c2		 sub	 eax, edx
  00049	83 f8 01	 cmp	 eax, 1
  0004c	76 0c		 jbe	 SHORT $LN1@AllNoticeR

; 598  : 	{
; 599  : 		AllSendServerMsg(szNotice);

  0004e	8d 4d bc	 lea	 ecx, DWORD PTR _szNotice$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  00057	83 c4 04	 add	 esp, 4
$LN1@AllNoticeR:

; 600  : 	}
; 601  : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z ENDP		; AllNoticeRecv
_TEXT	ENDS
PUBLIC	??_C@_0CM@EFINMDLC@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3US@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z	; UserNoticeRecv
EXTRN	?SendNoticeToUser@TNotice@@SAXHPAX@Z:PROC	; TNotice::SendNoticeToUser
EXTRN	?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z:PROC	; TNotice::SetNoticeProperty
EXTRN	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z:PROC	; TNotice::MakeNoticeMsg
;	COMDAT ??_C@_0CM@EFINMDLC@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3US@
; File e:\work\tranet_version\gs\gameserver\tnotice.h
CONST	SEGMENT
??_C@_0CM@EFINMDLC@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3US@ DB '['
	DB	'Mu Manager][Notice Log][Type:USER] (%s) %s', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\sprotocol.cpp
CONST	ENDS
;	COMDAT ?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z
_TEXT	SEGMENT
_pNotice$217319 = -352					; size = 272
_szNotice$ = -80					; size = 61
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z PROC	; UserNoticeRecv, COMDAT

; 605  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 606  : 	char szNotice[61];
; 607  : 	char szId[11];
; 608  : 
; 609  : 	szNotice[60]=0;
; 610  : 	szId[10]=0;
; 611  : 
; 612  : 	memcpy(szNotice, lpMsg->Notice , sizeof(lpMsg->Notice)-1);
; 613  : 	memcpy(szId, lpMsg->szId , sizeof(lpMsg->szId));

  00016	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d 70 0d	 lea	 esi, DWORD PTR [eax+13]
  0001e	c6 45 ec 00	 mov	 BYTE PTR _szNotice$[ebp+60], 0
  00022	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00027	8d 7d b0	 lea	 edi, DWORD PTR _szNotice$[ebp]
  0002a	f3 a5		 rep movsd
  0002c	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  0002f	66 8b 40 0b	 mov	 ax, WORD PTR [eax+11]
  00033	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx

; 614  : 
; 615  : 	LogAddTD("[Mu Manager][Notice Log][Type:USER] (%s) %s", szId, szNotice);

  00036	8d 4d b0	 lea	 ecx, DWORD PTR _szNotice$[ebp]
  00039	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx
  0003c	51		 push	 ecx
  0003d	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@EFINMDLC@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3US@
  00046	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  0004a	66 89 45 f8	 mov	 WORD PTR _szId$[ebp+8], ax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 616  : 
; 617  : 	if ( strlen(szNotice) > 1 )

  00054	8d 45 b0	 lea	 eax, DWORD PTR _szNotice$[ebp]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0005d	8d 49 00	 npad	 3
$LL17@UserNotice:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	84 c9		 test	 cl, cl
  00065	75 f9		 jne	 SHORT $LL17@UserNotice
  00067	2b c2		 sub	 eax, edx
  00069	83 f8 01	 cmp	 eax, 1
  0006c	0f 86 d1 00 00
	00		 jbe	 $LN5@UserNotice

; 618  : 	{
; 619  : 		if ( strlen(szId) > 1 )

  00072	8d 45 f0	 lea	 eax, DWORD PTR _szId$[ebp]
  00075	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL18@UserNotice:
  00078	8a 08		 mov	 cl, BYTE PTR [eax]
  0007a	40		 inc	 eax
  0007b	84 c9		 test	 cl, cl
  0007d	75 f9		 jne	 SHORT $LL18@UserNotice
  0007f	2b c2		 sub	 eax, edx
  00081	83 f8 01	 cmp	 eax, 1
  00084	0f 86 b9 00 00
	00		 jbe	 $LN5@UserNotice

; 620  : 		{
; 621  : 			for ( int n = OBJ_STARTUSERINDZT;n<OBJMAX; n++)

  0008a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00090	bf b0 36 00 00	 mov	 edi, 14000		; 000036b0H
  00095	81 c6 6c a7 40
	09		 add	 esi, 155232108		; 0940a76cH
  0009b	eb 03 8d 49 00	 npad	 5
$LL7@UserNotice:

; 622  : 			{
; 623  : 				if ( gObj[n].Connected >= PLAYER_LOGGED )

  000a0	83 7e 98 02	 cmp	 DWORD PTR [esi-104], 2
  000a4	7c 43		 jl	 SHORT $LN6@UserNotice

; 624  : 				{
; 625  : 					if ( gObj[n].AccountID[0] == szId[0] )

  000a6	8a 45 f0	 mov	 al, BYTE PTR _szId$[ebp]
  000a9	38 06		 cmp	 BYTE PTR [esi], al
  000ab	75 3c		 jne	 SHORT $LN6@UserNotice

; 626  : 					{
; 627  : 						if ( gObj[n].AccountID[1] == szId[1] )

  000ad	8a 4d f1	 mov	 cl, BYTE PTR _szId$[ebp+1]
  000b0	38 4e 01	 cmp	 BYTE PTR [esi+1], cl
  000b3	75 34		 jne	 SHORT $LN6@UserNotice

; 628  : 						{
; 629  : 							if ( strcmp( gObj[n].AccountID , szId) == 0 )

  000b5	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  000b8	8b c6		 mov	 eax, esi
  000ba	8d 9b 00 00 00
	00		 npad	 6
$LL19@UserNotice:
  000c0	8a 10		 mov	 dl, BYTE PTR [eax]
  000c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000c4	75 1a		 jne	 SHORT $LN20@UserNotice
  000c6	84 d2		 test	 dl, dl
  000c8	74 12		 je	 SHORT $LN21@UserNotice
  000ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d0	75 0e		 jne	 SHORT $LN20@UserNotice
  000d2	83 c0 02	 add	 eax, 2
  000d5	83 c1 02	 add	 ecx, 2
  000d8	84 d2		 test	 dl, dl
  000da	75 e4		 jne	 SHORT $LL19@UserNotice
$LN21@UserNotice:
  000dc	33 c0		 xor	 eax, eax
  000de	eb 05		 jmp	 SHORT $LN22@UserNotice
$LN20@UserNotice:
  000e0	1b c0		 sbb	 eax, eax
  000e2	83 d8 ff	 sbb	 eax, -1
$LN22@UserNotice:
  000e5	85 c0		 test	 eax, eax
  000e7	74 1f		 je	 SHORT $LN15@UserNotice
$LN6@UserNotice:

; 620  : 		{
; 621  : 			for ( int n = OBJ_STARTUSERINDZT;n<OBJMAX; n++)

  000e9	47		 inc	 edi
  000ea	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  000f0	81 ff 98 3a 00
	00		 cmp	 edi, 15000		; 00003a98H
  000f6	7c a8		 jl	 SHORT $LL7@UserNotice
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi

; 635  : 								break;
; 636  : 							}
; 637  : 						}
; 638  : 					}
; 639  : 				}
; 640  : 			} // For
; 641  : 		}
; 642  : 	}
; 643  : }

  000fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
$LN15@UserNotice:

; 630  : 							{
; 631  : 								PMSG_NOTICE pNotice;
; 632  : 								TNotice::MakeNoticeMsg(&pNotice, 0, szNotice);

  00108	8d 55 b0	 lea	 edx, DWORD PTR _szNotice$[ebp]
  0010b	52		 push	 edx
  0010c	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$217319[ebp]
  00112	6a 00		 push	 0
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg

; 633  : 								TNotice::SetNoticeProperty(&pNotice, 10,  _ARGB(255, 254, 81, 81), 1, 0, 20);

  0011a	6a 14		 push	 20			; 00000014H
  0011c	6a 00		 push	 0
  0011e	6a 01		 push	 1
  00120	68 fe 51 51 ff	 push	 -11447810		; ff5151feH
  00125	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$217319[ebp]
  0012b	6a 0a		 push	 10			; 0000000aH
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z ; TNotice::SetNoticeProperty

; 634  : 								TNotice::SendNoticeToUser(n, &pNotice);

  00133	8d 95 a0 fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$217319[ebp]
  00139	52		 push	 edx
  0013a	57		 push	 edi
  0013b	e8 00 00 00 00	 call	 ?SendNoticeToUser@TNotice@@SAXHPAX@Z ; TNotice::SendNoticeToUser
  00140	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN5@UserNotice:

; 635  : 								break;
; 636  : 							}
; 637  : 						}
; 638  : 					}
; 639  : 				}
; 640  : 			} // For
; 641  : 		}
; 642  : 	}
; 643  : }

  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	5f		 pop	 edi
  00147	33 cd		 xor	 ecx, ebp
  00149	5e		 pop	 esi
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z ENDP	; UserNoticeRecv
_TEXT	ENDS
PUBLIC	??_C@_0EA@LCONAODP@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GJReqMapSvrMove@@YAXHGGEE@Z			; GJReqMapSvrMove
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT ??_C@_0EA@LCONAODP@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@
CONST	SEGMENT
??_C@_0EA@LCONAODP@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error GJ [0x7A] - User not Connected : %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GJReqMapSvrMove@@YAXHGGEE@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_iIndex$ = 8						; size = 4
_wDesMapSvrCode$ = 12					; size = 2
_wMapNumber$ = 16					; size = 2
_btX$ = 20						; size = 1
_btY$ = 24						; size = 1
?GJReqMapSvrMove@@YAXHGGEE@Z PROC			; GJReqMapSvrMove, COMDAT

; 647  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]

; 648  : 	PMSG_REQ_MAPSVRMOVE pMsg;
; 649  : 	
; 650  : 	if ( gObjIsConnected(iIndex) == PLAYER_EMPTY )

  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	75 20		 jne	 SHORT $LN2@GJReqMapSv

; 651  : 	{
; 652  : 		LogAddC(2, "[MapServerMng] Packet Error GJ [0x7A] - User not Connected : %d", iIndex);

  00021	56		 push	 esi
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@LCONAODP@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@
  00027	6a 02		 push	 2
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	5e		 pop	 esi

; 672  : 	}
; 673  : }

  00033	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00036	33 cd		 xor	 ecx, ebp
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN2@GJReqMapSv:

; 653  : 	}
; 654  : 	else
; 655  : 	{
; 656  : 		PHeadSetB((LPBYTE)&pMsg, 0x7A, sizeof(PMSG_REQ_MAPSVRMOVE));

  00041	6a 28		 push	 40			; 00000028H
  00043	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00046	6a 7a		 push	 122			; 0000007aH
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 657  : 		pMsg.iIndex = iIndex;
; 658  : 
; 659  : 		memcpy(pMsg.szAccountID , gObj[iIndex].AccountID, sizeof( pMsg.szAccountID)-1);

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00054	89 75 d8	 mov	 DWORD PTR _pMsg$[ebp+4], esi
  00057	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0005d	8b 54 0e 6c	 mov	 edx, DWORD PTR [esi+ecx+108]
  00061	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00064	89 55 dc	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00067	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  0006a	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  0006d	0f b7 50 74	 movzx	 edx, WORD PTR [eax+116]

; 660  : 		pMsg.szAccountID[10] = 0;

  00071	32 c9		 xor	 cl, cl
  00073	88 4d e6	 mov	 BYTE PTR _pMsg$[ebp+18], cl
  00076	66 89 55 e4	 mov	 WORD PTR _pMsg$[ebp+16], dx

; 661  : 		memcpy(pMsg.szCharName, gObj[iIndex].Name, sizeof( pMsg.szCharName)-1);

  0007a	8b 50 77	 mov	 edx, DWORD PTR [eax+119]
  0007d	89 55 e7	 mov	 DWORD PTR _pMsg$[ebp+19], edx
  00080	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00083	89 55 eb	 mov	 DWORD PTR _pMsg$[ebp+23], edx
  00086	0f b7 50 7f	 movzx	 edx, WORD PTR [eax+127]

; 662  : 		pMsg.szCharName[10] = 0;

  0008a	88 4d f1	 mov	 BYTE PTR _pMsg$[ebp+29], cl

; 663  : 
; 664  : 		pMsg.wCurMapSvrCode = gGameServerCode;

  0008d	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  00094	66 89 4d f2	 mov	 WORD PTR _pMsg$[ebp+30], cx

; 665  : 		pMsg.wDstMapSvrCode = wDesMapSvrCode;
; 666  : 		pMsg.wMapNumber = wMapNumber;

  00098	66 8b 4d 10	 mov	 cx, WORD PTR _wMapNumber$[ebp]
  0009c	66 89 55 ef	 mov	 WORD PTR _pMsg$[ebp+27], dx
  000a0	66 8b 55 0c	 mov	 dx, WORD PTR _wDesMapSvrCode$[ebp]
  000a4	66 89 4d f6	 mov	 WORD PTR _pMsg$[ebp+34], cx

; 667  : 		pMsg.btX = btX;
; 668  : 		pMsg.btY = btY;

  000a8	8a 4d 18	 mov	 cl, BYTE PTR _btY$[ebp]
  000ab	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+32], dx
  000af	8a 55 14	 mov	 dl, BYTE PTR _btX$[ebp]
  000b2	88 4d f9	 mov	 BYTE PTR _pMsg$[ebp+37], cl
  000b5	88 55 f8	 mov	 BYTE PTR _pMsg$[ebp+36], dl

; 669  : 		pMsg.btPcbangRoom = gObj[iIndex].m_iPcBangRoom;//Season 4.5 addon

  000b8	0f b6 90 c4 1f
	00 00		 movzx	 edx, BYTE PTR [eax+8132]

; 670  : 
; 671  : 		wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  000bf	0f b6 45 d5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	50		 push	 eax
  000c7	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000ca	51		 push	 ecx
  000cb	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  000d0	88 55 fa	 mov	 BYTE PTR _pMsg$[ebp+38], dl
  000d3	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 672  : 	}
; 673  : }

  000d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000db	33 cd		 xor	 ecx, ebp
  000dd	5e		 pop	 esi
  000de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
?GJReqMapSvrMove@@YAXHGGEE@Z ENDP			; GJReqMapSvrMove
_TEXT	ENDS
PUBLIC	??_C@_0FC@JANLFHPE@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	??_C@_0FE@PEPNAIIC@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	??_C@_0EG@DBEOMGHG@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7A@ ; `string'
PUBLIC	??_C@_0EP@JGCJAADJ@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	??_C@_0EA@OCCMNGHM@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z	; JGAnsMapSvrMove
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HH@Z:PROC ; GJSetCharacterInfo
EXTRN	?GetSvrCodeData@CMapServerManager@@QAEHGPADPAG@Z:PROC ; CMapServerManager::GetSvrCodeData
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
EXTRN	?PHeadSubSetBE@@YAXPAEEEH@Z:PROC		; PHeadSubSetBE
EXTRN	_memset:PROC
;	COMDAT ??_C@_0FC@JANLFHPE@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
; File e:\work\tranet_version\gs\gameserver\mapservermanager.h
CONST	SEGMENT
??_C@_0FC@JANLFHPE@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7A] - User Info Mismatch [%s]['
	DB	'%s]-[%s][%s] (%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@PEPNAIIC@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
CONST	SEGMENT
??_C@_0FE@PEPNAIIC@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7A] - Failed to Authorize User'
	DB	' [%s][%s] Result:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@DBEOMGHG@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7A@
CONST	SEGMENT
??_C@_0EG@DBEOMGHG@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7A@ DB '['
	DB	'MapServerMng] [%s][%s] JG [0x7A] - Move Map Request OK : MAPS'
	DB	'VR_D:%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@JGCJAADJ@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
CONST	SEGMENT
??_C@_0EP@JGCJAADJ@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7A] - Failed to find Map Info '
	DB	'[%s]-[%s] (%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@OCCMNGHM@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
CONST	SEGMENT
??_C@_0EA@OCCMNGHM@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7A] - User not Connected : %d', 00H ; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\sprotocol.cpp
CONST	ENDS
;	COMDAT ?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z
_TEXT	SEGMENT
tv262 = -324						; size = 4
tv263 = -320						; size = 4
_pNotice$217370 = -316					; size = 272
_pMsg$217367 = -44					; size = 40
_pMsg$217359 = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z PROC	; JGAnsMapSvrMove, COMDAT

; 689  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]

; 690  : 	if ( gObjIsConnected(lpMsg->iIndex ) == FALSE )

  00017	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	75 23		 jne	 SHORT $LN6@JGAnsMapSv

; 691  : 	{
; 692  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - User not Connected : %d", lpMsg->iIndex);

  00027	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0002a	51		 push	 ecx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@OCCMNGHM@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  00030	6a 02		 push	 2
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	5f		 pop	 edi

; 750  : 	}
; 751  : }

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN6@JGAnsMapSv:
  0004a	53		 push	 ebx
  0004b	56		 push	 esi

; 693  : 		return;
; 694  : 	}
; 695  : 
; 696  : 	LPOBJ lpObj = &gObj[lpMsg->iIndex];

  0004c	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0004f	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00055	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 697  : 
; 698  : 	if ( strcmp( lpObj->AccountID , lpMsg->szAccountID )  ||  strcmp( lpObj->Name, lpMsg->szCharName) )

  0005b	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  0005e	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  00061	89 9d bc fe ff
	ff		 mov	 DWORD PTR tv262[ebp], ebx
  00067	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv263[ebp], eax
  0006d	8b cb		 mov	 ecx, ebx
  0006f	90		 npad	 1
$LL12@JGAnsMapSv:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN13@JGAnsMapSv
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN14@JGAnsMapSv
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN13@JGAnsMapSv
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL12@JGAnsMapSv
$LN14@JGAnsMapSv:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN15@JGAnsMapSv
$LN13@JGAnsMapSv:
  00090	1b c0		 sbb	 eax, eax
  00092	83 d8 ff	 sbb	 eax, -1
$LN15@JGAnsMapSv:
  00095	85 c0		 test	 eax, eax
  00097	0f 85 d9 01 00
	00		 jne	 $LN4@JGAnsMapSv
  0009d	8d 5e 77	 lea	 ebx, DWORD PTR [esi+119]
  000a0	8d 4f 13	 lea	 ecx, DWORD PTR [edi+19]
  000a3	8b c3		 mov	 eax, ebx
$LL16@JGAnsMapSv:
  000a5	8a 10		 mov	 dl, BYTE PTR [eax]
  000a7	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000a9	75 1a		 jne	 SHORT $LN17@JGAnsMapSv
  000ab	84 d2		 test	 dl, dl
  000ad	74 12		 je	 SHORT $LN18@JGAnsMapSv
  000af	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000b2	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000b5	75 0e		 jne	 SHORT $LN17@JGAnsMapSv
  000b7	83 c0 02	 add	 eax, 2
  000ba	83 c1 02	 add	 ecx, 2
  000bd	84 d2		 test	 dl, dl
  000bf	75 e4		 jne	 SHORT $LL16@JGAnsMapSv
$LN18@JGAnsMapSv:
  000c1	33 c0		 xor	 eax, eax
  000c3	eb 05		 jmp	 SHORT $LN19@JGAnsMapSv
$LN17@JGAnsMapSv:
  000c5	1b c0		 sbb	 eax, eax
  000c7	83 d8 ff	 sbb	 eax, -1
$LN19@JGAnsMapSv:
  000ca	85 c0		 test	 eax, eax
  000cc	0f 85 9e 01 00
	00		 jne	 $LN20@JGAnsMapSv

; 701  : 		return;
; 702  : 	}
; 703  : 
; 704  : 	if ( lpMsg->iResult == 0	 )

  000d2	39 47 28	 cmp	 DWORD PTR [edi+40], eax
  000d5	0f 85 ea 00 00
	00		 jne	 $LN3@JGAnsMapSv

; 705  : 	{
; 706  : 		PMSG_ANS_MAPSERVERCHANGE pMsg;
; 707  : 
; 708  : 		PHeadSubSetBE((LPBYTE)&pMsg, 0xB1, 0x00, sizeof(pMsg));

  000db	6a 28		 push	 40			; 00000028H
  000dd	50		 push	 eax
  000de	8d 55 d4	 lea	 edx, DWORD PTR _pMsg$217359[ebp]
  000e1	68 b1 00 00 00	 push	 177			; 000000b1H
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 ?PHeadSubSetBE@@YAXPAEEEH@Z ; PHeadSubSetBE

; 709  : 		
; 710  : 		pMsg.wMapSvrCode = g_MapServerManager.GetMapSvrGroup();

  000ec	a1 c0 32 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+78528
  000f1	83 c4 10	 add	 esp, 16			; 00000010H
  000f4	85 c0		 test	 eax, eax
  000f6	74 06		 je	 SHORT $LN9@JGAnsMapSv
  000f8	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  000fc	eb 03		 jmp	 SHORT $LN10@JGAnsMapSv
$LN9@JGAnsMapSv:
  000fe	83 c8 ff	 or	 eax, -1
$LN10@JGAnsMapSv:

; 711  : 		pMsg.iJoinAuthCode1 = lpMsg->iJoinAuthCode1 ;
; 712  : 		pMsg.iJoinAuthCode2 = lpMsg->iJoinAuthCode2 ;

  00101	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]

; 713  : 		pMsg.iJoinAuthCode3 = lpMsg->iJoinAuthCode3;

  00104	8b 57 34	 mov	 edx, DWORD PTR [edi+52]
  00107	66 89 45 ea	 mov	 WORD PTR _pMsg$217359[ebp+22], ax
  0010b	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0010e	89 45 ec	 mov	 DWORD PTR _pMsg$217359[ebp+24], eax

; 714  : 		pMsg.iJoinAuthCode4 = lpMsg->iJoinAuthCode4 ;

  00111	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00114	89 4d f0	 mov	 DWORD PTR _pMsg$217359[ebp+28], ecx

; 715  : 	
; 716  : 		BOOL bRESULT = g_MapServerManager.GetSvrCodeData(lpMsg->wDstMapSvrCode, pMsg.szMapSvrIpAddress, &pMsg.wMapSvrPort);

  00117	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$217359[ebp+20]
  0011a	51		 push	 ecx
  0011b	89 55 f4	 mov	 DWORD PTR _pMsg$217359[ebp+32], edx
  0011e	89 45 f8	 mov	 DWORD PTR _pMsg$217359[ebp+36], eax
  00121	0f b7 47 20	 movzx	 eax, WORD PTR [edi+32]
  00125	8d 55 d8	 lea	 edx, DWORD PTR _pMsg$217359[ebp+4]
  00128	52		 push	 edx
  00129	50		 push	 eax
  0012a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  0012f	e8 00 00 00 00	 call	 ?GetSvrCodeData@CMapServerManager@@QAEHGPADPAG@Z ; CMapServerManager::GetSvrCodeData

; 717  : 
; 718  : 		if ( bRESULT == FALSE )

  00134	85 c0		 test	 eax, eax
  00136	75 2e		 jne	 SHORT $LN2@JGAnsMapSv

; 719  : 		{
; 720  : 			LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - Failed to find Map Info [%s]-[%s] (%d)",
; 721  : 				lpObj->AccountID, lpObj->Name, lpMsg->wDstMapSvrCode);

  00138	0f b7 4f 20	 movzx	 ecx, WORD PTR [edi+32]
  0013c	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR tv263[ebp]
  00142	51		 push	 ecx
  00143	53		 push	 ebx
  00144	52		 push	 edx
  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JGCJAADJ@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  0014a	6a 02		 push	 2
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00152	83 c4 14	 add	 esp, 20			; 00000014H
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	5f		 pop	 edi

; 750  : 	}
; 751  : }

  00158	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015b	33 cd		 xor	 ecx, ebp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c3		 ret	 0
$LN2@JGAnsMapSv:

; 722  : 			return;
; 723  : 		}
; 724  : 
; 725  : 		GJSetCharacterInfo(lpObj, lpObj->m_Index, TRUE);

  00166	8b 06		 mov	 eax, DWORD PTR [esi]
  00168	6a 01		 push	 1
  0016a	50		 push	 eax
  0016b	56		 push	 esi
  0016c	e8 00 00 00 00	 call	 ?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HH@Z ; GJSetCharacterInfo
  00171	83 c4 0c	 add	 esp, 12			; 0000000cH

; 726  : 		lpObj->m_bMapSvrMoveQuit = TRUE;

  00174	c6 86 e4 1b 00
	00 01		 mov	 BYTE PTR [esi+7140], 1

; 727  : 		lpObj->m_dwMapSvrQuitTick = GetTickCount();

  0017b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 728  : 
; 729  : 		DataSend(lpMsg->iIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00181	0f b6 4d d5	 movzx	 ecx, BYTE PTR _pMsg$217359[ebp+1]
  00185	51		 push	 ecx
  00186	8d 55 d4	 lea	 edx, DWORD PTR _pMsg$217359[ebp]
  00189	89 86 e8 1b 00
	00		 mov	 DWORD PTR [esi+7144], eax
  0018f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00192	52		 push	 edx
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 730  : 
; 731  : 		LogAddTD("[MapServerMng] [%s][%s] JG [0x7A] - Move Map Request OK : MAPSVR_D:%d",
; 732  : 			lpObj->AccountID, lpObj->Name, lpMsg->wDstMapSvrCode);

  00199	0f b7 4f 20	 movzx	 ecx, WORD PTR [edi+32]
  0019d	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR tv263[ebp]
  001a3	51		 push	 ecx
  001a4	53		 push	 ebx
  001a5	52		 push	 edx
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@DBEOMGHG@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7A@
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b1	83 c4 1c	 add	 esp, 28			; 0000001cH
  001b4	5e		 pop	 esi
  001b5	5b		 pop	 ebx
  001b6	5f		 pop	 edi

; 750  : 	}
; 751  : }

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ba	33 cd		 xor	 ecx, ebp
  001bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c1	8b e5		 mov	 esp, ebp
  001c3	5d		 pop	 ebp
  001c4	c3		 ret	 0
$LN3@JGAnsMapSv:

; 733  : 	}
; 734  : 	else
; 735  : 	{
; 736  : 		PMSG_ANS_MAPSERVERCHANGE pMsg = { 0 };//Season 4.5 addon

  001c5	6a 27		 push	 39			; 00000027H
  001c7	8d 45 d5	 lea	 eax, DWORD PTR _pMsg$217367[ebp+1]
  001ca	6a 00		 push	 0
  001cc	50		 push	 eax
  001cd	c6 45 d4 00	 mov	 BYTE PTR _pMsg$217367[ebp], 0
  001d1	e8 00 00 00 00	 call	 _memset

; 737  : 		PHeadSubSetBE((LPBYTE)&pMsg, 0xB1, 0x00, sizeof(pMsg));//Season 4.5 addon

  001d6	6a 28		 push	 40			; 00000028H
  001d8	6a 00		 push	 0
  001da	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$217367[ebp]
  001dd	68 b1 00 00 00	 push	 177			; 000000b1H
  001e2	51		 push	 ecx
  001e3	e8 00 00 00 00	 call	 ?PHeadSubSetBE@@YAXPAEEEH@Z ; PHeadSubSetBE

; 738  : 		DataSend(lpMsg->iIndex, (LPBYTE)&pMsg, pMsg.h.size);//Season 4.5 addon

  001e8	0f b6 55 d5	 movzx	 edx, BYTE PTR _pMsg$217367[ebp+1]
  001ec	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  001ef	52		 push	 edx
  001f0	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$217367[ebp]
  001f3	50		 push	 eax
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001fa	83 c4 28	 add	 esp, 40			; 00000028H

; 739  : 		
; 740  : 		lpObj->m_MoveGateNumber = -1;//Season 4.5 addon
; 741  : 		lpObj->m_State = 2;//Season 4.5 addon
; 742  : 
; 743  : 		PMSG_NOTICE pNotice;
; 744  : 
; 745  : 		TNotice::MakeNoticeMsgEx(&pNotice, 0, lMsg.Get(MSGGET(6, 77)));

  001fd	68 4d 06 00 00	 push	 1613			; 0000064dH
  00202	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00207	c6 86 fc 01 00
	00 ff		 mov	 BYTE PTR [esi+508], 255	; 000000ffH
  0020e	c7 86 20 02 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+544], 2
  00218	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0021d	50		 push	 eax
  0021e	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$217370[ebp]
  00224	6a 00		 push	 0
  00226	52		 push	 edx
  00227	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 746  : 		DataSend(lpObj->m_Index, (LPBYTE)&pNotice, pNotice.h.size);

  0022c	0f b6 85 c5 fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$217370[ebp+1]
  00233	8b 16		 mov	 edx, DWORD PTR [esi]
  00235	50		 push	 eax
  00236	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$217370[ebp]
  0023c	51		 push	 ecx
  0023d	52		 push	 edx
  0023e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 747  : 
; 748  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - Failed to Authorize User [%s][%s] Result:%d",
; 749  : 			lpObj->AccountID, lpObj->Name, lpMsg->iResult);

  00243	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00246	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv263[ebp]
  0024c	50		 push	 eax
  0024d	53		 push	 ebx
  0024e	51		 push	 ecx
  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PEPNAIIC@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  00254	6a 02		 push	 2
  00256	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0025c	83 c4 2c	 add	 esp, 44			; 0000002cH
  0025f	5e		 pop	 esi
  00260	5b		 pop	 ebx
  00261	5f		 pop	 edi

; 750  : 	}
; 751  : }

  00262	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00265	33 cd		 xor	 ecx, ebp
  00267	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c3		 ret	 0
$LN20@JGAnsMapSv:

; 747  : 
; 748  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - Failed to Authorize User [%s][%s] Result:%d",
; 749  : 			lpObj->AccountID, lpObj->Name, lpMsg->iResult);

  00270	8b 9d bc fe ff
	ff		 mov	 ebx, DWORD PTR tv262[ebp]
$LN4@JGAnsMapSv:

; 699  : 	{
; 700  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - User Info Mismatch [%s][%s]-[%s][%s] (%d)", lpMsg->szAccountID, lpMsg->szCharName, lpObj->AccountID, lpObj->Name, lpObj->m_Index);

  00276	8b 16		 mov	 edx, DWORD PTR [esi]
  00278	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv263[ebp]
  0027e	52		 push	 edx
  0027f	83 c6 77	 add	 esi, 119		; 00000077H
  00282	56		 push	 esi
  00283	50		 push	 eax
  00284	83 c7 13	 add	 edi, 19			; 00000013H
  00287	57		 push	 edi
  00288	53		 push	 ebx
  00289	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@JANLFHPE@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  0028e	6a 02		 push	 2
  00290	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 750  : 	}
; 751  : }

  00296	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00299	83 c4 1c	 add	 esp, 28			; 0000001cH
  0029c	5e		 pop	 esi
  0029d	5b		 pop	 ebx
  0029e	33 cd		 xor	 ecx, ebp
  002a0	5f		 pop	 edi
  002a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a6	8b e5		 mov	 esp, ebp
  002a8	5d		 pop	 ebp
  002a9	c3		 ret	 0
?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z ENDP	; JGAnsMapSvrMove
_TEXT	ENDS
PUBLIC	??_C@_0EA@NPBAMLEI@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GJReqMapSvrAuth@@YAXHPAD0HHHH@Z		; GJReqMapSvrAuth
;	COMDAT ??_C@_0EA@NPBAMLEI@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@
CONST	SEGMENT
??_C@_0EA@NPBAMLEI@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error GJ [0x7B] - Index out of bound : %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GJReqMapSvrAuth@@YAXHPAD0HHHH@Z
_TEXT	SEGMENT
_pMsg$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_iIndex$ = 8						; size = 4
_lpszAccountID$ = 12					; size = 4
_lpszCharName$ = 16					; size = 4
_iJA1$ = 20						; size = 4
_iJA2$ = 24						; size = 4
_iJA3$ = 28						; size = 4
_iJA4$ = 32						; size = 4
?GJReqMapSvrAuth@@YAXHPAD0HHHH@Z PROC			; GJReqMapSvrAuth, COMDAT

; 776  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 10	 mov	 ebx, DWORD PTR _lpszCharName$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR _lpszAccountID$[ebp]

; 777  : 	if ( !OBJMAX_RANGE(iIndex))

  0001c	85 f6		 test	 esi, esi
  0001e	78 0f		 js	 SHORT $LN6@GJReqMapSv@2
  00020	33 c0		 xor	 eax, eax
  00022	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00028	0f 9e c0	 setle	 al
  0002b	85 c0		 test	 eax, eax
  0002d	75 22		 jne	 SHORT $LN1@GJReqMapSv@2
$LN6@GJReqMapSv@2:

; 778  : 	{
; 779  : 		LogAddC(2, "[MapServerMng] Packet Error GJ [0x7B] - Index out of bound : %d", iIndex);

  0002f	56		 push	 esi
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@NPBAMLEI@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@
  00035	6a 02		 push	 2
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 798  : }

  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN1@GJReqMapSv@2:

; 780  : 		return;
; 781  : 	}
; 782  : 
; 783  : 	PMSG_REQ_MAPSVRAUTH pMsg;
; 784  : 
; 785  : 	PHeadSetB((LPBYTE)&pMsg, 0x7B, sizeof(pMsg));

  00051	6a 30		 push	 48			; 00000030H
  00053	8d 45 cc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00056	6a 7b		 push	 123			; 0000007bH
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 786  : 	pMsg.iIndex = iIndex;
; 787  : 	memcpy(pMsg.szAccountID, lpszAccountID, MAX_ACCOUNT_LEN);

  0005e	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00067	66 89 45 dc	 mov	 WORD PTR _pMsg$[ebp+16], ax

; 788  : 	memcpy(pMsg.szCharName, lpszCharName, MAX_ACCOUNT_LEN);

  0006b	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  0006f	89 4d d4	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00072	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00074	89 4d df	 mov	 DWORD PTR _pMsg$[ebp+19], ecx

; 789  : 	pMsg.wDstMapSvrCode = gGameServerCode;

  00077	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  0007e	66 89 45 e7	 mov	 WORD PTR _pMsg$[ebp+27], ax

; 790  : 	pMsg.iJoinAuthCode1 = iJA1;
; 791  : 	pMsg.iJoinAuthCode2 = iJA2;

  00082	8b 45 18	 mov	 eax, DWORD PTR _iJA2$[ebp]
  00085	89 55 d8	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00088	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0008b	66 89 4d ea	 mov	 WORD PTR _pMsg$[ebp+30], cx

; 792  : 	pMsg.iJoinAuthCode3 = iJA3;

  0008f	8b 4d 1c	 mov	 ecx, DWORD PTR _iJA3$[ebp]
  00092	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+36], eax

; 793  : 	pMsg.iJoinAuthCode4 = iJA4;
; 794  : 
; 795  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00095	0f b6 45 cd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009c	89 55 e3	 mov	 DWORD PTR _pMsg$[ebp+23], edx
  0009f	8b 55 14	 mov	 edx, DWORD PTR _iJA1$[ebp]
  000a2	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+40], ecx
  000a5	50		 push	 eax
  000a6	8d 4d cc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000a9	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+32], edx
  000ac	8b 55 20	 mov	 edx, DWORD PTR _iJA4$[ebp]
  000af	51		 push	 ecx
  000b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  000b5	89 75 d0	 mov	 DWORD PTR _pMsg$[ebp+4], esi
  000b8	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+44], edx
  000bb	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 796  : 
; 797  : 	gObj[iIndex].m_bMapSvrMoveReq = true;

  000c0	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 798  : }

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cf	5f		 pop	 edi
  000d0	c6 84 16 e5 1b
	00 00 01	 mov	 BYTE PTR [esi+edx+7141], 1
  000d8	5e		 pop	 esi
  000d9	33 cd		 xor	 ecx, ebp
  000db	5b		 pop	 ebx
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
?GJReqMapSvrAuth@@YAXHPAD0HHHH@Z ENDP			; GJReqMapSvrAuth
_TEXT	ENDS
PUBLIC	??_C@_0EE@OBJPBDGN@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@ ; `string'
PUBLIC	??_C@_0EI@PFOEEAH@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@ ; `string'
PUBLIC	??_C@_0EF@OOAPAFHL@?$FLMapServerMng?$FN?5MapSvr?5MoveReq?5Er@ ; `string'
PUBLIC	??_C@_0EA@IPNBBDAL@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z	; JGAnsMapSvrAuth
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?BuxConvert@@YAXPADH@Z:PROC			; BuxConvert
EXTRN	?GCAnsMapSvrAuth@@YAXHH@Z:PROC			; GCAnsMapSvrAuth
EXTRN	?gObjSetAccountLogin@@YAHHPADHHH0E@Z:PROC	; gObjSetAccountLogin
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
;	COMDAT ??_C@_0EE@OBJPBDGN@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@
CONST	SEGMENT
??_C@_0EE@OBJPBDGN@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@ DB '['
	DB	'MapServerMng] [%s][%s] JG [0x7B] - Join Result OK : RST:%d, B'
	DB	'LK:%c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@PFOEEAH@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@
CONST	SEGMENT
??_C@_0EI@PFOEEAH@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@ DB '['
	DB	'MapServerMng] [%s][%s] JG [0x7B] - Join Result Failed : RST:%'
	DB	'd, BLK:%c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@OOAPAFHL@?$FLMapServerMng?$FN?5MapSvr?5MoveReq?5Er@
CONST	SEGMENT
??_C@_0EF@OOAPAFHL@?$FLMapServerMng?$FN?5MapSvr?5MoveReq?5Er@ DB '[MapSer'
	DB	'verMng] MapSvr MoveReq Error JG [0x7B] - No Request [%s] (%d)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@IPNBBDAL@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
CONST	SEGMENT
??_C@_0EA@IPNBBDAL@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7B] - Index out of bound : %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z
_TEXT	SEGMENT
_lpObj$ = -88						; size = 4
tv328 = -84						; size = 4
_bAuthOK$ = -80						; size = 4
_iSendResult$ = -76					; size = 4
_pMsg$ = -72						; size = 28
_szJN$ = -44						; size = 14
_szName$ = -28						; size = 11
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z PROC	; JGAnsMapSvrAuth, COMDAT

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 803  : 	if ( !OBJMAX_RANGE(lpMsg->iIndex))

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	33 d2		 xor	 edx, edx
  00019	3b c2		 cmp	 eax, edx
  0001b	7c 0e		 jl	 SHORT $LN20@JGAnsMapSv@2
  0001d	33 c9		 xor	 ecx, ecx
  0001f	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00024	0f 9e c1	 setle	 cl
  00027	3b ca		 cmp	 ecx, edx
  00029	75 20		 jne	 SHORT $LN13@JGAnsMapSv@2
$LN20@JGAnsMapSv@2:

; 804  : 	{
; 805  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7B] - Index out of bound : %d",
; 806  : 			lpMsg->iIndex);

  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@IPNBBDAL@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  00031	6a 02		 push	 2
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	5e		 pop	 esi

; 903  : 
; 904  : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN13@JGAnsMapSv@2:

; 807  : 		
; 808  : 		return;
; 809  : 	}
; 810  : 
; 811  : 	LPOBJ lpObj = &gObj[lpMsg->iIndex];

  0004b	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00051	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 812  : 	memcpy(lpObj->Name, lpMsg->szCharName, MAX_ACCOUNT_LEN);

  00057	8d 4e 13	 lea	 ecx, DWORD PTR [esi+19]
  0005a	57		 push	 edi
  0005b	8b 39		 mov	 edi, DWORD PTR [ecx]
  0005d	89 78 77	 mov	 DWORD PTR [eax+119], edi
  00060	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00063	89 78 7b	 mov	 DWORD PTR [eax+123], edi
  00066	89 4d ac	 mov	 DWORD PTR tv328[ebp], ecx
  00069	66 8b 49 08	 mov	 cx, WORD PTR [ecx+8]
  0006d	89 45 a8	 mov	 DWORD PTR _lpObj$[ebp], eax
  00070	66 89 48 7f	 mov	 WORD PTR [eax+127], cx

; 813  : 
; 814  : 
; 815  : 	if ( lpObj->m_bMapSvrMoveReq == false )

  00074	38 90 e5 1b 00
	00		 cmp	 BYTE PTR [eax+7141], dl
  0007a	75 30		 jne	 SHORT $LN12@JGAnsMapSv@2

; 816  : 	{
; 817  : 		LogAddC(2, "[MapServerMng] MapSvr MoveReq Error JG [0x7B] - No Request [%s] (%d)",
; 818  : 			lpObj->AccountID, lpObj->m_Index);

  0007c	8b 10		 mov	 edx, DWORD PTR [eax]
  0007e	52		 push	 edx
  0007f	83 c0 6c	 add	 eax, 108		; 0000006cH
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@OOAPAFHL@?$FLMapServerMng?$FN?5MapSvr?5MoveReq?5Er@
  00088	6a 02		 push	 2
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 819  : 
; 820  : 		gObjDel(lpMsg->iIndex);

  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00099	83 c4 14	 add	 esp, 20			; 00000014H
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi

; 903  : 
; 904  : }

  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	33 cd		 xor	 ecx, ebp
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN12@JGAnsMapSv@2:

; 821  : 		return;
; 822  : 	}
; 823  : 
; 824  : 	BOOL bAuthOK = FALSE;
; 825  : 	int iSendResult = 0;
; 826  : 	char szId[11];
; 827  : 	char szJN[14] = "";
; 828  : 	int iIndex = lpMsg->iIndex;
; 829  : 	SDHP_DBCHARINFOREQUEST pMsg;
; 830  : 	char szName[11];
; 831  : 
; 832  : 	memset(szId, 0, sizeof(szId));
; 833  : 	memcpy(szId, lpMsg->szAccountID, MAX_ACCOUNT_LEN);

  000ac	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000af	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  000b2	33 c0		 xor	 eax, eax
  000b4	53		 push	 ebx
  000b5	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
  000b8	89 45 d5	 mov	 DWORD PTR _szJN$[ebp+1], eax
  000bb	89 45 d9	 mov	 DWORD PTR _szJN$[ebp+5], eax
  000be	89 45 dd	 mov	 DWORD PTR _szJN$[ebp+9], eax
  000c1	89 45 f0	 mov	 DWORD PTR _szId$[ebp], eax
  000c4	89 45 f4	 mov	 DWORD PTR _szId$[ebp+4], eax
  000c7	66 89 45 f8	 mov	 WORD PTR _szId$[ebp+8], ax
  000cb	88 45 e1	 mov	 BYTE PTR _szJN$[ebp+13], al
  000ce	88 45 fa	 mov	 BYTE PTR _szId$[ebp+10], al
  000d1	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000d4	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx
  000d7	66 8b 4b 08	 mov	 cx, WORD PTR [ebx+8]
  000db	89 45 f4	 mov	 DWORD PTR _szId$[ebp+4], eax

; 834  : 	memcpy(szJN, lpMsg->cJoominNumber, sizeof(lpMsg->cJoominNumber));

  000de	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000e1	66 89 4d f8	 mov	 WORD PTR _szId$[ebp+8], cx
  000e5	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  000e8	89 45 d4	 mov	 DWORD PTR _szJN$[ebp], eax
  000eb	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000ee	89 4d d8	 mov	 DWORD PTR _szJN$[ebp+4], ecx
  000f1	8a 4e 3c	 mov	 cl, BYTE PTR [esi+60]
  000f4	89 45 dc	 mov	 DWORD PTR _szJN$[ebp+8], eax
  000f7	88 4d e0	 mov	 BYTE PTR _szJN$[ebp+12], cl

; 863  : 					break;
; 864  : 			}
; 865  : 			break;
; 866  : 
; 867  : 		default:
; 868  : 			iSendResult = 0;

  000fa	89 55 b4	 mov	 DWORD PTR _iSendResult$[ebp], edx

; 869  : 			bAuthOK = FALSE;

  000fd	89 55 b0	 mov	 DWORD PTR _bAuthOK$[ebp], edx
  00100	39 56 24	 cmp	 DWORD PTR [esi+36], edx

; 870  : 			break;

  00103	0f 85 cc 00 00
	00		 jne	 $LN21@JGAnsMapSv@2

; 835  : 	
; 836  : 	switch ( lpMsg->iResult )
; 837  : 	{
; 838  : 		case 0:
; 839  : 			iSendResult = 0;
; 840  : 			bAuthOK = FALSE;
; 841  : 
; 842  : 			if ( !gObjSetAccountLogin(iIndex, szId, lpMsg->iUserNumber, lpMsg->iDBNumber,lpMsg->ukn_30, szJN,lpMsg->PcBangRoom))//Season 4.5 addon

  00109	0f b6 56 44	 movzx	 edx, BYTE PTR [esi+68]
  0010d	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00110	52		 push	 edx
  00111	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00114	8d 45 d4	 lea	 eax, DWORD PTR _szJN$[ebp]
  00117	50		 push	 eax
  00118	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0011b	51		 push	 ecx
  0011c	52		 push	 edx
  0011d	50		 push	 eax
  0011e	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  00121	51		 push	 ecx
  00122	57		 push	 edi
  00123	e8 00 00 00 00	 call	 ?gObjSetAccountLogin@@YAHHPADHHH0E@Z ; gObjSetAccountLogin
  00128	83 c4 1c	 add	 esp, 28			; 0000001cH

; 843  : 			{
; 844  : 				GJPAccountFail(iIndex, szId, lpMsg->iDBNumber, lpMsg->iUserNumber);

  0012b	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  0012e	85 c0		 test	 eax, eax
  00130	75 1b		 jne	 SHORT $LN8@JGAnsMapSv@2
  00132	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00135	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00138	52		 push	 edx
  00139	50		 push	 eax
  0013a	51		 push	 ecx
  0013b	57		 push	 edi
  0013c	e8 00 00 00 00	 call	 ?GJPAccountFail@@YAXFPADHH@Z ; GJPAccountFail
  00141	83 c4 10	 add	 esp, 16			; 00000010H

; 845  : 				lpMsg->iResult = 4;

  00144	c7 46 24 04 00
	00 00		 mov	 DWORD PTR [esi+36], 4

; 846  : 			}
; 847  : 			else

  0014b	eb 3f		 jmp	 SHORT $LN7@JGAnsMapSv@2
$LN8@JGAnsMapSv@2:

; 848  : 			{
; 849  : 				LogAddTD(lMsg.Get(MSGGET(1, 211)), gObj[iIndex].Ip_addr, szId, lpMsg->iUserNumber, lpMsg->iDBNumber);

  0014d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00150	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00153	52		 push	 edx
  00154	8b d7		 mov	 edx, edi
  00156	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  0015c	50		 push	 eax
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00162	51		 push	 ecx
  00163	8d 4c 02 18	 lea	 ecx, DWORD PTR [edx+eax+24]
  00167	51		 push	 ecx
  00168	68 d3 01 00 00	 push	 467			; 000001d3H
  0016d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00172	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00177	50		 push	 eax
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 850  : 				iSendResult = 1;

  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	83 c4 14	 add	 esp, 20			; 00000014H
  00186	89 45 b4	 mov	 DWORD PTR _iSendResult$[ebp], eax

; 851  : 				bAuthOK = TRUE;

  00189	89 45 b0	 mov	 DWORD PTR _bAuthOK$[ebp], eax
$LN7@JGAnsMapSv@2:

; 852  : 			}
; 853  : 
; 854  : 			if ( lpMsg->iUserNumber == 0 && lpMsg->iDBNumber == 0 )

  0018c	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00190	75 27		 jne	 SHORT $LN6@JGAnsMapSv@2
  00192	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00196	75 21		 jne	 SHORT $LN6@JGAnsMapSv@2

; 855  : 			{
; 856  : 				LogAddTD(lMsg.Get(MSGGET(1, 212)), szId, lpMsg->iUserNumber, lpMsg->iDBNumber);

  00198	6a 00		 push	 0
  0019a	6a 00		 push	 0
  0019c	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  0019f	52		 push	 edx
  001a0	68 d4 01 00 00	 push	 468			; 000001d4H
  001a5	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001aa	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001af	50		 push	 eax
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b6	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@JGAnsMapSv@2:

; 857  : 			}
; 858  : 
; 859  : 			switch ( lpMsg->btBlockCode )

  001b9	80 7e 3d 46	 cmp	 BYTE PTR [esi+61], 70	; 00000046H
  001bd	75 16		 jne	 SHORT $LN21@JGAnsMapSv@2

; 860  : 			{
; 861  : 				case 70:	// 0x46
; 862  : 					gObj[iIndex].m_cAccountItemBlock = 1;

  001bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c5	8b c7		 mov	 eax, edi
  001c7	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  001cd	c6 84 08 14 02
	00 00 01	 mov	 BYTE PTR [eax+ecx+532], 1
$LN21@JGAnsMapSv@2:

; 871  : 	}
; 872  : 
; 873  : 	GCAnsMapSvrAuth(iIndex, iSendResult);

  001d5	8b 55 b4	 mov	 edx, DWORD PTR _iSendResult$[ebp]
  001d8	52		 push	 edx
  001d9	57		 push	 edi
  001da	e8 00 00 00 00	 call	 ?GCAnsMapSvrAuth@@YAXHH@Z ; GCAnsMapSvrAuth
  001df	83 c4 08	 add	 esp, 8

; 874  : 
; 875  : 	if ( bAuthOK == FALSE )

  001e2	83 7d b0 00	 cmp	 DWORD PTR _bAuthOK$[ebp], 0
  001e6	75 3b		 jne	 SHORT $LN1@JGAnsMapSv@2

; 876  : 	{
; 877  : 		LogAddC(2, "[MapServerMng] [%s][%s] JG [0x7B] - Join Result Failed : RST:%d, BLK:%c",
; 878  : 			szId, lpMsg->szCharName, lpMsg->iResult, lpMsg->btBlockCode);

  001e8	0f b6 46 3d	 movzx	 eax, BYTE PTR [esi+61]
  001ec	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  001ef	8b 55 ac	 mov	 edx, DWORD PTR tv328[ebp]
  001f2	50		 push	 eax
  001f3	51		 push	 ecx
  001f4	52		 push	 edx
  001f5	8d 45 f0	 lea	 eax, DWORD PTR _szId$[ebp]
  001f8	50		 push	 eax
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@PFOEEAH@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@
  001fe	6a 02		 push	 2
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 879  : 		gObjDel(lpMsg->iIndex);

  00206	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00209	51		 push	 ecx
  0020a	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0020f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00212	5b		 pop	 ebx
  00213	5f		 pop	 edi
  00214	5e		 pop	 esi

; 903  : 
; 904  : }

  00215	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00218	33 cd		 xor	 ecx, ebp
  0021a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c3		 ret	 0
$LN1@JGAnsMapSv@2:

; 880  : 
; 881  : 		return;
; 882  : 	}
; 883  : 	
; 884  : 	gObj[iIndex].m_sPrevMapSvrCode = lpMsg->wPrevMapSvrCode;

  00223	0f b7 56 1e	 movzx	 edx, WORD PTR [esi+30]
  00227	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0022d	8b c7		 mov	 eax, edi
  0022f	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00235	66 89 94 08 ec
	1b 00 00	 mov	 WORD PTR [eax+ecx+7148], dx

; 885  : 	gObj[iIndex].m_sDestMapNumber  = lpMsg->wMapNumber;

  0023d	0f b7 56 20	 movzx	 edx, WORD PTR [esi+32]
  00241	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00247	66 89 94 08 ee
	1b 00 00	 mov	 WORD PTR [eax+ecx+7150], dx

; 886  : 	gObj[iIndex].m_btDestX = lpMsg->btX;

  0024f	0f b6 56 22	 movzx	 edx, BYTE PTR [esi+34]
  00253	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00259	88 94 08 f0 1b
	00 00		 mov	 BYTE PTR [eax+ecx+7152], dl

; 887  : 	gObj[iIndex].m_btDestY = lpMsg->btY;

  00260	0f b6 56 23	 movzx	 edx, BYTE PTR [esi+35]
  00264	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0026a	88 94 08 f1 1b
	00 00		 mov	 BYTE PTR [eax+ecx+7153], dl

; 888  : 	gObj[iIndex].m_iPcBangRoom = lpMsg->PcBangRoom;//Season 4.5 addon

  00271	0f b6 56 44	 movzx	 edx, BYTE PTR [esi+68]
  00275	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0027b	89 94 08 c4 1f
	00 00		 mov	 DWORD PTR [eax+ecx+8132], edx

; 889  : 	gObj[iIndex].bEnableDelCharacter = FALSE;

  00282	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 890  : 
; 891  : 	PHeadSetB((LPBYTE)&pMsg, 0x06, sizeof(pMsg));

  00288	6a 1c		 push	 28			; 0000001cH
  0028a	c7 44 10 0c 00
	00 00 00	 mov	 DWORD PTR [eax+edx+12], 0
  00292	8d 45 b8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00295	6a 06		 push	 6
  00297	50		 push	 eax
  00298	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 892  : 	memset(szName, 0, sizeof(szName));
; 893  : 	memcpy(szName, lpMsg->szCharName, MAX_ACCOUNT_LEN);

  0029d	8b 7d ac	 mov	 edi, DWORD PTR tv328[ebp]
  002a0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  002a2	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  002a5	33 c0		 xor	 eax, eax
  002a7	89 45 e4	 mov	 DWORD PTR _szName$[ebp], eax
  002aa	89 45 e8	 mov	 DWORD PTR _szName$[ebp+4], eax
  002ad	66 89 45 ec	 mov	 WORD PTR _szName$[ebp+8], ax
  002b1	89 4d e4	 mov	 DWORD PTR _szName$[ebp], ecx
  002b4	88 45 ee	 mov	 BYTE PTR _szName$[ebp+10], al
  002b7	66 8b 47 08	 mov	 ax, WORD PTR [edi+8]

; 894  : 	BuxConvert(szName, MAX_ACCOUNT_LEN);

  002bb	8d 4d e4	 lea	 ecx, DWORD PTR _szName$[ebp]
  002be	6a 0a		 push	 10			; 0000000aH
  002c0	51		 push	 ecx
  002c1	89 55 e8	 mov	 DWORD PTR _szName$[ebp+4], edx
  002c4	66 89 45 ec	 mov	 WORD PTR _szName$[ebp+8], ax
  002c8	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert

; 895  : 	memcpy(pMsg.Name, szName, MAX_ACCOUNT_LEN);

  002cd	8b 55 e4	 mov	 edx, DWORD PTR _szName$[ebp]
  002d0	8b 45 e8	 mov	 eax, DWORD PTR _szName$[ebp+4]
  002d3	66 8b 4d ec	 mov	 cx, WORD PTR _szName$[ebp+8]
  002d7	89 55 c6	 mov	 DWORD PTR _pMsg$[ebp+14], edx

; 896  : 	strcpy(pMsg.AccountID, lpMsg->szAccountID);

  002da	8d 55 bb	 lea	 edx, DWORD PTR _pMsg$[ebp+3]
  002dd	83 c4 14	 add	 esp, 20			; 00000014H
  002e0	89 45 ca	 mov	 DWORD PTR _pMsg$[ebp+18], eax
  002e3	66 89 4d ce	 mov	 WORD PTR _pMsg$[ebp+22], cx
  002e7	8b c3		 mov	 eax, ebx
  002e9	2b d3		 sub	 edx, ebx
  002eb	eb 03 8d 49 00	 npad	 5
$LL18@JGAnsMapSv@2:
  002f0	8a 08		 mov	 cl, BYTE PTR [eax]
  002f2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  002f5	40		 inc	 eax
  002f6	84 c9		 test	 cl, cl
  002f8	75 f6		 jne	 SHORT $LL18@JGAnsMapSv@2

; 897  : 	pMsg.Number = lpObj->m_Index;
; 898  : 
; 899  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  002fa	0f b6 4d b9	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  002fe	8b 55 a8	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00301	66 8b 02	 mov	 ax, WORD PTR [edx]
  00304	51		 push	 ecx
  00305	8d 55 b8	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00308	52		 push	 edx
  00309	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0030e	66 89 45 d2	 mov	 WORD PTR _pMsg$[ebp+26], ax
  00312	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 900  : 
; 901  : 	LogAddTD("[MapServerMng] [%s][%s] JG [0x7B] - Join Result OK : RST:%d, BLK:%c",
; 902  : 		szId, lpMsg->szCharName, lpMsg->iResult, lpMsg->btBlockCode);

  00317	0f b6 46 3d	 movzx	 eax, BYTE PTR [esi+61]
  0031b	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0031e	50		 push	 eax
  0031f	51		 push	 ecx
  00320	57		 push	 edi
  00321	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00324	52		 push	 edx
  00325	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@OBJPBDGN@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@
  0032a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 903  : 
; 904  : }

  00330	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00333	83 c4 14	 add	 esp, 20			; 00000014H
  00336	5b		 pop	 ebx
  00337	5f		 pop	 edi
  00338	33 cd		 xor	 ecx, ebp
  0033a	5e		 pop	 esi
  0033b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00340	8b e5		 mov	 esp, ebp
  00342	5d		 pop	 ebp
  00343	c3		 ret	 0
?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z ENDP	; JGAnsMapSvrAuth
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJNotifyMaxUserCount@@YAXXZ			; GJNotifyMaxUserCount
EXTRN	?gObjTotalUser@@3HA:DWORD			; gObjTotalUser
EXTRN	?gServerMaxUser@@3HA:DWORD			; gServerMaxUser
; Function compile flags: /Ogtp
;	COMDAT ?GJNotifyMaxUserCount@@YAXXZ
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?GJNotifyMaxUserCount@@YAXXZ PROC			; GJNotifyMaxUserCount, COMDAT

; 924  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 925  : 	PMSG_NOTIFY_MAXUSER pMsg;
; 926  : 
; 927  : 	PHeadSetB((LPBYTE)&pMsg, 0x7C, sizeof(PMSG_NOTIFY_MAXUSER));

  00010	6a 10		 push	 16			; 00000010H
  00012	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00015	6a 7c		 push	 124			; 0000007cH
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 928  : 	pMsg.iSvrCode = gGameServerCode;

  0001d	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode

; 929  : 	pMsg.iMaxUserCount = gServerMaxUser;

  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gServerMaxUser@@3HA ; gServerMaxUser

; 930  : 	pMsg.iCurUserCount = gObjTotalUser;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObjTotalUser@@3HA ; gObjTotalUser
  0002f	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 931  : 	
; 932  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00032	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  0003c	51		 push	 ecx
  0003d	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00040	52		 push	 edx
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00046	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  00049	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 933  : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	33 cd		 xor	 ecx, ebp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?GJNotifyMaxUserCount@@YAXXZ ENDP			; GJNotifyMaxUserCount
_TEXT	ENDS
PUBLIC	?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z	; JGPSendMail
EXTRN	?MngFriendMemoSend@@YAXPAUPMSG_JG_MEMO_SEND@@@Z:PROC ; MngFriendMemoSend
; Function compile flags: /Ogtp
;	COMDAT ?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z PROC		; JGPSendMail, COMDAT

; 937  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 939  : }

  00003	5d		 pop	 ebp

; 938  : 	MngFriendMemoSend(lpMsg);

  00004	e9 00 00 00 00	 jmp	 ?MngFriendMemoSend@@YAXPAUPMSG_JG_MEMO_SEND@@@Z ; MngFriendMemoSend
?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z ENDP		; JGPSendMail
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJUpdateMatchDBUserCharacters@@YAXPAUOBJECTSTRUCT@@@Z ; GJUpdateMatchDBUserCharacters
; Function compile flags: /Ogtp
;	COMDAT ?GJUpdateMatchDBUserCharacters@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GJUpdateMatchDBUserCharacters@@YAXPAUOBJECTSTRUCT@@@Z PROC ; GJUpdateMatchDBUserCharacters, COMDAT

; 952  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 953  : 	SDHP_REQ_UPDATE_MATCHDB_USERCHARACTERS pMsg;
; 954  : 
; 955  : 	PHeadSetB((LPBYTE)&pMsg, 0x16, sizeof(SDHP_REQ_UPDATE_MATCHDB_USERCHARACTERS));

  00014	6a 1c		 push	 28			; 0000001cH
  00016	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00019	6a 16		 push	 22			; 00000016H
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 956  : 	pMsg.DbClass = lpObj->DbClass;
; 957  : 	pMsg.Level = lpObj->Level;

  00021	0f b7 96 be 00
	00 00		 movzx	 edx, WORD PTR [esi+190]

; 958  : 	memcpy(pMsg.szId, lpObj->AccountID, sizeof(pMsg.szId));

  00028	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0002b	8a 8e ba 00 00
	00		 mov	 cl, BYTE PTR [esi+186]
  00031	88 4d fa	 mov	 BYTE PTR _pMsg$[ebp+26], cl
  00034	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00037	89 45 e3	 mov	 DWORD PTR _pMsg$[ebp+3], eax

; 959  : 	memcpy(pMsg.szName, lpObj->BackName, sizeof(pMsg.szName));

  0003a	8b 86 d9 10 00
	00		 mov	 eax, DWORD PTR [esi+4313]
  00040	66 89 55 f8	 mov	 WORD PTR _pMsg$[ebp+24], dx
  00044	0f b7 56 74	 movzx	 edx, WORD PTR [esi+116]
  00048	89 4d e7	 mov	 DWORD PTR _pMsg$[ebp+7], ecx
  0004b	8b 8e dd 10 00
	00		 mov	 ecx, DWORD PTR [esi+4317]
  00051	89 45 ed	 mov	 DWORD PTR _pMsg$[ebp+13], eax

; 960  : 
; 961  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00054	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	89 4d f1	 mov	 DWORD PTR _pMsg$[ebp+17], ecx
  0005e	66 89 55 eb	 mov	 WORD PTR _pMsg$[ebp+11], dx
  00062	0f b7 96 e1 10
	00 00		 movzx	 edx, WORD PTR [esi+4321]
  00069	50		 push	 eax
  0006a	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0006d	51		 push	 ecx
  0006e	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00073	66 89 55 f5	 mov	 WORD PTR _pMsg$[ebp+21], dx
  00077	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 962  : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	5e		 pop	 esi
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?GJUpdateMatchDBUserCharacters@@YAXPAUOBJECTSTRUCT@@@Z ENDP ; GJUpdateMatchDBUserCharacters
_TEXT	ENDS
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@		; `string'
PUBLIC	?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z ; BroadCastMessage
EXTRN	?MessageSendAllEx@@YAXHPAD0ZZ:PROC		; MessageSendAllEx
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@ DB '%s %s', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z
_TEXT	SEGMENT
_lpResult$ = 8						; size = 4
?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z PROC	; BroadCastMessage, COMDAT

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 966  : 	if( strlen(lpResult->Text) < 2 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpResult$[ebp]
  00007	57		 push	 edi
  00008	8d 7e 10	 lea	 edi, DWORD PTR [esi+16]
  0000b	8b c7		 mov	 eax, edi
  0000d	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL9@BroadCastM:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL9@BroadCastM
  00017	2b c2		 sub	 eax, edx
  00019	83 f8 02	 cmp	 eax, 2
  0001c	72 3b		 jb	 SHORT $LN4@BroadCastM

; 967  : 	{
; 968  : 		return;
; 969  : 	}
; 970  : 	
; 971  : 	switch(lpResult->Type)

  0001e	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00022	83 e8 00	 sub	 eax, 0
  00025	74 26		 je	 SHORT $LN3@BroadCastM
  00027	83 e8 02	 sub	 eax, 2
  0002a	75 2d		 jne	 SHORT $LN4@BroadCastM

; 976  : 		}
; 977  : 		break;
; 978  : 	case 1:
; 979  : 		{
; 980  : 			//USER_REQ_POST lpInfo = { 0 };
; 981  : 			//PHeadSetB((LPBYTE)&lpInfo, 0, sizeof(lpInfo));
; 982  : 			//lpInfo.h.headcode = 2;
; 983  : 			//lpInfo.chatmsg[0] = '!';
; 984  : 			//memcpy(lpInfo.id, lpResult->Sender, 10);
; 985  : 			//strcat(lpInfo.chatmsg, lpResult->Text);
; 986  : 			//DataSendAll((LPBYTE)&lpInfo, sizeof(lpInfo));
; 987  : 		}
; 988  : 		break;
; 989  : 	case 2:
; 990  : 		MessageSendAllEx(ZtConfig.Command.PostColor, lpResult->Sender, "%s %s", ZtConfig.Command.PostPrist, lpResult->Text);

  0002c	a1 58 06 00 00	 mov	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+1624
  00031	57		 push	 edi
  00032	68 f4 05 00 00	 push	 OFFSET ?ZtConfig@@3VcZtConfigs@@A+1524
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
  0003c	83 c6 06	 add	 esi, 6
  0003f	56		 push	 esi
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?MessageSendAllEx@@YAXHPAD0ZZ ; MessageSendAllEx
  00046	83 c4 14	 add	 esp, 20			; 00000014H
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 991  : 		break;
; 992  : 	}
; 993  : 	
; 994  : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN3@BroadCastM:

; 972  : 	{
; 973  : 	case 0:
; 974  : 		{
; 975  : 			AllSendServerMsg(&lpResult->Text[1]);

  0004d	83 c6 11	 add	 esi, 17			; 00000011H
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  00056	83 c4 04	 add	 esp, 4
$LN4@BroadCastM:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 991  : 		break;
; 992  : 	}
; 993  : 	
; 994  : }

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z ENDP	; BroadCastMessage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z	; JGPAccountRequest
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	?GCJoinResult@@YAXEH@Z:PROC			; GCJoinResult
EXTRN	?GDReqOffCharacter@OfflineMode@@QAEXH@Z:PROC	; OfflineMode::GDReqOffCharacter
EXTRN	?g_OfflineMode@@3VOfflineMode@@A:BYTE		; g_OfflineMode
EXTRN	?SendGame@ConnectZt@@QAEXH@Z:PROC		; ConnectZt::SendGame
EXTRN	?gJoominCheck@@YAHPADH@Z:PROC			; gJoominCheck
EXTRN	?gPkLimitFree@@3HA:DWORD			; gPkLimitFree
EXTRN	?gJoomin15Check@@YAHPAD@Z:PROC			; gJoomin15Check
EXTRN	?gLanguage@@3HA:DWORD				; gLanguage
EXTRN	?gNonPK@@3HA:DWORD				; gNonPK
; Function compile flags: /Ogtp
;	COMDAT ?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z
_TEXT	SEGMENT
_szJN$ = -32						; size = 14
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z PROC	; JGPAccountRequest, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 162  : 	char szId[11];
; 163  : 	int aIndex;
; 164  : 	char szJN[14]="";

  00010	53		 push	 ebx

; 165  : 	
; 166  : 	memset(szId, 0, sizeof(szId));

  00011	56		 push	 esi

; 171  : 
; 172  : 	bool bJoinResult = true;
; 173  : 	
; 174  : 	if ( lpMsg->result  == 1 || lpMsg->result  == 15 )

  00012	57		 push	 edi

; 162  : 	char szId[11];
; 163  : 	int aIndex;
; 164  : 	char szJN[14]="";

  00013	33 c0		 xor	 eax, eax
  00015	89 45 e1	 mov	 DWORD PTR _szJN$[ebp+1], eax
  00018	89 45 e5	 mov	 DWORD PTR _szJN$[ebp+5], eax
  0001b	89 45 e9	 mov	 DWORD PTR _szJN$[ebp+9], eax

; 165  : 	
; 166  : 	memset(szId, 0, sizeof(szId));

  0001e	89 45 f0	 mov	 DWORD PTR _szId$[ebp], eax
  00021	89 45 f4	 mov	 DWORD PTR _szId$[ebp+4], eax
  00024	66 89 45 f8	 mov	 WORD PTR _szId$[ebp+8], ax
  00028	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 167  : 	memcpy(szId, lpMsg->Id , sizeof(lpMsg->Id));

  0002b	8b 4e 0a	 mov	 ecx, DWORD PTR [esi+10]
  0002e	66 8b 56 0e	 mov	 dx, WORD PTR [esi+14]

; 168  : 	memcpy(szJN, lpMsg->JoominNumber , sizeof(lpMsg->JoominNumber));
; 169  : 
; 170  : 	aIndex = lpMsg->Number ;

  00032	0f bf 5e 04	 movsx	 ebx, WORD PTR [esi+4]
  00036	88 45 ed	 mov	 BYTE PTR _szJN$[ebp+13], al
  00039	88 45 fa	 mov	 BYTE PTR _szId$[ebp+10], al
  0003c	8b 46 06	 mov	 eax, DWORD PTR [esi+6]
  0003f	89 45 f0	 mov	 DWORD PTR _szId$[ebp], eax
  00042	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00045	89 45 e0	 mov	 DWORD PTR _szJN$[ebp], eax
  00048	0f b6 46 24	 movzx	 eax, BYTE PTR [esi+36]
  0004c	88 45 ec	 mov	 BYTE PTR _szJN$[ebp+12], al

; 171  : 
; 172  : 	bool bJoinResult = true;
; 173  : 	
; 174  : 	if ( lpMsg->result  == 1 || lpMsg->result  == 15 )

  0004f	8a 46 03	 mov	 al, BYTE PTR [esi+3]
  00052	89 4d f4	 mov	 DWORD PTR _szId$[ebp+4], ecx
  00055	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00058	66 89 55 f8	 mov	 WORD PTR _szId$[ebp+8], dx
  0005c	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0005f	89 4d e4	 mov	 DWORD PTR _szJN$[ebp+4], ecx
  00062	89 55 e8	 mov	 DWORD PTR _szJN$[ebp+8], edx
  00065	3c 01		 cmp	 al, 1
  00067	74 04		 je	 SHORT $LN18@JGPAccount
  00069	3c 0f		 cmp	 al, 15			; 0000000fH
  0006b	75 78		 jne	 SHORT $LN24@JGPAccount
$LN18@JGPAccount:

; 175  : 	{
; 176  : 		if ( gNonPK == 0 && gLanguage == 0 )

  0006d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gNonPK@@3HA, 0 ; gNonPK
  00074	75 32		 jne	 SHORT $LN22@JGPAccount
  00076	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLanguage@@3HA, 0 ; gLanguage
  0007d	75 29		 jne	 SHORT $LN22@JGPAccount

; 177  : 		{
; 178  : 			if (gJoomin15Check(szJN) == 0 )

  0007f	8d 4d e0	 lea	 ecx, DWORD PTR _szJN$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?gJoomin15Check@@YAHPAD@Z ; gJoomin15Check
  00088	83 c4 04	 add	 esp, 4
  0008b	85 c0		 test	 eax, eax
  0008d	75 19		 jne	 SHORT $LN22@JGPAccount

; 179  : 			{
; 180  : 				GJPAccountFail(aIndex, szId, lpMsg->DBNumber , lpMsg->UserNumber );

  0008f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00092	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00095	52		 push	 edx
  00096	50		 push	 eax
  00097	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  0009a	51		 push	 ecx
  0009b	53		 push	 ebx
  0009c	e8 00 00 00 00	 call	 ?GJPAccountFail@@YAXFPADHH@Z ; GJPAccountFail
  000a1	83 c4 10	 add	 esp, 16			; 00000010H

; 181  : 				lpMsg->result  = 17;

  000a4	c6 46 03 11	 mov	 BYTE PTR [esi+3], 17	; 00000011H
$LN22@JGPAccount:

; 182  : 			}
; 183  : 		}
; 184  : 			
; 185  : 		if ( gPkLimitFree == 1 && gLanguage == 0 )

  000a8	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 1 ; gPkLimitFree
  000af	75 34		 jne	 SHORT $LN24@JGPAccount
  000b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLanguage@@3HA, 0 ; gLanguage
  000b8	75 2b		 jne	 SHORT $LN24@JGPAccount

; 186  : 		{
; 187  : 			if (gJoominCheck(szJN, 18) == 0 )

  000ba	8d 55 e0	 lea	 edx, DWORD PTR _szJN$[ebp]
  000bd	6a 12		 push	 18			; 00000012H
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 ?gJoominCheck@@YAHPADH@Z ; gJoominCheck
  000c5	83 c4 08	 add	 esp, 8
  000c8	85 c0		 test	 eax, eax
  000ca	75 19		 jne	 SHORT $LN24@JGPAccount

; 188  : 			{
; 189  : 				GJPAccountFail(aIndex, szId, lpMsg->DBNumber , lpMsg->UserNumber );

  000cc	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000cf	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  000d7	52		 push	 edx
  000d8	53		 push	 ebx
  000d9	e8 00 00 00 00	 call	 ?GJPAccountFail@@YAXFPADHH@Z ; GJPAccountFail
  000de	83 c4 10	 add	 esp, 16			; 00000010H

; 190  : 				lpMsg->result  = 17;

  000e1	c6 46 03 11	 mov	 BYTE PTR [esi+3], 17	; 00000011H
$LN24@JGPAccount:

; 191  : 			}
; 192  : 		}
; 193  : 	}
; 194  : 
; 195  : 	switch ( lpMsg->result  )

  000e5	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  000e9	48		 dec	 eax
  000ea	74 09		 je	 SHORT $LN11@JGPAccount
  000ec	83 e8 0e	 sub	 eax, 14			; 0000000eH
  000ef	0f 85 d7 00 00
	00		 jne	 $LN23@JGPAccount
$LN11@JGPAccount:

; 196  : 	{
; 197  : 		case 1:
; 198  : 		case 15:
; 199  : 			if (gObjSetAccountLogin(aIndex, szId, lpMsg->UserNumber , lpMsg->DBNumber,lpMsg->ukn_30, szJN ,lpMsg->PcBangRoom) == 0 )//Season 4.5 addon

  000f5	0f b6 46 2c	 movzx	 eax, BYTE PTR [esi+44]
  000f9	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  000fc	50		 push	 eax
  000fd	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00100	8d 4d e0	 lea	 ecx, DWORD PTR _szJN$[ebp]
  00103	51		 push	 ecx
  00104	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00107	52		 push	 edx
  00108	50		 push	 eax
  00109	51		 push	 ecx
  0010a	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  0010d	52		 push	 edx
  0010e	53		 push	 ebx
  0010f	e8 00 00 00 00	 call	 ?gObjSetAccountLogin@@YAHHPADHHH0E@Z ; gObjSetAccountLogin
  00114	83 c4 1c	 add	 esp, 28			; 0000001cH

; 200  : 			{
; 201  : 				GJPAccountFail(aIndex, szId, lpMsg->DBNumber , lpMsg->UserNumber  );

  00117	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  0011a	85 c0		 test	 eax, eax
  0011c	75 18		 jne	 SHORT $LN10@JGPAccount
  0011e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00121	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00124	50		 push	 eax
  00125	51		 push	 ecx
  00126	52		 push	 edx
  00127	53		 push	 ebx
  00128	e8 00 00 00 00	 call	 ?GJPAccountFail@@YAXFPADHH@Z ; GJPAccountFail
  0012d	83 c4 10	 add	 esp, 16			; 00000010H

; 202  : 				lpMsg->result  = 4;

  00130	c6 46 03 04	 mov	 BYTE PTR [esi+3], 4

; 203  : 
; 204  : 				bJoinResult = false;
; 205  : 			}
; 206  : 			else

  00134	eb 69		 jmp	 SHORT $LN25@JGPAccount
$LN10@JGPAccount:

; 207  : 			{	
; 208  : 				LogAddTD(lMsg.Get(MSGGET(1, 211)), gObj[aIndex].Ip_addr, szId, lpMsg->UserNumber , lpMsg->DBNumber );

  00136	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00139	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0013c	8b fb		 mov	 edi, ebx
  0013e	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00144	50		 push	 eax
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014a	51		 push	 ecx
  0014b	52		 push	 edx
  0014c	8d 4c 07 18	 lea	 ecx, DWORD PTR [edi+eax+24]
  00150	51		 push	 ecx
  00151	68 d3 01 00 00	 push	 467			; 000001d3H
  00156	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0015b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00160	50		 push	 eax
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 209  : #if(_RECONNECT_)
; 210  : 				if( gObj[aIndex].m_ConnectZt )

  00167	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016d	83 c4 14	 add	 esp, 20			; 00000014H
  00170	80 bc 17 ac 27
	00 00 00	 cmp	 BYTE PTR [edi+edx+10156], 0
  00178	74 0b		 je	 SHORT $LN8@JGPAccount

; 211  : 				{
; 212  : 					g_ConnectZt.SendGame(aIndex);

  0017a	53		 push	 ebx
  0017b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConnectZt@@3VConnectZt@@A ; g_ConnectZt
  00180	e8 00 00 00 00	 call	 ?SendGame@ConnectZt@@QAEXH@Z ; ConnectZt::SendGame
$LN8@JGPAccount:

; 213  : 					bJoinResult = false;
; 214  : 				}
; 215  : #endif
; 216  : #if(OFFLINE_MODE_RESTORE)
; 217  : 				if(gObj[aIndex].m_ReOfflineMode)

  00185	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018a	80 bc 07 ec 28
	00 00 00	 cmp	 BYTE PTR [edi+eax+10476], 0
  00192	74 0b		 je	 SHORT $LN25@JGPAccount

; 218  : 				{
; 219  : 					g_OfflineMode.GDReqOffCharacter(aIndex);

  00194	53		 push	 ebx
  00195	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_OfflineMode@@3VOfflineMode@@A ; g_OfflineMode
  0019a	e8 00 00 00 00	 call	 ?GDReqOffCharacter@OfflineMode@@QAEXH@Z ; OfflineMode::GDReqOffCharacter
$LN25@JGPAccount:

; 220  : 					bJoinResult = false;
; 221  : 				}
; 222  : #endif
; 223  : 			}
; 224  : 
; 225  : 			if ( lpMsg->UserNumber  == 0 && lpMsg->DBNumber  == 0)

  0019f	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  001a3	75 27		 jne	 SHORT $LN23@JGPAccount
  001a5	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  001a9	75 21		 jne	 SHORT $LN23@JGPAccount

; 226  : 			{
; 227  : 				LogAddTD(lMsg.Get(MSGGET(1, 212)), szId, lpMsg->UserNumber , lpMsg->DBNumber );

  001ab	6a 00		 push	 0
  001ad	6a 00		 push	 0
  001af	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  001b2	51		 push	 ecx
  001b3	68 d4 01 00 00	 push	 468			; 000001d4H
  001b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001bd	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001c2	50		 push	 eax
  001c3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@JGPAccount:

; 228  : 			}
; 229  : 	}
; 230  : 
; 231  : 	if ( lpMsg->result == 0 )

  001cc	80 7e 03 00	 cmp	 BYTE PTR [esi+3], 0
  001d0	75 04		 jne	 SHORT $LN5@JGPAccount

; 232  : 		lpMsg->result = 2;

  001d2	c6 46 03 02	 mov	 BYTE PTR [esi+3], 2
$LN5@JGPAccount:

; 233  : 
; 234  : 	if ( lpMsg->result  == 15 )

  001d6	80 7e 03 0f	 cmp	 BYTE PTR [esi+3], 15	; 0000000fH
  001da	75 19		 jne	 SHORT $LN4@JGPAccount

; 235  : 	{
; 236  : 		lpMsg->result  = 1;
; 237  : 		gObj[aIndex].m_cAccountItemBlock = 1;

  001dc	8b d3		 mov	 edx, ebx
  001de	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  001e4	c6 46 03 01	 mov	 BYTE PTR [esi+3], 1
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ed	c6 84 02 14 02
	00 00 01	 mov	 BYTE PTR [edx+eax+532], 1
$LN4@JGPAccount:

; 238  : 	}
; 239  : 	
; 240  : 	gObj[aIndex].LoginMsgSnd = 0;

  001f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001fb	8b fb		 mov	 edi, ebx
  001fd	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00203	c6 44 0f 08 00	 mov	 BYTE PTR [edi+ecx+8], 0

; 241  : 
; 242  : 	if (gObj[aIndex].LoginMsgCount >= 3 )

  00208	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0020e	80 7c 17 09 03	 cmp	 BYTE PTR [edi+edx+9], 3
  00213	7c 04		 jl	 SHORT $LN3@JGPAccount

; 243  : 	{
; 244  : 		lpMsg->result = 8;

  00215	c6 46 03 08	 mov	 BYTE PTR [esi+3], 8
$LN3@JGPAccount:

; 245  : 	}
; 246  : 
; 247  : #if(CUSTOM_ACCOUNT_SECURITY)
; 248  : 	#if(DEBUG_ACCOUNT_SECURITY)
; 249  : 	if(g_AccountSecurity.CheckJoinLogin(aIndex, lpMsg->result, bJoinResult) == false)
; 250  : 	{
; 251  : 		GCJoinResult(lpMsg->result , aIndex);
; 252  : 		if ( lpMsg->result  != 1 )
; 253  : 		{
; 254  : 			if ( gObj[aIndex].LoginMsgCount > 3 )
; 255  : 			{
; 256  : 				CloseClient(aIndex);
; 257  : 			}
; 258  : 		}
; 259  : 	}
; 260  : 	#else
; 261  : 	GCJoinResult(lpMsg->result , aIndex);

  00219	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  0021d	53		 push	 ebx
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ?GCJoinResult@@YAXEH@Z	; GCJoinResult
  00224	83 c4 08	 add	 esp, 8

; 262  : 	if ( lpMsg->result  != 1 )

  00227	80 7e 03 01	 cmp	 BYTE PTR [esi+3], 1
  0022b	74 16		 je	 SHORT $LN1@JGPAccount

; 263  : 	{
; 264  : 		if ( gObj[aIndex].LoginMsgCount > 3 )

  0022d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00233	80 7c 0f 09 03	 cmp	 BYTE PTR [edi+ecx+9], 3
  00238	7e 09		 jle	 SHORT $LN1@JGPAccount

; 265  : 		{
; 266  : 			CloseClient(aIndex);

  0023a	53		 push	 ebx
  0023b	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00240	83 c4 04	 add	 esp, 4
$LN1@JGPAccount:

; 267  : 		}
; 268  : 	}
; 269  : 	#endif
; 270  : #else
; 271  : 	GCJoinResult(lpMsg->result , aIndex);
; 272  : 	if ( lpMsg->result  != 1 )
; 273  : 	{
; 274  : 		if ( gObj[aIndex].LoginMsgCount > 3 )
; 275  : 		{
; 276  : 			CloseClient(aIndex);
; 277  : 		}
; 278  : 	}
; 279  : #endif
; 280  : }

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5f		 pop	 edi
  00247	5e		 pop	 esi
  00248	33 cd		 xor	 ecx, ebp
  0024a	5b		 pop	 ebx
  0024b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c3		 ret	 0
?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z ENDP	; JGPAccountRequest
_TEXT	ENDS
PUBLIC	?SProtocolCore@@YAXEPAEH@Z			; SProtocolCore
; Function compile flags: /Ogtp
;	COMDAT ?SProtocolCore@@YAXEPAEH@Z
_TEXT	SEGMENT
_protoNum$ = 8						; size = 1
_aRecv$ = 12						; size = 4
_aLen$ = 16						; size = 4
?SProtocolCore@@YAXEPAEH@Z PROC				; SProtocolCore, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   : 	switch ( protoNum )

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _protoNum$[ebp]
  00007	3d cd 00 00 00	 cmp	 eax, 205		; 000000cdH
  0000c	0f 87 fa 00 00
	00		 ja	 $LN18@SProtocolC
  00012	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN22@SProtocolC[eax]
  00019	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN24@SProtocolC[eax*4]
$LN17@SProtocolC:

; 28   : 	{
; 29   : 		case 0x00:
; 30   : 			JGServerLoginResult((SDHP_RESULT *)aRecv);

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z ; JGServerLoginResult

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00029	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN16@SProtocolC:

; 31   : 			break;
; 32   : 
; 33   : 		case 0x01:
; 34   : 			JGPAccountRequest((SDHP_IDPASSRESULT *)aRecv);

  0002e	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z ; JGPAccountRequest

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00037	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN15@SProtocolC:

; 35   : 			break;
; 36   : 
; 37   : 		case 0x06:
; 38   : 			GJPBillCeckRecv((SDHP_BILLSEARCH_RESULT *)aRecv);

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z ; GJPBillCeckRecv

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00045	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN14@SProtocolC:

; 39   : 			break;
; 40   : 
; 41   : 		case 0x07:
; 42   : 			GJPUserKillRecv((SDHP_BILLKILLUSER *)aRecv);

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ; GJPUserKillRecv

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00053	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN13@SProtocolC:

; 43   : 			break;
; 44   : 
; 45   : 		case 0x08:
; 46   : 			JGOtherJoin((SDHP_OTHERJOINMSG *)aRecv);

  00058	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z ; JGOtherJoin

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00061	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN12@SProtocolC:

; 47   : 			break;
; 48   : 
; 49   : 		case 0x09:
; 50   : 			GJPUserDisconnectRecv((SDHP_BILLKILLUSER *)aRecv);

  00066	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ; GJPUserDisconnectRecv

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  0006f	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN11@SProtocolC:

; 51   : 			break;
; 52   : 
; 53   : 		case 0x20:
; 54   : 			JGPExitCodeRecv((SDHP_EXITMSG *)aRecv);

  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z ; JGPExitCodeRecv

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  0007d	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
$LN10@SProtocolC:

; 55   : 			break;
; 56   : 
; 57   : 		case 0x60:
; 58   : 			JGPEventStart((SDHP_EVENTSTART *)aRecv);

  00082	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 ?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z ; JGPEventStart

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  0008b	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN9@SProtocolC:

; 59   : 			break;
; 60   : 
; 61   : 		case 0x61:
; 62   : 			JGPEventControl((SDHP_EVENTCONTROL *)aRecv);

  00090	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z ; JGPEventControl

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00099	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN8@SProtocolC:

; 63   : 			break;
; 64   : 
; 65   : 		case 0x62:
; 66   : 			JGPOptionControl((SDHP_OPTIONCONTROL *)aRecv);

  0009e	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 ?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z ; JGPOptionControl

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  000a7	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN7@SProtocolC:

; 67   : 			break;
; 68   : 
; 69   : 		case 0x63:
; 70   : 			JGPSendMail((PMSG_JG_MEMO_SEND *)aRecv);

  000ac	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 ?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z ; JGPSendMail

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  000b5	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN6@SProtocolC:

; 71   : 			break;
; 72   : 
; 73   : 		case 0x30:
; 74   : 			LoveHeartEventRecv((SDHP_LOVEHEARTEVENT_RESULT *)aRecv);

  000ba	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z ; LoveHeartEventRecv

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  000c3	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
$LN5@SProtocolC:

; 75   : 			break;
; 76   : 
; 77   : 		case 0x40:
; 78   : 			AllNoticeRecv((SDHP_NOTICE *)aRecv);

  000c8	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 ?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z ; AllNoticeRecv

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  000d1	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
$LN4@SProtocolC:

; 79   : 			break;
; 80   : 
; 81   : 		case 0x41:
; 82   : 			UserNoticeRecv((SDHP_USER_NOTICE *)aRecv);

  000d6	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  000d9	52		 push	 edx
  000da	e8 00 00 00 00	 call	 ?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z ; UserNoticeRecv

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  000df	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN3@SProtocolC:

; 83   : 			break;
; 84   : 
; 85   : 		case 0x7A:
; 86   : 			JGAnsMapSvrMove((PMSG_ANS_MAPSVRMOVE *)aRecv);

  000e4	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z ; JGAnsMapSvrMove

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  000ed	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
$LN2@SProtocolC:

; 87   : 			break;
; 88   : 
; 89   : 		case 0x7B:
; 90   : 			JGAnsMapSvrAuth((PMSG_ANS_MAPSVRAUTH *)aRecv);

  000f2	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z ; JGAnsMapSvrAuth

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  000fb	83 c4 04	 add	 esp, 4

; 95   : 			break;
; 96   : 	}
; 97   : }

  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
$LN1@SProtocolC:

; 91   : 			break;
; 92   : 
; 93   : 		case 0xCD:
; 94   : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00100	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00103	52		 push	 edx
  00104	e8 00 00 00 00	 call	 ?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z ; BroadCastMessage
  00109	83 c4 04	 add	 esp, 4
$LN18@SProtocolC:

; 95   : 			break;
; 96   : 	}
; 97   : }

  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
  0010e	8b ff		 npad	 2
$LN24@SProtocolC:
  00110	00 00 00 00	 DD	 $LN17@SProtocolC
  00114	00 00 00 00	 DD	 $LN16@SProtocolC
  00118	00 00 00 00	 DD	 $LN15@SProtocolC
  0011c	00 00 00 00	 DD	 $LN14@SProtocolC
  00120	00 00 00 00	 DD	 $LN13@SProtocolC
  00124	00 00 00 00	 DD	 $LN12@SProtocolC
  00128	00 00 00 00	 DD	 $LN11@SProtocolC
  0012c	00 00 00 00	 DD	 $LN6@SProtocolC
  00130	00 00 00 00	 DD	 $LN5@SProtocolC
  00134	00 00 00 00	 DD	 $LN4@SProtocolC
  00138	00 00 00 00	 DD	 $LN10@SProtocolC
  0013c	00 00 00 00	 DD	 $LN9@SProtocolC
  00140	00 00 00 00	 DD	 $LN8@SProtocolC
  00144	00 00 00 00	 DD	 $LN7@SProtocolC
  00148	00 00 00 00	 DD	 $LN3@SProtocolC
  0014c	00 00 00 00	 DD	 $LN2@SProtocolC
  00150	00 00 00 00	 DD	 $LN1@SProtocolC
  00154	00 00 00 00	 DD	 $LN18@SProtocolC
$LN22@SProtocolC:
  00158	00		 DB	 0
  00159	01		 DB	 1
  0015a	11		 DB	 17			; 00000011H
  0015b	11		 DB	 17			; 00000011H
  0015c	11		 DB	 17			; 00000011H
  0015d	11		 DB	 17			; 00000011H
  0015e	02		 DB	 2
  0015f	03		 DB	 3
  00160	04		 DB	 4
  00161	05		 DB	 5
  00162	11		 DB	 17			; 00000011H
  00163	11		 DB	 17			; 00000011H
  00164	11		 DB	 17			; 00000011H
  00165	11		 DB	 17			; 00000011H
  00166	11		 DB	 17			; 00000011H
  00167	11		 DB	 17			; 00000011H
  00168	11		 DB	 17			; 00000011H
  00169	11		 DB	 17			; 00000011H
  0016a	11		 DB	 17			; 00000011H
  0016b	11		 DB	 17			; 00000011H
  0016c	11		 DB	 17			; 00000011H
  0016d	11		 DB	 17			; 00000011H
  0016e	11		 DB	 17			; 00000011H
  0016f	11		 DB	 17			; 00000011H
  00170	11		 DB	 17			; 00000011H
  00171	11		 DB	 17			; 00000011H
  00172	11		 DB	 17			; 00000011H
  00173	11		 DB	 17			; 00000011H
  00174	11		 DB	 17			; 00000011H
  00175	11		 DB	 17			; 00000011H
  00176	11		 DB	 17			; 00000011H
  00177	11		 DB	 17			; 00000011H
  00178	06		 DB	 6
  00179	11		 DB	 17			; 00000011H
  0017a	11		 DB	 17			; 00000011H
  0017b	11		 DB	 17			; 00000011H
  0017c	11		 DB	 17			; 00000011H
  0017d	11		 DB	 17			; 00000011H
  0017e	11		 DB	 17			; 00000011H
  0017f	11		 DB	 17			; 00000011H
  00180	11		 DB	 17			; 00000011H
  00181	11		 DB	 17			; 00000011H
  00182	11		 DB	 17			; 00000011H
  00183	11		 DB	 17			; 00000011H
  00184	11		 DB	 17			; 00000011H
  00185	11		 DB	 17			; 00000011H
  00186	11		 DB	 17			; 00000011H
  00187	11		 DB	 17			; 00000011H
  00188	07		 DB	 7
  00189	11		 DB	 17			; 00000011H
  0018a	11		 DB	 17			; 00000011H
  0018b	11		 DB	 17			; 00000011H
  0018c	11		 DB	 17			; 00000011H
  0018d	11		 DB	 17			; 00000011H
  0018e	11		 DB	 17			; 00000011H
  0018f	11		 DB	 17			; 00000011H
  00190	11		 DB	 17			; 00000011H
  00191	11		 DB	 17			; 00000011H
  00192	11		 DB	 17			; 00000011H
  00193	11		 DB	 17			; 00000011H
  00194	11		 DB	 17			; 00000011H
  00195	11		 DB	 17			; 00000011H
  00196	11		 DB	 17			; 00000011H
  00197	11		 DB	 17			; 00000011H
  00198	08		 DB	 8
  00199	09		 DB	 9
  0019a	11		 DB	 17			; 00000011H
  0019b	11		 DB	 17			; 00000011H
  0019c	11		 DB	 17			; 00000011H
  0019d	11		 DB	 17			; 00000011H
  0019e	11		 DB	 17			; 00000011H
  0019f	11		 DB	 17			; 00000011H
  001a0	11		 DB	 17			; 00000011H
  001a1	11		 DB	 17			; 00000011H
  001a2	11		 DB	 17			; 00000011H
  001a3	11		 DB	 17			; 00000011H
  001a4	11		 DB	 17			; 00000011H
  001a5	11		 DB	 17			; 00000011H
  001a6	11		 DB	 17			; 00000011H
  001a7	11		 DB	 17			; 00000011H
  001a8	11		 DB	 17			; 00000011H
  001a9	11		 DB	 17			; 00000011H
  001aa	11		 DB	 17			; 00000011H
  001ab	11		 DB	 17			; 00000011H
  001ac	11		 DB	 17			; 00000011H
  001ad	11		 DB	 17			; 00000011H
  001ae	11		 DB	 17			; 00000011H
  001af	11		 DB	 17			; 00000011H
  001b0	11		 DB	 17			; 00000011H
  001b1	11		 DB	 17			; 00000011H
  001b2	11		 DB	 17			; 00000011H
  001b3	11		 DB	 17			; 00000011H
  001b4	11		 DB	 17			; 00000011H
  001b5	11		 DB	 17			; 00000011H
  001b6	11		 DB	 17			; 00000011H
  001b7	11		 DB	 17			; 00000011H
  001b8	0a		 DB	 10			; 0000000aH
  001b9	0b		 DB	 11			; 0000000bH
  001ba	0c		 DB	 12			; 0000000cH
  001bb	0d		 DB	 13			; 0000000dH
  001bc	11		 DB	 17			; 00000011H
  001bd	11		 DB	 17			; 00000011H
  001be	11		 DB	 17			; 00000011H
  001bf	11		 DB	 17			; 00000011H
  001c0	11		 DB	 17			; 00000011H
  001c1	11		 DB	 17			; 00000011H
  001c2	11		 DB	 17			; 00000011H
  001c3	11		 DB	 17			; 00000011H
  001c4	11		 DB	 17			; 00000011H
  001c5	11		 DB	 17			; 00000011H
  001c6	11		 DB	 17			; 00000011H
  001c7	11		 DB	 17			; 00000011H
  001c8	11		 DB	 17			; 00000011H
  001c9	11		 DB	 17			; 00000011H
  001ca	11		 DB	 17			; 00000011H
  001cb	11		 DB	 17			; 00000011H
  001cc	11		 DB	 17			; 00000011H
  001cd	11		 DB	 17			; 00000011H
  001ce	11		 DB	 17			; 00000011H
  001cf	11		 DB	 17			; 00000011H
  001d0	11		 DB	 17			; 00000011H
  001d1	11		 DB	 17			; 00000011H
  001d2	0e		 DB	 14			; 0000000eH
  001d3	0f		 DB	 15			; 0000000fH
  001d4	11		 DB	 17			; 00000011H
  001d5	11		 DB	 17			; 00000011H
  001d6	11		 DB	 17			; 00000011H
  001d7	11		 DB	 17			; 00000011H
  001d8	11		 DB	 17			; 00000011H
  001d9	11		 DB	 17			; 00000011H
  001da	11		 DB	 17			; 00000011H
  001db	11		 DB	 17			; 00000011H
  001dc	11		 DB	 17			; 00000011H
  001dd	11		 DB	 17			; 00000011H
  001de	11		 DB	 17			; 00000011H
  001df	11		 DB	 17			; 00000011H
  001e0	11		 DB	 17			; 00000011H
  001e1	11		 DB	 17			; 00000011H
  001e2	11		 DB	 17			; 00000011H
  001e3	11		 DB	 17			; 00000011H
  001e4	11		 DB	 17			; 00000011H
  001e5	11		 DB	 17			; 00000011H
  001e6	11		 DB	 17			; 00000011H
  001e7	11		 DB	 17			; 00000011H
  001e8	11		 DB	 17			; 00000011H
  001e9	11		 DB	 17			; 00000011H
  001ea	11		 DB	 17			; 00000011H
  001eb	11		 DB	 17			; 00000011H
  001ec	11		 DB	 17			; 00000011H
  001ed	11		 DB	 17			; 00000011H
  001ee	11		 DB	 17			; 00000011H
  001ef	11		 DB	 17			; 00000011H
  001f0	11		 DB	 17			; 00000011H
  001f1	11		 DB	 17			; 00000011H
  001f2	11		 DB	 17			; 00000011H
  001f3	11		 DB	 17			; 00000011H
  001f4	11		 DB	 17			; 00000011H
  001f5	11		 DB	 17			; 00000011H
  001f6	11		 DB	 17			; 00000011H
  001f7	11		 DB	 17			; 00000011H
  001f8	11		 DB	 17			; 00000011H
  001f9	11		 DB	 17			; 00000011H
  001fa	11		 DB	 17			; 00000011H
  001fb	11		 DB	 17			; 00000011H
  001fc	11		 DB	 17			; 00000011H
  001fd	11		 DB	 17			; 00000011H
  001fe	11		 DB	 17			; 00000011H
  001ff	11		 DB	 17			; 00000011H
  00200	11		 DB	 17			; 00000011H
  00201	11		 DB	 17			; 00000011H
  00202	11		 DB	 17			; 00000011H
  00203	11		 DB	 17			; 00000011H
  00204	11		 DB	 17			; 00000011H
  00205	11		 DB	 17			; 00000011H
  00206	11		 DB	 17			; 00000011H
  00207	11		 DB	 17			; 00000011H
  00208	11		 DB	 17			; 00000011H
  00209	11		 DB	 17			; 00000011H
  0020a	11		 DB	 17			; 00000011H
  0020b	11		 DB	 17			; 00000011H
  0020c	11		 DB	 17			; 00000011H
  0020d	11		 DB	 17			; 00000011H
  0020e	11		 DB	 17			; 00000011H
  0020f	11		 DB	 17			; 00000011H
  00210	11		 DB	 17			; 00000011H
  00211	11		 DB	 17			; 00000011H
  00212	11		 DB	 17			; 00000011H
  00213	11		 DB	 17			; 00000011H
  00214	11		 DB	 17			; 00000011H
  00215	11		 DB	 17			; 00000011H
  00216	11		 DB	 17			; 00000011H
  00217	11		 DB	 17			; 00000011H
  00218	11		 DB	 17			; 00000011H
  00219	11		 DB	 17			; 00000011H
  0021a	11		 DB	 17			; 00000011H
  0021b	11		 DB	 17			; 00000011H
  0021c	11		 DB	 17			; 00000011H
  0021d	11		 DB	 17			; 00000011H
  0021e	11		 DB	 17			; 00000011H
  0021f	11		 DB	 17			; 00000011H
  00220	11		 DB	 17			; 00000011H
  00221	11		 DB	 17			; 00000011H
  00222	11		 DB	 17			; 00000011H
  00223	11		 DB	 17			; 00000011H
  00224	11		 DB	 17			; 00000011H
  00225	10		 DB	 16			; 00000010H
?SProtocolCore@@YAXEPAEH@Z ENDP				; SProtocolCore
_TEXT	ENDS
END
