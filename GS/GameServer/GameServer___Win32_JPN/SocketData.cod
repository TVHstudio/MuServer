; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\SocketData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1CSeed@@QAE@XZ				; CSeed::~CSeed
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\socketdata.cpp
;	COMDAT ??1CSeed@@QAE@XZ
_TEXT	SEGMENT
??1CSeed@@QAE@XZ PROC					; CSeed::~CSeed, COMDAT
; _this$ = ecx

; 18   : 
; 19   : }

  00000	c3		 ret	 0
??1CSeed@@QAE@XZ ENDP					; CSeed::~CSeed
_TEXT	ENDS
PUBLIC	?ClearData@CSeed@@QAEXXZ			; CSeed::ClearData
; Function compile flags: /Ogtp
;	COMDAT ?ClearData@CSeed@@QAEXXZ
_TEXT	SEGMENT
?ClearData@CSeed@@QAEXXZ PROC				; CSeed::ClearData, COMDAT
; _this$ = ecx

; 24   : 	this->m_btOptionIndex = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 01		 mov	 DWORD PTR [ecx], eax

; 25   : 	this->m_btElementIndex = 0;
; 26   : 	this->m_btItemLevel = 0;
; 27   : 	this->m_btOptionType = 0;
; 28   : 
; 29   : 	for(int i = 0; i < 5;i++)
; 30   : 	{
; 31   : 		this->m_btSocketSlot[i] = 0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00007	88 41 08	 mov	 BYTE PTR [ecx+8], al

; 32   : 	}
; 33   : 
; 34   : 	this->m_iSocketSlotCount = 0;

  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 35   : 	this->m_iItemIndex = 0;

  0000d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 36   : }

  00010	c3		 ret	 0
?ClearData@CSeed@@QAEXXZ ENDP				; CSeed::ClearData
_TEXT	ENDS
PUBLIC	?CheckSphere@CSeed@@QAEEPAVCItem@@@Z		; CSeed::CheckSphere
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Ogtp
;	COMDAT ?CheckSphere@CSeed@@QAEEPAVCItem@@@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
?CheckSphere@CSeed@@QAEEPAVCItem@@@Z PROC		; CSeed::CheckSphere, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 41   : 	if(pItem == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi

; 42   : 	{
; 43   : 		return 0;

  0000c	74 26		 je	 SHORT $LN1@CheckSpher

; 44   : 	}
; 45   : 
; 46   : 	if(pItem->IsItem() == 0)

  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00015	85 c0		 test	 eax, eax

; 47   : 	{
; 48   : 		return 0;

  00017	74 1b		 je	 SHORT $LN1@CheckSpher

; 49   : 	}
; 50   : 
; 51   : 	if(this->m_iItemIndex == pItem->m_Type && this->m_btItemLevel == pItem->m_Level)

  00019	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  0001d	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  00020	75 12		 jne	 SHORT $LN1@CheckSpher
  00022	0f b6 4f 02	 movzx	 ecx, BYTE PTR [edi+2]
  00026	66 3b 4e 08	 cmp	 cx, WORD PTR [esi+8]
  0002a	75 08		 jne	 SHORT $LN1@CheckSpher

; 52   : 	{
; 53   : 		return 1;

  0002c	5f		 pop	 edi
  0002d	b0 01		 mov	 al, 1
  0002f	5e		 pop	 esi

; 57   : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN1@CheckSpher:
  00034	5f		 pop	 edi

; 54   : 	}
; 55   : 	
; 56   : 	return 0;

  00035	32 c0		 xor	 al, al
  00037	5e		 pop	 esi

; 57   : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?CheckSphere@CSeed@@QAEEPAVCItem@@@Z ENDP		; CSeed::CheckSphere
_TEXT	ENDS
PUBLIC	?SetInfo@CSeed@@QAEXEEEEQAEH@Z			; CSeed::SetInfo
; Function compile flags: /Ogtp
;	COMDAT ?SetInfo@CSeed@@QAEXEEEEQAEH@Z
_TEXT	SEGMENT
_OptionIndex$ = 8					; size = 1
_ElementIndex$ = 12					; size = 1
_Level$ = 16						; size = 1
_OptionType$ = 20					; size = 1
_SocketSlot$ = 24					; size = 4
_SocketSlotCount$ = 28					; size = 4
?SetInfo@CSeed@@QAEXEEEEQAEH@Z PROC			; CSeed::SetInfo, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 	this->m_btOptionIndex = OptionIndex;

  00003	8a 45 08	 mov	 al, BYTE PTR _OptionIndex$[ebp]

; 63   : 	this->m_btElementIndex = ElementIndex;

  00006	8a 55 0c	 mov	 dl, BYTE PTR _ElementIndex$[ebp]
  00009	88 01		 mov	 BYTE PTR [ecx], al

; 64   : 	this->m_btItemLevel = Level;

  0000b	8a 45 10	 mov	 al, BYTE PTR _Level$[ebp]
  0000e	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 65   : 	this->m_btOptionType = OptionType;

  00011	8a 45 14	 mov	 al, BYTE PTR _OptionType$[ebp]
  00014	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 66   : 
; 67   : 	for(int i = 0;i < 5;i++)
; 68   : 	{
; 69   : 		this->m_btSocketSlot[i] = SocketSlot[i];

  00017	8b 45 18	 mov	 eax, DWORD PTR _SocketSlot$[ebp]
  0001a	88 51 01	 mov	 BYTE PTR [ecx+1], dl
  0001d	53		 push	 ebx
  0001e	0f b6 18	 movzx	 ebx, BYTE PTR [eax]
  00021	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00024	0f b6 58 01	 movzx	 ebx, BYTE PTR [eax+1]
  00028	88 59 05	 mov	 BYTE PTR [ecx+5], bl
  0002b	0f b6 58 02	 movzx	 ebx, BYTE PTR [eax+2]
  0002f	88 59 06	 mov	 BYTE PTR [ecx+6], bl
  00032	0f b6 58 03	 movzx	 ebx, BYTE PTR [eax+3]
  00036	88 59 07	 mov	 BYTE PTR [ecx+7], bl
  00039	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0003d	88 41 08	 mov	 BYTE PTR [ecx+8], al

; 70   : 	}
; 71   : 
; 72   : 	this->m_iSocketSlotCount = SocketSlotCount;

  00040	8b 45 1c	 mov	 eax, DWORD PTR _SocketSlotCount$[ebp]
  00043	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 73   : 	
; 74   : 	switch(ElementIndex)

  00046	0f b6 c2	 movzx	 eax, dl
  00049	48		 dec	 eax
  0004a	5b		 pop	 ebx
  0004b	83 f8 06	 cmp	 eax, 6
  0004e	77 50		 ja	 SHORT $LN8@SetInfo
  00050	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@SetInfo[eax*4]
$LN7@SetInfo:

; 75   : 	{
; 76   : 	case 1:	this->m_iItemIndex = ITEMGET(12,60);break;

  00057	c7 41 0c 3c 18
	00 00		 mov	 DWORD PTR [ecx+12], 6204 ; 0000183cH

; 83   : 	}
; 84   : }

  0005e	5d		 pop	 ebp
  0005f	c2 18 00	 ret	 24			; 00000018H
$LN6@SetInfo:

; 77   : 	case 2:	this->m_iItemIndex = ITEMGET(12,61);break;

  00062	c7 41 0c 3d 18
	00 00		 mov	 DWORD PTR [ecx+12], 6205 ; 0000183dH

; 83   : 	}
; 84   : }

  00069	5d		 pop	 ebp
  0006a	c2 18 00	 ret	 24			; 00000018H
$LN5@SetInfo:

; 78   : 	case 3:	this->m_iItemIndex = ITEMGET(12,62);break;

  0006d	c7 41 0c 3e 18
	00 00		 mov	 DWORD PTR [ecx+12], 6206 ; 0000183eH

; 83   : 	}
; 84   : }

  00074	5d		 pop	 ebp
  00075	c2 18 00	 ret	 24			; 00000018H
$LN4@SetInfo:

; 79   : 	case 4:	this->m_iItemIndex = ITEMGET(12,63);break;

  00078	c7 41 0c 3f 18
	00 00		 mov	 DWORD PTR [ecx+12], 6207 ; 0000183fH

; 83   : 	}
; 84   : }

  0007f	5d		 pop	 ebp
  00080	c2 18 00	 ret	 24			; 00000018H
$LN3@SetInfo:

; 80   : 	case 5:	this->m_iItemIndex = ITEMGET(12,64);break;

  00083	c7 41 0c 40 18
	00 00		 mov	 DWORD PTR [ecx+12], 6208 ; 00001840H

; 83   : 	}
; 84   : }

  0008a	5d		 pop	 ebp
  0008b	c2 18 00	 ret	 24			; 00000018H
$LN2@SetInfo:

; 81   : 	case 6:	this->m_iItemIndex = ITEMGET(12,65);break;

  0008e	c7 41 0c 41 18
	00 00		 mov	 DWORD PTR [ecx+12], 6209 ; 00001841H

; 83   : 	}
; 84   : }

  00095	5d		 pop	 ebp
  00096	c2 18 00	 ret	 24			; 00000018H
$LN1@SetInfo:

; 82   : 	case 7:	this->m_iItemIndex = ITEMGET(12,66);break; //reserved

  00099	c7 41 0c 42 18
	00 00		 mov	 DWORD PTR [ecx+12], 6210 ; 00001842H
$LN8@SetInfo:

; 83   : 	}
; 84   : }

  000a0	5d		 pop	 ebp
  000a1	c2 18 00	 ret	 24			; 00000018H
$LN23@SetInfo:
  000a4	00 00 00 00	 DD	 $LN7@SetInfo
  000a8	00 00 00 00	 DD	 $LN6@SetInfo
  000ac	00 00 00 00	 DD	 $LN5@SetInfo
  000b0	00 00 00 00	 DD	 $LN4@SetInfo
  000b4	00 00 00 00	 DD	 $LN3@SetInfo
  000b8	00 00 00 00	 DD	 $LN2@SetInfo
  000bc	00 00 00 00	 DD	 $LN1@SetInfo
?SetInfo@CSeed@@QAEXEEEEQAEH@Z ENDP			; CSeed::SetInfo
_TEXT	ENDS
PUBLIC	??0CSphere@@QAE@XZ				; CSphere::CSphere
; Function compile flags: /Ogtp
;	COMDAT ??0CSphere@@QAE@XZ
_TEXT	SEGMENT
??0CSphere@@QAE@XZ PROC					; CSphere::CSphere, COMDAT
; _this$ = ecx

; 92   : {

  00000	8b c1		 mov	 eax, ecx

; 93   : 
; 94   : }

  00002	c3		 ret	 0
??0CSphere@@QAE@XZ ENDP					; CSphere::CSphere
_TEXT	ENDS
PUBLIC	??1CSphere@@QAE@XZ				; CSphere::~CSphere
; Function compile flags: /Ogtp
;	COMDAT ??1CSphere@@QAE@XZ
_TEXT	SEGMENT
??1CSphere@@QAE@XZ PROC					; CSphere::~CSphere, COMDAT
; _this$ = ecx

; 99   : 
; 100  : }

  00000	c3		 ret	 0
??1CSphere@@QAE@XZ ENDP					; CSphere::~CSphere
_TEXT	ENDS
PUBLIC	?ClearData@CSphere@@QAEXXZ			; CSphere::ClearData
; Function compile flags: /Ogtp
;	COMDAT ?ClearData@CSphere@@QAEXXZ
_TEXT	SEGMENT
?ClearData@CSphere@@QAEXXZ PROC				; CSphere::ClearData, COMDAT
; _this$ = ecx

; 105  : 	this->m_btItemLevel	=   0;

  00000	33 c0		 xor	 eax, eax
  00002	88 01		 mov	 BYTE PTR [ecx], al

; 106  : 	this->m_iElementIndex	=	0;

  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 107  : 	this->m_iItemIndex	=	0;

  00007	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 108  : }

  0000a	c3		 ret	 0
?ClearData@CSphere@@QAEXXZ ENDP				; CSphere::ClearData
_TEXT	ENDS
PUBLIC	?SetInfo@CSphere@@QAEXEH@Z			; CSphere::SetInfo
; Function compile flags: /Ogtp
;	COMDAT ?SetInfo@CSphere@@QAEXEH@Z
_TEXT	SEGMENT
_level$ = 8						; size = 1
_index$ = 12						; size = 4
?SetInfo@CSphere@@QAEXEH@Z PROC				; CSphere::SetInfo, COMDAT
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 113  : 	this->m_btItemLevel = level;

  00003	8a 45 08	 mov	 al, BYTE PTR _level$[ebp]

; 114  : 	this->m_iElementIndex = index;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _index$[ebp]
  00009	88 01		 mov	 BYTE PTR [ecx], al

; 115  : 
; 116  : 	switch(level)

  0000b	0f b6 c0	 movzx	 eax, al
  0000e	48		 dec	 eax
  0000f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00012	83 f8 04	 cmp	 eax, 4
  00015	77 3a		 ja	 SHORT $LN6@SetInfo@2
  00017	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@SetInfo@2[eax*4]
$LN5@SetInfo@2:

; 117  : 	{
; 118  : 	case 1:this->m_iItemIndex = ITEMGET(12,70);break;

  0001e	c7 41 08 46 18
	00 00		 mov	 DWORD PTR [ecx+8], 6214	; 00001846H

; 123  : 	}
; 124  : }

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
$LN4@SetInfo@2:

; 119  : 	case 2:this->m_iItemIndex = ITEMGET(12,71);break;

  00029	c7 41 08 47 18
	00 00		 mov	 DWORD PTR [ecx+8], 6215	; 00001847H

; 123  : 	}
; 124  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN3@SetInfo@2:

; 120  : 	case 3:this->m_iItemIndex = ITEMGET(12,72);break;

  00034	c7 41 08 48 18
	00 00		 mov	 DWORD PTR [ecx+8], 6216	; 00001848H

; 123  : 	}
; 124  : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN2@SetInfo@2:

; 121  : 	case 4:this->m_iItemIndex = ITEMGET(12,73);break;

  0003f	c7 41 08 49 18
	00 00		 mov	 DWORD PTR [ecx+8], 6217	; 00001849H

; 123  : 	}
; 124  : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN1@SetInfo@2:

; 122  : 	case 5:this->m_iItemIndex = ITEMGET(12,74);break;

  0004a	c7 41 08 4a 18
	00 00		 mov	 DWORD PTR [ecx+8], 6218	; 0000184aH
$LN6@SetInfo@2:

; 123  : 	}
; 124  : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
  00055	8d 49 00	 npad	 3
$LN10@SetInfo@2:
  00058	00 00 00 00	 DD	 $LN5@SetInfo@2
  0005c	00 00 00 00	 DD	 $LN4@SetInfo@2
  00060	00 00 00 00	 DD	 $LN3@SetInfo@2
  00064	00 00 00 00	 DD	 $LN2@SetInfo@2
  00068	00 00 00 00	 DD	 $LN1@SetInfo@2
?SetInfo@CSphere@@QAEXEH@Z ENDP				; CSphere::SetInfo
_TEXT	ENDS
PUBLIC	??1CSeedSphere@@QAE@XZ				; CSeedSphere::~CSeedSphere
; Function compile flags: /Ogtp
;	COMDAT ??1CSeedSphere@@QAE@XZ
_TEXT	SEGMENT
??1CSeedSphere@@QAE@XZ PROC				; CSeedSphere::~CSeedSphere, COMDAT
; _this$ = ecx

; 139  : 
; 140  : }

  00000	c3		 ret	 0
??1CSeedSphere@@QAE@XZ ENDP				; CSeedSphere::~CSeedSphere
_TEXT	ENDS
PUBLIC	?ClearData@CSeedSphere@@QAEXXZ			; CSeedSphere::ClearData
; Function compile flags: /Ogtp
;	COMDAT ?ClearData@CSeedSphere@@QAEXXZ
_TEXT	SEGMENT
?ClearData@CSeedSphere@@QAEXXZ PROC			; CSeedSphere::ClearData, COMDAT
; _this$ = ecx

; 145  : 	this->m_btItemByteOption	= 0; // 0

  00000	33 c0		 xor	 eax, eax
  00002	66 89 01	 mov	 WORD PTR [ecx], ax

; 146  : 	this->m_btOptionIndex	= 0; // 1
; 147  : 	this->m_btElementIndex	= 0; // 2

  00005	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 148  : 	this->m_btItemLevel	= 0; // 8

  00008	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 149  : 	this->m_btOptionType	= 0; // 9
; 150  : 	this->m_wSocketSlot  = 0; // A
; 151  : 	this->m_iItemIndex   = 0;  // 4

  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 152  : }

  0000e	c3		 ret	 0
?ClearData@CSeedSphere@@QAEXXZ ENDP			; CSeedSphere::ClearData
_TEXT	ENDS
PUBLIC	?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z		; CSeedSphere::SetInfo
; Function compile flags: /Ogtp
;	COMDAT ?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z
_TEXT	SEGMENT
_lpSeed$ = 8						; size = 4
_slot_count$ = 12					; size = 1
?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z PROC		; CSeedSphere::SetInfo, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 157  : 	if(lpSeed == NULL || !slot_count)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpSeed$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 e6 00 00
	00		 je	 $LN11@SetInfo@3
  0000f	8a 55 0c	 mov	 dl, BYTE PTR _slot_count$[ebp]
  00012	84 d2		 test	 dl, dl
  00014	0f 84 db 00 00
	00		 je	 $LN11@SetInfo@3

; 160  : 	}
; 161  : 	
; 162  : 	this->m_btItemByteOption	= slot_count * 50 + lpSeed->m_btOptionIndex;

  0001a	53		 push	 ebx
  0001b	8a c2		 mov	 al, dl
  0001d	b3 32		 mov	 bl, 50			; 00000032H
  0001f	f6 eb		 imul	 bl
  00021	02 06		 add	 al, BYTE PTR [esi]
  00023	5b		 pop	 ebx
  00024	88 01		 mov	 BYTE PTR [ecx], al

; 163  : 	this->m_btOptionIndex	= lpSeed->m_btOptionIndex;

  00026	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00029	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 164  : 
; 165  : 	this->m_btElementIndex	= lpSeed->m_btElementIndex;

  0002c	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00030	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 166  : 	
; 167  : 	this->m_btItemLevel	= lpSeed->m_btItemLevel;

  00033	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  00037	88 41 08	 mov	 BYTE PTR [ecx+8], al

; 168  : 	
; 169  : 	this->m_btOptionType	= lpSeed->m_btOptionType;

  0003a	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]

; 170  : 	
; 171  : 	this->m_btSocketSlotCount	= slot_count;

  0003e	88 51 0c	 mov	 BYTE PTR [ecx+12], dl

; 172  : 	
; 173  : 	this->m_wSocketSlot  = lpSeed->m_btSocketSlot[slot_count-1];

  00041	0f b6 d2	 movzx	 edx, dl
  00044	88 41 09	 mov	 BYTE PTR [ecx+9], al
  00047	0f b6 44 32 03	 movzx	 eax, BYTE PTR [edx+esi+3]
  0004c	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 174  : 
; 175  : 	switch(lpSeed->m_btElementIndex)

  00050	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00054	48		 dec	 eax
  00055	83 f8 06	 cmp	 eax, 6
  00058	0f 87 97 00 00
	00		 ja	 $LN11@SetInfo@3
  0005e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN15@SetInfo@3[eax*4]
$LN8@SetInfo@3:

; 183  : 	case 7:								break;
; 184  : 	default:							return 0;
; 185  : 	}
; 186  : 
; 187  : 	this->m_iItemIndex += (this->m_btSocketSlotCount - 1) * 6;

  00065	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  00068	8d 44 12 fa	 lea	 eax, DWORD PTR [edx+edx-6]
  0006c	c7 41 04 64 18
	00 00		 mov	 DWORD PTR [ecx+4], 6244	; 00001864H
  00073	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 188  : 
; 189  : 	return 1;

  00076	b0 01		 mov	 al, 1
  00078	5e		 pop	 esi

; 190  : }

  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
$LN7@SetInfo@3:

; 183  : 	case 7:								break;
; 184  : 	default:							return 0;
; 185  : 	}
; 186  : 
; 187  : 	this->m_iItemIndex += (this->m_btSocketSlotCount - 1) * 6;

  0007d	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  00080	8d 44 12 fa	 lea	 eax, DWORD PTR [edx+edx-6]
  00084	c7 41 04 65 18
	00 00		 mov	 DWORD PTR [ecx+4], 6245	; 00001865H
  0008b	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 188  : 
; 189  : 	return 1;

  0008e	b0 01		 mov	 al, 1
  00090	5e		 pop	 esi

; 190  : }

  00091	5d		 pop	 ebp
  00092	c2 08 00	 ret	 8
$LN6@SetInfo@3:

; 183  : 	case 7:								break;
; 184  : 	default:							return 0;
; 185  : 	}
; 186  : 
; 187  : 	this->m_iItemIndex += (this->m_btSocketSlotCount - 1) * 6;

  00095	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  00098	8d 44 12 fa	 lea	 eax, DWORD PTR [edx+edx-6]
  0009c	c7 41 04 66 18
	00 00		 mov	 DWORD PTR [ecx+4], 6246	; 00001866H
  000a3	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 188  : 
; 189  : 	return 1;

  000a6	b0 01		 mov	 al, 1
  000a8	5e		 pop	 esi

; 190  : }

  000a9	5d		 pop	 ebp
  000aa	c2 08 00	 ret	 8
$LN5@SetInfo@3:

; 183  : 	case 7:								break;
; 184  : 	default:							return 0;
; 185  : 	}
; 186  : 
; 187  : 	this->m_iItemIndex += (this->m_btSocketSlotCount - 1) * 6;

  000ad	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  000b0	8d 44 12 fa	 lea	 eax, DWORD PTR [edx+edx-6]
  000b4	c7 41 04 67 18
	00 00		 mov	 DWORD PTR [ecx+4], 6247	; 00001867H
  000bb	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 188  : 
; 189  : 	return 1;

  000be	b0 01		 mov	 al, 1
  000c0	5e		 pop	 esi

; 190  : }

  000c1	5d		 pop	 ebp
  000c2	c2 08 00	 ret	 8
$LN4@SetInfo@3:

; 183  : 	case 7:								break;
; 184  : 	default:							return 0;
; 185  : 	}
; 186  : 
; 187  : 	this->m_iItemIndex += (this->m_btSocketSlotCount - 1) * 6;

  000c5	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  000c8	8d 44 12 fa	 lea	 eax, DWORD PTR [edx+edx-6]
  000cc	c7 41 04 68 18
	00 00		 mov	 DWORD PTR [ecx+4], 6248	; 00001868H
  000d3	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 188  : 
; 189  : 	return 1;

  000d6	b0 01		 mov	 al, 1
  000d8	5e		 pop	 esi

; 190  : }

  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
$LN3@SetInfo@3:

; 176  : 	{
; 177  : 	case 1:this->m_iItemIndex = ITEMGET(12,100);	break;
; 178  : 	case 2:this->m_iItemIndex = ITEMGET(12,101);	break;
; 179  : 	case 3:this->m_iItemIndex = ITEMGET(12,102);	break;
; 180  : 	case 4:this->m_iItemIndex = ITEMGET(12,103);	break;
; 181  : 	case 5:this->m_iItemIndex = ITEMGET(12,104);	break;
; 182  : 	case 6:this->m_iItemIndex = ITEMGET(12,105);	break;

  000dd	c7 41 04 69 18
	00 00		 mov	 DWORD PTR [ecx+4], 6249	; 00001869H
$LN2@SetInfo@3:

; 183  : 	case 7:								break;
; 184  : 	default:							return 0;
; 185  : 	}
; 186  : 
; 187  : 	this->m_iItemIndex += (this->m_btSocketSlotCount - 1) * 6;

  000e4	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  000e7	8d 44 12 fa	 lea	 eax, DWORD PTR [edx+edx-6]
  000eb	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 188  : 
; 189  : 	return 1;

  000ee	b0 01		 mov	 al, 1
  000f0	5e		 pop	 esi

; 190  : }

  000f1	5d		 pop	 ebp
  000f2	c2 08 00	 ret	 8
$LN11@SetInfo@3:

; 158  : 	{
; 159  : 		return 0;

  000f5	32 c0		 xor	 al, al
  000f7	5e		 pop	 esi

; 190  : }

  000f8	5d		 pop	 ebp
  000f9	c2 08 00	 ret	 8
$LN15@SetInfo@3:
  000fc	00 00 00 00	 DD	 $LN8@SetInfo@3
  00100	00 00 00 00	 DD	 $LN7@SetInfo@3
  00104	00 00 00 00	 DD	 $LN6@SetInfo@3
  00108	00 00 00 00	 DD	 $LN5@SetInfo@3
  0010c	00 00 00 00	 DD	 $LN4@SetInfo@3
  00110	00 00 00 00	 DD	 $LN3@SetInfo@3
  00114	00 00 00 00	 DD	 $LN2@SetInfo@3
?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z ENDP		; CSeedSphere::SetInfo
_TEXT	ENDS
PUBLIC	?IncSocketSlot@CSeedSphere@@QAEXE@Z		; CSeedSphere::IncSocketSlot
; Function compile flags: /Ogtp
;	COMDAT ?IncSocketSlot@CSeedSphere@@QAEXE@Z
_TEXT	SEGMENT
_value$ = 8						; size = 1
?IncSocketSlot@CSeedSphere@@QAEXE@Z PROC		; CSeedSphere::IncSocketSlot, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 195  : 	if(this->m_wSocketSlot + value > (WORD)-2) //0xFE 

  00003	8a 55 08	 mov	 dl, BYTE PTR _value$[ebp]
  00006	0f b7 41 0a	 movzx	 eax, WORD PTR [ecx+10]
  0000a	56		 push	 esi
  0000b	0f b6 f2	 movzx	 esi, dl
  0000e	57		 push	 edi
  0000f	03 f0		 add	 esi, eax
  00011	5f		 pop	 edi
  00012	81 fe fe ff 00
	00		 cmp	 esi, 65534		; 0000fffeH
  00018	5e		 pop	 esi
  00019	7f 0a		 jg	 SHORT $LN2@IncSocketS

; 196  : 	{
; 197  : 		return;
; 198  : 	}
; 199  : 
; 200  : 	this->m_wSocketSlot += value;

  0001b	0f b6 d2	 movzx	 edx, dl
  0001e	66 03 d0	 add	 dx, ax
  00021	66 89 51 0a	 mov	 WORD PTR [ecx+10], dx
$LN2@IncSocketS:

; 201  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?IncSocketSlot@CSeedSphere@@QAEXE@Z ENDP		; CSeedSphere::IncSocketSlot
_TEXT	ENDS
PUBLIC	??0CSeed@@QAE@XZ				; CSeed::CSeed
; Function compile flags: /Ogtp
;	COMDAT ??0CSeed@@QAE@XZ
_TEXT	SEGMENT
??0CSeed@@QAE@XZ PROC					; CSeed::CSeed, COMDAT
; _this$ = ecx

; 12   : 	this->ClearData();

  00000	e8 00 00 00 00	 call	 ?ClearData@CSeed@@QAEXXZ ; CSeed::ClearData

; 13   : }

  00005	8b c1		 mov	 eax, ecx
  00007	c3		 ret	 0
??0CSeed@@QAE@XZ ENDP					; CSeed::CSeed
_TEXT	ENDS
PUBLIC	??0CSeedSphere@@QAE@XZ				; CSeedSphere::CSeedSphere
; Function compile flags: /Ogtp
;	COMDAT ??0CSeedSphere@@QAE@XZ
_TEXT	SEGMENT
??0CSeedSphere@@QAE@XZ PROC				; CSeedSphere::CSeedSphere, COMDAT
; _this$ = ecx

; 133  : 	this->ClearData();

  00000	e8 00 00 00 00	 call	 ?ClearData@CSeedSphere@@QAEXXZ ; CSeedSphere::ClearData

; 134  : }

  00005	8b c1		 mov	 eax, ecx
  00007	c3		 ret	 0
??0CSeedSphere@@QAE@XZ ENDP				; CSeedSphere::CSeedSphere
_TEXT	ENDS
END
