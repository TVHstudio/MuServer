; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\SocketOption.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_iSeedZttractMoney@@3HA			; g_iSeedZttractMoney
PUBLIC	?g_iSeedSphereCompositeMoney@@3HA		; g_iSeedSphereCompositeMoney
PUBLIC	?g_iSeedSphereSetMoney@@3HA			; g_iSeedSphereSetMoney
PUBLIC	?g_iSeedSphereRemoveMoney@@3HA			; g_iSeedSphereRemoveMoney
PUBLIC	?g_iShopBuySocketItemSlotCount@@3HA		; g_iShopBuySocketItemSlotCount
_BSS	SEGMENT
?g_iSeedZttractMoney@@3HA DD 01H DUP (?)		; g_iSeedZttractMoney
?g_iSeedSphereCompositeMoney@@3HA DD 01H DUP (?)	; g_iSeedSphereCompositeMoney
?g_iSeedSphereSetMoney@@3HA DD 01H DUP (?)		; g_iSeedSphereSetMoney
?g_iSeedSphereRemoveMoney@@3HA DD 01H DUP (?)		; g_iSeedSphereRemoveMoney
?g_iShopBuySocketItemSlotCount@@3HA DD 01H DUP (?)	; g_iShopBuySocketItemSlotCount
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CSocketOption@@6B@				; CSocketOption::`vftable'
PUBLIC	??0CSocketOption@@QAE@XZ			; CSocketOption::CSocketOption
PUBLIC	??_R4CSocketOption@@6B@				; CSocketOption::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSocketOption@@@8			; CSocketOption `RTTI Type Descriptor'
PUBLIC	??_R3CSocketOption@@8				; CSocketOption::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSocketOption@@8				; CSocketOption::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSocketOption@@8			; CSocketOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??1TRandomPoolMgr@@UAE@XZ:PROC			; TRandomPoolMgr::~TRandomPoolMgr
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??0TRandomPoolMgr@@QAE@XZ:PROC			; TRandomPoolMgr::TRandomPoolMgr
EXTRN	??0CSphere@@QAE@XZ:PROC				; CSphere::CSphere
EXTRN	??1CSphere@@QAE@XZ:PROC				; CSphere::~CSphere
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0CSeed@@QAE@XZ:PROC				; CSeed::CSeed
EXTRN	??1CSeed@@QAE@XZ:PROC				; CSeed::~CSeed
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECSocketOption@@UAEPAXI@Z:PROC		; CSocketOption::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CSocketOption@@8
; File e:\work\tranet_version\gs\gameserver\socketoption.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CSocketOption@@8 DD FLAT:??_R0?AVCSocketOption@@@8 ; CSocketOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSocketOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CSocketOption@@8
rdata$r	SEGMENT
??_R2CSocketOption@@8 DD FLAT:??_R1A@?0A@EA@CSocketOption@@8 ; CSocketOption::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSocketOption@@8
rdata$r	SEGMENT
??_R3CSocketOption@@8 DD 00H				; CSocketOption::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSocketOption@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSocketOption@@@8
_DATA	SEGMENT
??_R0?AVCSocketOption@@@8 DD FLAT:??_7type_info@@6B@	; CSocketOption `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSocketOption@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSocketOption@@6B@
rdata$r	SEGMENT
??_R4CSocketOption@@6B@ DD 00H				; CSocketOption::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSocketOption@@@8
	DD	FLAT:??_R3CSocketOption@@8
rdata$r	ENDS
;	COMDAT ??_7CSocketOption@@6B@
CONST	SEGMENT
??_7CSocketOption@@6B@ DD FLAT:??_R4CSocketOption@@6B@	; CSocketOption::`vftable'
	DD	FLAT:??_ECSocketOption@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSocketOption@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSocketOption@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSocketOption@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CSocketOption@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CSocketOption@@QAE@XZ$3
__ehfuncinfo$??0CSocketOption@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CSocketOption@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0CSocketOption@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSocketOption@@QAE@XZ PROC				; CSocketOption::CSocketOption, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSocketOption@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	68 00 00 00 00	 push	 OFFSET ??1CSeed@@QAE@XZ	; CSeed::~CSeed
  0002e	68 00 00 00 00	 push	 OFFSET ??0CSeed@@QAE@XZ	; CSeed::CSeed
  00033	6a 32		 push	 50			; 00000032H
  00035	6a 14		 push	 20			; 00000014H
  00037	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0003a	50		 push	 eax
  0003b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSocketOption@@6B@
  00041	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  00046	68 00 00 00 00	 push	 OFFSET ??1CSphere@@QAE@XZ ; CSphere::~CSphere
  0004b	68 00 00 00 00	 push	 OFFSET ??0CSphere@@QAE@XZ ; CSphere::CSphere
  00050	6a 05		 push	 5
  00052	6a 0c		 push	 12			; 0000000cH
  00054	8d 8e ec 03 00
	00		 lea	 ecx, DWORD PTR [esi+1004]
  0005a	51		 push	 ecx
  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00062	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  00067	8d 8e c0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1216]
  0006d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00071	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00076	8d 8e d8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1240]
  0007c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00080	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00085	8d 8e f0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1264]
  0008b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0008f	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr

; 30   : 
; 31   : }

  00094	8b c6		 mov	 eax, esi
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5e		 pop	 esi
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSocketOption@@QAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CSeed@@QAE@XZ	; CSeed::~CSeed
  00005	6a 32		 push	 50			; 00000032H
  00007	6a 14		 push	 20			; 00000014H
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00015	c3		 ret	 0
__unwindfunclet$??0CSocketOption@@QAE@XZ$1:
  00016	68 00 00 00 00	 push	 OFFSET ??1CSphere@@QAE@XZ ; CSphere::~CSphere
  0001b	6a 05		 push	 5
  0001d	6a 0c		 push	 12			; 0000000cH
  0001f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00022	05 ec 03 00 00	 add	 eax, 1004		; 000003ecH
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0002d	c3		 ret	 0
__unwindfunclet$??0CSocketOption@@QAE@XZ$2:
  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  00037	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??0CSocketOption@@QAE@XZ$3:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  00045	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??0CSocketOption@@QAE@XZ:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSocketOption@@QAE@XZ
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSocketOption@@QAE@XZ ENDP				; CSocketOption::CSocketOption
PUBLIC	??1CSocketOption@@UAE@XZ			; CSocketOption::~CSocketOption
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CSocketOption@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSocketOption@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CSocketOption@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CSocketOption@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CSocketOption@@UAE@XZ$3
__ehfuncinfo$??1CSocketOption@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CSocketOption@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1CSocketOption@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSocketOption@@UAE@XZ PROC				; CSocketOption::~CSocketOption, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSocketOption@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSocketOption@@6B@

; 35   : 
; 36   : }

  0002f	8d 8e f0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1264]
  00035	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0003c	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  00041	8d 8e d8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1240]
  00047	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0004b	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  00050	8d 8e c0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1216]
  00056	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005a	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  0005f	68 00 00 00 00	 push	 OFFSET ??1CSphere@@QAE@XZ ; CSphere::~CSphere
  00064	6a 05		 push	 5
  00066	6a 0c		 push	 12			; 0000000cH
  00068	8d 86 ec 03 00
	00		 lea	 eax, DWORD PTR [esi+1004]
  0006e	50		 push	 eax
  0006f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00073	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00078	68 00 00 00 00	 push	 OFFSET ??1CSeed@@QAE@XZ	; CSeed::~CSeed
  0007d	6a 32		 push	 50			; 00000032H
  0007f	6a 14		 push	 20			; 00000014H
  00081	83 c6 04	 add	 esi, 4
  00084	56		 push	 esi
  00085	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008c	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CSocketOption@@UAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CSeed@@QAE@XZ	; CSeed::~CSeed
  00005	6a 32		 push	 50			; 00000032H
  00007	6a 14		 push	 20			; 00000014H
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00015	c3		 ret	 0
__unwindfunclet$??1CSocketOption@@UAE@XZ$1:
  00016	68 00 00 00 00	 push	 OFFSET ??1CSphere@@QAE@XZ ; CSphere::~CSphere
  0001b	6a 05		 push	 5
  0001d	6a 0c		 push	 12			; 0000000cH
  0001f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00022	05 ec 03 00 00	 add	 eax, 1004		; 000003ecH
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0002d	c3		 ret	 0
__unwindfunclet$??1CSocketOption@@UAE@XZ$2:
  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  00037	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??1CSocketOption@@UAE@XZ$3:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  00045	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??1CSocketOption@@UAE@XZ:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSocketOption@@UAE@XZ
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSocketOption@@UAE@XZ ENDP				; CSocketOption::~CSocketOption
PUBLIC	?Init@CSocketOption@@QAEXXZ			; CSocketOption::Init
EXTRN	?InitPool@TRandomPoolMgr@@QAEXXZ:PROC		; TRandomPoolMgr::InitPool
EXTRN	?ClearData@CSocketSphere@@QAEXXZ:PROC		; CSocketSphere::ClearData
EXTRN	?ClearData@CSphere@@QAEXXZ:PROC			; CSphere::ClearData
EXTRN	?ClearData@CSeed@@QAEXXZ:PROC			; CSeed::ClearData
; Function compile flags: /Ogtp
;	COMDAT ?Init@CSocketOption@@QAEXXZ
_TEXT	SEGMENT
?Init@CSocketOption@@QAEXXZ PROC			; CSocketOption::Init, COMDAT
; _this$ = ecx

; 39   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 40   : 	int i = 0;
; 41   : 
; 42   : 	for(i = 0; i < 50;i++)

  00005	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00008	bb 32 00 00 00	 mov	 ebx, 50			; 00000032H
  0000d	8d 49 00	 npad	 3
$LL15@Init:

; 43   : 	{
; 44   : 		this->SocketSeed[i].ClearData();

  00010	8b cf		 mov	 ecx, edi
  00012	e8 00 00 00 00	 call	 ?ClearData@CSeed@@QAEXXZ ; CSeed::ClearData
  00017	83 c7 14	 add	 edi, 20			; 00000014H
  0001a	4b		 dec	 ebx
  0001b	75 f3		 jne	 SHORT $LL15@Init

; 45   : 	}
; 46   : 
; 47   : 	for(i = 0;i < MAX_SOCKET_OPTION;i++)

  0001d	8d be ec 03 00
	00		 lea	 edi, DWORD PTR [esi+1004]
  00023	bb 05 00 00 00	 mov	 ebx, 5
$LL12@Init:

; 48   : 	{	
; 49   : 		this->SocketSphere[i].ClearData();

  00028	8b cf		 mov	 ecx, edi
  0002a	e8 00 00 00 00	 call	 ?ClearData@CSphere@@QAEXXZ ; CSphere::ClearData
  0002f	83 c7 0c	 add	 edi, 12			; 0000000cH
  00032	4b		 dec	 ebx
  00033	75 f3		 jne	 SHORT $LL12@Init

; 50   : 	}
; 51   : 
; 52   : 	for(i = 0;i < 6;i++) //sphere element

  00035	8d be 28 04 00
	00		 lea	 edi, DWORD PTR [esi+1064]
  0003b	bb 06 00 00 00	 mov	 ebx, 6
$LL9@Init:

; 53   : 	{
; 54   : 		this->SocketSpear[i].ClearData();

  00040	8b cf		 mov	 ecx, edi
  00042	e8 00 00 00 00	 call	 ?ClearData@CSocketSphere@@QAEXXZ ; CSocketSphere::ClearData
  00047	83 c7 14	 add	 edi, 20			; 00000014H
  0004a	4b		 dec	 ebx
  0004b	75 f3		 jne	 SHORT $LL9@Init

; 55   : 	}
; 56   : 
; 57   : 	this->SocketSlotRandomPool.InitPool();

  0004d	8d 8e d8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1240]
  00053	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 58   : 	this->SocketRandomPool.InitPool();

  00058	8d 8e c0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1216]
  0005e	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 59   : 
; 60   : 	for(i = 0;i < MAX_SOCKET_OPTION;i++)
; 61   : 	{
; 62   : 		this->iSphereDropRate[i] = 0;

  00063	33 c9		 xor	 ecx, ecx
  00065	89 8e 34 05 00
	00		 mov	 DWORD PTR [esi+1332], ecx

; 63   : 		this->iSphereDropLevel[i] = 0;

  0006b	89 8e 48 05 00
	00		 mov	 DWORD PTR [esi+1352], ecx
  00071	89 8e 38 05 00
	00		 mov	 DWORD PTR [esi+1336], ecx
  00077	89 8e 4c 05 00
	00		 mov	 DWORD PTR [esi+1356], ecx
  0007d	89 8e 3c 05 00
	00		 mov	 DWORD PTR [esi+1340], ecx
  00083	89 8e 50 05 00
	00		 mov	 DWORD PTR [esi+1360], ecx
  00089	89 8e 40 05 00
	00		 mov	 DWORD PTR [esi+1344], ecx
  0008f	89 8e 54 05 00
	00		 mov	 DWORD PTR [esi+1364], ecx
  00095	89 8e 44 05 00
	00		 mov	 DWORD PTR [esi+1348], ecx
  0009b	89 8e 58 05 00
	00		 mov	 DWORD PTR [esi+1368], ecx
  000a1	8d 86 5e 05 00
	00		 lea	 eax, DWORD PTR [esi+1374]
  000a7	ba 96 00 00 00	 mov	 edx, 150		; 00000096H
  000ac	8d 64 24 00	 npad	 4
$LL3@Init:

; 64   : 	}
; 65   : 
; 66   : 	for( i = 0; i < MAX_SOCKET_ITEM; i++ )
; 67   : 	{
; 68   : 		this->m_SocketItemList[i].ItemID		= -1;

  000b0	83 cf ff	 or	 edi, -1
  000b3	66 89 78 fe	 mov	 WORD PTR [eax-2], di

; 69   : 		this->m_SocketItemList[i].ItemIndex	= -1;

  000b7	0b ff		 or	 edi, edi
  000b9	66 89 38	 mov	 WORD PTR [eax], di
  000bc	83 c0 04	 add	 eax, 4
  000bf	4a		 dec	 edx
  000c0	75 ee		 jne	 SHORT $LL3@Init

; 70   : 	}
; 71   : 	// ----
; 72   : 	this->m_SocketItemCount = 0;

  000c2	5f		 pop	 edi
  000c3	89 8e b4 07 00
	00		 mov	 DWORD PTR [esi+1972], ecx
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx

; 73   : }

  000cb	c3		 ret	 0
?Init@CSocketOption@@QAEXXZ ENDP			; CSocketOption::Init
_TEXT	ENDS
PUBLIC	??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@	; `string'
PUBLIC	??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@	; `string'
PUBLIC	??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@	; `string'
PUBLIC	??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@	; `string'
PUBLIC	??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@	; `string'
PUBLIC	??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@	; `string'
PUBLIC	??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@	; `string'
PUBLIC	??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@	; `string'
PUBLIC	??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@	; `string'
PUBLIC	??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@	; `string'
PUBLIC	??_C@_0N@PNENKPIH@SphereDropOn?$AA@		; `string'
PUBLIC	??_C@_0BL@PGIPDLFD@ShopBuySocketItemSlotCount?$AA@ ; `string'
PUBLIC	??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@	; `string'
PUBLIC	??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@	; `string'
PUBLIC	??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@ ; `string'
PUBLIC	??_C@_0BB@OOHEOJGB@SeedZttractMoney?$AA@	; `string'
PUBLIC	??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@	; `string'
PUBLIC	??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@	; `string'
PUBLIC	??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@	; `string'
PUBLIC	??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@	; `string'
PUBLIC	??_C@_0P@EMJDPFDH@GameServerInfo?$AA@		; `string'
PUBLIC	??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@	; `string'
PUBLIC	??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@	; `string'
PUBLIC	?_InitOption@CSocketOption@@QAEXXZ		; CSocketOption::_InitOption
EXTRN	?AddValue@TRandomPoolMgr@@QAE_NHH@Z:PROC	; TRandomPoolMgr::AddValue
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@
CONST	SEGMENT
??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@ DB 'SphereDropLevel_Lv5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@
CONST	SEGMENT
??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@ DB 'SphereDropLevel_Lv4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@
CONST	SEGMENT
??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@ DB 'SphereDropLevel_Lv3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@
CONST	SEGMENT
??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@ DB 'SphereDropLevel_Lv2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@
CONST	SEGMENT
??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@ DB 'SphereDropLevel_Lv1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@
CONST	SEGMENT
??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@ DB 'SphereDropRate_Lv5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@
CONST	SEGMENT
??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@ DB 'SphereDropRate_Lv4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@
CONST	SEGMENT
??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@ DB 'SphereDropRate_Lv3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@
CONST	SEGMENT
??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@ DB 'SphereDropRate_Lv2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@
CONST	SEGMENT
??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@ DB 'SphereDropRate_Lv1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PNENKPIH@SphereDropOn?$AA@
CONST	SEGMENT
??_C@_0N@PNENKPIH@SphereDropOn?$AA@ DB 'SphereDropOn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PGIPDLFD@ShopBuySocketItemSlotCount?$AA@
CONST	SEGMENT
??_C@_0BL@PGIPDLFD@ShopBuySocketItemSlotCount?$AA@ DB 'ShopBuySocketItemS'
	DB	'lotCount', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@
CONST	SEGMENT
??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@ DB 'SeedSphereRemoveMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@
CONST	SEGMENT
??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@ DB 'SeedSphereSetMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@
CONST	SEGMENT
??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@ DB 'SeedSphereCompositeM'
	DB	'oney', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OOHEOJGB@SeedZttractMoney?$AA@
CONST	SEGMENT
??_C@_0BB@OOHEOJGB@SeedZttractMoney?$AA@ DB 'SeedZttractMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSocke'
	DB	'tSlotCountRate3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@
CONST	SEGMENT
??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@ DB 'SocketSlotCountRate5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@
CONST	SEGMENT
??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@ DB 'SocketSlotCountRate4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@
CONST	SEGMENT
??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@ DB 'SocketSlotCountRate3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@
CONST	SEGMENT
??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@ DB 'SocketSlotCountRate2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
CONST	SEGMENT
??_C@_0P@EMJDPFDH@GameServerInfo?$AA@ DB 'GameServerInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@
CONST	SEGMENT
??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@ DB 'SocketSlotCountRate1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
CONST	SEGMENT
??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@ DB 'commonserver.cfg', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_InitOption@CSocketOption@@QAEXXZ
_TEXT	SEGMENT
?_InitOption@CSocketOption@@QAEXXZ PROC			; CSocketOption::_InitOption, COMDAT
; _this$ = ecx

; 273  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 274  : 	this->SocketSlotRandomPool.InitPool();

  00005	8d 8e d8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1240]
  0000b	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 275  : 	this->TwoHandWeaponSocketSlotRandomPool.InitPool();

  00010	8d 8e f0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1264]
  00016	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 276  : 
; 277  : 	this->iSocketSlotCountRate[SOCKET_SLOT_1]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate1",0,gDirPath.GetNewPath("commonserver.cfg"));

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00025	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0002a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  00030	50		 push	 eax
  00031	6a 00		 push	 0
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0003d	ff d7		 call	 edi

; 278  : 	this->iSocketSlotCountRate[SOCKET_SLOT_2]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate2",0,gDirPath.GetNewPath("commonserver.cfg"));

  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00049	89 86 08 05 00
	00		 mov	 DWORD PTR [esi+1288], eax
  0004f	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00054	50		 push	 eax
  00055	6a 00		 push	 0
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00061	ff d7		 call	 edi

; 279  : 	this->iSocketSlotCountRate[SOCKET_SLOT_3]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate3",0,gDirPath.GetNewPath("commonserver.cfg"));

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0006d	89 86 0c 05 00
	00		 mov	 DWORD PTR [esi+1292], eax
  00073	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00078	50		 push	 eax
  00079	6a 00		 push	 0
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00085	ff d7		 call	 edi

; 280  : 	this->iSocketSlotCountRate[SOCKET_SLOT_4]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate4",0,gDirPath.GetNewPath("commonserver.cfg"));

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0008c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00091	89 86 10 05 00
	00		 mov	 DWORD PTR [esi+1296], eax
  00097	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0009c	50		 push	 eax
  0009d	6a 00		 push	 0
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000a9	ff d7		 call	 edi

; 281  : 	this->iSocketSlotCountRate[SOCKET_SLOT_5]	= GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate5",0,gDirPath.GetNewPath("commonserver.cfg"));

  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  000b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000b5	89 86 14 05 00
	00		 mov	 DWORD PTR [esi+1300], eax
  000bb	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000c0	50		 push	 eax
  000c1	6a 00		 push	 0
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000cd	ff d7		 call	 edi

; 282  : 
; 283  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_1]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate1",0,gDirPath.GetNewPath("commonserver.cfg"));

  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  000d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000d9	89 86 18 05 00
	00		 mov	 DWORD PTR [esi+1304], eax
  000df	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000e4	50		 push	 eax
  000e5	6a 00		 push	 0
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000f1	ff d7		 call	 edi

; 284  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_2]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate2",0,gDirPath.GetNewPath("commonserver.cfg"));

  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  000f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000fd	89 86 1c 05 00
	00		 mov	 DWORD PTR [esi+1308], eax
  00103	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00108	50		 push	 eax
  00109	6a 00		 push	 0
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00115	ff d7		 call	 edi

; 285  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_3]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate3",0,gDirPath.GetNewPath("commonserver.cfg"));

  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0011c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00121	89 86 20 05 00
	00		 mov	 DWORD PTR [esi+1312], eax
  00127	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0012c	50		 push	 eax
  0012d	6a 00		 push	 0
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00139	ff d7		 call	 edi
  0013b	89 86 24 05 00
	00		 mov	 DWORD PTR [esi+1316], eax

; 286  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_4]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate4",0,gDirPath.GetNewPath("commonserver.cfg"));

  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00146	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0014b	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00150	50		 push	 eax
  00151	6a 00		 push	 0
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0015d	ff d7		 call	 edi

; 287  : 	this->iTwoHandSlotCountRate[SOCKET_SLOT_5]	= GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate5",0,gDirPath.GetNewPath("commonserver.cfg"));

  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00164	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00169	89 86 28 05 00
	00		 mov	 DWORD PTR [esi+1320], eax
  0016f	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00174	50		 push	 eax
  00175	6a 00		 push	 0
  00177	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@
  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00181	ff d7		 call	 edi

; 288  : 
; 289  : 	g_iSeedZttractMoney				= GetPrivateProfileInt("GameServerInfo","SeedZttractMoney",1000000,gDirPath.GetNewPath("commonserver.cfg"));

  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00188	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0018d	89 86 2c 05 00
	00		 mov	 DWORD PTR [esi+1324], eax
  00193	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00198	50		 push	 eax
  00199	68 40 42 0f 00	 push	 1000000			; 000f4240H
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OOHEOJGB@SeedZttractMoney?$AA@
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  001a8	ff d7		 call	 edi

; 290  : 	g_iSeedSphereCompositeMoney		= GetPrivateProfileInt("GameServerInfo","SeedSphereCompositeMoney",1000000,gDirPath.GetNewPath("commonserver.cfg"));

  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  001af	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  001b4	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSeedZttractMoney@@3HA, eax ; g_iSeedZttractMoney
  001b9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  001be	50		 push	 eax
  001bf	68 40 42 0f 00	 push	 1000000			; 000f4240H
  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  001ce	ff d7		 call	 edi

; 291  : 	g_iSeedSphereSetMoney			= GetPrivateProfileInt("GameServerInfo","SeedSphereSetMoney",1000000,gDirPath.GetNewPath("commonserver.cfg"));

  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  001d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  001da	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSeedSphereCompositeMoney@@3HA, eax ; g_iSeedSphereCompositeMoney
  001df	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  001e4	50		 push	 eax
  001e5	68 40 42 0f 00	 push	 1000000			; 000f4240H
  001ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@
  001ef	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  001f4	ff d7		 call	 edi

; 292  : 	g_iSeedSphereRemoveMoney		= GetPrivateProfileInt("GameServerInfo","SeedSphereRemoveMoney",1000000,gDirPath.GetNewPath("commonserver.cfg"));

  001f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  001fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00200	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSeedSphereSetMoney@@3HA, eax ; g_iSeedSphereSetMoney
  00205	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0020a	50		 push	 eax
  0020b	68 40 42 0f 00	 push	 1000000			; 000f4240H
  00210	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@
  00215	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0021a	ff d7		 call	 edi
  0021c	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSeedSphereRemoveMoney@@3HA, eax ; g_iSeedSphereRemoveMoney

; 293  : 
; 294  : 	this->SocketSlotRandomPool.AddValue(1,this->iSocketSlotCountRate[SOCKET_SLOT_1]);

  00221	8b 86 08 05 00
	00		 mov	 eax, DWORD PTR [esi+1288]
  00227	50		 push	 eax
  00228	6a 01		 push	 1
  0022a	8d 8e d8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1240]
  00230	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 295  : 	this->SocketSlotRandomPool.AddValue(2,this->iSocketSlotCountRate[SOCKET_SLOT_2]);

  00235	8b 8e 0c 05 00
	00		 mov	 ecx, DWORD PTR [esi+1292]
  0023b	51		 push	 ecx
  0023c	6a 02		 push	 2
  0023e	8d 8e d8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1240]
  00244	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 296  : 	this->SocketSlotRandomPool.AddValue(3,this->iSocketSlotCountRate[SOCKET_SLOT_3]);

  00249	8b 96 10 05 00
	00		 mov	 edx, DWORD PTR [esi+1296]
  0024f	52		 push	 edx
  00250	6a 03		 push	 3
  00252	8d 8e d8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1240]
  00258	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 297  : 	this->SocketSlotRandomPool.AddValue(4,this->iSocketSlotCountRate[SOCKET_SLOT_4]);

  0025d	8b 86 14 05 00
	00		 mov	 eax, DWORD PTR [esi+1300]
  00263	50		 push	 eax
  00264	6a 04		 push	 4
  00266	8d 8e d8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1240]
  0026c	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 298  : 	this->SocketSlotRandomPool.AddValue(5,this->iSocketSlotCountRate[SOCKET_SLOT_5]);

  00271	8b 8e 18 05 00
	00		 mov	 ecx, DWORD PTR [esi+1304]
  00277	51		 push	 ecx
  00278	6a 05		 push	 5
  0027a	8d 8e d8 04 00
	00		 lea	 ecx, DWORD PTR [esi+1240]
  00280	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 299  : 
; 300  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(1,this->iTwoHandSlotCountRate[SOCKET_SLOT_1]);

  00285	8b 96 1c 05 00
	00		 mov	 edx, DWORD PTR [esi+1308]
  0028b	52		 push	 edx
  0028c	6a 01		 push	 1
  0028e	8d 8e f0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1264]
  00294	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 301  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(2,this->iTwoHandSlotCountRate[SOCKET_SLOT_2]);

  00299	8b 86 20 05 00
	00		 mov	 eax, DWORD PTR [esi+1312]
  0029f	50		 push	 eax
  002a0	6a 02		 push	 2
  002a2	8d 8e f0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1264]
  002a8	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 302  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(3,this->iTwoHandSlotCountRate[SOCKET_SLOT_3]);

  002ad	8b 8e 24 05 00
	00		 mov	 ecx, DWORD PTR [esi+1316]
  002b3	51		 push	 ecx
  002b4	6a 03		 push	 3
  002b6	8d 8e f0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1264]
  002bc	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 303  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(4,this->iTwoHandSlotCountRate[SOCKET_SLOT_4]);

  002c1	8b 96 28 05 00
	00		 mov	 edx, DWORD PTR [esi+1320]
  002c7	52		 push	 edx
  002c8	6a 04		 push	 4
  002ca	8d 8e f0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1264]
  002d0	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 304  : 	this->TwoHandWeaponSocketSlotRandomPool.AddValue(5,this->iTwoHandSlotCountRate[SOCKET_SLOT_5]);

  002d5	8b 86 2c 05 00
	00		 mov	 eax, DWORD PTR [esi+1324]
  002db	50		 push	 eax
  002dc	6a 05		 push	 5
  002de	8d 8e f0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1264]
  002e4	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 305  : 
; 306  : 	g_iShopBuySocketItemSlotCount	= GetPrivateProfileInt("GameServerInfo","ShopBuySocketItemSlotCount",3,gDirPath.GetNewPath("commonserver.cfg"));

  002e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  002ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  002f3	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  002f8	50		 push	 eax
  002f9	6a 03		 push	 3
  002fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PGIPDLFD@ShopBuySocketItemSlotCount?$AA@
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00305	ff d7		 call	 edi

; 307  : 
; 308  : 	this->bSphereDrop				= GetPrivateProfileInt("GameServerInfo","SphereDropOn",0,gDirPath.GetNewPath("commonserver.cfg"));

  00307	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0030c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00311	a3 00 00 00 00	 mov	 DWORD PTR ?g_iShopBuySocketItemSlotCount@@3HA, eax ; g_iShopBuySocketItemSlotCount
  00316	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0031b	50		 push	 eax
  0031c	6a 00		 push	 0
  0031e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PNENKPIH@SphereDropOn?$AA@
  00323	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00328	ff d7		 call	 edi

; 309  : 
; 310  : 	this->iSphereDropRate[SOCKET_SLOT_1]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv1",0,gDirPath.GetNewPath("commonserver.cfg"));

  0032a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0032f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00334	89 86 30 05 00
	00		 mov	 DWORD PTR [esi+1328], eax
  0033a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0033f	50		 push	 eax
  00340	6a 00		 push	 0
  00342	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@
  00347	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0034c	ff d7		 call	 edi

; 311  : 	this->iSphereDropRate[SOCKET_SLOT_2]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv2",0,gDirPath.GetNewPath("commonserver.cfg"));

  0034e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00353	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00358	89 86 34 05 00
	00		 mov	 DWORD PTR [esi+1332], eax
  0035e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00363	50		 push	 eax
  00364	6a 00		 push	 0
  00366	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@
  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00370	ff d7		 call	 edi

; 312  : 	this->iSphereDropRate[SOCKET_SLOT_3]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv3",0,gDirPath.GetNewPath("commonserver.cfg"));

  00372	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00377	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0037c	89 86 38 05 00
	00		 mov	 DWORD PTR [esi+1336], eax
  00382	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00387	50		 push	 eax
  00388	6a 00		 push	 0
  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@
  0038f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00394	ff d7		 call	 edi

; 313  : 	this->iSphereDropRate[SOCKET_SLOT_4]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv4",0,gDirPath.GetNewPath("commonserver.cfg"));

  00396	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0039b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  003a0	89 86 3c 05 00
	00		 mov	 DWORD PTR [esi+1340], eax
  003a6	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  003ab	50		 push	 eax
  003ac	6a 00		 push	 0
  003ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@
  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  003b8	ff d7		 call	 edi

; 314  : 	this->iSphereDropRate[SOCKET_SLOT_5]		= GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv5",0,gDirPath.GetNewPath("commonserver.cfg"));

  003ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  003bf	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  003c4	89 86 40 05 00
	00		 mov	 DWORD PTR [esi+1344], eax
  003ca	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  003cf	50		 push	 eax
  003d0	6a 00		 push	 0
  003d2	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@
  003d7	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  003dc	ff d7		 call	 edi

; 315  : 
; 316  : 	this->iSphereDropLevel[SOCKET_SLOT_1]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv1",0,gDirPath.GetNewPath("commonserver.cfg"));

  003de	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  003e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  003e8	89 86 44 05 00
	00		 mov	 DWORD PTR [esi+1348], eax
  003ee	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  003f3	50		 push	 eax
  003f4	6a 00		 push	 0
  003f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@
  003fb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00400	ff d7		 call	 edi

; 317  : 	this->iSphereDropLevel[SOCKET_SLOT_2]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv2",0,gDirPath.GetNewPath("commonserver.cfg"));

  00402	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00407	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0040c	89 86 48 05 00
	00		 mov	 DWORD PTR [esi+1352], eax
  00412	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00417	50		 push	 eax
  00418	6a 00		 push	 0
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@
  0041f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00424	ff d7		 call	 edi

; 318  : 	this->iSphereDropLevel[SOCKET_SLOT_3]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv3",0,gDirPath.GetNewPath("commonserver.cfg"));

  00426	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0042b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00430	89 86 4c 05 00
	00		 mov	 DWORD PTR [esi+1356], eax
  00436	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0043b	50		 push	 eax
  0043c	6a 00		 push	 0
  0043e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@
  00443	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00448	ff d7		 call	 edi

; 319  : 	this->iSphereDropLevel[SOCKET_SLOT_4]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv4",0,gDirPath.GetNewPath("commonserver.cfg"));

  0044a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  0044f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00454	89 86 50 05 00
	00		 mov	 DWORD PTR [esi+1360], eax
  0045a	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0045f	50		 push	 eax
  00460	6a 00		 push	 0
  00462	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@
  00467	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0046c	ff d7		 call	 edi

; 320  : 	this->iSphereDropLevel[SOCKET_SLOT_5]		= GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv5",0,gDirPath.GetNewPath("commonserver.cfg"));

  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IGLHFEOF@commonserver?4cfg?$AA@
  00473	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00478	89 86 54 05 00
	00		 mov	 DWORD PTR [esi+1364], eax
  0047e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00483	50		 push	 eax
  00484	6a 00		 push	 0
  00486	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@
  0048b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00490	ff d7		 call	 edi
  00492	5f		 pop	 edi
  00493	89 86 58 05 00
	00		 mov	 DWORD PTR [esi+1368], eax
  00499	5e		 pop	 esi
  0049a	5b		 pop	 ebx

; 321  : }

  0049b	c3		 ret	 0
?_InitOption@CSocketOption@@QAEXXZ ENDP			; CSocketOption::_InitOption
_TEXT	ENDS
PUBLIC	?CheckItemType@CSocketOption@@QAEEH@Z		; CSocketOption::CheckItemType
EXTRN	?SockeetItem@cGrandHero@@QAE_NH@Z:PROC		; cGrandHero::SockeetItem
EXTRN	?GrandHero@@3VcGrandHero@@A:BYTE		; GrandHero
; Function compile flags: /Ogtp
;	COMDAT ?CheckItemType@CSocketOption@@QAEEH@Z
_TEXT	SEGMENT
_iItemNumber$ = 8					; size = 4
?CheckItemType@CSocketOption@@QAEEH@Z PROC		; CSocketOption::CheckItemType, COMDAT
; _this$ = ecx

; 339  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 340  : 	for( int i = 0; i < this->m_SocketItemCount; i++ )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iItemNumber$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b b9 b4 07 00
	00		 mov	 edi, DWORD PTR [ecx+1972]
  0000f	33 f6		 xor	 esi, esi
  00011	85 ff		 test	 edi, edi
  00013	7e 52		 jle	 SHORT $LN9@CheckItemT
  00015	8d 91 5e 05 00
	00		 lea	 edx, DWORD PTR [ecx+1374]
  0001b	eb 03 8d 49 00	 npad	 5
$LL11@CheckItemT:

; 341  : 	{
; 342  : 		if( iItemNumber == ITEMGET(this->m_SocketItemList[i].ItemID, this->m_SocketItemList[i].ItemIndex) )

  00020	0f bf 42 fe	 movsx	 eax, WORD PTR [edx-2]
  00024	0f bf 0a	 movsx	 ecx, WORD PTR [edx]
  00027	c1 e0 09	 shl	 eax, 9
  0002a	03 c1		 add	 eax, ecx
  0002c	3b d8		 cmp	 ebx, eax
  0002e	74 4e		 je	 SHORT $LN17@CheckItemT

; 345  : 		}
; 346  : 		else if( this->m_SocketItemList[i].ItemID == -1 && this->m_SocketItemList[i].ItemIndex != -1 )

  00030	66 83 7a fe ff	 cmp	 WORD PTR [edx-2], -1
  00035	75 28		 jne	 SHORT $LN10@CheckItemT
  00037	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0003a	66 83 f8 ff	 cmp	 ax, -1
  0003e	74 1f		 je	 SHORT $LN10@CheckItemT

; 347  : 		{
; 348  : 			for( int Category = 7; Category < 12; Category++ )

  00040	98		 cwde
  00041	b9 07 00 00 00	 mov	 ecx, 7
  00046	05 00 0e 00 00	 add	 eax, 3584		; 00000e00H
  0004b	eb 03 8d 49 00	 npad	 5
$LL5@CheckItemT:

; 349  : 			{
; 350  : 				if( iItemNumber == ITEMGET(Category, this->m_SocketItemList[i].ItemIndex) )

  00050	3b d8		 cmp	 ebx, eax
  00052	74 2a		 je	 SHORT $LN17@CheckItemT

; 347  : 		{
; 348  : 			for( int Category = 7; Category < 12; Category++ )

  00054	41		 inc	 ecx
  00055	05 00 02 00 00	 add	 eax, 512		; 00000200H
  0005a	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  0005d	7c f1		 jl	 SHORT $LL5@CheckItemT
$LN10@CheckItemT:

; 340  : 	for( int i = 0; i < this->m_SocketItemCount; i++ )

  0005f	46		 inc	 esi
  00060	83 c2 04	 add	 edx, 4
  00063	3b f7		 cmp	 esi, edi
  00065	7c b9		 jl	 SHORT $LL11@CheckItemT
$LN9@CheckItemT:

; 351  : 				{
; 352  : 					return true;
; 353  : 				}
; 354  : 			}
; 355  : 		}
; 356  : 	}
; 357  : 	
; 358  : #ifdef GRAND_HERO_DEV
; 359  : 	if(GrandHero.SockeetItem(iItemNumber))

  00067	53		 push	 ebx
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?GrandHero@@3VcGrandHero@@A ; GrandHero
  0006d	e8 00 00 00 00	 call	 ?SockeetItem@cGrandHero@@QAE_NH@Z ; cGrandHero::SockeetItem
  00072	5f		 pop	 edi
  00073	84 c0		 test	 al, al
  00075	5e		 pop	 esi
  00076	0f 95 c0	 setne	 al
  00079	5b		 pop	 ebx

; 360  : 		return true;
; 361  : #endif
; 362  : 	// ----
; 363  : 	return false;
; 364  : 	/*
; 365  : 	switch(iItemNumber)
; 366  : 	{
; 367  : 	case ITEMGET(0,26)://
; 368  : 	case ITEMGET(0,27)://
; 369  : 	case ITEMGET(0,28)://
; 370  : 	case ITEMGET(2,16)://
; 371  : 	case ITEMGET(2,17)://
; 372  : 	case ITEMGET(4,23)://
; 373  : 	case ITEMGET(5,30):
; 374  : 	case ITEMGET(5,31):
; 375  : 	case ITEMGET(5,32):
; 376  : 	case ITEMGET(6,17):
; 377  : 	case ITEMGET(6,18):
; 378  : 	case ITEMGET(6,19):
; 379  : 	case ITEMGET(6,20):
; 380  : 	case ITEMGET(7,45):
; 381  : 	case ITEMGET(7,46):
; 382  : 	case ITEMGET(7,49):
; 383  : 	case ITEMGET(7,50):
; 384  : 	case ITEMGET(7,51):
; 385  : 	case ITEMGET(7,52):
; 386  : 	case ITEMGET(7,53):
; 387  : 	case ITEMGET(8,45):
; 388  : 	case ITEMGET(8,46):
; 389  : 	case ITEMGET(8,47):
; 390  : 	case ITEMGET(8,48):
; 391  : 	case ITEMGET(8,49):
; 392  : 	case ITEMGET(8,50):
; 393  : 	case ITEMGET(8,51):
; 394  : 	case ITEMGET(8,52):
; 395  : 	case ITEMGET(8,53):
; 396  : 	case ITEMGET(9,45):
; 397  : 	case ITEMGET(9,46):
; 398  : 	case ITEMGET(9,47):
; 399  : 	case ITEMGET(9,48):
; 400  : 	case ITEMGET(9,49):
; 401  : 	case ITEMGET(9,50):
; 402  : 	case ITEMGET(9,51):
; 403  : 	case ITEMGET(9,52):
; 404  : 	case ITEMGET(9,53):
; 405  : 	case ITEMGET(10,45):
; 406  : 	case ITEMGET(10,46):
; 407  : 	case ITEMGET(10,47):
; 408  : 	case ITEMGET(10,48):
; 409  : 	case ITEMGET(10,49):
; 410  : 	case ITEMGET(10,50):
; 411  : 	case ITEMGET(10,51):
; 412  : 	case ITEMGET(10,52):
; 413  : 	case ITEMGET(10,53):
; 414  : 	case ITEMGET(11,45):
; 415  : 	case ITEMGET(11,46):
; 416  : 	case ITEMGET(11,47):
; 417  : 	case ITEMGET(11,48):
; 418  : 	case ITEMGET(11,49):
; 419  : 	case ITEMGET(11,50):
; 420  : 	case ITEMGET(11,51):
; 421  : 	case ITEMGET(11,52):
; 422  : 	case ITEMGET(11,53):
; 423  : 		return TRUE;
; 424  : 	}
; 425  : 
; 426  : #ifdef _GRAND_ITEM_
; 427  : 	switch(iItemNumber)
; 428  : 	{
; 429  : 		case ITEMGET(0,40):
; 430  : 		case ITEMGET(0,41):
; 431  : 		case ITEMGET(2,20):
; 432  : 		case ITEMGET(4,30):
; 433  : 		case ITEMGET(5,40):
; 434  : 		case ITEMGET(5,41):
; 435  : 		case ITEMGET(6,30):
; 436  : 		case ITEMGET(6,31):
; 437  : 		case ITEMGET(6,32):
; 438  : 		case ITEMGET(6,33):
; 439  : 			return true;
; 440  : 	}
; 441  : 
; 442  : 	if( iItemNumber >= ITEMGET(7,60) && iItemNumber <= ITEMGET(7,65) ||
; 443  : 		iItemNumber >= ITEMGET(8,60) && iItemNumber <= ITEMGET(8,65) ||
; 444  : 		iItemNumber >= ITEMGET(9,60) && iItemNumber <= ITEMGET(9,65) ||
; 445  : 		iItemNumber >= ITEMGET(10,60) && iItemNumber <= ITEMGET(10,65) ||
; 446  : 		iItemNumber >= ITEMGET(11,60) && iItemNumber <= ITEMGET(11,65) )
; 447  : 	{
; 448  : 		return true;
; 449  : 	}
; 450  : #endif
; 451  : 
; 452  : 
; 453  : 	return FALSE;
; 454  : 	*/
; 455  : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN17@CheckItemT:
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 343  : 		{
; 344  : 			return true;

  00080	b0 01		 mov	 al, 1
  00082	5b		 pop	 ebx

; 360  : 		return true;
; 361  : #endif
; 362  : 	// ----
; 363  : 	return false;
; 364  : 	/*
; 365  : 	switch(iItemNumber)
; 366  : 	{
; 367  : 	case ITEMGET(0,26)://
; 368  : 	case ITEMGET(0,27)://
; 369  : 	case ITEMGET(0,28)://
; 370  : 	case ITEMGET(2,16)://
; 371  : 	case ITEMGET(2,17)://
; 372  : 	case ITEMGET(4,23)://
; 373  : 	case ITEMGET(5,30):
; 374  : 	case ITEMGET(5,31):
; 375  : 	case ITEMGET(5,32):
; 376  : 	case ITEMGET(6,17):
; 377  : 	case ITEMGET(6,18):
; 378  : 	case ITEMGET(6,19):
; 379  : 	case ITEMGET(6,20):
; 380  : 	case ITEMGET(7,45):
; 381  : 	case ITEMGET(7,46):
; 382  : 	case ITEMGET(7,49):
; 383  : 	case ITEMGET(7,50):
; 384  : 	case ITEMGET(7,51):
; 385  : 	case ITEMGET(7,52):
; 386  : 	case ITEMGET(7,53):
; 387  : 	case ITEMGET(8,45):
; 388  : 	case ITEMGET(8,46):
; 389  : 	case ITEMGET(8,47):
; 390  : 	case ITEMGET(8,48):
; 391  : 	case ITEMGET(8,49):
; 392  : 	case ITEMGET(8,50):
; 393  : 	case ITEMGET(8,51):
; 394  : 	case ITEMGET(8,52):
; 395  : 	case ITEMGET(8,53):
; 396  : 	case ITEMGET(9,45):
; 397  : 	case ITEMGET(9,46):
; 398  : 	case ITEMGET(9,47):
; 399  : 	case ITEMGET(9,48):
; 400  : 	case ITEMGET(9,49):
; 401  : 	case ITEMGET(9,50):
; 402  : 	case ITEMGET(9,51):
; 403  : 	case ITEMGET(9,52):
; 404  : 	case ITEMGET(9,53):
; 405  : 	case ITEMGET(10,45):
; 406  : 	case ITEMGET(10,46):
; 407  : 	case ITEMGET(10,47):
; 408  : 	case ITEMGET(10,48):
; 409  : 	case ITEMGET(10,49):
; 410  : 	case ITEMGET(10,50):
; 411  : 	case ITEMGET(10,51):
; 412  : 	case ITEMGET(10,52):
; 413  : 	case ITEMGET(10,53):
; 414  : 	case ITEMGET(11,45):
; 415  : 	case ITEMGET(11,46):
; 416  : 	case ITEMGET(11,47):
; 417  : 	case ITEMGET(11,48):
; 418  : 	case ITEMGET(11,49):
; 419  : 	case ITEMGET(11,50):
; 420  : 	case ITEMGET(11,51):
; 421  : 	case ITEMGET(11,52):
; 422  : 	case ITEMGET(11,53):
; 423  : 		return TRUE;
; 424  : 	}
; 425  : 
; 426  : #ifdef _GRAND_ITEM_
; 427  : 	switch(iItemNumber)
; 428  : 	{
; 429  : 		case ITEMGET(0,40):
; 430  : 		case ITEMGET(0,41):
; 431  : 		case ITEMGET(2,20):
; 432  : 		case ITEMGET(4,30):
; 433  : 		case ITEMGET(5,40):
; 434  : 		case ITEMGET(5,41):
; 435  : 		case ITEMGET(6,30):
; 436  : 		case ITEMGET(6,31):
; 437  : 		case ITEMGET(6,32):
; 438  : 		case ITEMGET(6,33):
; 439  : 			return true;
; 440  : 	}
; 441  : 
; 442  : 	if( iItemNumber >= ITEMGET(7,60) && iItemNumber <= ITEMGET(7,65) ||
; 443  : 		iItemNumber >= ITEMGET(8,60) && iItemNumber <= ITEMGET(8,65) ||
; 444  : 		iItemNumber >= ITEMGET(9,60) && iItemNumber <= ITEMGET(9,65) ||
; 445  : 		iItemNumber >= ITEMGET(10,60) && iItemNumber <= ITEMGET(10,65) ||
; 446  : 		iItemNumber >= ITEMGET(11,60) && iItemNumber <= ITEMGET(11,65) )
; 447  : 	{
; 448  : 		return true;
; 449  : 	}
; 450  : #endif
; 451  : 
; 452  : 
; 453  : 	return FALSE;
; 454  : 	*/
; 455  : }

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?CheckItemType@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::CheckItemType
_TEXT	ENDS
PUBLIC	?GetActiveSocketSlots@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::GetActiveSocketSlots
; Function compile flags: /Ogtp
;	COMDAT ?GetActiveSocketSlots@CSocketOption@@QAEEPAVCItem@@@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
?GetActiveSocketSlots@CSocketOption@@QAEEPAVCItem@@@Z PROC ; CSocketOption::GetActiveSocketSlots, COMDAT
; _this$ = ecx

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 460  : 	BYTE btCount = 0;
; 461  : 
; 462  : 	for(int i = 0;i < MAX_SOCKET_OPTION; i++)
; 463  : 	{
; 464  : 		if(pItem->m_SocketOption[i] == 0xFE)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00006	b2 fe		 mov	 dl, 254			; 000000feH
  00008	32 c0		 xor	 al, al
  0000a	38 91 cc 00 00
	00		 cmp	 BYTE PTR [ecx+204], dl
  00010	75 02		 jne	 SHORT $LN3@GetActiveS

; 465  : 		{
; 466  : 			btCount++;

  00012	b0 01		 mov	 al, 1
$LN3@GetActiveS:

; 460  : 	BYTE btCount = 0;
; 461  : 
; 462  : 	for(int i = 0;i < MAX_SOCKET_OPTION; i++)
; 463  : 	{
; 464  : 		if(pItem->m_SocketOption[i] == 0xFE)

  00014	38 91 cd 00 00
	00		 cmp	 BYTE PTR [ecx+205], dl
  0001a	75 02		 jne	 SHORT $LN13@GetActiveS

; 465  : 		{
; 466  : 			btCount++;

  0001c	fe c0		 inc	 al
$LN13@GetActiveS:

; 460  : 	BYTE btCount = 0;
; 461  : 
; 462  : 	for(int i = 0;i < MAX_SOCKET_OPTION; i++)
; 463  : 	{
; 464  : 		if(pItem->m_SocketOption[i] == 0xFE)

  0001e	38 91 ce 00 00
	00		 cmp	 BYTE PTR [ecx+206], dl
  00024	75 02		 jne	 SHORT $LN15@GetActiveS

; 465  : 		{
; 466  : 			btCount++;

  00026	fe c0		 inc	 al
$LN15@GetActiveS:

; 460  : 	BYTE btCount = 0;
; 461  : 
; 462  : 	for(int i = 0;i < MAX_SOCKET_OPTION; i++)
; 463  : 	{
; 464  : 		if(pItem->m_SocketOption[i] == 0xFE)

  00028	38 91 cf 00 00
	00		 cmp	 BYTE PTR [ecx+207], dl
  0002e	75 02		 jne	 SHORT $LN17@GetActiveS

; 465  : 		{
; 466  : 			btCount++;

  00030	fe c0		 inc	 al
$LN17@GetActiveS:

; 460  : 	BYTE btCount = 0;
; 461  : 
; 462  : 	for(int i = 0;i < MAX_SOCKET_OPTION; i++)
; 463  : 	{
; 464  : 		if(pItem->m_SocketOption[i] == 0xFE)

  00032	38 91 d0 00 00
	00		 cmp	 BYTE PTR [ecx+208], dl
  00038	75 02		 jne	 SHORT $LN19@GetActiveS

; 465  : 		{
; 466  : 			btCount++;

  0003a	fe c0		 inc	 al
$LN19@GetActiveS:

; 467  : 		}
; 468  : 	}
; 469  : 
; 470  : 	return btCount;
; 471  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?GetActiveSocketSlots@CSocketOption@@QAEEPAVCItem@@@Z ENDP ; CSocketOption::GetActiveSocketSlots
_TEXT	ENDS
PUBLIC	?IsSeedSphereItem@CSocketOption@@QAEEH@Z	; CSocketOption::IsSeedSphereItem
; Function compile flags: /Ogtp
;	COMDAT ?IsSeedSphereItem@CSocketOption@@QAEEH@Z
_TEXT	SEGMENT
_m_Type$ = 8						; size = 4
?IsSeedSphereItem@CSocketOption@@QAEEH@Z PROC		; CSocketOption::IsSeedSphereItem, COMDAT
; _this$ = ecx

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 556  : 	switch(m_Type)

  00003	8b 45 08	 mov	 eax, DWORD PTR _m_Type$[ebp]
  00006	3d 3c 18 00 00	 cmp	 eax, 6204		; 0000183cH
  0000b	7c 0d		 jl	 SHORT $LN2@IsSeedSphe
  0000d	3d 41 18 00 00	 cmp	 eax, 6209		; 00001841H
  00012	7f 06		 jg	 SHORT $LN2@IsSeedSphe

; 557  : 	{
; 558  : 	case ITEMGET(12,60):
; 559  : 	case ITEMGET(12,61):
; 560  : 	case ITEMGET(12,62):
; 561  : 	case ITEMGET(12,63):
; 562  : 	case ITEMGET(12,64):
; 563  : 	case ITEMGET(12,65):
; 564  : 		return TRUE;

  00014	b0 01		 mov	 al, 1

; 568  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN2@IsSeedSphe:

; 565  : 	}
; 566  : 
; 567  : 	return FALSE;

  0001a	32 c0		 xor	 al, al

; 568  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?IsSeedSphereItem@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::IsSeedSphereItem
_TEXT	ENDS
PUBLIC	?IsSeedItem@CSocketOption@@QAEEH@Z		; CSocketOption::IsSeedItem
; Function compile flags: /Ogtp
;	COMDAT ?IsSeedItem@CSocketOption@@QAEEH@Z
_TEXT	SEGMENT
_m_Type$ = 8						; size = 4
?IsSeedItem@CSocketOption@@QAEEH@Z PROC			; CSocketOption::IsSeedItem, COMDAT
; _this$ = ecx

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 	switch(m_Type)

  00003	8b 45 08	 mov	 eax, DWORD PTR _m_Type$[ebp]
  00006	3d 46 18 00 00	 cmp	 eax, 6214		; 00001846H
  0000b	7c 0d		 jl	 SHORT $LN2@IsSeedItem
  0000d	3d 4a 18 00 00	 cmp	 eax, 6218		; 0000184aH
  00012	7f 06		 jg	 SHORT $LN2@IsSeedItem

; 574  : 	{
; 575  : 	case ITEMGET(12,70):
; 576  : 	case ITEMGET(12,71):
; 577  : 	case ITEMGET(12,72):
; 578  : 	case ITEMGET(12,73):
; 579  : 	case ITEMGET(12,74):
; 580  : 	
; 581  : 		return TRUE;

  00014	b0 01		 mov	 al, 1

; 585  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN2@IsSeedItem:

; 582  : 	}
; 583  : 
; 584  : 	return FALSE;

  0001a	32 c0		 xor	 al, al

; 585  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?IsSeedItem@CSocketOption@@QAEEH@Z ENDP			; CSocketOption::IsSeedItem
_TEXT	ENDS
PUBLIC	?IsSeedSpearItem@CSocketOption@@QAEEH@Z		; CSocketOption::IsSeedSpearItem
; Function compile flags: /Ogtp
;	COMDAT ?IsSeedSpearItem@CSocketOption@@QAEEH@Z
_TEXT	SEGMENT
_m_Type$ = 8						; size = 4
?IsSeedSpearItem@CSocketOption@@QAEEH@Z PROC		; CSocketOption::IsSeedSpearItem, COMDAT
; _this$ = ecx

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 590  : 	BYTE loc2 = 0;
; 591  : 	BYTE loc3 = 0;
; 592  : 
; 593  : 	loc3 = m_Type % 512;

  00003	8b 45 08	 mov	 eax, DWORD PTR _m_Type$[ebp]
  00006	8b c8		 mov	 ecx, eax
  00008	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  0000e	79 08		 jns	 SHORT $LN5@IsSeedSpea
  00010	49		 dec	 ecx
  00011	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  00017	41		 inc	 ecx
$LN5@IsSeedSpea:

; 594  : 
; 595  : 	loc2 = (m_Type - loc3) / 512 ;
; 596  : 
; 597  : 	if(loc2 == 12)

  00018	0f b6 d1	 movzx	 edx, cl
  0001b	2b c2		 sub	 eax, edx
  0001d	99		 cdq
  0001e	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  00024	03 c2		 add	 eax, edx
  00026	c1 f8 09	 sar	 eax, 9
  00029	3c 0c		 cmp	 al, 12			; 0000000cH
  0002b	75 0e		 jne	 SHORT $LN1@IsSeedSpea

; 598  : 	{
; 599  : 		if(loc3 >= 100 && loc3 <= 129)

  0002d	80 e9 64	 sub	 cl, 100			; 00000064H
  00030	80 f9 1d	 cmp	 cl, 29			; 0000001dH
  00033	77 06		 ja	 SHORT $LN1@IsSeedSpea

; 600  : 		{
; 601  : 			return TRUE;

  00035	b0 01		 mov	 al, 1

; 606  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN1@IsSeedSpea:

; 602  : 		}
; 603  : 	}
; 604  : 
; 605  : 	return FALSE;

  0003b	32 c0		 xor	 al, al

; 606  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?IsSeedSpearItem@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::IsSeedSpearItem
_TEXT	ENDS
PUBLIC	?GetSeedOptionIndex@CSocketOption@@QAEEHE@Z	; CSocketOption::GetSeedOptionIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetSeedOptionIndex@CSocketOption@@QAEEHE@Z
_TEXT	SEGMENT
_m_Type$ = 8						; size = 4
_m_Level$ = 12						; size = 1
?GetSeedOptionIndex@CSocketOption@@QAEEHE@Z PROC	; CSocketOption::GetSeedOptionIndex, COMDAT
; _this$ = ecx

; 611  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 612  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  00004	8a 5d 0c	 mov	 bl, BYTE PTR _m_Level$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _m_Type$[ebp]
  0000b	33 c0		 xor	 eax, eax
  0000d	8d 51 06	 lea	 edx, DWORD PTR [ecx+6]
$LL4@GetSeedOpt:

; 613  : 	{
; 614  : 		if(this->SocketSeed[i].m_iItemIndex == m_Type && this->SocketSeed[i].m_btItemLevel == m_Level)

  00010	39 72 0a	 cmp	 DWORD PTR [edx+10], esi
  00013	75 04		 jne	 SHORT $LN3@GetSeedOpt
  00015	38 1a		 cmp	 BYTE PTR [edx], bl
  00017	74 11		 je	 SHORT $LN8@GetSeedOpt
$LN3@GetSeedOpt:

; 612  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  00019	40		 inc	 eax
  0001a	83 c2 14	 add	 edx, 20			; 00000014H
  0001d	83 f8 32	 cmp	 eax, 50			; 00000032H
  00020	7c ee		 jl	 SHORT $LL4@GetSeedOpt

; 617  : 		}
; 618  : 	}
; 619  : 
; 620  : 	return -1;

  00022	5e		 pop	 esi
  00023	0c ff		 or	 al, 255			; 000000ffH
  00025	5b		 pop	 ebx

; 621  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN8@GetSeedOpt:

; 615  : 		{
; 616  : 			return this->SocketSeed[i].m_btOptionIndex;

  0002a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0002d	8a 44 81 04	 mov	 al, BYTE PTR [ecx+eax*4+4]
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 621  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?GetSeedOptionIndex@CSocketOption@@QAEEHE@Z ENDP	; CSocketOption::GetSeedOptionIndex
_TEXT	ENDS
PUBLIC	?GetSphereLevel@CSocketOption@@QAEEH@Z		; CSocketOption::GetSphereLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetSphereLevel@CSocketOption@@QAEEH@Z
_TEXT	SEGMENT
_m_Type$ = 8						; size = 4
?GetSphereLevel@CSocketOption@@QAEEH@Z PROC		; CSocketOption::GetSphereLevel, COMDAT
; _this$ = ecx

; 625  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 626  : 	switch ( m_Type )

  00003	8b 45 08	 mov	 eax, DWORD PTR _m_Type$[ebp]
  00006	05 ba e7 ff ff	 add	 eax, -6214		; ffffe7baH
  0000b	83 f8 04	 cmp	 eax, 4
  0000e	77 25		 ja	 SHORT $LN6@GetSphereL
  00010	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@GetSphereL[eax*4]
$LN5@GetSphereL:

; 627  : 	{
; 628  : 	case ITEMGET(12,70):	return 1;	break;

  00017	b0 01		 mov	 al, 1

; 636  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN4@GetSphereL:

; 629  : 	case ITEMGET(12,71):	return 2;	break;

  0001d	b0 02		 mov	 al, 2

; 636  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN3@GetSphereL:

; 630  : 	case ITEMGET(12,72):	return 3;   break;

  00023	b0 03		 mov	 al, 3

; 636  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN2@GetSphereL:

; 631  : 	case ITEMGET(12,73):	return 4;	break;

  00029	b0 04		 mov	 al, 4

; 636  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN1@GetSphereL:

; 632  : 	case ITEMGET(12,74):	return 5;   break;

  0002f	b0 05		 mov	 al, 5

; 636  : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN6@GetSphereL:

; 633  : 	}
; 634  : 
; 635  : 	return 0;

  00035	32 c0		 xor	 al, al

; 636  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
  0003b	90		 npad	 1
$LN10@GetSphereL:
  0003c	00 00 00 00	 DD	 $LN5@GetSphereL
  00040	00 00 00 00	 DD	 $LN4@GetSphereL
  00044	00 00 00 00	 DD	 $LN3@GetSphereL
  00048	00 00 00 00	 DD	 $LN2@GetSphereL
  0004c	00 00 00 00	 DD	 $LN1@GetSphereL
?GetSphereLevel@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::GetSphereLevel
_TEXT	ENDS
PUBLIC	?GetItemSocketByteOption@CSocketOption@@QAEEGE@Z ; CSocketOption::GetItemSocketByteOption
; Function compile flags: /Ogtp
;	COMDAT ?GetItemSocketByteOption@CSocketOption@@QAEEGE@Z
_TEXT	SEGMENT
_m_Type$ = 8						; size = 2
_m_Level$ = 12						; size = 1
?GetItemSocketByteOption@CSocketOption@@QAEEGE@Z PROC	; CSocketOption::GetItemSocketByteOption, COMDAT
; _this$ = ecx

; 672  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 673  : 	BYTE loc2 = 0;
; 674  : 	BYTE loc3 = 0;
; 675  : 	BYTE loc4 = 0;
; 676  : 
; 677  : 			//lol
; 678  : 	loc3 = (m_Type % 512 - 100) / 6;

  00003	0f b7 45 08	 movzx	 eax, WORD PTR _m_Type$[ebp]
  00007	25 ff 01 00 80	 and	 eax, -2147483137	; 800001ffH
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	79 07		 jns	 SHORT $LN10@GetItemSoc
  00011	48		 dec	 eax
  00012	0d 00 fe ff ff	 or	 eax, -512		; fffffe00H
  00017	40		 inc	 eax
$LN10@GetItemSoc:
  00018	83 c0 9c	 add	 eax, -100		; ffffff9cH
  0001b	99		 cdq
  0001c	be 06 00 00 00	 mov	 esi, 6
  00021	f7 fe		 idiv	 esi
  00023	8a 5d 0c	 mov	 bl, BYTE PTR _m_Level$[ebp]
  00026	8d 79 06	 lea	 edi, DWORD PTR [ecx+6]

; 679  : 	loc2 = (m_Type % 512 - 100) % 6 + 1;

  00029	fe c2		 inc	 dl

; 680  : 	
; 681  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  0002b	33 f6		 xor	 esi, esi
  0002d	8d 49 00	 npad	 3
$LL4@GetItemSoc:

; 682  : 	{
; 683  : 		if(	this->SocketSeed[i].m_btElementIndex == loc2 && this->SocketSeed[i].m_btItemLevel == m_Level)

  00030	38 57 ff	 cmp	 BYTE PTR [edi-1], dl
  00033	75 04		 jne	 SHORT $LN3@GetItemSoc
  00035	38 1f		 cmp	 BYTE PTR [edi], bl
  00037	74 12		 je	 SHORT $LN8@GetItemSoc
$LN3@GetItemSoc:

; 680  : 	
; 681  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  00039	46		 inc	 esi
  0003a	83 c7 14	 add	 edi, 20			; 00000014H
  0003d	83 fe 32	 cmp	 esi, 50			; 00000032H
  00040	7c ee		 jl	 SHORT $LL4@GetItemSoc

; 686  : 
; 687  : 			return loc4;
; 688  : 		}
; 689  : 	}
; 690  : 	return -1;

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	0c ff		 or	 al, 255			; 000000ffH
  00046	5b		 pop	 ebx

; 691  : }

  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
$LN8@GetItemSoc:

; 684  : 		{
; 685  : 			loc4 = loc3 * 50 + this->SocketSeed[i].m_btOptionIndex; //SOCKET BYTE ON ITEM BINARY

  0004b	b3 32		 mov	 bl, 50			; 00000032H
  0004d	f6 eb		 imul	 bl
  0004f	5f		 pop	 edi
  00050	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  00053	02 44 91 04	 add	 al, BYTE PTR [ecx+edx*4+4]
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx

; 691  : }

  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?GetItemSocketByteOption@CSocketOption@@QAEEGE@Z ENDP	; CSocketOption::GetItemSocketByteOption
_TEXT	ENDS
PUBLIC	?CheckMapNumber@CSocketOption@@QAEEH@Z		; CSocketOption::CheckMapNumber
; Function compile flags: /Ogtp
;	COMDAT ?CheckMapNumber@CSocketOption@@QAEEH@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 4
?CheckMapNumber@CSocketOption@@QAEEH@Z PROC		; CSocketOption::CheckMapNumber, COMDAT
; _this$ = ecx

; 771  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 772  : 	switch(MapNumber)

  00003	8b 45 08	 mov	 eax, DWORD PTR _MapNumber$[ebp]
  00006	83 f8 39	 cmp	 eax, 57			; 00000039H
  00009	7c 0b		 jl	 SHORT $LN2@CheckMapNu
  0000b	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  0000e	7f 06		 jg	 SHORT $LN2@CheckMapNu

; 773  : 	{
; 774  : 	case MAP_INDEX_RAKLION:
; 775  : 	case MAP_INDEX_RAKLION_BOSS:
; 776  : 		return 1;

  00010	b0 01		 mov	 al, 1

; 780  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN2@CheckMapNu:

; 777  : 	}
; 778  : 
; 779  : 	return 0;

  00016	32 c0		 xor	 al, al

; 780  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?CheckMapNumber@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::CheckMapNumber
_TEXT	ENDS
PUBLIC	?GetSphereItemIndex@CSocketOption@@QAEHH@Z	; CSocketOption::GetSphereItemIndex
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
; Function compile flags: /Ogtp
;	COMDAT ?GetSphereItemIndex@CSocketOption@@QAEHH@Z
_TEXT	SEGMENT
_loc2$ = -4						; size = 4
_Level$ = 8						; size = 4
?GetSphereItemIndex@CSocketOption@@QAEHH@Z PROC		; CSocketOption::GetSphereItemIndex, COMDAT
; _this$ = ecx

; 784  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 785  : 	int loc2 = -1;
; 786  : 	int loc3 = 0;
; 787  : 
; 788  : 	if(this->bSphereDrop != TRUE)

  00005	bf 01 00 00 00	 mov	 edi, 1
  0000a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _loc2$[ebp], -1
  00011	39 b9 30 05 00
	00		 cmp	 DWORD PTR [ecx+1328], edi

; 789  : 	{
; 790  : 		return loc2;

  00017	0f 85 a2 00 00
	00		 jne	 $LN6@GetSphereI

; 791  : 	}
; 792  : 	
; 793  : 	if(this->iSphereDropLevel[SOCKET_SLOT_5] != 0 && this->iSphereDropLevel[SOCKET_SLOT_5] <= Level)

  0001d	8b 81 58 05 00
	00		 mov	 eax, DWORD PTR [ecx+1368]
  00023	8b 55 08	 mov	 edx, DWORD PTR _Level$[ebp]
  00026	85 c0		 test	 eax, eax
  00028	74 0b		 je	 SHORT $LN14@GetSphereI
  0002a	3b c2		 cmp	 eax, edx
  0002c	7f 07		 jg	 SHORT $LN14@GetSphereI

; 794  : 	{
; 795  : 		loc3 = 5;

  0002e	bf 05 00 00 00	 mov	 edi, 5
  00033	eb 4d		 jmp	 SHORT $LN5@GetSphereI
$LN14@GetSphereI:

; 796  : 	}
; 797  : 	else if(this->iSphereDropLevel[SOCKET_SLOT_4] != 0 && this->iSphereDropLevel[SOCKET_SLOT_4] <= Level)

  00035	8b 81 54 05 00
	00		 mov	 eax, DWORD PTR [ecx+1364]
  0003b	85 c0		 test	 eax, eax
  0003d	74 0b		 je	 SHORT $LN12@GetSphereI
  0003f	3b c2		 cmp	 eax, edx
  00041	7f 07		 jg	 SHORT $LN12@GetSphereI

; 798  : 	{
; 799  : 		loc3 = 4;

  00043	bf 04 00 00 00	 mov	 edi, 4
  00048	eb 38		 jmp	 SHORT $LN5@GetSphereI
$LN12@GetSphereI:

; 800  : 	}
; 801  : 	else if(this->iSphereDropLevel[SOCKET_SLOT_3] != 0 && this->iSphereDropLevel[SOCKET_SLOT_3] <= Level)

  0004a	8b 81 50 05 00
	00		 mov	 eax, DWORD PTR [ecx+1360]
  00050	85 c0		 test	 eax, eax
  00052	74 0b		 je	 SHORT $LN10@GetSphereI
  00054	3b c2		 cmp	 eax, edx
  00056	7f 07		 jg	 SHORT $LN10@GetSphereI

; 802  : 	{
; 803  : 		loc3 = 3;

  00058	bf 03 00 00 00	 mov	 edi, 3
  0005d	eb 23		 jmp	 SHORT $LN5@GetSphereI
$LN10@GetSphereI:

; 804  : 	}
; 805  : 	else if(this->iSphereDropLevel[SOCKET_SLOT_2] != 0 && this->iSphereDropLevel[SOCKET_SLOT_2] <= Level)

  0005f	8b 81 4c 05 00
	00		 mov	 eax, DWORD PTR [ecx+1356]
  00065	85 c0		 test	 eax, eax
  00067	74 0b		 je	 SHORT $LN8@GetSphereI
  00069	3b c2		 cmp	 eax, edx
  0006b	7f 07		 jg	 SHORT $LN8@GetSphereI

; 806  : 	{
; 807  : 		loc3 = 2;

  0006d	bf 02 00 00 00	 mov	 edi, 2
  00072	eb 0e		 jmp	 SHORT $LN5@GetSphereI
$LN8@GetSphereI:

; 808  : 	}
; 809  : 	else if(this->iSphereDropLevel[SOCKET_SLOT_1] != 0 && this->iSphereDropLevel[SOCKET_SLOT_1] <= Level)

  00074	8b 81 48 05 00
	00		 mov	 eax, DWORD PTR [ecx+1352]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN6@GetSphereI
  0007e	3b c2		 cmp	 eax, edx
  00080	7f 3d		 jg	 SHORT $LN6@GetSphereI
$LN5@GetSphereI:
  00082	56		 push	 esi

; 816  : 	}
; 817  : 
; 818  : 	for(int i = 0;i < loc3;i++)

  00083	33 f6		 xor	 esi, esi
  00085	85 ff		 test	 edi, edi
  00087	7e 2b		 jle	 SHORT $LN2@GetSphereI
  00089	53		 push	 ebx
  0008a	8d 99 34 05 00
	00		 lea	 ebx, DWORD PTR [ecx+1332]
$LL4@GetSphereI:

; 819  : 	{
; 820  : 		if(this->iSphereDropRate[i] >= GetLargeRand()%10000)

  00090	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00095	33 d2		 xor	 edx, edx
  00097	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0009c	f7 f1		 div	 ecx
  0009e	39 13		 cmp	 DWORD PTR [ebx], edx
  000a0	72 09		 jb	 SHORT $LN3@GetSphereI

; 821  : 		{
; 822  : 			loc2 = i + ITEMGET(12,70);

  000a2	8d 96 46 18 00
	00		 lea	 edx, DWORD PTR [esi+6214]
  000a8	89 55 fc	 mov	 DWORD PTR _loc2$[ebp], edx
$LN3@GetSphereI:

; 816  : 	}
; 817  : 
; 818  : 	for(int i = 0;i < loc3;i++)

  000ab	46		 inc	 esi
  000ac	83 c3 04	 add	 ebx, 4
  000af	3b f7		 cmp	 esi, edi
  000b1	7c dd		 jl	 SHORT $LL4@GetSphereI
  000b3	5b		 pop	 ebx
$LN2@GetSphereI:

; 823  : 		}
; 824  : 	}
; 825  : 
; 826  : 	return loc2;

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _loc2$[ebp]
  000b7	5e		 pop	 esi
  000b8	5f		 pop	 edi

; 827  : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
$LN6@GetSphereI:

; 810  : 	{
; 811  : 		loc3 = 1;
; 812  : 	}
; 813  : 	else
; 814  : 	{
; 815  : 		return loc2;

  000bf	83 c8 ff	 or	 eax, -1
  000c2	5f		 pop	 edi

; 827  : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 04 00	 ret	 4
?GetSphereItemIndex@CSocketOption@@QAEHH@Z ENDP		; CSocketOption::GetSphereItemIndex
_TEXT	ENDS
PUBLIC	?GetSocketByteOption@CSocketOption@@QAEHEE@Z	; CSocketOption::GetSocketByteOption
; Function compile flags: /Ogtp
;	COMDAT ?GetSocketByteOption@CSocketOption@@QAEHEE@Z
_TEXT	SEGMENT
_OptionIndex$ = 8					; size = 1
_SocketSlotCount$ = 12					; size = 1
?GetSocketByteOption@CSocketOption@@QAEHEE@Z PROC	; CSocketOption::GetSocketByteOption, COMDAT
; _this$ = ecx

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 832  : 	return SocketSlotCount * 50 + OptionIndex; //SOCKET BYTE ON ITEM BINARY

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _SocketSlotCount$[ebp]
  00007	0f b6 4d 08	 movzx	 ecx, BYTE PTR _OptionIndex$[ebp]
  0000b	6b c0 32	 imul	 eax, 50			; 00000032H
  0000e	03 c1		 add	 eax, ecx

; 833  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?GetSocketByteOption@CSocketOption@@QAEHEE@Z ENDP	; CSocketOption::GetSocketByteOption
_TEXT	ENDS
PUBLIC	?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z	; CSocketOption::GetSeedData
; Function compile flags: /Ogtp
;	COMDAT ?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z
_TEXT	SEGMENT
_OptionIndex$ = 8					; size = 1
?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z PROC	; CSocketOption::GetSeedData, COMDAT
; _this$ = ecx

; 858  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 859  : 	for (int i = 0; i < MAX_SEED_OPTION; i++ )

  00004	8a 5d 08	 mov	 bl, BYTE PTR _OptionIndex$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	8d 64 24 00	 npad	 4
$LL4@GetSeedDat:

; 860  : 	{
; 861  : 		if ( this->SocketSeed[i].m_btOptionIndex == OptionIndex )

  00010	38 1a		 cmp	 BYTE PTR [edx], bl
  00012	74 10		 je	 SHORT $LN8@GetSeedDat

; 859  : 	for (int i = 0; i < MAX_SEED_OPTION; i++ )

  00014	40		 inc	 eax
  00015	83 c2 14	 add	 edx, 20			; 00000014H
  00018	83 f8 32	 cmp	 eax, 50			; 00000032H
  0001b	7c f3		 jl	 SHORT $LL4@GetSeedDat

; 864  : 		}
; 865  : 	}
; 866  : 	
; 867  : 	return 0;

  0001d	33 c0		 xor	 eax, eax
  0001f	5b		 pop	 ebx

; 868  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@GetSeedDat:

; 862  : 		{
; 863  : 			return &this->SocketSeed[i];

  00024	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00027	8d 44 81 04	 lea	 eax, DWORD PTR [ecx+eax*4+4]
  0002b	5b		 pop	 ebx

; 868  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ENDP	; CSocketOption::GetSeedData
_TEXT	ENDS
PUBLIC	?GetSphereData@CSocketOption@@QAEPAVCSphere@@E@Z ; CSocketOption::GetSphereData
; Function compile flags: /Ogtp
;	COMDAT ?GetSphereData@CSocketOption@@QAEPAVCSphere@@E@Z
_TEXT	SEGMENT
_level$ = 8						; size = 1
?GetSphereData@CSocketOption@@QAEPAVCSphere@@E@Z PROC	; CSocketOption::GetSphereData, COMDAT
; _this$ = ecx

; 872  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 873  : 	for(int i = 0; i < MAX_SOCKET_OPTION; i ++ )

  00004	8a 5d 08	 mov	 bl, BYTE PTR _level$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	8d 91 ec 03 00
	00		 lea	 edx, DWORD PTR [ecx+1004]
  0000f	90		 npad	 1
$LL4@GetSphereD:

; 874  : 	{
; 875  : 		if(this->SocketSphere[i].m_btItemLevel == level)

  00010	38 1a		 cmp	 BYTE PTR [edx], bl
  00012	74 10		 je	 SHORT $LN8@GetSphereD

; 873  : 	for(int i = 0; i < MAX_SOCKET_OPTION; i ++ )

  00014	40		 inc	 eax
  00015	83 c2 0c	 add	 edx, 12			; 0000000cH
  00018	83 f8 05	 cmp	 eax, 5
  0001b	7c f3		 jl	 SHORT $LL4@GetSphereD

; 878  : 		}
; 879  : 	}
; 880  : 
; 881  : 	return 0;

  0001d	33 c0		 xor	 eax, eax
  0001f	5b		 pop	 ebx

; 882  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@GetSphereD:

; 876  : 		{
; 877  : 			return &this->SocketSphere[i];

  00024	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00027	8d 84 81 ec 03
	00 00		 lea	 eax, DWORD PTR [ecx+eax*4+1004]
  0002e	5b		 pop	 ebx

; 882  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?GetSphereData@CSocketOption@@QAEPAVCSphere@@E@Z ENDP	; CSocketOption::GetSphereData
_TEXT	ENDS
PUBLIC	?SortOptionIndex@CSocketOption@@QAEEXZ		; CSocketOption::SortOptionIndex
EXTRN	?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z:PROC ; TRandomPoolMgr::GetRandomValue
; Function compile flags: /Ogtp
;	COMDAT ?SortOptionIndex@CSocketOption@@QAEEXZ
_TEXT	SEGMENT
?SortOptionIndex@CSocketOption@@QAEEXZ PROC		; CSocketOption::SortOptionIndex, COMDAT
; _this$ = ecx

; 887  : 	int loc2 = 0;
; 888  : 
; 889  : 	loc2 = this->SocketRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  00000	6a 01		 push	 1
  00002	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  00008	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue

; 890  : 
; 891  : 	return loc2;
; 892  : }

  0000d	c3		 ret	 0
?SortOptionIndex@CSocketOption@@QAEEXZ ENDP		; CSocketOption::SortOptionIndex
_TEXT	ENDS
PUBLIC	?GetElementIndex@CSocketOption@@QAEEE@Z		; CSocketOption::GetElementIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetElementIndex@CSocketOption@@QAEEE@Z
_TEXT	SEGMENT
_index$ = 8						; size = 1
?GetElementIndex@CSocketOption@@QAEEE@Z PROC		; CSocketOption::GetElementIndex, COMDAT
; _this$ = ecx

; 896  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 897  : 	BYTE loc2 = 0;
; 898  : 	CSeed * lpSeed = NULL;
; 899  : 
; 900  : 	loc2 = index % 50;
; 901  : 
; 902  : 	lpSeed = this->GetSeedData(loc2);

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _index$[ebp]
  00007	56		 push	 esi
  00008	99		 cdq
  00009	be 32 00 00 00	 mov	 esi, 50			; 00000032H
  0000e	f7 fe		 idiv	 esi
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ; CSocketOption::GetSeedData
  00016	5e		 pop	 esi

; 903  : 
; 904  : 	if(lpSeed == NULL)

  00017	85 c0		 test	 eax, eax
  00019	75 06		 jne	 SHORT $LN1@GetElement

; 905  : 	{
; 906  : 		return 0;

  0001b	32 c0		 xor	 al, al

; 910  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN1@GetElement:

; 907  : 	}
; 908  : 
; 909  : 	return lpSeed->m_btElementIndex;

  00021	8a 40 01	 mov	 al, BYTE PTR [eax+1]

; 910  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetElementIndex@CSocketOption@@QAEEE@Z ENDP		; CSocketOption::GetElementIndex
_TEXT	ENDS
PUBLIC	?GetSeedSpear@CSocketOption@@QAEPAVCSocketSphere@@E@Z ; CSocketOption::GetSeedSpear
; Function compile flags: /Ogtp
;	COMDAT ?GetSeedSpear@CSocketOption@@QAEPAVCSocketSphere@@E@Z
_TEXT	SEGMENT
_OptionIndex$ = 8					; size = 1
?GetSeedSpear@CSocketOption@@QAEPAVCSocketSphere@@E@Z PROC ; CSocketOption::GetSeedSpear, COMDAT
; _this$ = ecx

; 914  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 915  : 	for(int i = 0 ; i < MAX_SPHERE_OPTION; i ++ )

  00004	8a 5d 08	 mov	 bl, BYTE PTR _OptionIndex$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	8d 91 28 04 00
	00		 lea	 edx, DWORD PTR [ecx+1064]
  0000f	90		 npad	 1
$LL4@GetSeedSpe:

; 916  : 	{
; 917  : 		if(this->SocketSpear[i].m_btOptionIndex == OptionIndex)

  00010	38 1a		 cmp	 BYTE PTR [edx], bl
  00012	74 10		 je	 SHORT $LN8@GetSeedSpe

; 915  : 	for(int i = 0 ; i < MAX_SPHERE_OPTION; i ++ )

  00014	40		 inc	 eax
  00015	83 c2 14	 add	 edx, 20			; 00000014H
  00018	83 f8 06	 cmp	 eax, 6
  0001b	7c f3		 jl	 SHORT $LL4@GetSeedSpe

; 920  : 		}
; 921  : 	}
; 922  : 
; 923  : 	return 0;

  0001d	33 c0		 xor	 eax, eax
  0001f	5b		 pop	 ebx

; 924  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@GetSeedSpe:

; 918  : 		{
; 919  : 			return &this->SocketSpear[i];

  00024	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00027	8d 84 81 28 04
	00 00		 lea	 eax, DWORD PTR [ecx+eax*4+1064]
  0002e	5b		 pop	 ebx

; 924  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?GetSeedSpear@CSocketOption@@QAEPAVCSocketSphere@@E@Z ENDP ; CSocketOption::GetSeedSpear
_TEXT	ENDS
PUBLIC	?ApplyTESTSocketEffect@CSocketOption@@QAEXXZ	; CSocketOption::ApplyTESTSocketEffect
; Function compile flags: /Ogtp
;	COMDAT ?ApplyTESTSocketEffect@CSocketOption@@QAEXXZ
_TEXT	SEGMENT
?ApplyTESTSocketEffect@CSocketOption@@QAEXXZ PROC	; CSocketOption::ApplyTESTSocketEffect, COMDAT
; _this$ = ecx

; 1180 : 
; 1181 : }

  00000	c3		 ret	 0
?ApplyTESTSocketEffect@CSocketOption@@QAEXXZ ENDP	; CSocketOption::ApplyTESTSocketEffect
_TEXT	ENDS
PUBLIC	?ApplySocketReservedEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketReservedEffect
; Function compile flags: /Ogtp
;	COMDAT ?ApplySocketReservedEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketReservedEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketReservedEffect, COMDAT
; _this$ = ecx

; 1420 : 	int iIncValue = btEffectType;
; 1421 : }

  00000	c2 10 00	 ret	 16			; 00000010H
?ApplySocketReservedEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketReservedEffect
_TEXT	ENDS
PUBLIC	?ApplySocketBonusEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketBonusEffect
; Function compile flags: /Ogtp
;	COMDAT ?ApplySocketBonusEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketBonusEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketBonusEffect, COMDAT
; _this$ = ecx

; 1425 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1426 : 	int iIncValue = 0;
; 1427 : 	
; 1428 : 	switch(btEffectType)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00007	83 e8 2c	 sub	 eax, 44			; 0000002cH
  0000a	74 13		 je	 SHORT $LN2@ApplySocke
  0000c	48		 dec	 eax
  0000d	75 1c		 jne	 SHORT $LN3@ApplySocke

; 1432 : 		break;
; 1433 : 	case 45:
; 1434 : 		lpObj->SetOpIgnoreDefense += wOptionValue;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00012	8a 4d 14	 mov	 cl, BYTE PTR _wOptionValue$[ebp]
  00015	00 88 3e 11 00
	00		 add	 BYTE PTR [eax+4414], cl

; 1435 : 		break;
; 1436 : 	}
; 1437 : }

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
$LN2@ApplySocke:

; 1429 : 	{
; 1430 : 	case 44:
; 1431 : 		lpObj->SetOpDoubleDamage += wOptionValue;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00022	8a 55 14	 mov	 dl, BYTE PTR _wOptionValue$[ebp]
  00025	00 90 3f 11 00
	00		 add	 BYTE PTR [eax+4415], dl
$LN3@ApplySocke:

; 1435 : 		break;
; 1436 : 	}
; 1437 : }

  0002b	5d		 pop	 ebp
  0002c	c2 10 00	 ret	 16			; 00000010H
?ApplySocketBonusEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketBonusEffect
_TEXT	ENDS
PUBLIC	?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z	; CSocketOption::_CalcIncreaseValue
; Function compile flags: /Ogtp
;	COMDAT ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z
_TEXT	SEGMENT
_iValue$ = 8						; size = 4
_wOptionValue$ = 12					; size = 2
_btOptionType$ = 16					; size = 1
?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z PROC	; CSocketOption::_CalcIncreaseValue, COMDAT
; _this$ = ecx

; 1441 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1442 : 	int iIncValue = 0;
; 1443 : 
; 1444 : 	if(wOptionValue == 0)

  00003	66 8b 45 0c	 mov	 ax, WORD PTR _wOptionValue$[ebp]
  00007	66 85 c0	 test	 ax, ax
  0000a	75 06		 jne	 SHORT $LN9@CalcIncrea

; 1445 : 	{
; 1446 : 		return 0;

  0000c	33 c0		 xor	 eax, eax

; 1457 : 	
; 1458 : 	}
; 1459 : 
; 1460 : 	return iIncValue;
; 1461 : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN9@CalcIncrea:

; 1447 : 	}
; 1448 : 	
; 1449 : 	switch(btOptionType)

  00012	0f b6 4d 10	 movzx	 ecx, BYTE PTR _btOptionType$[ebp]
  00016	49		 dec	 ecx
  00017	83 f9 04	 cmp	 ecx, 4
  0001a	77 37		 ja	 SHORT $LN1@CalcIncrea
  0001c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@CalcIncrea[ecx*4]
$LN6@CalcIncrea:

; 1450 : 	{
; 1451 : 	case 1:iIncValue = wOptionValue;					break;

  00023	0f b7 c0	 movzx	 eax, ax

; 1457 : 	
; 1458 : 	}
; 1459 : 
; 1460 : 	return iIncValue;
; 1461 : }

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
$LN5@CalcIncrea:

; 1452 : 	case 2:iIncValue = iValue * wOptionValue / 100;		break;

  0002a	0f b7 c8	 movzx	 ecx, ax
  0002d	0f af 4d 08	 imul	 ecx, DWORD PTR _iValue$[ebp]
  00031	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00036	f7 e9		 imul	 ecx
  00038	c1 fa 05	 sar	 edx, 5
  0003b	8b c2		 mov	 eax, edx
  0003d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00040	03 c2		 add	 eax, edx

; 1457 : 	
; 1458 : 	}
; 1459 : 
; 1460 : 	return iIncValue;
; 1461 : }

  00042	5d		 pop	 ebp
  00043	c2 0c 00	 ret	 12			; 0000000cH
$LN2@CalcIncrea:

; 1453 : 	case 3:iIncValue = iValue / wOptionValue;			break;
; 1454 : 	case 4:iIncValue = iValue / wOptionValue;			break;
; 1455 : 	case 5:iIncValue = iValue / wOptionValue;			break;

  00046	0f b7 c8	 movzx	 ecx, ax
  00049	8b 45 08	 mov	 eax, DWORD PTR _iValue$[ebp]
  0004c	99		 cdq
  0004d	f7 f9		 idiv	 ecx

; 1457 : 	
; 1458 : 	}
; 1459 : 
; 1460 : 	return iIncValue;
; 1461 : }

  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
$LN1@CalcIncrea:

; 1456 : 	default: return -1;									break;

  00053	83 c8 ff	 or	 eax, -1

; 1457 : 	
; 1458 : 	}
; 1459 : 
; 1460 : 	return iIncValue;
; 1461 : }

  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
  0005a	8b ff		 npad	 2
$LN13@CalcIncrea:
  0005c	00 00 00 00	 DD	 $LN6@CalcIncrea
  00060	00 00 00 00	 DD	 $LN5@CalcIncrea
  00064	00 00 00 00	 DD	 $LN2@CalcIncrea
  00068	00 00 00 00	 DD	 $LN2@CalcIncrea
  0006c	00 00 00 00	 DD	 $LN2@CalcIncrea
?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ENDP	; CSocketOption::_CalcIncreaseValue
_TEXT	ENDS
PUBLIC	?ClearSlotOption@CSocketOption@@QAEXPAVCItem@@E@Z ; CSocketOption::ClearSlotOption
EXTRN	?ClearSocketOption@CItem@@QAEXE@Z:PROC		; CItem::ClearSocketOption
; Function compile flags: /Ogtp
;	COMDAT ?ClearSlotOption@CSocketOption@@QAEXPAVCItem@@E@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_btSocketSlotCount$ = 12				; size = 1
?ClearSlotOption@CSocketOption@@QAEXPAVCItem@@E@Z PROC	; CSocketOption::ClearSlotOption, COMDAT
; _this$ = ecx

; 1520 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1521 : 	lpItem->ClearSocketOption(btSocketSlotCount);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _btSocketSlotCount$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?ClearSocketOption@CItem@@QAEXE@Z ; CItem::ClearSocketOption

; 1522 : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?ClearSlotOption@CSocketOption@@QAEXPAVCItem@@E@Z ENDP	; CSocketOption::ClearSlotOption
_TEXT	ENDS
PUBLIC	?GetRandomSlotCount@CSocketOption@@QAEEH@Z	; CSocketOption::GetRandomSlotCount
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
; Function compile flags: /Ogtp
;	COMDAT ?GetRandomSlotCount@CSocketOption@@QAEEH@Z
_TEXT	SEGMENT
_item_num$ = 8						; size = 4
?GetRandomSlotCount@CSocketOption@@QAEEH@Z PROC		; CSocketOption::GetRandomSlotCount, COMDAT
; _this$ = ecx

; 1526 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1527 : 	int loc2 = 0;
; 1528 : 
; 1529 : 	if(ItemAttribute[item_num].HaveItemInfo == 1)

  00003	8b 55 08	 mov	 edx, DWORD PTR _item_num$[ebp]
  00006	6b d2 70	 imul	 edx, 112		; 00000070H
  00009	33 c0		 xor	 eax, eax
  0000b	80 ba 20 00 00
	00 01		 cmp	 BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[edx+32], 1
  00012	75 24		 jne	 SHORT $LN1@GetRandomS

; 1530 : 	{
; 1531 : 		if(ItemAttribute[item_num].TwoHand == 0)
; 1532 : 		{
; 1533 : 			loc2 = this->SocketSlotRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  00014	6a 01		 push	 1
  00016	38 82 21 00 00
	00		 cmp	 BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[edx+33], al
  0001c	75 0f		 jne	 SHORT $LN2@GetRandomS
  0001e	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H

; 1534 : 		}
; 1535 : 		else
; 1536 : 		{
; 1537 : 			loc2 = this->TwoHandWeaponSocketSlotRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  00024	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue

; 1538 : 		}
; 1539 : 	}
; 1540 : 
; 1541 : 	return loc2;
; 1542 : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN2@GetRandomS:

; 1534 : 		}
; 1535 : 		else
; 1536 : 		{
; 1537 : 			loc2 = this->TwoHandWeaponSocketSlotRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  0002d	81 c1 f0 04 00
	00		 add	 ecx, 1264		; 000004f0H
  00033	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
$LN1@GetRandomS:

; 1538 : 		}
; 1539 : 	}
; 1540 : 
; 1541 : 	return loc2;
; 1542 : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?GetRandomSlotCount@CSocketOption@@QAEEH@Z ENDP		; CSocketOption::GetRandomSlotCount
_TEXT	ENDS
PUBLIC	?RESET@SOCKET_ITEM@@QAEXXZ			; SOCKET_ITEM::RESET
; Function compile flags: /Ogtp
;	COMDAT ?RESET@SOCKET_ITEM@@QAEXXZ
_TEXT	SEGMENT
?RESET@SOCKET_ITEM@@QAEXXZ PROC				; SOCKET_ITEM::RESET, COMDAT
; _this$ = ecx

; 1802 : 	this->m_btEffectType = 0xFF;
; 1803 : 	this->m_wOptionValue = 0;

  00000	33 c0		 xor	 eax, eax
  00002	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 1804 : 	this->m_btOptionType = 0;

  00006	32 c0		 xor	 al, al
  00008	66 c7 01 ff 00	 mov	 WORD PTR [ecx], 255	; 000000ffH

; 1805 : 	this->m_btOptionCount = 0;

  0000d	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 1806 : }

  00010	c3		 ret	 0
?RESET@SOCKET_ITEM@@QAEXXZ ENDP				; SOCKET_ITEM::RESET
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCSocketOption@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSocketOption@@UAEPAXI@Z PROC			; CSocketOption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSocketOption@@UAE@XZ ; CSocketOption::~CSocketOption
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCSocketOption@@UAEPAXI@Z ENDP			; CSocketOption::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LoadScript@CSocketOption@@QAEEPAD@Z		; CSocketOption::LoadScript
EXTRN	?SetInfo@CSeed@@QAEXEEEEQAEH@Z:PROC		; CSeed::SetInfo
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@
CONST	SEGMENT
??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@ DB '[ERROR'
	DB	'] MAX SeedSphere Option Data Overflow! [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@
CONST	SEGMENT
??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@ DB '[SocketO'
	DB	'ption] SocketOption Script file Load failed. (%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadScript@CSocketOption@@QAEEPAD@Z
_TEXT	SEGMENT
_bt_24$209507 = -100					; size = 1
_bt_20$209506 = -96					; size = 1
_bt_28$209508 = -92					; size = 1
_bt_2C$209509 = -88					; size = 1
_m_68$209562 = -84					; size = 4
tv881 = -80						; size = 4
tv879 = -76						; size = 4
_m_0C$ = -72						; size = 4
_m_10$ = -68						; size = 4
_m_18$ = -64						; size = 4
_m_1C$ = -60						; size = 4
_this$GSCopy$ = -56					; size = 4
_m_70$209563 = -52					; size = 6
tv780 = -44						; size = 4
tv778 = -44						; size = 4
tv772 = -44						; size = 4
tv770 = -44						; size = 4
tv764 = -44						; size = 4
tv762 = -44						; size = 4
tv756 = -44						; size = 4
tv754 = -44						; size = 4
tv748 = -44						; size = 4
tv746 = -44						; size = 4
tv740 = -44						; size = 4
tv738 = -44						; size = 4
tv1018 = -40						; size = 4
tv1016 = -40						; size = 4
tv1010 = -40						; size = 4
tv1008 = -40						; size = 4
tv1002 = -40						; size = 4
tv1000 = -40						; size = 4
tv994 = -40						; size = 4
tv992 = -40						; size = 4
tv986 = -40						; size = 4
tv984 = -40						; size = 4
tv978 = -40						; size = 4
tv976 = -40						; size = 4
tv970 = -40						; size = 4
tv968 = -40						; size = 4
tv962 = -40						; size = 4
tv960 = -40						; size = 4
tv954 = -40						; size = 4
tv952 = -40						; size = 4
tv920 = -40						; size = 4
tv918 = -40						; size = 4
tv912 = -40						; size = 4
tv910 = -40						; size = 4
tv904 = -40						; size = 4
tv902 = -40						; size = 4
tv896 = -40						; size = 4
tv894 = -40						; size = 4
tv888 = -40						; size = 4
tv886 = -40						; size = 4
tv872 = -40						; size = 4
tv870 = -40						; size = 4
tv864 = -40						; size = 4
tv862 = -40						; size = 4
tv856 = -40						; size = 4
tv854 = -40						; size = 4
tv848 = -40						; size = 4
tv846 = -40						; size = 4
tv840 = -40						; size = 4
tv838 = -40						; size = 4
tv801 = -40						; size = 4
tv799 = -40						; size = 4
tv793 = -40						; size = 4
tv791 = -40						; size = 4
tv783 = -38						; size = 2
tv775 = -38						; size = 2
tv767 = -38						; size = 2
tv759 = -38						; size = 2
tv751 = -38						; size = 2
tv743 = -38						; size = 2
tv1021 = -34						; size = 2
tv1013 = -34						; size = 2
tv1005 = -34						; size = 2
tv997 = -34						; size = 2
tv989 = -34						; size = 2
tv981 = -34						; size = 2
tv973 = -34						; size = 2
tv965 = -34						; size = 2
tv957 = -34						; size = 2
tv923 = -34						; size = 2
tv915 = -34						; size = 2
tv907 = -34						; size = 2
tv899 = -34						; size = 2
tv891 = -34						; size = 2
tv876 = -34						; size = 2
tv867 = -34						; size = 2
tv859 = -34						; size = 2
tv851 = -34						; size = 2
tv843 = -34						; size = 2
tv804 = -34						; size = 2
tv796 = -34						; size = 2
_m_64$209561 = -33					; size = 1
_temp$209529 = -32					; size = 20
_bt_34$209510 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_lpszFileName$ = 8					; size = 4
?LoadScript@CSocketOption@@QAEEPAD@Z PROC		; CSocketOption::LoadScript, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 214  : 						break;
; 215  : 
; 216  : 					m_58 = (int)TokenNumber;

  00017	89 7d c8	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0001a	e8 00 00 00 00	 call	 ?Init@CSocketOption@@QAEXXZ ; CSocketOption::Init
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _fopen
  0002a	33 c9		 xor	 ecx, ecx
  0002c	83 c4 08	 add	 esp, 8
  0002f	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  00034	3b c1		 cmp	 eax, ecx
  00036	75 22		 jne	 SHORT $LN36@LoadScript

; 77   : 	this->Init();
; 78   : 
; 79   : 	SMDFile = fopen(lpszFileName, "r");
; 80   : 
; 81   : 	if(SMDFile == NULL)
; 82   : 	{
; 83   : 		MsgBox("[SocketOption] SocketOption Script file Load failed. (%s)",lpszFileName);

  00038	56		 push	 esi
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@
  0003e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00043	83 c4 08	 add	 esp, 8
  00046	5f		 pop	 edi

; 84   : 		return 0;

  00047	32 c0		 xor	 al, al
  00049	5e		 pop	 esi

; 268  : 
; 269  : 	return 1;
; 270  : }

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
$LN36@LoadScript:

; 85   : 	}
; 86   : 
; 87   : 	SMDToken Token;
; 88   : 
; 89   : 	int m_0C = 0;
; 90   : 	int m_10 = 0;

  0005a	89 4d bc	 mov	 DWORD PTR _m_10$[ebp], ecx

; 91   : 	int m_14 = 0;
; 92   : 	int m_18 = 0;

  0005d	89 4d c0	 mov	 DWORD PTR _m_18$[ebp], ecx

; 93   : 	int m_1C = 0;

  00060	89 4d c4	 mov	 DWORD PTR _m_1C$[ebp], ecx

; 94   : 
; 95   : 	while(TRUE)
; 96   : 	{
; 97   : 		Token = GetToken();

  00063	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 98   : 
; 99   : 		if ( Token == END )

  00068	83 f8 02	 cmp	 eax, 2
  0006b	0f 84 01 08 00
	00		 je	 $LN48@LoadScript
  00071	53		 push	 ebx
$LL35@LoadScript:

; 100  : 			break;
; 101  : 			
; 102  : 		if(!strcmp("end",TokenString))

  00072	ba 00 00 00 00	 mov	 edx, OFFSET _TokenString
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0007c	8d 64 24 00	 npad	 4
$LL62@LoadScript:
  00080	8a 19		 mov	 bl, BYTE PTR [ecx]
  00082	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00084	75 1a		 jne	 SHORT $LN63@LoadScript
  00086	84 db		 test	 bl, bl
  00088	74 12		 je	 SHORT $LN64@LoadScript
  0008a	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  0008d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00090	75 0e		 jne	 SHORT $LN63@LoadScript
  00092	83 c1 02	 add	 ecx, 2
  00095	83 c2 02	 add	 edx, 2
  00098	84 db		 test	 bl, bl
  0009a	75 e4		 jne	 SHORT $LL62@LoadScript
$LN64@LoadScript:
  0009c	33 c9		 xor	 ecx, ecx
  0009e	eb 05		 jmp	 SHORT $LN65@LoadScript
$LN63@LoadScript:
  000a0	1b c9		 sbb	 ecx, ecx
  000a2	83 d9 ff	 sbb	 ecx, -1
$LN65@LoadScript:
  000a5	85 c9		 test	 ecx, ecx
  000a7	0f 84 c4 07 00
	00		 je	 $LN88@LoadScript

; 103  : 			break;
; 104  : 
; 105  : 		if( Token == NUMBER )

  000ad	83 f8 01	 cmp	 eax, 1
  000b0	0f 85 ad 07 00
	00		 jne	 $LN83@LoadScript

; 106  : 		{
; 107  : 			m_0C = (int)TokenNumber;

  000b6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000bc	e8 00 00 00 00	 call	 __ftol2_sse
  000c1	8b d8		 mov	 ebx, eax
  000c3	8b 45 c4	 mov	 eax, DWORD PTR _m_1C$[ebp]
  000c6	03 c0		 add	 eax, eax
  000c8	8d b4 c7 a1 04
	00 00		 lea	 esi, DWORD PTR [edi+eax*8+1185]
  000cf	8b 45 c0	 mov	 eax, DWORD PTR _m_18$[ebp]
  000d2	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  000d5	8b 45 bc	 mov	 eax, DWORD PTR _m_10$[ebp]
  000d8	8d 94 8f 28 04
	00 00		 lea	 edx, DWORD PTR [edi+ecx*4+1064]
  000df	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000e2	8d 4c 87 04	 lea	 ecx, DWORD PTR [edi+eax*4+4]
  000e6	89 5d b8	 mov	 DWORD PTR _m_0C$[ebp], ebx
  000e9	89 55 b4	 mov	 DWORD PTR tv879[ebp], edx
  000ec	89 4d b0	 mov	 DWORD PTR tv881[ebp], ecx
  000ef	90		 npad	 1
$LL30@LoadScript:

; 108  : 
; 109  : 			while(true)
; 110  : 			{
; 111  : 				if(m_0C == 0)// m_0c == 0 - identical

  000f0	85 db		 test	 ebx, ebx
  000f2	0f 85 23 02 00
	00		 jne	 $LN28@LoadScript

; 112  : 				{
; 113  : 					BYTE bt_20 = 0;
; 114  : 					BYTE bt_24 = 0;
; 115  : 					BYTE bt_28 = 0;
; 116  : 					BYTE bt_2C = 0;
; 117  : 					BYTE bt_34[MAX_SOCKET_OPTION] = {0};

  000f8	88 5d f4	 mov	 BYTE PTR _bt_34$209510[ebp], bl
  000fb	89 5d f5	 mov	 DWORD PTR _bt_34$209510[ebp+1], ebx

; 118  : 
; 119  : 					int m_38 = 0;
; 120  : 					int m_3C = 0;
; 121  : 
; 122  : 					Token = GetToken();

  000fe	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 
; 124  : 					if(!strcmp("end",TokenString))

  00103	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00108	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0010d	8d 49 00	 npad	 3
$LL66@LoadScript:
  00110	8a 10		 mov	 dl, BYTE PTR [eax]
  00112	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00114	75 1a		 jne	 SHORT $LN67@LoadScript
  00116	84 d2		 test	 dl, dl
  00118	74 12		 je	 SHORT $LN68@LoadScript
  0011a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0011d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00120	75 0e		 jne	 SHORT $LN67@LoadScript
  00122	83 c0 02	 add	 eax, 2
  00125	83 c1 02	 add	 ecx, 2
  00128	84 d2		 test	 dl, dl
  0012a	75 e4		 jne	 SHORT $LL66@LoadScript
$LN68@LoadScript:
  0012c	33 c0		 xor	 eax, eax
  0012e	eb 05		 jmp	 SHORT $LN69@LoadScript
$LN67@LoadScript:
  00130	1b c0		 sbb	 eax, eax
  00132	83 d8 ff	 sbb	 eax, -1
$LN69@LoadScript:
  00135	85 c0		 test	 eax, eax
  00137	0f 84 26 07 00
	00		 je	 $LN83@LoadScript

; 125  : 						break;
; 126  : 
; 127  : 					bt_20 = (BYTE)TokenNumber;

  0013d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00143	d9 7d de	 fnstcw	 WORD PTR tv1021[ebp]
  00146	0f b7 45 de	 movzx	 eax, WORD PTR tv1021[ebp]
  0014a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0014f	89 45 d8	 mov	 DWORD PTR tv1018[ebp], eax
  00152	d9 6d d8	 fldcw	 WORD PTR tv1018[ebp]
  00155	db 5d d8	 fistp	 DWORD PTR tv1016[ebp]
  00158	8a 5d d8	 mov	 bl, BYTE PTR tv1016[ebp]
  0015b	88 5d a0	 mov	 BYTE PTR _bt_20$209506[ebp], bl
  0015e	d9 6d de	 fldcw	 WORD PTR tv1021[ebp]

; 128  : 					
; 129  : 					Token = GetToken();		bt_24		= (BYTE)TokenNumber;	

  00161	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00166	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0016c	d9 7d de	 fnstcw	 WORD PTR tv1013[ebp]
  0016f	0f b7 45 de	 movzx	 eax, WORD PTR tv1013[ebp]
  00173	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00178	89 45 d8	 mov	 DWORD PTR tv1010[ebp], eax
  0017b	d9 6d d8	 fldcw	 WORD PTR tv1010[ebp]
  0017e	db 5d d8	 fistp	 DWORD PTR tv1008[ebp]
  00181	0f b6 55 d8	 movzx	 edx, BYTE PTR tv1008[ebp]
  00185	88 55 9c	 mov	 BYTE PTR _bt_24$209507[ebp], dl
  00188	d9 6d de	 fldcw	 WORD PTR tv1013[ebp]

; 130  : 					Token = GetToken();		bt_28		= (BYTE)TokenNumber;		

  0018b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00190	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00196	d9 7d de	 fnstcw	 WORD PTR tv1005[ebp]
  00199	0f b7 45 de	 movzx	 eax, WORD PTR tv1005[ebp]
  0019d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001a2	89 45 d8	 mov	 DWORD PTR tv1002[ebp], eax
  001a5	d9 6d d8	 fldcw	 WORD PTR tv1002[ebp]
  001a8	db 5d d8	 fistp	 DWORD PTR tv1000[ebp]
  001ab	0f b6 45 d8	 movzx	 eax, BYTE PTR tv1000[ebp]
  001af	88 45 a4	 mov	 BYTE PTR _bt_28$209508[ebp], al
  001b2	d9 6d de	 fldcw	 WORD PTR tv1005[ebp]

; 131  : 					Token = GetToken();		// Reserved for Name

  001b5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 132  : 					Token = GetToken();		bt_2C		= (BYTE)TokenNumber;		

  001ba	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001bf	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c5	d9 7d de	 fnstcw	 WORD PTR tv997[ebp]
  001c8	0f b7 45 de	 movzx	 eax, WORD PTR tv997[ebp]
  001cc	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001d1	89 45 d8	 mov	 DWORD PTR tv994[ebp], eax
  001d4	d9 6d d8	 fldcw	 WORD PTR tv994[ebp]
  001d7	db 5d d8	 fistp	 DWORD PTR tv992[ebp]
  001da	0f b6 4d d8	 movzx	 ecx, BYTE PTR tv992[ebp]
  001de	88 4d a8	 mov	 BYTE PTR _bt_2C$209509[ebp], cl
  001e1	d9 6d de	 fldcw	 WORD PTR tv997[ebp]

; 133  : 					Token = GetToken();		bt_34[0]	= (BYTE)TokenNumber;	

  001e4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001e9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ef	d9 7d de	 fnstcw	 WORD PTR tv989[ebp]
  001f2	0f b7 45 de	 movzx	 eax, WORD PTR tv989[ebp]
  001f6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001fb	89 45 d8	 mov	 DWORD PTR tv986[ebp], eax
  001fe	d9 6d d8	 fldcw	 WORD PTR tv986[ebp]
  00201	db 5d d8	 fistp	 DWORD PTR tv984[ebp]
  00204	0f b6 55 d8	 movzx	 edx, BYTE PTR tv984[ebp]
  00208	88 55 f4	 mov	 BYTE PTR _bt_34$209510[ebp], dl
  0020b	d9 6d de	 fldcw	 WORD PTR tv989[ebp]

; 134  : 					Token = GetToken();		bt_34[1]	= (BYTE)TokenNumber;	

  0020e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00213	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00219	d9 7d de	 fnstcw	 WORD PTR tv981[ebp]
  0021c	0f b7 45 de	 movzx	 eax, WORD PTR tv981[ebp]
  00220	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00225	89 45 d8	 mov	 DWORD PTR tv978[ebp], eax
  00228	d9 6d d8	 fldcw	 WORD PTR tv978[ebp]
  0022b	db 5d d8	 fistp	 DWORD PTR tv976[ebp]
  0022e	0f b6 45 d8	 movzx	 eax, BYTE PTR tv976[ebp]
  00232	88 45 f5	 mov	 BYTE PTR _bt_34$209510[ebp+1], al
  00235	d9 6d de	 fldcw	 WORD PTR tv981[ebp]

; 135  : 					Token = GetToken();		bt_34[2]	= (BYTE)TokenNumber;		

  00238	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0023d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00243	d9 7d de	 fnstcw	 WORD PTR tv973[ebp]
  00246	0f b7 45 de	 movzx	 eax, WORD PTR tv973[ebp]
  0024a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0024f	89 45 d8	 mov	 DWORD PTR tv970[ebp], eax
  00252	d9 6d d8	 fldcw	 WORD PTR tv970[ebp]
  00255	db 5d d8	 fistp	 DWORD PTR tv968[ebp]
  00258	0f b6 4d d8	 movzx	 ecx, BYTE PTR tv968[ebp]
  0025c	88 4d f6	 mov	 BYTE PTR _bt_34$209510[ebp+2], cl
  0025f	d9 6d de	 fldcw	 WORD PTR tv973[ebp]

; 136  : 					Token = GetToken();		bt_34[3]	= (BYTE)TokenNumber;	

  00262	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00267	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026d	d9 7d de	 fnstcw	 WORD PTR tv965[ebp]
  00270	0f b7 45 de	 movzx	 eax, WORD PTR tv965[ebp]
  00274	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00279	89 45 d8	 mov	 DWORD PTR tv962[ebp], eax
  0027c	d9 6d d8	 fldcw	 WORD PTR tv962[ebp]
  0027f	db 5d d8	 fistp	 DWORD PTR tv960[ebp]
  00282	0f b6 55 d8	 movzx	 edx, BYTE PTR tv960[ebp]
  00286	88 55 f7	 mov	 BYTE PTR _bt_34$209510[ebp+3], dl
  00289	d9 6d de	 fldcw	 WORD PTR tv965[ebp]

; 137  : 					Token = GetToken();		bt_34[4]	= (BYTE)TokenNumber;	

  0028c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00291	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00297	d9 7d de	 fnstcw	 WORD PTR tv957[ebp]
  0029a	0f b7 45 de	 movzx	 eax, WORD PTR tv957[ebp]
  0029e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002a3	89 45 d8	 mov	 DWORD PTR tv954[ebp], eax
  002a6	d9 6d d8	 fldcw	 WORD PTR tv954[ebp]
  002a9	db 5d d8	 fistp	 DWORD PTR tv952[ebp]
  002ac	0f b6 45 d8	 movzx	 eax, BYTE PTR tv952[ebp]
  002b0	88 45 f8	 mov	 BYTE PTR _bt_34$209510[ebp+4], al
  002b3	d9 6d de	 fldcw	 WORD PTR tv957[ebp]

; 138  : 					Token = GetToken();		m_38		= (int)TokenNumber;

  002b6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002bb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c1	e8 00 00 00 00	 call	 __ftol2_sse
  002c6	8b f8		 mov	 edi, eax

; 139  : 
; 140  : 
; 141  : 					this->SocketRandomPool.AddValue(bt_20,m_38);

  002c8	0f b6 cb	 movzx	 ecx, bl
  002cb	57		 push	 edi
  002cc	51		 push	 ecx
  002cd	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002d0	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  002d6	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 142  : 
; 143  : 					this->SocketSeed[m_10].SetInfo(bt_20,bt_24,bt_28,bt_2C,bt_34,m_38);

  002db	8b 45 a8	 mov	 eax, DWORD PTR _bt_2C$209509[ebp]
  002de	8b 4d a4	 mov	 ecx, DWORD PTR _bt_28$209508[ebp]
  002e1	57		 push	 edi
  002e2	8b 7d b0	 mov	 edi, DWORD PTR tv881[ebp]
  002e5	8d 55 f4	 lea	 edx, DWORD PTR _bt_34$209510[ebp]
  002e8	52		 push	 edx
  002e9	8b 55 9c	 mov	 edx, DWORD PTR _bt_24$209507[ebp]
  002ec	50		 push	 eax
  002ed	8b 45 a0	 mov	 eax, DWORD PTR _bt_20$209506[ebp]
  002f0	51		 push	 ecx
  002f1	52		 push	 edx
  002f2	50		 push	 eax
  002f3	8b cf		 mov	 ecx, edi
  002f5	e8 00 00 00 00	 call	 ?SetInfo@CSeed@@QAEXEEEEQAEH@Z ; CSeed::SetInfo

; 144  : 
; 145  : 					m_10++;

  002fa	8b 45 bc	 mov	 eax, DWORD PTR _m_10$[ebp]
  002fd	40		 inc	 eax
  002fe	83 c7 14	 add	 edi, 20			; 00000014H
  00301	89 45 bc	 mov	 DWORD PTR _m_10$[ebp], eax
  00304	89 7d b0	 mov	 DWORD PTR tv881[ebp], edi

; 146  : 
; 147  : 					if(m_10 > MAX_SEED_OPTION)

  00307	83 f8 32	 cmp	 eax, 50			; 00000032H
  0030a	0f 8f 42 05 00
	00		 jg	 $LN44@LoadScript

; 150  : 						break;
; 151  : 					}
; 152  : 				}

  00310	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00313	8b 5d b8	 mov	 ebx, DWORD PTR _m_0C$[ebp]
  00316	e9 d5 fd ff ff	 jmp	 $LL30@LoadScript
$LN28@LoadScript:

; 153  : 
; 154  : 				else if(m_0C == 1)//m0C == 1 - identical

  0031b	83 fb 01	 cmp	 ebx, 1
  0031e	0f 85 81 02 00
	00		 jne	 $LN24@LoadScript

; 155  : 				{
; 156  : 					Token = GetToken();

  00324	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 157  : 
; 158  : 					if(!strcmp("end",TokenString))

  00329	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0032e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL70@LoadScript:
  00333	8a 10		 mov	 dl, BYTE PTR [eax]
  00335	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00337	75 1a		 jne	 SHORT $LN71@LoadScript
  00339	84 d2		 test	 dl, dl
  0033b	74 12		 je	 SHORT $LN72@LoadScript
  0033d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00340	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00343	75 0e		 jne	 SHORT $LN71@LoadScript
  00345	83 c0 02	 add	 eax, 2
  00348	83 c1 02	 add	 ecx, 2
  0034b	84 d2		 test	 dl, dl
  0034d	75 e4		 jne	 SHORT $LL70@LoadScript
$LN72@LoadScript:
  0034f	33 c0		 xor	 eax, eax
  00351	eb 05		 jmp	 SHORT $LN73@LoadScript
$LN71@LoadScript:
  00353	1b c0		 sbb	 eax, eax
  00355	83 d8 ff	 sbb	 eax, -1
$LN73@LoadScript:
  00358	85 c0		 test	 eax, eax
  0035a	0f 84 03 05 00
	00		 je	 $LN83@LoadScript

; 159  : 						break;
; 160  : 
; 161  : 					CSocketSphere temp;
; 162  : 
; 163  : 					memset(&temp,0,sizeof(temp));
; 164  : 
; 165  : 					temp.m_btOptionIndex = (BYTE)TokenNumber;

  00360	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00366	33 c0		 xor	 eax, eax
  00368	89 45 e0	 mov	 DWORD PTR _temp$209529[ebp], eax
  0036b	d9 7d de	 fnstcw	 WORD PTR tv923[ebp]
  0036e	89 45 e4	 mov	 DWORD PTR _temp$209529[ebp+4], eax
  00371	89 45 e8	 mov	 DWORD PTR _temp$209529[ebp+8], eax
  00374	89 45 ec	 mov	 DWORD PTR _temp$209529[ebp+12], eax
  00377	89 45 f0	 mov	 DWORD PTR _temp$209529[ebp+16], eax
  0037a	0f b7 45 de	 movzx	 eax, WORD PTR tv923[ebp]
  0037e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00383	89 45 d8	 mov	 DWORD PTR tv920[ebp], eax
  00386	d9 6d d8	 fldcw	 WORD PTR tv920[ebp]
  00389	db 5d d8	 fistp	 DWORD PTR tv918[ebp]
  0038c	0f b6 4d d8	 movzx	 ecx, BYTE PTR tv918[ebp]
  00390	88 4d e0	 mov	 BYTE PTR _temp$209529[ebp], cl
  00393	d9 6d de	 fldcw	 WORD PTR tv923[ebp]

; 166  : 
; 167  : 
; 168  : 					Token = GetToken();		temp.m_btElementIndex	= (BYTE)TokenNumber;

  00396	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0039b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003a1	d9 7d de	 fnstcw	 WORD PTR tv915[ebp]
  003a4	0f b7 45 de	 movzx	 eax, WORD PTR tv915[ebp]
  003a8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003ad	89 45 d8	 mov	 DWORD PTR tv912[ebp], eax
  003b0	d9 6d d8	 fldcw	 WORD PTR tv912[ebp]
  003b3	db 5d d8	 fistp	 DWORD PTR tv910[ebp]
  003b6	0f b6 55 d8	 movzx	 edx, BYTE PTR tv910[ebp]
  003ba	88 55 e2	 mov	 BYTE PTR _temp$209529[ebp+2], dl
  003bd	d9 6d de	 fldcw	 WORD PTR tv915[ebp]

; 169  : 					Token = GetToken();		temp.m_btElementType	= (BYTE)TokenNumber;

  003c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003c5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003cb	d9 7d de	 fnstcw	 WORD PTR tv907[ebp]
  003ce	0f b7 45 de	 movzx	 eax, WORD PTR tv907[ebp]
  003d2	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003d7	89 45 d8	 mov	 DWORD PTR tv904[ebp], eax
  003da	d9 6d d8	 fldcw	 WORD PTR tv904[ebp]
  003dd	db 5d d8	 fistp	 DWORD PTR tv902[ebp]
  003e0	0f b6 45 d8	 movzx	 eax, BYTE PTR tv902[ebp]
  003e4	88 45 e3	 mov	 BYTE PTR _temp$209529[ebp+3], al
  003e7	d9 6d de	 fldcw	 WORD PTR tv907[ebp]

; 170  : 					Token = GetToken();		// Reserved for Name

  003ea	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 171  : 					Token = GetToken();		temp.m_btOptionType	= (BYTE)TokenNumber;

  003ef	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003f4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003fa	d9 7d de	 fnstcw	 WORD PTR tv899[ebp]
  003fd	0f b7 45 de	 movzx	 eax, WORD PTR tv899[ebp]
  00401	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00406	89 45 d8	 mov	 DWORD PTR tv896[ebp], eax
  00409	d9 6d d8	 fldcw	 WORD PTR tv896[ebp]
  0040c	db 5d d8	 fistp	 DWORD PTR tv894[ebp]
  0040f	0f b6 4d d8	 movzx	 ecx, BYTE PTR tv894[ebp]
  00413	88 4d e4	 mov	 BYTE PTR _temp$209529[ebp+4], cl
  00416	d9 6d de	 fldcw	 WORD PTR tv899[ebp]

; 172  : 					Token = GetToken();		temp.m_btOptionValue	= (BYTE)TokenNumber;

  00419	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0041e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00424	d9 7d de	 fnstcw	 WORD PTR tv891[ebp]
  00427	0f b7 45 de	 movzx	 eax, WORD PTR tv891[ebp]
  0042b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00430	89 45 d8	 mov	 DWORD PTR tv888[ebp], eax
  00433	d9 6d d8	 fldcw	 WORD PTR tv888[ebp]
  00436	db 5d d8	 fistp	 DWORD PTR tv886[ebp]
  00439	0f b6 55 d8	 movzx	 edx, BYTE PTR tv886[ebp]
  0043d	88 55 e5	 mov	 BYTE PTR _temp$209529[ebp+5], dl
  00440	d9 6d de	 fldcw	 WORD PTR tv891[ebp]

; 173  : 					Token = GetToken();		temp.m_iOptionRate	= (int)TokenNumber;

  00443	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00448	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0044e	e8 00 00 00 00	 call	 __ftol2_sse
  00453	8b f8		 mov	 edi, eax

; 174  : 					Token = GetToken();		temp.m_btSocketSlot[0]= (BYTE)TokenNumber;

  00455	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0045a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00460	d9 7d de	 fnstcw	 WORD PTR tv876[ebp]
  00463	0f b7 45 de	 movzx	 eax, WORD PTR tv876[ebp]
  00467	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0046c	89 45 d8	 mov	 DWORD PTR tv872[ebp], eax
  0046f	d9 6d d8	 fldcw	 WORD PTR tv872[ebp]
  00472	db 5d d8	 fistp	 DWORD PTR tv870[ebp]
  00475	8a 5d d8	 mov	 bl, BYTE PTR tv870[ebp]
  00478	88 5d ec	 mov	 BYTE PTR _temp$209529[ebp+12], bl
  0047b	d9 6d de	 fldcw	 WORD PTR tv876[ebp]

; 175  : 					Token = GetToken();		temp.m_btSocketSlot[1]= (BYTE)TokenNumber;

  0047e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00483	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00489	d9 7d de	 fnstcw	 WORD PTR tv867[ebp]
  0048c	0f b7 45 de	 movzx	 eax, WORD PTR tv867[ebp]
  00490	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00495	89 45 d8	 mov	 DWORD PTR tv864[ebp], eax
  00498	d9 6d d8	 fldcw	 WORD PTR tv864[ebp]
  0049b	db 5d d8	 fistp	 DWORD PTR tv862[ebp]
  0049e	0f b6 45 d8	 movzx	 eax, BYTE PTR tv862[ebp]
  004a2	88 45 ed	 mov	 BYTE PTR _temp$209529[ebp+13], al
  004a5	d9 6d de	 fldcw	 WORD PTR tv867[ebp]

; 176  : 					Token = GetToken();		temp.m_btSocketSlot[2]= (BYTE)TokenNumber;

  004a8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004ad	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004b3	d9 7d de	 fnstcw	 WORD PTR tv859[ebp]
  004b6	0f b7 45 de	 movzx	 eax, WORD PTR tv859[ebp]
  004ba	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004bf	89 45 d8	 mov	 DWORD PTR tv856[ebp], eax
  004c2	d9 6d d8	 fldcw	 WORD PTR tv856[ebp]
  004c5	db 5d d8	 fistp	 DWORD PTR tv854[ebp]
  004c8	0f b6 4d d8	 movzx	 ecx, BYTE PTR tv854[ebp]
  004cc	88 4d ee	 mov	 BYTE PTR _temp$209529[ebp+14], cl
  004cf	d9 6d de	 fldcw	 WORD PTR tv859[ebp]

; 177  : 					Token = GetToken();		temp.m_btSocketSlot[3]= (BYTE)TokenNumber;

  004d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  004d7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004dd	d9 7d de	 fnstcw	 WORD PTR tv851[ebp]
  004e0	0f b7 45 de	 movzx	 eax, WORD PTR tv851[ebp]
  004e4	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004e9	89 45 d8	 mov	 DWORD PTR tv848[ebp], eax
  004ec	d9 6d d8	 fldcw	 WORD PTR tv848[ebp]
  004ef	db 5d d8	 fistp	 DWORD PTR tv846[ebp]
  004f2	0f b6 55 d8	 movzx	 edx, BYTE PTR tv846[ebp]
  004f6	88 55 ef	 mov	 BYTE PTR _temp$209529[ebp+15], dl
  004f9	d9 6d de	 fldcw	 WORD PTR tv851[ebp]

; 178  : 					Token = GetToken();		temp.m_btSocketSlot[4]= (BYTE)TokenNumber;

  004fc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00501	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00507	d9 7d de	 fnstcw	 WORD PTR tv843[ebp]
  0050a	0f b7 45 de	 movzx	 eax, WORD PTR tv843[ebp]
  0050e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00513	89 45 d8	 mov	 DWORD PTR tv840[ebp], eax
  00516	d9 6d d8	 fldcw	 WORD PTR tv840[ebp]
  00519	db 5d d8	 fistp	 DWORD PTR tv838[ebp]
  0051c	8a 45 d8	 mov	 al, BYTE PTR tv838[ebp]
  0051f	88 45 f0	 mov	 BYTE PTR _temp$209529[ebp+16], al
  00522	d9 6d de	 fldcw	 WORD PTR tv843[ebp]

; 179  : 
; 180  : 					for(int n = 0;n < MAX_SOCKET_OPTION;n++)
; 181  : 					{
; 182  : 						if(temp.m_btSocketSlot[n] != NULL)

  00525	84 db		 test	 bl, bl
  00527	74 03		 je	 SHORT $LN21@LoadScript

; 183  : 						{
; 184  : 							temp.m_btSocketSlotCount++;

  00529	fe 45 f1	 inc	 BYTE PTR _temp$209529[ebp+17]
$LN21@LoadScript:

; 179  : 
; 180  : 					for(int n = 0;n < MAX_SOCKET_OPTION;n++)
; 181  : 					{
; 182  : 						if(temp.m_btSocketSlot[n] != NULL)

  0052c	80 7d ed 00	 cmp	 BYTE PTR _temp$209529[ebp+13], 0
  00530	74 03		 je	 SHORT $LN85@LoadScript

; 183  : 						{
; 184  : 							temp.m_btSocketSlotCount++;

  00532	fe 45 f1	 inc	 BYTE PTR _temp$209529[ebp+17]
$LN85@LoadScript:

; 179  : 
; 180  : 					for(int n = 0;n < MAX_SOCKET_OPTION;n++)
; 181  : 					{
; 182  : 						if(temp.m_btSocketSlot[n] != NULL)

  00535	80 7d ee 00	 cmp	 BYTE PTR _temp$209529[ebp+14], 0
  00539	74 03		 je	 SHORT $LN86@LoadScript

; 183  : 						{
; 184  : 							temp.m_btSocketSlotCount++;

  0053b	fe 45 f1	 inc	 BYTE PTR _temp$209529[ebp+17]
$LN86@LoadScript:

; 179  : 
; 180  : 					for(int n = 0;n < MAX_SOCKET_OPTION;n++)
; 181  : 					{
; 182  : 						if(temp.m_btSocketSlot[n] != NULL)

  0053e	80 7d ef 00	 cmp	 BYTE PTR _temp$209529[ebp+15], 0
  00542	74 03		 je	 SHORT $LN87@LoadScript

; 183  : 						{
; 184  : 							temp.m_btSocketSlotCount++;

  00544	fe 45 f1	 inc	 BYTE PTR _temp$209529[ebp+17]
$LN87@LoadScript:

; 179  : 
; 180  : 					for(int n = 0;n < MAX_SOCKET_OPTION;n++)
; 181  : 					{
; 182  : 						if(temp.m_btSocketSlot[n] != NULL)

  00547	84 c0		 test	 al, al
  00549	74 03		 je	 SHORT $LN61@LoadScript

; 183  : 						{
; 184  : 							temp.m_btSocketSlotCount++;

  0054b	fe 45 f1	 inc	 BYTE PTR _temp$209529[ebp+17]
$LN61@LoadScript:

; 185  : 						}
; 186  : 					}
; 187  : 
; 188  : 					switch(temp.m_btOptionIndex)

  0054e	0f b6 45 e0	 movzx	 eax, BYTE PTR _temp$209529[ebp]
  00552	83 f8 05	 cmp	 eax, 5
  00555	77 1d		 ja	 SHORT $LN17@LoadScript
  00557	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN89@LoadScript[eax*4]
$LN16@LoadScript:

; 189  : 					{
; 190  : 						case 0:	temp.m_btEffectType = 0;	break;

  0055e	c6 45 e1 00	 mov	 BYTE PTR _temp$209529[ebp+1], 0
  00562	eb 10		 jmp	 SHORT $LN17@LoadScript
$LN15@LoadScript:

; 191  : 						case 1:	temp.m_btEffectType = 18;	break;

  00564	c6 45 e1 12	 mov	 BYTE PTR _temp$209529[ebp+1], 18 ; 00000012H
  00568	eb 0a		 jmp	 SHORT $LN17@LoadScript
$LN12@LoadScript:

; 192  : 						case 2:	temp.m_btEffectType = 0;	break;
; 193  : 						case 3:	temp.m_btEffectType = 18;	break;
; 194  : 						case 4:	temp.m_btEffectType = 11;	break;

  0056a	c6 45 e1 0b	 mov	 BYTE PTR _temp$209529[ebp+1], 11 ; 0000000bH
  0056e	eb 04		 jmp	 SHORT $LN17@LoadScript
$LN11@LoadScript:

; 195  : 						case 5:	temp.m_btEffectType = 22;	break;

  00570	c6 45 e1 16	 mov	 BYTE PTR _temp$209529[ebp+1], 22 ; 00000016H
$LN17@LoadScript:

; 196  : 					}
; 197  : 
; 198  : 					memcpy(&this->SocketSpear[m_18],&temp,sizeof(temp));

  00574	8b 45 b4	 mov	 eax, DWORD PTR tv879[ebp]
  00577	8b 4d e0	 mov	 ecx, DWORD PTR _temp$209529[ebp]
  0057a	8b 55 e4	 mov	 edx, DWORD PTR _temp$209529[ebp+4]

; 199  : 					m_18++;

  0057d	ff 45 c0	 inc	 DWORD PTR _m_18$[ebp]
  00580	8b 5d b8	 mov	 ebx, DWORD PTR _m_0C$[ebp]
  00583	89 08		 mov	 DWORD PTR [eax], ecx
  00585	8b 4d ec	 mov	 ecx, DWORD PTR _temp$209529[ebp+12]
  00588	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0058b	8b 55 f0	 mov	 edx, DWORD PTR _temp$209529[ebp+16]
  0058e	89 78 08	 mov	 DWORD PTR [eax+8], edi
  00591	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00594	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00597	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0059a	83 c0 14	 add	 eax, 20			; 00000014H
  0059d	89 45 b4	 mov	 DWORD PTR tv879[ebp], eax
  005a0	e9 4b fb ff ff	 jmp	 $LL30@LoadScript
$LN24@LoadScript:

; 200  : 				
; 201  : 				}
; 202  : 				else if(m_0C == 2)//m_0C == 2  - Identical

  005a5	83 fb 02	 cmp	 ebx, 2
  005a8	0f 85 21 02 00
	00		 jne	 $LN9@LoadScript

; 203  : 				{
; 204  : 					int m_58 = 0;
; 205  : 					BYTE m_5C = 0;
; 206  : 					BYTE m_60 = 0;
; 207  : 					BYTE m_64 = 0;
; 208  : 					int m_68 = 0;
; 209  : 					BYTE m_70[MAX_SPHERE_OPTION] = { 0 };
; 210  : 
; 211  : 					Token = GetToken();

  005ae	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 212  : 
; 213  : 					if(!strcmp("end",TokenString))

  005b3	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  005b8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  005bd	8d 49 00	 npad	 3
$LL74@LoadScript:
  005c0	8a 10		 mov	 dl, BYTE PTR [eax]
  005c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  005c4	75 1a		 jne	 SHORT $LN75@LoadScript
  005c6	84 d2		 test	 dl, dl
  005c8	74 12		 je	 SHORT $LN76@LoadScript
  005ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  005cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  005d0	75 0e		 jne	 SHORT $LN75@LoadScript
  005d2	83 c0 02	 add	 eax, 2
  005d5	83 c1 02	 add	 ecx, 2
  005d8	84 d2		 test	 dl, dl
  005da	75 e4		 jne	 SHORT $LL74@LoadScript
$LN76@LoadScript:
  005dc	33 c0		 xor	 eax, eax
  005de	eb 05		 jmp	 SHORT $LN77@LoadScript
$LN75@LoadScript:
  005e0	1b c0		 sbb	 eax, eax
  005e2	83 d8 ff	 sbb	 eax, -1
$LN77@LoadScript:
  005e5	85 c0		 test	 eax, eax
  005e7	0f 84 76 02 00
	00		 je	 $LN83@LoadScript

; 214  : 						break;
; 215  : 
; 216  : 					m_58 = (int)TokenNumber;

  005ed	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  005f3	e8 00 00 00 00	 call	 __ftol2_sse
  005f8	8b f8		 mov	 edi, eax

; 217  : 
; 218  : 					Token = GetToken();		m_5C = (BYTE)TokenNumber;

  005fa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 219  : 					Token = GetToken();		// Reserved for Name

  005ff	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 220  : 					Token = GetToken();		m_60 = (BYTE)TokenNumber;

  00604	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00609	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0060f	d9 7d de	 fnstcw	 WORD PTR tv804[ebp]
  00612	0f b7 45 de	 movzx	 eax, WORD PTR tv804[ebp]
  00616	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0061b	89 45 d8	 mov	 DWORD PTR tv801[ebp], eax
  0061e	d9 6d d8	 fldcw	 WORD PTR tv801[ebp]
  00621	db 5d d8	 fistp	 DWORD PTR tv799[ebp]
  00624	8a 5d d8	 mov	 bl, BYTE PTR tv799[ebp]
  00627	d9 6d de	 fldcw	 WORD PTR tv804[ebp]

; 221  : 					Token = GetToken();		m_64 = (BYTE)TokenNumber;

  0062a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0062f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00635	d9 7d de	 fnstcw	 WORD PTR tv796[ebp]
  00638	0f b7 45 de	 movzx	 eax, WORD PTR tv796[ebp]
  0063c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00641	89 45 d8	 mov	 DWORD PTR tv793[ebp], eax
  00644	d9 6d d8	 fldcw	 WORD PTR tv793[ebp]
  00647	db 5d d8	 fistp	 DWORD PTR tv791[ebp]
  0064a	0f b6 45 d8	 movzx	 eax, BYTE PTR tv791[ebp]
  0064e	d9 6d de	 fldcw	 WORD PTR tv796[ebp]
  00651	88 45 df	 mov	 BYTE PTR _m_64$209561[ebp], al

; 222  : 					Token = GetToken();		m_68 = (int)TokenNumber;

  00654	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00659	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0065f	e8 00 00 00 00	 call	 __ftol2_sse
  00664	89 45 ac	 mov	 DWORD PTR _m_68$209562[ebp], eax

; 223  : 					Token = GetToken();		m_70[0] = (BYTE)TokenNumber;

  00667	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0066c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00672	d9 7d da	 fnstcw	 WORD PTR tv783[ebp]
  00675	0f b7 45 da	 movzx	 eax, WORD PTR tv783[ebp]
  00679	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0067e	89 45 d4	 mov	 DWORD PTR tv780[ebp], eax
  00681	d9 6d d4	 fldcw	 WORD PTR tv780[ebp]
  00684	db 5d d4	 fistp	 DWORD PTR tv778[ebp]
  00687	0f b6 4d d4	 movzx	 ecx, BYTE PTR tv778[ebp]
  0068b	88 4d cc	 mov	 BYTE PTR _m_70$209563[ebp], cl
  0068e	d9 6d da	 fldcw	 WORD PTR tv783[ebp]

; 224  : 					Token = GetToken();		m_70[1] = (BYTE)TokenNumber;

  00691	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00696	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0069c	d9 7d da	 fnstcw	 WORD PTR tv775[ebp]
  0069f	0f b7 45 da	 movzx	 eax, WORD PTR tv775[ebp]
  006a3	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  006a8	89 45 d4	 mov	 DWORD PTR tv772[ebp], eax
  006ab	d9 6d d4	 fldcw	 WORD PTR tv772[ebp]
  006ae	db 5d d4	 fistp	 DWORD PTR tv770[ebp]
  006b1	0f b6 55 d4	 movzx	 edx, BYTE PTR tv770[ebp]
  006b5	88 55 cd	 mov	 BYTE PTR _m_70$209563[ebp+1], dl
  006b8	d9 6d da	 fldcw	 WORD PTR tv775[ebp]

; 225  : 					Token = GetToken();		m_70[2] = (BYTE)TokenNumber;

  006bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006c0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006c6	d9 7d da	 fnstcw	 WORD PTR tv767[ebp]
  006c9	0f b7 45 da	 movzx	 eax, WORD PTR tv767[ebp]
  006cd	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  006d2	89 45 d4	 mov	 DWORD PTR tv764[ebp], eax
  006d5	d9 6d d4	 fldcw	 WORD PTR tv764[ebp]
  006d8	db 5d d4	 fistp	 DWORD PTR tv762[ebp]
  006db	0f b6 45 d4	 movzx	 eax, BYTE PTR tv762[ebp]
  006df	88 45 ce	 mov	 BYTE PTR _m_70$209563[ebp+2], al
  006e2	d9 6d da	 fldcw	 WORD PTR tv767[ebp]

; 226  : 					Token = GetToken();		m_70[3] = (BYTE)TokenNumber;

  006e5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006ea	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  006f0	d9 7d da	 fnstcw	 WORD PTR tv759[ebp]
  006f3	0f b7 45 da	 movzx	 eax, WORD PTR tv759[ebp]
  006f7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  006fc	89 45 d4	 mov	 DWORD PTR tv756[ebp], eax
  006ff	d9 6d d4	 fldcw	 WORD PTR tv756[ebp]
  00702	db 5d d4	 fistp	 DWORD PTR tv754[ebp]
  00705	0f b6 4d d4	 movzx	 ecx, BYTE PTR tv754[ebp]
  00709	88 4d cf	 mov	 BYTE PTR _m_70$209563[ebp+3], cl
  0070c	d9 6d da	 fldcw	 WORD PTR tv759[ebp]

; 227  : 					Token = GetToken();		m_70[4] = (BYTE)TokenNumber;

  0070f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00714	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0071a	d9 7d da	 fnstcw	 WORD PTR tv751[ebp]
  0071d	0f b7 45 da	 movzx	 eax, WORD PTR tv751[ebp]
  00721	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00726	89 45 d4	 mov	 DWORD PTR tv748[ebp], eax
  00729	d9 6d d4	 fldcw	 WORD PTR tv748[ebp]
  0072c	db 5d d4	 fistp	 DWORD PTR tv746[ebp]
  0072f	0f b6 55 d4	 movzx	 edx, BYTE PTR tv746[ebp]
  00733	88 55 d0	 mov	 BYTE PTR _m_70$209563[ebp+4], dl
  00736	d9 6d da	 fldcw	 WORD PTR tv751[ebp]

; 228  : 					Token = GetToken();		m_70[5] = (BYTE)TokenNumber;

  00739	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 229  : 
; 230  : 					this->SocketBonusOption[m_1C].btNumber		= m_1C;
; 231  : 					this->SocketBonusOption[m_1C].btType		= m_60;
; 232  : 					this->SocketBonusOption[m_1C].btIncrease	= m_64;

  0073e	0f b6 55 df	 movzx	 edx, BYTE PTR _m_64$209561[ebp]
  00742	0f b6 4d c4	 movzx	 ecx, BYTE PTR _m_1C$[ebp]
  00746	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0074c	88 56 01	 mov	 BYTE PTR [esi+1], dl

; 233  : 					this->SocketBonusOption[m_1C].iProbability	= m_68;
; 234  : 					this->SocketBonusOption[m_1C].btElements[0]	= m_70[0];

  0074f	0f b6 55 cc	 movzx	 edx, BYTE PTR _m_70$209563[ebp]
  00753	d9 7d da	 fnstcw	 WORD PTR tv743[ebp]
  00756	0f b7 45 da	 movzx	 eax, WORD PTR tv743[ebp]
  0075a	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0075f	89 45 d4	 mov	 DWORD PTR tv740[ebp], eax
  00762	88 4e ff	 mov	 BYTE PTR [esi-1], cl
  00765	8b 4d ac	 mov	 ecx, DWORD PTR _m_68$209562[ebp]
  00768	d9 6d d4	 fldcw	 WORD PTR tv740[ebp]
  0076b	89 4e 03	 mov	 DWORD PTR [esi+3], ecx

; 235  : 					this->SocketBonusOption[m_1C].btElements[1]	= m_70[1];

  0076e	0f b6 4d cd	 movzx	 ecx, BYTE PTR _m_70$209563[ebp+1]
  00772	88 56 07	 mov	 BYTE PTR [esi+7], dl

; 236  : 					this->SocketBonusOption[m_1C].btElements[2]	= m_70[2];

  00775	0f b6 55 ce	 movzx	 edx, BYTE PTR _m_70$209563[ebp+2]
  00779	db 5d d4	 fistp	 DWORD PTR tv738[ebp]
  0077c	8a 45 d4	 mov	 al, BYTE PTR tv738[ebp]
  0077f	88 4e 08	 mov	 BYTE PTR [esi+8], cl

; 237  : 					this->SocketBonusOption[m_1C].btElements[3]	= m_70[3];

  00782	0f b6 4d cf	 movzx	 ecx, BYTE PTR _m_70$209563[ebp+3]
  00786	d9 6d da	 fldcw	 WORD PTR tv743[ebp]
  00789	88 56 09	 mov	 BYTE PTR [esi+9], dl

; 238  : 					this->SocketBonusOption[m_1C].btElements[4]	= m_70[4];

  0078c	0f b6 55 d0	 movzx	 edx, BYTE PTR _m_70$209563[ebp+4]

; 239  : 					this->SocketBonusOption[m_1C].btElements[5]	= m_70[5];

  00790	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 240  : 
; 241  : 					switch(m_58)

  00793	8b c7		 mov	 eax, edi
  00795	83 e8 00	 sub	 eax, 0
  00798	88 1e		 mov	 BYTE PTR [esi], bl
  0079a	88 4e 0a	 mov	 BYTE PTR [esi+10], cl
  0079d	88 56 0b	 mov	 BYTE PTR [esi+11], dl
  007a0	74 18		 je	 SHORT $LN5@LoadScript
  007a2	48		 dec	 eax
  007a3	75 19		 jne	 SHORT $LN6@LoadScript

; 244  : 					case 1:	this->SocketBonusOption[m_1C].btOption = 45;	break;
; 245  : 					}
; 246  : 					
; 247  : 					m_1C++;

  007a5	ff 45 c4	 inc	 DWORD PTR _m_1C$[ebp]
  007a8	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  007ab	8b 5d b8	 mov	 ebx, DWORD PTR _m_0C$[ebp]
  007ae	c6 46 02 2d	 mov	 BYTE PTR [esi+2], 45	; 0000002dH
  007b2	83 c6 10	 add	 esi, 16			; 00000010H
  007b5	e9 36 f9 ff ff	 jmp	 $LL30@LoadScript
$LN5@LoadScript:

; 242  : 					{
; 243  : 					case 0:	this->SocketBonusOption[m_1C].btOption = 44;	break;

  007ba	c6 46 02 2c	 mov	 BYTE PTR [esi+2], 44	; 0000002cH
$LN6@LoadScript:

; 244  : 					case 1:	this->SocketBonusOption[m_1C].btOption = 45;	break;
; 245  : 					}
; 246  : 					
; 247  : 					m_1C++;

  007be	ff 45 c4	 inc	 DWORD PTR _m_1C$[ebp]
  007c1	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  007c4	8b 5d b8	 mov	 ebx, DWORD PTR _m_0C$[ebp]
  007c7	83 c6 10	 add	 esi, 16			; 00000010H
  007ca	e9 21 f9 ff ff	 jmp	 $LL30@LoadScript
$LN9@LoadScript:

; 248  : 				}
; 249  : 				else if( m_0C == 3 )

  007cf	83 fb 03	 cmp	 ebx, 3
  007d2	0f 85 18 f9 ff
	ff		 jne	 $LL30@LoadScript

; 250  : 				{
; 251  : 					Token = GetToken();

  007d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 252  : 					// ----
; 253  : 					if( !strcmp("end", TokenString) )

  007dd	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  007e2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL78@LoadScript:
  007e7	8a 10		 mov	 dl, BYTE PTR [eax]
  007e9	3a 11		 cmp	 dl, BYTE PTR [ecx]
  007eb	75 1a		 jne	 SHORT $LN79@LoadScript
  007ed	84 d2		 test	 dl, dl
  007ef	74 12		 je	 SHORT $LN80@LoadScript
  007f1	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  007f4	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  007f7	75 0e		 jne	 SHORT $LN79@LoadScript
  007f9	83 c0 02	 add	 eax, 2
  007fc	83 c1 02	 add	 ecx, 2
  007ff	84 d2		 test	 dl, dl
  00801	75 e4		 jne	 SHORT $LL78@LoadScript
$LN80@LoadScript:
  00803	33 c0		 xor	 eax, eax
  00805	eb 05		 jmp	 SHORT $LN81@LoadScript
$LN79@LoadScript:
  00807	1b c0		 sbb	 eax, eax
  00809	83 d8 ff	 sbb	 eax, -1
$LN81@LoadScript:
  0080c	85 c0		 test	 eax, eax
  0080e	74 53		 je	 SHORT $LN83@LoadScript

; 254  : 					{
; 255  : 						break;
; 256  : 					}
; 257  : 					// ----
; 258  : 					this->m_SocketItemList[this->m_SocketItemCount].ItemID		= TokenNumber;

  00810	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00816	e8 00 00 00 00	 call	 __ftol2_sse
  0081b	8b 8f b4 07 00
	00		 mov	 ecx, DWORD PTR [edi+1972]
  00821	66 89 84 8f 5c
	05 00 00	 mov	 WORD PTR [edi+ecx*4+1372], ax

; 259  : 					Token = GetToken();		

  00829	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 260  : 					this->m_SocketItemList[this->m_SocketItemCount].ItemIndex	= TokenNumber;

  0082e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00834	e8 00 00 00 00	 call	 __ftol2_sse
  00839	8b 97 b4 07 00
	00		 mov	 edx, DWORD PTR [edi+1972]
  0083f	66 89 84 97 5e
	05 00 00	 mov	 WORD PTR [edi+edx*4+1374], ax

; 261  : 					this->m_SocketItemCount++;

  00847	ff 87 b4 07 00
	00		 inc	 DWORD PTR [edi+1972]

; 262  : 				}
; 263  : 			}

  0084d	e9 9e f8 ff ff	 jmp	 $LL30@LoadScript
$LN44@LoadScript:

; 148  : 					{
; 149  : 						MsgBox("[ERROR] MAX SeedSphere Option Data Overflow! [%d]",m_10);

  00852	50		 push	 eax
  00853	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@
  00858	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0085d	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00860	83 c4 08	 add	 esp, 8
$LN83@LoadScript:

; 98   : 
; 99   : 		if ( Token == END )

  00863	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00868	83 f8 02	 cmp	 eax, 2
  0086b	0f 85 01 f8 ff
	ff		 jne	 $LL35@LoadScript
$LN88@LoadScript:
  00871	5b		 pop	 ebx
$LN48@LoadScript:

; 264  : 		}
; 265  : 	}
; 266  : 
; 267  : 	this->_InitOption(); 

  00872	8b cf		 mov	 ecx, edi
  00874	e8 00 00 00 00	 call	 ?_InitOption@CSocketOption@@QAEXXZ ; CSocketOption::_InitOption

; 268  : 
; 269  : 	return 1;
; 270  : }

  00879	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0087c	5f		 pop	 edi
  0087d	33 cd		 xor	 ecx, ebp
  0087f	b0 01		 mov	 al, 1
  00881	5e		 pop	 esi
  00882	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00887	8b e5		 mov	 esp, ebp
  00889	5d		 pop	 ebp
  0088a	c2 04 00	 ret	 4
  0088d	8d 49 00	 npad	 3
$LN89@LoadScript:
  00890	00 00 00 00	 DD	 $LN16@LoadScript
  00894	00 00 00 00	 DD	 $LN15@LoadScript
  00898	00 00 00 00	 DD	 $LN16@LoadScript
  0089c	00 00 00 00	 DD	 $LN15@LoadScript
  008a0	00 00 00 00	 DD	 $LN12@LoadScript
  008a4	00 00 00 00	 DD	 $LN11@LoadScript
?LoadScript@CSocketOption@@QAEEPAD@Z ENDP		; CSocketOption::LoadScript
_TEXT	ENDS
PUBLIC	?IsActive@CSocketOption@@QAEEPAVCItem@@@Z	; CSocketOption::IsActive
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Ogtp
;	COMDAT ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
?IsActive@CSocketOption@@QAEEPAVCItem@@@Z PROC		; CSocketOption::IsActive, COMDAT
; _this$ = ecx

; 324  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 325  : 	if(pItem == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	75 08		 jne	 SHORT $LN2@IsActive
$LN5@IsActive:
  0000e	5f		 pop	 edi

; 326  : 	{
; 327  : 		return FALSE;

  0000f	32 c0		 xor	 al, al
  00011	5e		 pop	 esi

; 336  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN2@IsActive:

; 328  : 	}
; 329  : 
; 330  : 	if(pItem->IsItem() == FALSE)

  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001d	85 c0		 test	 eax, eax

; 331  : 	{
; 332  : 		return FALSE;

  0001f	74 ed		 je	 SHORT $LN5@IsActive

; 333  : 	}
; 334  : 
; 335  : 	return this->CheckItemType(pItem->m_Type);

  00021	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  00025	50		 push	 eax
  00026	8b cf		 mov	 ecx, edi
  00028	e8 00 00 00 00	 call	 ?CheckItemType@CSocketOption@@QAEEH@Z ; CSocketOption::CheckItemType
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 336  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ENDP		; CSocketOption::IsActive
_TEXT	ENDS
PUBLIC	?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z ; CSocketOption::ModifySeedSphereData
EXTRN	?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z:PROC	; CSeedSphere::SetInfo
EXTRN	??1CSeedSphere@@QAE@XZ:PROC			; CSeedSphere::~CSeedSphere
EXTRN	??0CSeedSphere@@QAE@XZ:PROC			; CSeedSphere::CSeedSphere
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z$0
__ehfuncinfo$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z
_TEXT	SEGMENT
_SeedSphere$ = -32					; size = 16
_loc6$ = -16						; size = 1
__$EHRec$ = -12						; size = 12
_loc5$ = 8						; size = 1
_SeedSphereIndex$ = 8					; size = 1
_OptionIndex$ = 12					; size = 4
_OptionType$ = 16					; size = 4
_SocketSlot$ = 20					; size = 4
?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z PROC	; CSocketOption::ModifySeedSphereData, COMDAT
; _this$ = ecx

; 475  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 476  : 	BYTE loc5 = 0;
; 477  : 	BYTE loc6 = 0;
; 478  : 
; 479  : 	CSeed * lpSeed = NULL;//loc7
; 480  : 	CSphere * lpSphere = NULL;//loc8
; 481  : 	CSeedSphere  SeedSphere;

  00029	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  0002c	e8 00 00 00 00	 call	 ??0CSeedSphere@@QAE@XZ	; CSeedSphere::CSeedSphere

; 482  : 
; 483  : 	loc5 = SeedSphereIndex % 50;

  00031	0f b6 4d 08	 movzx	 ecx, BYTE PTR _SeedSphereIndex$[ebp]
  00035	8b c1		 mov	 eax, ecx
  00037	99		 cdq
  00038	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
  0003d	f7 ff		 idiv	 edi
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 484  : 	loc6 = (SeedSphereIndex - loc5) / 50 + 1;

  00046	0f b6 c2	 movzx	 eax, dl
  00049	2b c8		 sub	 ecx, eax
  0004b	88 55 08	 mov	 BYTE PTR _loc5$[ebp], dl
  0004e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 04	 sar	 edx, 4
  00058	8b ca		 mov	 ecx, edx
  0005a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0005d	03 ca		 add	 ecx, edx

; 485  : 
; 486  : 	lpSeed = this->GetSeedData(loc5);

  0005f	8b 55 08	 mov	 edx, DWORD PTR _loc5$[ebp]
  00062	fe c1		 inc	 cl
  00064	88 4d f0	 mov	 BYTE PTR _loc6$[ebp], cl
  00067	52		 push	 edx
  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ; CSocketOption::GetSeedData

; 487  : 	lpSphere = this->GetSphereData(loc6);
; 488  : 
; 489  : 	if(lpSeed == NULL)

  0006f	85 c0		 test	 eax, eax
  00071	75 24		 jne	 SHORT $LN1@ModifySeed

; 490  : 	{
; 491  : 		return (BYTE)0;

  00073	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007d	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  00082	32 c0		 xor	 al, al

; 501  : }

  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 10 00	 ret	 16			; 00000010H
$LN1@ModifySeed:

; 492  : 	}
; 493  : 
; 494  : 	SeedSphere.SetInfo(lpSeed,loc6); //

  00097	8b 4d f0	 mov	 ecx, DWORD PTR _loc6$[ebp]
  0009a	51		 push	 ecx
  0009b	50		 push	 eax
  0009c	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  0009f	e8 00 00 00 00	 call	 ?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z ; CSeedSphere::SetInfo

; 495  : 
; 496  : 	OptionIndex = SeedSphere.m_btOptionIndex;

  000a4	8b 55 0c	 mov	 edx, DWORD PTR _OptionIndex$[ebp]
  000a7	8a 45 e1	 mov	 al, BYTE PTR _SeedSphere$[ebp+1]

; 497  : 	OptionType = SeedSphere.m_btOptionType;

  000aa	8b 4d 10	 mov	 ecx, DWORD PTR _OptionType$[ebp]
  000ad	88 02		 mov	 BYTE PTR [edx], al
  000af	8a 55 e9	 mov	 dl, BYTE PTR _SeedSphere$[ebp+9]

; 498  : 	SocketSlot = SeedSphere.m_wSocketSlot;

  000b2	8b 45 14	 mov	 eax, DWORD PTR _SocketSlot$[ebp]
  000b5	88 11		 mov	 BYTE PTR [ecx], dl
  000b7	8a 4d ea	 mov	 cl, BYTE PTR _SeedSphere$[ebp+10]
  000ba	88 08		 mov	 BYTE PTR [eax], cl

; 499  : 	
; 500  : 	return (BYTE)1;

  000bc	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  000bf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c6	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  000cb	b0 01		 mov	 al, 1

; 501  : }

  000cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d7	59		 pop	 ecx
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
__ehhandler$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ModifySeedSphereData@CSocketOption@@QAEEEAAE00@Z ENDP	; CSocketOption::ModifySeedSphereData
PUBLIC	?GetActiveSocketOption@CSocketOption@@QAEXPAVCItem@@PAEAAE@Z ; CSocketOption::GetActiveSocketOption
; Function compile flags: /Ogtp
;	COMDAT ?GetActiveSocketOption@CSocketOption@@QAEXPAVCItem@@PAEAAE@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
_SocketOption$ = 12					; size = 4
_SocketIndex$ = 16					; size = 4
?GetActiveSocketOption@CSocketOption@@QAEXPAVCItem@@PAEAAE@Z PROC ; CSocketOption::GetActiveSocketOption, COMDAT
; _this$ = ecx

; 505  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 506  : 	if(pItem == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 57		 je	 SHORT $LN4@GetActiveS@2

; 507  : 	{
; 508  : 		return;
; 509  : 	}
; 510  : 
; 511  : 	if(pItem->IsItem() == FALSE || this->IsActive(pItem) == FALSE)

  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00015	85 c0		 test	 eax, eax
  00017	74 4c		 je	 SHORT $LN4@GetActiveS@2
  00019	56		 push	 esi
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00021	84 c0		 test	 al, al
  00023	74 40		 je	 SHORT $LN4@GetActiveS@2

; 512  : 	{
; 513  : 		return;	
; 514  : 	}
; 515  : 
; 516  : 	for( int i = 0; i < MAX_SOCKET_OPTION; i++)
; 517  : 	{
; 518  : 		SocketOption[i] = pItem->m_SocketOption[i];

  00025	0f b6 8e cc 00
	00 00		 movzx	 ecx, BYTE PTR [esi+204]
  0002c	8b 45 0c	 mov	 eax, DWORD PTR _SocketOption$[ebp]
  0002f	88 08		 mov	 BYTE PTR [eax], cl
  00031	0f b6 96 cd 00
	00 00		 movzx	 edx, BYTE PTR [esi+205]
  00038	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0003b	0f b6 8e ce 00
	00 00		 movzx	 ecx, BYTE PTR [esi+206]
  00042	88 48 02	 mov	 BYTE PTR [eax+2], cl
  00045	0f b6 96 cf 00
	00 00		 movzx	 edx, BYTE PTR [esi+207]
  0004c	88 50 03	 mov	 BYTE PTR [eax+3], dl
  0004f	0f b6 8e d0 00
	00 00		 movzx	 ecx, BYTE PTR [esi+208]
  00056	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 519  : 	}
; 520  : 
; 521  : 	SocketIndex =  pItem->m_SocketOptionIndex;

  00059	0f b6 96 cb 00
	00 00		 movzx	 edx, BYTE PTR [esi+203]
  00060	8b 45 10	 mov	 eax, DWORD PTR _SocketIndex$[ebp]
  00063	88 10		 mov	 BYTE PTR [eax], dl
$LN4@GetActiveS@2:
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 522  : }

  00067	5d		 pop	 ebp
  00068	c2 0c 00	 ret	 12			; 0000000cH
?GetActiveSocketOption@CSocketOption@@QAEXPAVCItem@@PAEAAE@Z ENDP ; CSocketOption::GetActiveSocketOption
_TEXT	ENDS
PUBLIC	?IsSocketOption@CSocketOption@@QAEEPAVCItem@@@Z	; CSocketOption::IsSocketOption
; Function compile flags: /Ogtp
;	COMDAT ?IsSocketOption@CSocketOption@@QAEEPAVCItem@@@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
?IsSocketOption@CSocketOption@@QAEEPAVCItem@@@Z PROC	; CSocketOption::IsSocketOption, COMDAT
; _this$ = ecx

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 527  : 	if(pItem == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi

; 528  : 	{
; 529  : 		return FALSE;

  0000c	74 31		 je	 SHORT $LN2@IsSocketOp

; 530  : 	}
; 531  : 
; 532  : 	if(pItem->IsItem() == FALSE)

  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00015	85 c0		 test	 eax, eax

; 533  : 	{
; 534  : 		return FALSE;

  00017	74 26		 je	 SHORT $LN2@IsSocketOp

; 535  : 	}
; 536  : 
; 537  : 	if(this->IsActive(pItem) == FALSE)

  00019	56		 push	 esi
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00021	84 c0		 test	 al, al

; 538  : 	{
; 539  : 		return FALSE;

  00023	74 1a		 je	 SHORT $LN2@IsSocketOp

; 540  : 	}
; 541  : 		
; 542  : 	for (int i = 0; i < MAX_SOCKET_OPTION; i++ )

  00025	33 c0		 xor	 eax, eax
  00027	b1 ff		 mov	 cl, 255			; 000000ffH
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL4@IsSocketOp:

; 543  : 	{
; 544  : 		if ( pItem->m_SocketOption[i] != 0xFF )

  00030	38 8c 06 cc 00
	00 00		 cmp	 BYTE PTR [esi+eax+204], cl
  00037	75 0e		 jne	 SHORT $LN11@IsSocketOp

; 540  : 	}
; 541  : 		
; 542  : 	for (int i = 0; i < MAX_SOCKET_OPTION; i++ )

  00039	40		 inc	 eax
  0003a	83 f8 05	 cmp	 eax, 5
  0003d	7c f1		 jl	 SHORT $LL4@IsSocketOp
$LN2@IsSocketOp:
  0003f	5f		 pop	 edi

; 547  : 		}
; 548  : 	}
; 549  : 	
; 550  : 	return FALSE;

  00040	32 c0		 xor	 al, al
  00042	5e		 pop	 esi

; 551  : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN11@IsSocketOp:
  00047	5f		 pop	 edi

; 545  : 		{
; 546  : 			return TRUE;

  00048	b0 01		 mov	 al, 1
  0004a	5e		 pop	 esi

; 551  : }

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?IsSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ENDP	; CSocketOption::IsSocketOption
_TEXT	ENDS
PUBLIC	?CheckEmptySlot@CSocketOption@@QAEEPAVCItem@@GE@Z ; CSocketOption::CheckEmptySlot
; Function compile flags: /Ogtp
;	COMDAT ?CheckEmptySlot@CSocketOption@@QAEEPAVCItem@@GE@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
_m_Type$ = 12						; size = 2
_m_Level$ = 16						; size = 1
?CheckEmptySlot@CSocketOption@@QAEEPAVCItem@@GE@Z PROC	; CSocketOption::CheckEmptySlot, COMDAT
; _this$ = ecx

; 640  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 641  : 	BYTE loc2 = 0;
; 642  : 	BYTE loc3 = 0;
; 643  : 
; 644  : 	if(this->IsActive(pItem) == 0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pItem$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00010	84 c0		 test	 al, al
  00012	75 06		 jne	 SHORT $LN7@CheckEmpty
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi

; 667  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
$LN7@CheckEmpty:

; 645  : 	{
; 646  : 		return 0;
; 647  : 	}
; 648  : 	
; 649  : 	loc3 = this->GetItemSocketByteOption(m_Type,m_Level);

  0001a	8b 45 10	 mov	 eax, DWORD PTR _m_Level$[ebp]
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _m_Type$[ebp]
  00020	53		 push	 ebx
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	8b cf		 mov	 ecx, edi
  00025	e8 00 00 00 00	 call	 ?GetItemSocketByteOption@CSocketOption@@QAEEGE@Z ; CSocketOption::GetItemSocketByteOption

; 650  : 	loc2 = loc3 % 50;

  0002a	0f b6 c0	 movzx	 eax, al
  0002d	99		 cdq
  0002e	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00033	f7 f9		 idiv	 ecx
  00035	bf 34 ff ff ff	 mov	 edi, -204		; ffffff34H
  0003a	8d 8e cc 00 00
	00		 lea	 ecx, DWORD PTR [esi+204]
  00040	2b fe		 sub	 edi, esi
  00042	8a da		 mov	 bl, dl
$LL6@CheckEmpty:

; 653  : 	{
; 654  : 		if (pItem->m_SocketOption[i] == 0xFF || pItem->m_SocketOption[i] == 0xFE )

  00044	8a 01		 mov	 al, BYTE PTR [ecx]
  00046	3c ff		 cmp	 al, 255			; 000000ffH
  00048	74 16		 je	 SHORT $LN5@CheckEmpty
  0004a	3c fe		 cmp	 al, 254			; 000000feH
  0004c	74 12		 je	 SHORT $LN5@CheckEmpty

; 655  : 		{
; 656  : 			continue;
; 657  : 		}
; 658  : 
; 659  : 		if(	pItem->m_SocketOption[i] % 50 == loc2 )

  0004e	0f b6 c0	 movzx	 eax, al
  00051	99		 cdq
  00052	be 32 00 00 00	 mov	 esi, 50			; 00000032H
  00057	f7 fe		 idiv	 esi
  00059	0f b6 c3	 movzx	 eax, bl
  0005c	3b d0		 cmp	 edx, eax
  0005e	74 12		 je	 SHORT $LN11@CheckEmpty
$LN5@CheckEmpty:

; 651  : 
; 652  : 	for (int i = 0; i < MAX_SOCKET_OPTION; i++ )

  00060	41		 inc	 ecx
  00061	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00064	83 fa 05	 cmp	 edx, 5
  00067	7c db		 jl	 SHORT $LL6@CheckEmpty

; 662  : 		}
; 663  : 
; 664  : 	}
; 665  : 	
; 666  : 	return 1;

  00069	5b		 pop	 ebx
  0006a	5f		 pop	 edi
  0006b	b0 01		 mov	 al, 1
  0006d	5e		 pop	 esi

; 667  : }

  0006e	5d		 pop	 ebp
  0006f	c2 0c 00	 ret	 12			; 0000000cH
$LN11@CheckEmpty:
  00072	5b		 pop	 ebx
  00073	5f		 pop	 edi

; 660  : 		{
; 661  : 			return 0;

  00074	32 c0		 xor	 al, al
  00076	5e		 pop	 esi

; 667  : }

  00077	5d		 pop	 ebp
  00078	c2 0c 00	 ret	 12			; 0000000cH
?CheckEmptySlot@CSocketOption@@QAEEPAVCItem@@GE@Z ENDP	; CSocketOption::CheckEmptySlot
_TEXT	ENDS
PUBLIC	?GetValue@CSocketOption@@QAEHE@Z		; CSocketOption::GetValue
EXTRN	?GetItemIndex@CSeedSphere@@QAEHXZ:PROC		; CSeedSphere::GetItemIndex
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetValue@CSocketOption@@QAEHE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetValue@CSocketOption@@QAEHE@Z$0
__ehfuncinfo$?GetValue@CSocketOption@@QAEHE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetValue@CSocketOption@@QAEHE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetValue@CSocketOption@@QAEHE@Z
_TEXT	SEGMENT
_SeedSphere$ = -32					; size = 16
_loc6$ = -16						; size = 1
__$EHRec$ = -12						; size = 12
_loc5$ = 8						; size = 1
_index$ = 8						; size = 1
?GetValue@CSocketOption@@QAEHE@Z PROC			; CSocketOption::GetValue, COMDAT
; _this$ = ecx

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetValue@CSocketOption@@QAEHE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 697  : 	BYTE loc5 = 0;
; 698  : 	BYTE loc6 = 0;
; 699  : 	
; 700  : 	CSeed * lpSeed = NULL;//loc7
; 701  : 	CSphere * lpSphere = NULL;
; 702  : 
; 703  : 	CSeedSphere SeedSphere;//loc1

  00029	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  0002c	e8 00 00 00 00	 call	 ??0CSeedSphere@@QAE@XZ	; CSeedSphere::CSeedSphere

; 704  : 
; 705  : 	int loc13 = 0;
; 706  : 
; 707  : 	loc5 = index % 50;

  00031	0f b6 4d 08	 movzx	 ecx, BYTE PTR _index$[ebp]
  00035	8b c1		 mov	 eax, ecx
  00037	99		 cdq
  00038	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
  0003d	f7 ff		 idiv	 edi
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 708  : 	loc6 = (index - loc5) / 50 + 1;

  00046	0f b6 c2	 movzx	 eax, dl
  00049	2b c8		 sub	 ecx, eax
  0004b	88 55 08	 mov	 BYTE PTR _loc5$[ebp], dl
  0004e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 04	 sar	 edx, 4
  00058	8b ca		 mov	 ecx, edx
  0005a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0005d	03 ca		 add	 ecx, edx

; 709  : 	
; 710  : 	lpSeed = this->GetSeedData(loc5);

  0005f	8b 55 08	 mov	 edx, DWORD PTR _loc5$[ebp]
  00062	fe c1		 inc	 cl
  00064	88 4d f0	 mov	 BYTE PTR _loc6$[ebp], cl
  00067	52		 push	 edx
  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ; CSocketOption::GetSeedData

; 711  : 
; 712  : 	if( lpSeed == NULL)

  0006f	85 c0		 test	 eax, eax
  00071	75 24		 jne	 SHORT $LN1@GetValue

; 713  : 	{
; 714  : 		return NULL;

  00073	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007d	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  00082	33 c0		 xor	 eax, eax

; 722  : }

  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
$LN1@GetValue:

; 715  : 	}
; 716  : 	
; 717  : 	SeedSphere.SetInfo(lpSeed, loc6);

  00097	8b 4d f0	 mov	 ecx, DWORD PTR _loc6$[ebp]
  0009a	51		 push	 ecx
  0009b	50		 push	 eax
  0009c	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  0009f	e8 00 00 00 00	 call	 ?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z ; CSeedSphere::SetInfo

; 718  : 	
; 719  : 	loc13 = ItemAttribute[SeedSphere.GetItemIndex()].BuyMoney;

  000a4	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  000a7	e8 00 00 00 00	 call	 ?GetItemIndex@CSeedSphere@@QAEHXZ ; CSeedSphere::GetItemIndex
  000ac	6b c0 70	 imul	 eax, 112		; 00000070H

; 720  : 		
; 721  : 	return loc13;

  000af	8b b0 50 00 00
	00		 mov	 esi, DWORD PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+80]
  000b5	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  000b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bf	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  000c4	8b c6		 mov	 eax, esi

; 722  : }

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetValue@CSocketOption@@QAEHE@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
__ehhandler$?GetValue@CSocketOption@@QAEHE@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetValue@CSocketOption@@QAEHE@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetValue@CSocketOption@@QAEHE@Z ENDP			; CSocketOption::GetValue
PUBLIC	?CheckItemElementInfo@CSocketOption@@QAEEPAVCItem@@E@Z ; CSocketOption::CheckItemElementInfo
; Function compile flags: /Ogtp
;	COMDAT ?CheckItemElementInfo@CSocketOption@@QAEEPAVCItem@@E@Z
_TEXT	SEGMENT
_pItem$ = 8						; size = 4
_index$ = 12						; size = 1
?CheckItemElementInfo@CSocketOption@@QAEEPAVCItem@@E@Z PROC ; CSocketOption::CheckItemElementInfo, COMDAT
; _this$ = ecx

; 726  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 727  : 	if(this->IsActive(pItem) == 0)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _pItem$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00010	84 c0		 test	 al, al
  00012	75 06		 jne	 SHORT $LN11@CheckItemE
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi

; 767  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN11@CheckItemE:

; 728  : 	{
; 729  : 		return 0;
; 730  : 	}
; 731  : 
; 732  : 	BYTE loc2 = 0;
; 733  : 	BYTE loc3 = 0;
; 734  : 	BYTE loc4 = 0;
; 735  : 
; 736  : 	loc3 = pItem->m_Type % 512;//

  0001a	0f bf 47 06	 movsx	 eax, WORD PTR [edi+6]
  0001e	8b c8		 mov	 ecx, eax
  00020	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  00026	53		 push	 ebx
  00027	79 08		 jns	 SHORT $LN15@CheckItemE
  00029	49		 dec	 ecx
  0002a	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  00030	41		 inc	 ecx
$LN15@CheckItemE:

; 737  : 	loc2 = (pItem->m_Type - loc3) / 512;

  00031	0f b6 d1	 movzx	 edx, cl
  00034	2b c2		 sub	 eax, edx
  00036	99		 cdq
  00037	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  0003d	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]

; 738  : 	loc4 = this->GetElementIndex(index);

  00040	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00043	50		 push	 eax
  00044	8b ce		 mov	 ecx, esi
  00046	c1 fb 09	 sar	 ebx, 9
  00049	e8 00 00 00 00	 call	 ?GetElementIndex@CSocketOption@@QAEEE@Z ; CSocketOption::GetElementIndex

; 739  : 
; 740  : 	if(loc2 >= 0 && loc2 <= 5)

  0004e	80 fb 05	 cmp	 bl, 5
  00051	77 06		 ja	 SHORT $LN10@CheckItemE

; 741  : 	{
; 742  : 		switch(loc4)

  00053	0f b6 c0	 movzx	 eax, al
  00056	48		 dec	 eax

; 743  : 		{
; 744  : 		case 1:
; 745  : 		case 3:
; 746  : 		case 5:
; 747  : 			return 1;

  00057	eb 0e		 jmp	 SHORT $LN16@CheckItemE
$LN10@CheckItemE:

; 748  : 		}
; 749  : 	}
; 750  : 	else if(loc2 >= 6 && loc2 <= 11)

  00059	80 eb 06	 sub	 bl, 6
  0005c	80 fb 05	 cmp	 bl, 5
  0005f	77 1b		 ja	 SHORT $LN5@CheckItemE

; 751  : 	{
; 752  : 		switch(loc4)

  00061	0f b6 c0	 movzx	 eax, al
  00064	83 e8 02	 sub	 eax, 2
$LN16@CheckItemE:
  00067	74 0a		 je	 SHORT $LN2@CheckItemE
  00069	83 e8 02	 sub	 eax, 2
  0006c	74 05		 je	 SHORT $LN2@CheckItemE
  0006e	83 e8 02	 sub	 eax, 2

; 764  : 	}
; 765  : 
; 766  : 	return 0;

  00071	75 09		 jne	 SHORT $LN5@CheckItemE
$LN2@CheckItemE:
  00073	5b		 pop	 ebx
  00074	5f		 pop	 edi

; 753  : 		{
; 754  : 		case 2:
; 755  : 		case 4:
; 756  : 		case 6:
; 757  : 			return 1;

  00075	b0 01		 mov	 al, 1
  00077	5e		 pop	 esi

; 767  : }

  00078	5d		 pop	 ebp
  00079	c2 08 00	 ret	 8
$LN5@CheckItemE:
  0007c	5b		 pop	 ebx
  0007d	5f		 pop	 edi

; 758  : 		}
; 759  : 
; 760  : 	}
; 761  : 	else
; 762  : 	{
; 763  : 		return 0;

  0007e	32 c0		 xor	 al, al
  00080	5e		 pop	 esi

; 767  : }

  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
?CheckItemElementInfo@CSocketOption@@QAEEPAVCItem@@E@Z ENDP ; CSocketOption::CheckItemElementInfo
_TEXT	ENDS
PUBLIC	?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z ; CSocketOption::SetSeedSphereData
; Function compile flags: /Ogtp
;	COMDAT ?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z
_TEXT	SEGMENT
_lpSeedSphere$ = 8					; size = 4
_OptionIndex$ = 12					; size = 1
_SocketSlotCount$ = 16					; size = 1
?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z PROC ; CSocketOption::SetSeedSphereData, COMDAT
; _this$ = ecx

; 837  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 838  : 	CSeed * lpSeed = NULL;
; 839  : 	int loc3 = NULL;
; 840  : 
; 841  : 	lpSeed = this->GetSeedData(OptionIndex);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _OptionIndex$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?GetSeedData@CSocketOption@@QAEPAVCSeed@@E@Z ; CSocketOption::GetSeedData

; 842  : 
; 843  : 	if(lpSeed == NULL)

  0000c	85 c0		 test	 eax, eax
  0000e	75 06		 jne	 SHORT $LN2@SetSeedSph

; 844  : 	{
; 845  : 		return 0;

  00010	32 c0		 xor	 al, al

; 849  : 	{
; 850  : 		return 0;
; 851  : 	}
; 852  : 
; 853  : 	return 1;
; 854  : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN2@SetSeedSph:

; 846  : 	}
; 847  : 
; 848  : 	if(lpSeedSphere->SetInfo(lpSeed,SocketSlotCount) == 0)

  00016	8b 4d 10	 mov	 ecx, DWORD PTR _SocketSlotCount$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _lpSeedSphere$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?SetInfo@CSeedSphere@@QAEEPAVCSeed@@E@Z ; CSeedSphere::SetInfo
  00023	84 c0		 test	 al, al
  00025	0f 95 c0	 setne	 al

; 849  : 	{
; 850  : 		return 0;
; 851  : 	}
; 852  : 
; 853  : 	return 1;
; 854  : }

  00028	5d		 pop	 ebp
  00029	c2 0c 00	 ret	 12			; 0000000cH
?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z ENDP ; CSocketOption::SetSeedSphereData
_TEXT	ENDS
PUBLIC	?ClearEquipmentSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::ClearEquipmentSocketOption
; Function compile flags: /Ogtp
;	COMDAT ?ClearEquipmentSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ClearEquipmentSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::ClearEquipmentSocketOption, COMDAT
; _this$ = ecx

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1077 : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 7e		 je	 SHORT $LN13@ClearEquip

; 1078 : 	{
; 1079 : 		return;
; 1080 : 	}
; 1081 : 
; 1082 : 	if(lpObj->Type != 1 || lpObj->Connected < 3)

  0000b	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00010	75 77		 jne	 SHORT $LN13@ClearEquip
  00012	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00016	7c 71		 jl	 SHORT $LN13@ClearEquip

; 1083 : 	{
; 1084 : 		return;
; 1085 : 	}
; 1086 : 
; 1087 : 	int i = 0;
; 1088 : 
; 1089 : 	for(i = 0;i < 35; i++)

  00018	33 d2		 xor	 edx, edx
  0001a	8d 8e 86 20 00
	00		 lea	 ecx, DWORD PTR [esi+8326]
$LL12@ClearEquip:

; 1090 : 	{
; 1091 : 		if(lpObj->m_SocketSet[i].m_btEffectType == 0xFF) 

  00020	80 39 ff	 cmp	 BYTE PTR [ecx], 255	; 000000ffH
  00023	74 0e		 je	 SHORT $LN21@ClearEquip

; 1092 : 			break;
; 1093 : 
; 1094 : 		lpObj->m_SocketSet[i].RESET();

  00025	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET
  0002a	42		 inc	 edx
  0002b	83 c1 06	 add	 ecx, 6
  0002e	83 fa 23	 cmp	 edx, 35			; 00000023H
  00031	7c ed		 jl	 SHORT $LL12@ClearEquip
$LN21@ClearEquip:

; 1095 : 	}
; 1096 : 
; 1097 : 	for(i = 0;i < 7; i++)

  00033	33 d2		 xor	 edx, edx
  00035	8d 8e 58 21 00
	00		 lea	 ecx, DWORD PTR [esi+8536]
  0003b	eb 03 8d 49 00	 npad	 5
$LL8@ClearEquip:

; 1098 : 	{
; 1099 : 		if(lpObj->m_SocketWeapon[i].m_btEffectType == 0xFF) 

  00040	80 39 ff	 cmp	 BYTE PTR [ecx], 255	; 000000ffH
  00043	74 0e		 je	 SHORT $LN22@ClearEquip

; 1100 : 			break;
; 1101 : 		lpObj->m_SocketWeapon[i].RESET();

  00045	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET
  0004a	42		 inc	 edx
  0004b	83 c1 06	 add	 ecx, 6
  0004e	83 fa 07	 cmp	 edx, 7
  00051	7c ed		 jl	 SHORT $LL8@ClearEquip
$LN22@ClearEquip:

; 1102 : 	}
; 1103 : 
; 1104 : 	for(i = 0;i < 2; i++)

  00053	33 d2		 xor	 edx, edx
  00055	8d 8e 82 21 00
	00		 lea	 ecx, DWORD PTR [esi+8578]
  0005b	eb 03 8d 49 00	 npad	 5
$LL4@ClearEquip:

; 1105 : 	{
; 1106 : 		if(lpObj->m_SocketBonus[i].m_btEffectType == 0xFF) 

  00060	80 39 ff	 cmp	 BYTE PTR [ecx], 255	; 000000ffH
  00063	74 0e		 je	 SHORT $LN23@ClearEquip

; 1107 : 			break;
; 1108 : 
; 1109 : 		lpObj->m_SocketBonus[i].RESET();

  00065	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET
  0006a	42		 inc	 edx
  0006b	83 c1 06	 add	 ecx, 6
  0006e	83 fa 02	 cmp	 edx, 2
  00071	7c ed		 jl	 SHORT $LL4@ClearEquip
$LN23@ClearEquip:

; 1110 : 	}
; 1111 : 
; 1112 : 	lpObj->m_wSocketOpIncLifePower = 0;

  00073	33 c0		 xor	 eax, eax

; 1113 : 	lpObj->m_wSocketOpIncMaxMana = 0;
; 1114 : 	lpObj->m_wSocketOpAddLife =0;

  00075	33 d2		 xor	 edx, edx
  00077	89 86 8e 21 00
	00		 mov	 DWORD PTR [esi+8590], eax
  0007d	89 96 92 21 00
	00		 mov	 DWORD PTR [esi+8594], edx

; 1115 : 	lpObj->m_wSocketOpAddMana =0;
; 1116 : 	lpObj->m_btSocketOpDecreaseAG =0;

  00083	88 86 96 21 00
	00		 mov	 BYTE PTR [esi+8598], al
$LN13@ClearEquip:
  00089	5e		 pop	 esi

; 1117 : 
; 1118 : 
; 1119 : }

  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?ClearEquipmentSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::ClearEquipmentSocketOption
_TEXT	ENDS
PUBLIC	?ApplySocketFireEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketFireEffect
; Function compile flags: /Ogtp
;	COMDAT ?ApplySocketFireEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketFireEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketFireEffect, COMDAT
; _this$ = ecx

; 1185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1186 : 	int iIncValue = 0;
; 1187 : 
; 1188 : 	switch(btEffectType)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	83 f8 05	 cmp	 eax, 5
  0000d	0f 87 fc 01 00
	00		 ja	 $LN1@ApplySocke@2
  00013	53		 push	 ebx
  00014	57		 push	 edi
  00015	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@ApplySocke@2[eax*4]
$LN7@ApplySocke@2:

; 1189 : 	{
; 1190 : 	case SOCKET_EFFECT_OPADDATTACKPOWER:
; 1191 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxLeft,wOptionValue,btOptionType);

  0001c	8b 5d 10	 mov	 ebx, DWORD PTR _btOptionType$[ebp]
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]
  00022	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00025	8b 87 78 04 00
	00		 mov	 eax, DWORD PTR [edi+1144]
  0002b	53		 push	 ebx
  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	8b ce		 mov	 ecx, esi
  00030	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1192 : 		lpObj->m_AttackDamageMaxLeft += iIncValue;

  00035	03 87 78 04 00
	00		 add	 eax, DWORD PTR [edi+1144]

; 1193 : 
; 1194 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinLeft,wOptionValue,btOptionType);

  0003b	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  0003e	53		 push	 ebx
  0003f	89 87 78 04 00
	00		 mov	 DWORD PTR [edi+1144], eax
  00045	8b 87 7c 04 00
	00		 mov	 eax, DWORD PTR [edi+1148]
  0004b	52		 push	 edx
  0004c	50		 push	 eax
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1195 : 		lpObj->m_AttackDamageMinLeft += iIncValue;

  00054	03 87 7c 04 00
	00		 add	 eax, DWORD PTR [edi+1148]

; 1196 : 
; 1197 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxRight,wOptionValue,btOptionType);

  0005a	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]
  0005d	53		 push	 ebx
  0005e	89 87 7c 04 00
	00		 mov	 DWORD PTR [edi+1148], eax
  00064	8b 87 80 04 00
	00		 mov	 eax, DWORD PTR [edi+1152]
  0006a	51		 push	 ecx
  0006b	50		 push	 eax
  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1198 : 		lpObj->m_AttackDamageMaxRight += iIncValue;

  00073	03 87 80 04 00
	00		 add	 eax, DWORD PTR [edi+1152]

; 1199 : 
; 1200 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinRight,wOptionValue,btOptionType);

  00079	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  0007c	53		 push	 ebx
  0007d	89 87 80 04 00
	00		 mov	 DWORD PTR [edi+1152], eax
  00083	8b 87 84 04 00
	00		 mov	 eax, DWORD PTR [edi+1156]
  00089	52		 push	 edx
  0008a	50		 push	 eax
  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1201 : 		lpObj->m_AttackDamageMinRight += iIncValue;

  00092	03 87 84 04 00
	00		 add	 eax, DWORD PTR [edi+1156]

; 1202 : 		
; 1203 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMin,wOptionValue,btOptionType);

  00098	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]
  0009b	53		 push	 ebx
  0009c	89 87 84 04 00
	00		 mov	 DWORD PTR [edi+1156], eax
  000a2	8b 87 68 04 00
	00		 mov	 eax, DWORD PTR [edi+1128]
  000a8	51		 push	 ecx
  000a9	50		 push	 eax
  000aa	8b ce		 mov	 ecx, esi
  000ac	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1204 : 		lpObj->m_MagicDamageMin += iIncValue;

  000b1	03 87 68 04 00
	00		 add	 eax, DWORD PTR [edi+1128]

; 1205 : 
; 1206 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMax,wOptionValue,btOptionType);

  000b7	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  000ba	53		 push	 ebx
  000bb	89 87 68 04 00
	00		 mov	 DWORD PTR [edi+1128], eax
  000c1	8b 87 6c 04 00
	00		 mov	 eax, DWORD PTR [edi+1132]
  000c7	52		 push	 edx
  000c8	50		 push	 eax
  000c9	8b ce		 mov	 ecx, esi
  000cb	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1207 : 		lpObj->m_MagicDamageMax += iIncValue;

  000d0	03 87 6c 04 00
	00		 add	 eax, DWORD PTR [edi+1132]
  000d6	89 87 6c 04 00
	00		 mov	 DWORD PTR [edi+1132], eax
  000dc	5f		 pop	 edi
  000dd	5b		 pop	 ebx
  000de	5e		 pop	 esi

; 1262 : 		}
; 1263 : 		break;
; 1264 : 	}
; 1265 : 
; 1266 : }

  000df	5d		 pop	 ebp
  000e0	c2 10 00	 ret	 16			; 00000010H
$LN6@ApplySocke@2:

; 1208 : 
; 1209 : 		break;
; 1210 : 	case SOCKET_EFFECT_OPADDSPEEDPOWER:
; 1211 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackSpeed,wOptionValue,btOptionType);

  000e3	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  000e6	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]
  000e9	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  000ec	8b 9f 8c 04 00
	00		 mov	 ebx, DWORD PTR [edi+1164]
  000f2	50		 push	 eax
  000f3	51		 push	 ecx
  000f4	53		 push	 ebx
  000f5	8b ce		 mov	 ecx, esi
  000f7	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1212 : 		lpObj->m_AttackSpeed += iIncValue;
; 1213 : 		
; 1214 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicSpeed,wOptionValue,btOptionType);

  000fc	8b 55 10	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  000ff	03 c3		 add	 eax, ebx
  00101	8b 9f 90 04 00
	00		 mov	 ebx, DWORD PTR [edi+1168]
  00107	89 87 8c 04 00
	00		 mov	 DWORD PTR [edi+1164], eax
  0010d	8b 45 14	 mov	 eax, DWORD PTR _wOptionValue$[ebp]
  00110	52		 push	 edx
  00111	50		 push	 eax
  00112	53		 push	 ebx
  00113	8b ce		 mov	 ecx, esi
  00115	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1215 : 		lpObj->m_MagicSpeed += iIncValue;

  0011a	03 c3		 add	 eax, ebx
  0011c	89 87 90 04 00
	00		 mov	 DWORD PTR [edi+1168], eax
  00122	5f		 pop	 edi
  00123	5b		 pop	 ebx
  00124	5e		 pop	 esi

; 1262 : 		}
; 1263 : 		break;
; 1264 : 	}
; 1265 : 
; 1266 : }

  00125	5d		 pop	 ebp
  00126	c2 10 00	 ret	 16			; 00000010H
$LN5@ApplySocke@2:

; 1216 : 		break;
; 1217 : 	case SOCKET_EFFECT_OPADDMAXDMGWEAPONS:
; 1218 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxLeft,wOptionValue,btOptionType);

  00129	8b 4d 10	 mov	 ecx, DWORD PTR _btOptionType$[ebp]
  0012c	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  0012f	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00132	8b 9f 78 04 00
	00		 mov	 ebx, DWORD PTR [edi+1144]
  00138	51		 push	 ecx
  00139	52		 push	 edx
  0013a	53		 push	 ebx
  0013b	8b ce		 mov	 ecx, esi
  0013d	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1219 : 		lpObj->m_AttackDamageMaxLeft += iIncValue;
; 1220 : 		
; 1221 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxRight,wOptionValue,btOptionType);

  00142	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]
  00145	03 c3		 add	 eax, ebx
  00147	8b 9f 80 04 00
	00		 mov	 ebx, DWORD PTR [edi+1152]
  0014d	89 87 78 04 00
	00		 mov	 DWORD PTR [edi+1144], eax
  00153	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00156	50		 push	 eax
  00157	51		 push	 ecx
  00158	53		 push	 ebx
  00159	8b ce		 mov	 ecx, esi
  0015b	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1222 : 		lpObj->m_AttackDamageMaxRight += iIncValue;
; 1223 : 
; 1224 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMax,wOptionValue,btOptionType);

  00160	8b 55 10	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  00163	03 c3		 add	 eax, ebx
  00165	8b 9f 6c 04 00
	00		 mov	 ebx, DWORD PTR [edi+1132]
  0016b	89 87 80 04 00
	00		 mov	 DWORD PTR [edi+1152], eax
  00171	8b 45 14	 mov	 eax, DWORD PTR _wOptionValue$[ebp]
  00174	52		 push	 edx
  00175	50		 push	 eax
  00176	53		 push	 ebx
  00177	8b ce		 mov	 ecx, esi
  00179	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1225 : 		lpObj->m_MagicDamageMax += iIncValue;

  0017e	03 c3		 add	 eax, ebx
  00180	89 87 6c 04 00
	00		 mov	 DWORD PTR [edi+1132], eax
  00186	5f		 pop	 edi
  00187	5b		 pop	 ebx
  00188	5e		 pop	 esi

; 1262 : 		}
; 1263 : 		break;
; 1264 : 	}
; 1265 : 
; 1266 : }

  00189	5d		 pop	 ebp
  0018a	c2 10 00	 ret	 16			; 00000010H
$LN4@ApplySocke@2:

; 1226 : 		break;
; 1227 : 	case SOCKET_EFFECT_OPADDMINDMGWEAPONS:
; 1228 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinLeft,wOptionValue,btOptionType);

  0018d	8b 4d 10	 mov	 ecx, DWORD PTR _btOptionType$[ebp]
  00190	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  00193	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00196	8b 9f 7c 04 00
	00		 mov	 ebx, DWORD PTR [edi+1148]
  0019c	51		 push	 ecx
  0019d	52		 push	 edx
  0019e	53		 push	 ebx
  0019f	8b ce		 mov	 ecx, esi
  001a1	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1229 : 		lpObj->m_AttackDamageMinLeft += iIncValue;
; 1230 : 		
; 1231 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinRight,wOptionValue,btOptionType);

  001a6	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]
  001a9	03 c3		 add	 eax, ebx
  001ab	8b 9f 84 04 00
	00		 mov	 ebx, DWORD PTR [edi+1156]
  001b1	89 87 7c 04 00
	00		 mov	 DWORD PTR [edi+1148], eax
  001b7	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  001ba	50		 push	 eax
  001bb	51		 push	 ecx
  001bc	53		 push	 ebx
  001bd	8b ce		 mov	 ecx, esi
  001bf	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1232 : 		lpObj->m_AttackDamageMinRight += iIncValue;
; 1233 : 
; 1234 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMin,wOptionValue,btOptionType);

  001c4	8b 55 10	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  001c7	03 c3		 add	 eax, ebx
  001c9	8b 9f 68 04 00
	00		 mov	 ebx, DWORD PTR [edi+1128]
  001cf	89 87 84 04 00
	00		 mov	 DWORD PTR [edi+1156], eax
  001d5	8b 45 14	 mov	 eax, DWORD PTR _wOptionValue$[ebp]
  001d8	52		 push	 edx
  001d9	50		 push	 eax
  001da	53		 push	 ebx
  001db	8b ce		 mov	 ecx, esi
  001dd	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1235 : 		lpObj->m_MagicDamageMin += iIncValue;

  001e2	03 c3		 add	 eax, ebx
  001e4	89 87 68 04 00
	00		 mov	 DWORD PTR [edi+1128], eax
  001ea	5f		 pop	 edi
  001eb	5b		 pop	 ebx
  001ec	5e		 pop	 esi

; 1262 : 		}
; 1263 : 		break;
; 1264 : 	}
; 1265 : 
; 1266 : }

  001ed	5d		 pop	 ebp
  001ee	c2 10 00	 ret	 16			; 00000010H
$LN2@ApplySocke@2:

; 1236 : 		break;
; 1237 : 	case SOCKET_EFFECT_OPADDALLDMGWEAPONS:
; 1238 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxLeft,wOptionValue,btOptionType);
; 1239 : 		lpObj->m_AttackDamageMaxLeft += iIncValue;
; 1240 : 		
; 1241 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinLeft,wOptionValue,btOptionType);
; 1242 : 		lpObj->m_AttackDamageMinLeft += iIncValue;
; 1243 : 
; 1244 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMaxRight,wOptionValue,btOptionType);
; 1245 : 		lpObj->m_AttackDamageMaxRight += iIncValue;
; 1246 : 
; 1247 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_AttackDamageMinRight,wOptionValue,btOptionType);
; 1248 : 		lpObj->m_AttackDamageMinRight += iIncValue;
; 1249 : 		
; 1250 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMin,wOptionValue,btOptionType);
; 1251 : 		lpObj->m_MagicDamageMin += iIncValue;
; 1252 : 
; 1253 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDamageMax,wOptionValue,btOptionType);
; 1254 : 		lpObj->m_MagicDamageMax += iIncValue;
; 1255 : 		break;
; 1256 : 	case SOCKET_EFFECT_OPADDUNK:
; 1257 : 		lpObj->m_btSocketOpDecreaseAG += wOptionValue;

  001f1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  001f4	8a 4d 14	 mov	 cl, BYTE PTR _wOptionValue$[ebp]
  001f7	00 88 96 21 00
	00		 add	 BYTE PTR [eax+8598], cl

; 1258 : 
; 1259 : 		if(lpObj->m_btSocketOpDecreaseAG > 100)

  001fd	80 b8 96 21 00
	00 64		 cmp	 BYTE PTR [eax+8598], 100 ; 00000064H
  00204	76 07		 jbe	 SHORT $LN12@ApplySocke@2

; 1260 : 		{
; 1261 : 			lpObj->m_btSocketOpDecreaseAG = 100;

  00206	c6 80 96 21 00
	00 64		 mov	 BYTE PTR [eax+8598], 100 ; 00000064H
$LN12@ApplySocke@2:
  0020d	5f		 pop	 edi
  0020e	5b		 pop	 ebx
$LN1@ApplySocke@2:
  0020f	5e		 pop	 esi

; 1262 : 		}
; 1263 : 		break;
; 1264 : 	}
; 1265 : 
; 1266 : }

  00210	5d		 pop	 ebp
  00211	c2 10 00	 ret	 16			; 00000010H
$LN14@ApplySocke@2:
  00214	00 00 00 00	 DD	 $LN7@ApplySocke@2
  00218	00 00 00 00	 DD	 $LN6@ApplySocke@2
  0021c	00 00 00 00	 DD	 $LN5@ApplySocke@2
  00220	00 00 00 00	 DD	 $LN4@ApplySocke@2
  00224	00 00 00 00	 DD	 $LN7@ApplySocke@2
  00228	00 00 00 00	 DD	 $LN2@ApplySocke@2
?ApplySocketFireEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketFireEffect
_TEXT	ENDS
PUBLIC	?ApplySocketWaterEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketWaterEffect
; Function compile flags: /Ogtp
;	COMDAT ?ApplySocketWaterEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketWaterEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketWaterEffect, COMDAT
; _this$ = ecx

; 1270 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1271 : 	int iIncValue = 0;
; 1272 : 
; 1273 : 	switch(btEffectType)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00007	83 c0 f6	 add	 eax, -10		; fffffff6H
  0000a	53		 push	 ebx
  0000b	8b d9		 mov	 ebx, ecx
  0000d	83 f8 04	 cmp	 eax, 4
  00010	0f 87 a9 00 00
	00		 ja	 $LN6@ApplySocke@3
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@ApplySocke@3[eax*4]
$LN5@ApplySocke@3:

; 1274 : 	{
; 1275 : 	case 10:
; 1276 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_SuccessfulBlocking,wOptionValue,btOptionType);

  0001f	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00022	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]
  00025	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00028	8b b7 9c 04 00
	00		 mov	 esi, DWORD PTR [edi+1180]
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	56		 push	 esi
  00031	8b cb		 mov	 ecx, ebx
  00033	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1277 : 		lpObj->m_SuccessfulBlocking += iIncValue;

  00038	03 c6		 add	 eax, esi
  0003a	89 87 9c 04 00
	00		 mov	 DWORD PTR [edi+1180], eax
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 1294 : 		break;
; 1295 : 
; 1296 : 	}
; 1297 : }

  00043	5d		 pop	 ebp
  00044	c2 10 00	 ret	 16			; 00000010H
$LN4@ApplySocke@3:

; 1278 : 		break;
; 1279 : 	case 11:
; 1280 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_Defense,wOptionValue,btOptionType);

  00047	8b 55 10	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  0004a	8b 45 14	 mov	 eax, DWORD PTR _wOptionValue$[ebp]
  0004d	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00050	8b be 94 04 00
	00		 mov	 edi, DWORD PTR [esi+1172]
  00056	52		 push	 edx
  00057	50		 push	 eax
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1281 : 		lpObj->m_Defense += iIncValue;
; 1282 : 		
; 1283 : 		iIncValue = this->_CalcIncreaseValue(lpObj->m_MagicDefense,wOptionValue,btOptionType);

  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _btOptionType$[ebp]
  00061	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  00064	51		 push	 ecx
  00065	03 c7		 add	 eax, edi
  00067	8b be 98 04 00
	00		 mov	 edi, DWORD PTR [esi+1176]
  0006d	52		 push	 edx
  0006e	57		 push	 edi
  0006f	8b cb		 mov	 ecx, ebx
  00071	89 86 94 04 00
	00		 mov	 DWORD PTR [esi+1172], eax
  00077	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1284 : 		lpObj->m_MagicDefense += iIncValue;

  0007c	03 c7		 add	 eax, edi
  0007e	5f		 pop	 edi
  0007f	89 86 98 04 00
	00		 mov	 DWORD PTR [esi+1176], eax
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx

; 1294 : 		break;
; 1295 : 
; 1296 : 	}
; 1297 : }

  00087	5d		 pop	 ebp
  00088	c2 10 00	 ret	 16			; 00000010H
$LN3@ApplySocke@3:

; 1285 : 		break;
; 1286 : 	case 12:
; 1287 : 		lpObj->SetOpImproveSheldDefence += wOptionValue;

  0008b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0008e	8a 4d 14	 mov	 cl, BYTE PTR _wOptionValue$[ebp]
  00091	00 88 43 11 00
	00		 add	 BYTE PTR [eax+4419], cl
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx

; 1294 : 		break;
; 1295 : 
; 1296 : 	}
; 1297 : }

  0009a	5d		 pop	 ebp
  0009b	c2 10 00	 ret	 16			; 00000010H
$LN2@ApplySocke@3:

; 1288 : 		break;
; 1289 : 	case 13:
; 1290 : 		lpObj->DamageMinus += wOptionValue;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000a1	8a 55 14	 mov	 dl, BYTE PTR _wOptionValue$[ebp]
  000a4	00 90 70 01 00
	00		 add	 BYTE PTR [eax+368], dl
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx

; 1294 : 		break;
; 1295 : 
; 1296 : 	}
; 1297 : }

  000ad	5d		 pop	 ebp
  000ae	c2 10 00	 ret	 16			; 00000010H
$LN1@ApplySocke@3:

; 1291 : 		break;
; 1292 : 	case 14:
; 1293 : 		lpObj->DamageReflect += wOptionValue;

  000b1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000b4	8a 4d 14	 mov	 cl, BYTE PTR _wOptionValue$[ebp]
  000b7	00 88 71 01 00
	00		 add	 BYTE PTR [eax+369], cl
$LN10@ApplySocke@3:
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
$LN6@ApplySocke@3:
  000bf	5b		 pop	 ebx

; 1294 : 		break;
; 1295 : 
; 1296 : 	}
; 1297 : }

  000c0	5d		 pop	 ebp
  000c1	c2 10 00	 ret	 16			; 00000010H
$LN12@ApplySocke@3:
  000c4	00 00 00 00	 DD	 $LN5@ApplySocke@3
  000c8	00 00 00 00	 DD	 $LN4@ApplySocke@3
  000cc	00 00 00 00	 DD	 $LN3@ApplySocke@3
  000d0	00 00 00 00	 DD	 $LN2@ApplySocke@3
  000d4	00 00 00 00	 DD	 $LN1@ApplySocke@3
?ApplySocketWaterEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketWaterEffect
_TEXT	ENDS
PUBLIC	?ApplySocketIceEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketIceEffect
; Function compile flags: /Ogtp
;	COMDAT ?ApplySocketIceEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketIceEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketIceEffect, COMDAT
; _this$ = ecx

; 1301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1302 : 	int iIncValue = 0;
; 1303 : 
; 1304 : 	switch(btEffectType)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00007	83 c0 f0	 add	 eax, -16		; fffffff0H
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	83 f8 03	 cmp	 eax, 3
  00010	0f 87 a6 00 00
	00		 ja	 $LN5@ApplySocke@4
  00016	57		 push	 edi
  00017	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@ApplySocke@4[eax*4]
$LN4@ApplySocke@4:

; 1305 : 	{
; 1306 : 	case 16:
; 1307 : 		iIncValue += this->_CalcIncreaseValue((int)lpObj->AddLife + (int)lpObj->MaxLife,wOptionValue,btOptionType);

  0001e	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00021	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]

; 1308 : 		lpObj->m_wSocketOpAddLife += iIncValue;

  00024	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00027	d9 87 00 01 00
	00		 fld	 DWORD PTR [edi+256]
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 __ftol2_sse
  00034	03 87 4c 01 00
	00		 add	 eax, DWORD PTR [edi+332]
  0003a	8b ce		 mov	 ecx, esi
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  00042	66 01 87 92 21
	00 00		 add	 WORD PTR [edi+8594], ax
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 1320 : 		break;
; 1321 : 	}
; 1322 : }

  0004b	5d		 pop	 ebp
  0004c	c2 10 00	 ret	 16			; 00000010H
$LN3@ApplySocke@4:

; 1309 : 		break;
; 1310 : 	case 17:
; 1311 : 		iIncValue += this->_CalcIncreaseValue((int)lpObj->AddMana + (int)lpObj->MaxMana,wOptionValue,btOptionType);

  0004f	8b 55 10	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  00052	8b 45 14	 mov	 eax, DWORD PTR _wOptionValue$[ebp]

; 1312 : 		lpObj->m_wSocketOpAddMana += iIncValue;

  00055	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00058	d9 87 14 01 00
	00		 fld	 DWORD PTR [edi+276]
  0005e	52		 push	 edx
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 __ftol2_sse
  00065	03 87 50 01 00
	00		 add	 eax, DWORD PTR [edi+336]
  0006b	8b ce		 mov	 ecx, esi
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  00073	66 01 87 94 21
	00 00		 add	 WORD PTR [edi+8596], ax
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 1320 : 		break;
; 1321 : 	}
; 1322 : }

  0007c	5d		 pop	 ebp
  0007d	c2 10 00	 ret	 16			; 00000010H
$LN2@ApplySocke@4:

; 1313 : 		break;
; 1314 : 	case 18:
; 1315 : 		iIncValue = this->_CalcIncreaseValue(lpObj->SetOpAddSkillAttack,wOptionValue,btOptionType);

  00080	8b 4d 10	 mov	 ecx, DWORD PTR _btOptionType$[ebp]
  00083	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  00086	53		 push	 ebx
  00087	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0008a	0f b7 bb 24 11
	00 00		 movzx	 edi, WORD PTR [ebx+4388]
  00091	51		 push	 ecx

; 1316 : 		lpObj->SetOpAddSkillAttack += iIncValue;

  00092	0f bf c7	 movsx	 eax, di
  00095	52		 push	 edx
  00096	50		 push	 eax
  00097	8b ce		 mov	 ecx, esi
  00099	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  0009e	03 c7		 add	 eax, edi
  000a0	66 89 83 24 11
	00 00		 mov	 WORD PTR [ebx+4388], ax
  000a7	5b		 pop	 ebx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi

; 1320 : 		break;
; 1321 : 	}
; 1322 : }

  000aa	5d		 pop	 ebp
  000ab	c2 10 00	 ret	 16			; 00000010H
$LN1@ApplySocke@4:

; 1317 : 		break;
; 1318 : 	case 19:
; 1319 : 		lpObj->m_AttackRating += wOptionValue;

  000ae	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  000b2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000b5	01 88 88 04 00
	00		 add	 DWORD PTR [eax+1160], ecx
$LN9@ApplySocke@4:
  000bb	5f		 pop	 edi
$LN5@ApplySocke@4:
  000bc	5e		 pop	 esi

; 1320 : 		break;
; 1321 : 	}
; 1322 : }

  000bd	5d		 pop	 ebp
  000be	c2 10 00	 ret	 16			; 00000010H
  000c1	8d 49 00	 npad	 3
$LN10@ApplySocke@4:
  000c4	00 00 00 00	 DD	 $LN4@ApplySocke@4
  000c8	00 00 00 00	 DD	 $LN3@ApplySocke@4
  000cc	00 00 00 00	 DD	 $LN2@ApplySocke@4
  000d0	00 00 00 00	 DD	 $LN1@ApplySocke@4
?ApplySocketIceEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketIceEffect
_TEXT	ENDS
PUBLIC	?ApplySocketWindEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketWindEffect
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
; Function compile flags: /Ogtp
;	COMDAT ?ApplySocketWindEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
tv367 = 12						; size = 4
tv336 = 12						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketWindEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketWindEffect, COMDAT
; _this$ = ecx

; 1326 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1327 : 	int iIncValue = 0;
; 1328 : 
; 1329 : 	switch(btEffectType)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00007	83 c0 eb	 add	 eax, -21		; ffffffebH
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	83 f8 06	 cmp	 eax, 6
  00010	0f 87 40 02 00
	00		 ja	 $LN8@ApplySocke@5
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@ApplySocke@5[eax*4]
$LN7@ApplySocke@5:

; 1330 : 	{
; 1331 : 	case 21:
; 1332 : 		iIncValue = this->_CalcIncreaseValue((int)lpObj->AddLife+(int)lpObj->MaxLife,wOptionValue,btOptionType);

  0001f	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00022	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]

; 1333 : 		lpObj->m_wSocketOpIncLifePower += iIncValue;

  00025	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00028	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 __ftol2_sse
  00035	03 86 4c 01 00
	00		 add	 eax, DWORD PTR [esi+332]
  0003b	8b cf		 mov	 ecx, edi
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  00043	66 01 86 8e 21
	00 00		 add	 WORD PTR [esi+8590], ax
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	5f		 pop	 edi

; 1363 : 		break;
; 1364 : 	}
; 1365 : }

  0004d	5d		 pop	 ebp
  0004e	c2 10 00	 ret	 16			; 00000010H
$LN6@ApplySocke@5:

; 1334 : 		break;
; 1335 : 	case 22:
; 1336 : 		iIncValue = this->_CalcIncreaseValue((int)lpObj->AddLife+(int)lpObj->MaxLife,wOptionValue,btOptionType);

  00051	8b 55 10	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  00054	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00057	8b 45 14	 mov	 eax, DWORD PTR _wOptionValue$[ebp]

; 1337 : 		lpObj->AddLife += iIncValue;

  0005a	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00060	8b 9e 4c 01 00
	00		 mov	 ebx, DWORD PTR [esi+332]
  00066	52		 push	 edx
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 __ftol2_sse
  0006d	03 c3		 add	 eax, ebx
  0006f	50		 push	 eax
  00070	8b cf		 mov	 ecx, edi
  00072	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1338 : 		GCReFillSend(lpObj->m_Index,(lpObj->AddLife+lpObj->MaxLife),0xFE,0, (lpObj->iMaxShield+lpObj->iAddShield));

  00077	8b 8e 5c 01 00
	00		 mov	 ecx, DWORD PTR [esi+348]
  0007d	03 8e 58 01 00
	00		 add	 ecx, DWORD PTR [esi+344]
  00083	03 c3		 add	 eax, ebx
  00085	89 45 0c	 mov	 DWORD PTR tv336[ebp], eax
  00088	db 45 0c	 fild	 DWORD PTR tv336[ebp]
  0008b	51		 push	 ecx
  0008c	6a 00		 push	 0
  0008e	68 fe 00 00 00	 push	 254			; 000000feH
  00093	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00099	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax
  0009f	e8 00 00 00 00	 call	 __ftol2_sse
  000a4	8b 16		 mov	 edx, DWORD PTR [esi]
  000a6	50		 push	 eax
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 1339 : 		GCReFillSend(lpObj->m_Index,lpObj->Life,0xFF,0,lpObj->iShield);

  000ad	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  000b3	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  000b9	83 c4 14	 add	 esp, 20			; 00000014H
  000bc	50		 push	 eax
  000bd	6a 00		 push	 0
  000bf	68 ff 00 00 00	 push	 255			; 000000ffH
  000c4	e8 00 00 00 00	 call	 __ftol2_sse
  000c9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000cb	50		 push	 eax
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  000d2	83 c4 14	 add	 esp, 20			; 00000014H
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	5f		 pop	 edi

; 1363 : 		break;
; 1364 : 	}
; 1365 : }

  000d8	5d		 pop	 ebp
  000d9	c2 10 00	 ret	 16			; 00000010H
$LN5@ApplySocke@5:

; 1340 : 		break;
; 1341 : 	case 23:
; 1342 : 		iIncValue = this->_CalcIncreaseValue((int)lpObj->AddMana+(int)lpObj->MaxMana,wOptionValue,btOptionType);

  000dc	8b 55 10	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  000df	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  000e2	8b 45 14	 mov	 eax, DWORD PTR _wOptionValue$[ebp]

; 1343 : 		lpObj->AddMana += iIncValue;

  000e5	d9 86 14 01 00
	00		 fld	 DWORD PTR [esi+276]
  000eb	8b 9e 50 01 00
	00		 mov	 ebx, DWORD PTR [esi+336]
  000f1	52		 push	 edx
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 __ftol2_sse
  000f8	03 c3		 add	 eax, ebx
  000fa	50		 push	 eax
  000fb	8b cf		 mov	 ecx, edi
  000fd	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1344 : 		GCManaSend(lpObj->m_Index,(lpObj->AddMana+lpObj->MaxMana),0xFE,0,(lpObj->MaxBP+lpObj->AddBP));

  00102	8b 8e 30 01 00
	00		 mov	 ecx, DWORD PTR [esi+304]
  00108	03 8e 2c 01 00
	00		 add	 ecx, DWORD PTR [esi+300]
  0010e	03 c3		 add	 eax, ebx
  00110	89 45 0c	 mov	 DWORD PTR tv367[ebp], eax
  00113	db 45 0c	 fild	 DWORD PTR tv367[ebp]
  00116	51		 push	 ecx
  00117	6a 00		 push	 0
  00119	68 fe 00 00 00	 push	 254			; 000000feH
  0011e	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00124	89 86 50 01 00
	00		 mov	 DWORD PTR [esi+336], eax
  0012a	e8 00 00 00 00	 call	 __ftol2_sse
  0012f	8b 16		 mov	 edx, DWORD PTR [esi]
  00131	50		 push	 eax
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 1345 : 		GCManaSend(lpObj->m_Index,lpObj->Mana,0xFF,0,lpObj->BP);

  00138	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  0013e	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  00144	83 c4 14	 add	 esp, 20			; 00000014H
  00147	50		 push	 eax
  00148	6a 00		 push	 0
  0014a	68 ff 00 00 00	 push	 255			; 000000ffH
  0014f	e8 00 00 00 00	 call	 __ftol2_sse
  00154	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00156	50		 push	 eax
  00157	51		 push	 ecx
  00158	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0015d	83 c4 14	 add	 esp, 20			; 00000014H
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx
  00162	5f		 pop	 edi

; 1363 : 		break;
; 1364 : 	}
; 1365 : }

  00163	5d		 pop	 ebp
  00164	c2 10 00	 ret	 16			; 00000010H
$LN4@ApplySocke@5:

; 1346 : 		break;
; 1347 : 	case 24:
; 1348 : 		iIncValue = this->_CalcIncreaseValue((int)lpObj->AddMana+(int)lpObj->MaxMana,wOptionValue,btOptionType);

  00167	8b 55 10	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  0016a	8b 45 14	 mov	 eax, DWORD PTR _wOptionValue$[ebp]

; 1349 : 		lpObj->m_wSocketOpIncMaxMana += iIncValue;

  0016d	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00170	d9 86 14 01 00
	00		 fld	 DWORD PTR [esi+276]
  00176	52		 push	 edx
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 __ftol2_sse
  0017d	03 86 50 01 00
	00		 add	 eax, DWORD PTR [esi+336]
  00183	8b cf		 mov	 ecx, edi
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  0018b	66 01 86 90 21
	00 00		 add	 WORD PTR [esi+8592], ax
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	5f		 pop	 edi

; 1363 : 		break;
; 1364 : 	}
; 1365 : }

  00195	5d		 pop	 ebp
  00196	c2 10 00	 ret	 16			; 00000010H
$LN3@ApplySocke@5:

; 1350 : 		break;
; 1351 : 	case 25:
; 1352 : 		iIncValue = this->_CalcIncreaseValue(lpObj->MaxBP+lpObj->AddBP,wOptionValue,btOptionType);

  00199	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0019c	8b 4d 10	 mov	 ecx, DWORD PTR _btOptionType$[ebp]
  0019f	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  001a2	8b 9e 30 01 00
	00		 mov	 ebx, DWORD PTR [esi+304]
  001a8	8b 86 2c 01 00
	00		 mov	 eax, DWORD PTR [esi+300]
  001ae	51		 push	 ecx
  001af	52		 push	 edx
  001b0	03 c3		 add	 eax, ebx
  001b2	50		 push	 eax
  001b3	8b cf		 mov	 ecx, edi
  001b5	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1353 : 		lpObj->AddBP += iIncValue;
; 1354 : 		GCManaSend(lpObj->m_Index,(lpObj->AddMana+lpObj->MaxMana),0xFE,0,(lpObj->MaxBP+lpObj->AddBP));

  001ba	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  001c0	03 d8		 add	 ebx, eax
  001c2	89 9e 30 01 00
	00		 mov	 DWORD PTR [esi+304], ebx
  001c8	03 9e 2c 01 00
	00		 add	 ebx, DWORD PTR [esi+300]
  001ce	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  001d4	53		 push	 ebx
  001d5	6a 00		 push	 0
  001d7	68 fe 00 00 00	 push	 254			; 000000feH
  001dc	e8 00 00 00 00	 call	 __ftol2_sse
  001e1	50		 push	 eax
  001e2	8b 06		 mov	 eax, DWORD PTR [esi]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 1355 : 		GCManaSend(lpObj->m_Index,lpObj->Mana,0xFF,0,lpObj->BP);

  001ea	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  001f0	8b 8e 28 01 00
	00		 mov	 ecx, DWORD PTR [esi+296]
  001f6	83 c4 14	 add	 esp, 20			; 00000014H
  001f9	51		 push	 ecx
  001fa	6a 00		 push	 0
  001fc	68 ff 00 00 00	 push	 255			; 000000ffH
  00201	e8 00 00 00 00	 call	 __ftol2_sse
  00206	8b 16		 mov	 edx, DWORD PTR [esi]
  00208	50		 push	 eax
  00209	52		 push	 edx
  0020a	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0020f	83 c4 14	 add	 esp, 20			; 00000014H
  00212	5e		 pop	 esi
  00213	5b		 pop	 ebx
  00214	5f		 pop	 edi

; 1363 : 		break;
; 1364 : 	}
; 1365 : }

  00215	5d		 pop	 ebp
  00216	c2 10 00	 ret	 16			; 00000010H
$LN2@ApplySocke@5:

; 1356 : 		break;
; 1357 : 	case 26:
; 1358 : 		iIncValue = this->_CalcIncreaseValue(lpObj->SetOpIncAGValue,wOptionValue,btOptionType);

  00219	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0021c	0f b7 b3 2e 11
	00 00		 movzx	 esi, WORD PTR [ebx+4398]
  00223	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00226	8b 4d 14	 mov	 ecx, DWORD PTR _wOptionValue$[ebp]
  00229	50		 push	 eax

; 1359 : 		lpObj->SetOpIncAGValue += iIncValue;

  0022a	0f bf d6	 movsx	 edx, si
  0022d	51		 push	 ecx
  0022e	52		 push	 edx
  0022f	8b cf		 mov	 ecx, edi
  00231	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  00236	03 c6		 add	 eax, esi
  00238	5e		 pop	 esi
  00239	66 89 83 2e 11
	00 00		 mov	 WORD PTR [ebx+4398], ax
  00240	5b		 pop	 ebx
  00241	5f		 pop	 edi

; 1363 : 		break;
; 1364 : 	}
; 1365 : }

  00242	5d		 pop	 ebp
  00243	c2 10 00	 ret	 16			; 00000010H
$LN1@ApplySocke@5:

; 1360 : 		break;
; 1361 : 	case 27:
; 1362 : 		lpObj->MonsterDieGetMoney += wOptionValue;

  00246	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00249	66 8b 4d 14	 mov	 cx, WORD PTR _wOptionValue$[ebp]
  0024d	66 01 88 72 01
	00 00		 add	 WORD PTR [eax+370], cx
$LN12@ApplySocke@5:
  00254	5e		 pop	 esi
  00255	5b		 pop	 ebx
$LN8@ApplySocke@5:
  00256	5f		 pop	 edi

; 1363 : 		break;
; 1364 : 	}
; 1365 : }

  00257	5d		 pop	 ebp
  00258	c2 10 00	 ret	 16			; 00000010H
  0025b	90		 npad	 1
$LN14@ApplySocke@5:
  0025c	00 00 00 00	 DD	 $LN7@ApplySocke@5
  00260	00 00 00 00	 DD	 $LN6@ApplySocke@5
  00264	00 00 00 00	 DD	 $LN5@ApplySocke@5
  00268	00 00 00 00	 DD	 $LN4@ApplySocke@5
  0026c	00 00 00 00	 DD	 $LN3@ApplySocke@5
  00270	00 00 00 00	 DD	 $LN2@ApplySocke@5
  00274	00 00 00 00	 DD	 $LN1@ApplySocke@5
?ApplySocketWindEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketWindEffect
_TEXT	ENDS
PUBLIC	?ApplySocketLightningEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketLightningEffect
; Function compile flags: /Ogtp
;	COMDAT ?ApplySocketLightningEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketLightningEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketLightningEffect, COMDAT
; _this$ = ecx

; 1369 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1370 : 	int iIncValue = 0;
; 1371 : 
; 1372 : 	switch(btEffectType)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00007	83 c0 e3	 add	 eax, -29		; ffffffe3H
  0000a	83 f8 03	 cmp	 eax, 3
  0000d	77 7f		 ja	 SHORT $LN5@ApplySocke@6
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@ApplySocke@6[eax*4]
$LN4@ApplySocke@6:

; 1373 : 	{
; 1374 : 	case 29:
; 1375 : 		iIncValue = this->_CalcIncreaseValue(lpObj->SetOpAddExDamage,wOptionValue,btOptionType);

  00018	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001b	0f b7 b7 26 11
	00 00		 movzx	 esi, WORD PTR [edi+4390]
  00022	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00025	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  00028	50		 push	 eax

; 1376 : 		lpObj->SetOpAddExDamage += iIncValue;

  00029	0f bf c6	 movsx	 eax, si
  0002c	52		 push	 edx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  00033	03 c6		 add	 eax, esi
  00035	66 89 87 26 11
	00 00		 mov	 WORD PTR [edi+4390], ax
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1387 : 		break;
; 1388 : 	}
; 1389 : }

  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
$LN3@ApplySocke@6:

; 1377 : 		break;
; 1378 : 	case 30:
; 1379 : 		lpObj->m_ExcelentDamage += wOptionValue;

  00042	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  00046	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00049	01 88 c0 04 00
	00		 add	 DWORD PTR [eax+1216], ecx
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1387 : 		break;
; 1388 : 	}
; 1389 : }

  00051	5d		 pop	 ebp
  00052	c2 10 00	 ret	 16			; 00000010H
$LN2@ApplySocke@6:

; 1380 : 		break;
; 1381 : 	case 31:
; 1382 : 		iIncValue = this->_CalcIncreaseValue(lpObj->SetOpAddCriticalDamage,wOptionValue,btOptionType);

  00055	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00058	0f b7 b7 2a 11
	00 00		 movzx	 esi, WORD PTR [edi+4394]
  0005f	8b 55 10	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  00062	8b 45 14	 mov	 eax, DWORD PTR _wOptionValue$[ebp]
  00065	52		 push	 edx

; 1383 : 		lpObj->SetOpAddCriticalDamage += iIncValue;

  00066	0f bf d6	 movsx	 edx, si
  00069	50		 push	 eax
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  00070	03 c6		 add	 eax, esi
  00072	66 89 87 2a 11
	00 00		 mov	 WORD PTR [edi+4394], ax
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi

; 1387 : 		break;
; 1388 : 	}
; 1389 : }

  0007b	5d		 pop	 ebp
  0007c	c2 10 00	 ret	 16			; 00000010H
$LN1@ApplySocke@6:

; 1384 : 		break;
; 1385 : 	case 32:
; 1386 : 		lpObj->m_CriticalDamage += wOptionValue;

  0007f	0f b7 4d 14	 movzx	 ecx, WORD PTR _wOptionValue$[ebp]
  00083	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00086	01 88 bc 04 00
	00		 add	 DWORD PTR [eax+1212], ecx
$LN9@ApplySocke@6:
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
$LN5@ApplySocke@6:

; 1387 : 		break;
; 1388 : 	}
; 1389 : }

  0008e	5d		 pop	 ebp
  0008f	c2 10 00	 ret	 16			; 00000010H
  00092	8b ff		 npad	 2
$LN11@ApplySocke@6:
  00094	00 00 00 00	 DD	 $LN4@ApplySocke@6
  00098	00 00 00 00	 DD	 $LN3@ApplySocke@6
  0009c	00 00 00 00	 DD	 $LN2@ApplySocke@6
  000a0	00 00 00 00	 DD	 $LN1@ApplySocke@6
?ApplySocketLightningEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketLightningEffect
_TEXT	ENDS
PUBLIC	?ApplySocketEarthEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketEarthEffect
; Function compile flags: /Ogtp
;	COMDAT ?ApplySocketEarthEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btEffectType$ = 12					; size = 1
_btOptionType$ = 16					; size = 1
_wOptionValue$ = 20					; size = 2
?ApplySocketEarthEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketOption::ApplySocketEarthEffect, COMDAT
; _this$ = ecx

; 1393 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1394 : 	int iIncValue = 0;
; 1395 : 	
; 1396 : 	switch(btEffectType)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  00007	83 c0 de	 add	 eax, -34		; ffffffdeH
  0000a	83 f8 03	 cmp	 eax, 3
  0000d	0f 87 d1 00 00
	00		 ja	 $LN5@ApplySocke@7
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@ApplySocke@7[eax*4]
$LN4@ApplySocke@7:

; 1397 : 	{
; 1398 : 	case 34:
; 1399 : 		iIncValue = this->_CalcIncreaseValue(lpObj->Strength+lpObj->AddStrength,wOptionValue,btOptionType);

  0001c	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001f	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00022	0f b7 be 20 01
	00 00		 movzx	 edi, WORD PTR [esi+288]
  00029	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  0002c	50		 push	 eax

; 1400 : 		lpObj->AddStrength += iIncValue;

  0002d	0f b7 86 f4 00
	00 00		 movzx	 eax, WORD PTR [esi+244]
  00034	52		 push	 edx
  00035	0f bf d7	 movsx	 edx, di
  00038	03 c2		 add	 eax, edx
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  00040	03 c7		 add	 eax, edi
  00042	5f		 pop	 edi
  00043	66 89 86 20 01
	00 00		 mov	 WORD PTR [esi+288], ax
  0004a	5e		 pop	 esi

; 1413 : 		break;
; 1414 : 	}
; 1415 : }

  0004b	5d		 pop	 ebp
  0004c	c2 10 00	 ret	 16			; 00000010H
$LN3@ApplySocke@7:

; 1401 : 		break;
; 1402 : 	case 35:
; 1403 : 		iIncValue = this->_CalcIncreaseValue(lpObj->Dexterity+lpObj->AddDexterity,wOptionValue,btOptionType);

  0004f	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00052	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00055	0f b7 be 22 01
	00 00		 movzx	 edi, WORD PTR [esi+290]
  0005c	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  0005f	50		 push	 eax

; 1404 : 		lpObj->AddDexterity += iIncValue;

  00060	0f b7 86 f6 00
	00 00		 movzx	 eax, WORD PTR [esi+246]
  00067	52		 push	 edx
  00068	0f bf d7	 movsx	 edx, di
  0006b	03 c2		 add	 eax, edx
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  00073	03 c7		 add	 eax, edi
  00075	5f		 pop	 edi
  00076	66 89 86 22 01
	00 00		 mov	 WORD PTR [esi+290], ax
  0007d	5e		 pop	 esi

; 1413 : 		break;
; 1414 : 	}
; 1415 : }

  0007e	5d		 pop	 ebp
  0007f	c2 10 00	 ret	 16			; 00000010H
$LN2@ApplySocke@7:

; 1405 : 		break;
; 1406 : 	case 36:
; 1407 : 		iIncValue = this->_CalcIncreaseValue(lpObj->Vitality+lpObj->AddVitality,wOptionValue,btOptionType);

  00082	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00085	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00088	0f b7 be 24 01
	00 00		 movzx	 edi, WORD PTR [esi+292]
  0008f	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  00092	50		 push	 eax

; 1408 : 		lpObj->AddVitality += iIncValue;

  00093	0f b7 86 f8 00
	00 00		 movzx	 eax, WORD PTR [esi+248]
  0009a	52		 push	 edx
  0009b	0f bf d7	 movsx	 edx, di
  0009e	03 c2		 add	 eax, edx
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  000a6	03 c7		 add	 eax, edi
  000a8	5f		 pop	 edi
  000a9	66 89 86 24 01
	00 00		 mov	 WORD PTR [esi+292], ax
  000b0	5e		 pop	 esi

; 1413 : 		break;
; 1414 : 	}
; 1415 : }

  000b1	5d		 pop	 ebp
  000b2	c2 10 00	 ret	 16			; 00000010H
$LN1@ApplySocke@7:

; 1409 : 		break;
; 1410 : 	case 37:
; 1411 : 		iIncValue = this->_CalcIncreaseValue(lpObj->Energy+lpObj->AddEnergy,wOptionValue,btOptionType);

  000b5	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  000b8	8b 45 10	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  000bb	0f b7 be 26 01
	00 00		 movzx	 edi, WORD PTR [esi+294]
  000c2	8b 55 14	 mov	 edx, DWORD PTR _wOptionValue$[ebp]
  000c5	50		 push	 eax

; 1412 : 		lpObj->AddEnergy += iIncValue;

  000c6	0f b7 86 fa 00
	00 00		 movzx	 eax, WORD PTR [esi+250]
  000cd	52		 push	 edx
  000ce	0f bf d7	 movsx	 edx, di
  000d1	03 c2		 add	 eax, edx
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue
  000d9	03 c7		 add	 eax, edi
  000db	66 89 86 26 01
	00 00		 mov	 WORD PTR [esi+294], ax
$LN9@ApplySocke@7:
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
$LN5@ApplySocke@7:

; 1413 : 		break;
; 1414 : 	}
; 1415 : }

  000e4	5d		 pop	 ebp
  000e5	c2 10 00	 ret	 16			; 00000010H
$LN11@ApplySocke@7:
  000e8	00 00 00 00	 DD	 $LN4@ApplySocke@7
  000ec	00 00 00 00	 DD	 $LN3@ApplySocke@7
  000f0	00 00 00 00	 DD	 $LN2@ApplySocke@7
  000f4	00 00 00 00	 DD	 $LN1@ApplySocke@7
?ApplySocketEarthEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketOption::ApplySocketEarthEffect
_TEXT	ENDS
PUBLIC	?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z ; CSocketOption::ApplySocketEffectforWeapons
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z$0
__ehfuncinfo$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z
_TEXT	SEGMENT
_SeedSphere$ = -44					; size = 16
_loc5$ = -28						; size = 1
_loc6$ = -24						; size = 1
tv87 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv281 = 8						; size = 4
_lpItem$ = 8						; size = 4
?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z PROC ; CSocketOption::ApplySocketEffectforWeapons, COMDAT
; _this$ = ecx

; 1466 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 1467 : 	if(lpItem == NULL)

  0002d	8b 7d 08	 mov	 edi, DWORD PTR _lpItem$[ebp]
  00030	85 ff		 test	 edi, edi
  00032	0f 84 1a 01 00
	00		 je	 $LN12@ApplySocke@8

; 1468 : 	{
; 1469 : 		return;
; 1470 : 	}
; 1471 : 
; 1472 : 	if(lpItem->IsItem() == FALSE || this->IsSocketOption(lpItem) == FALSE)

  00038	8b cf		 mov	 ecx, edi
  0003a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 0b 01 00
	00		 je	 $LN12@ApplySocke@8
  00047	57		 push	 edi
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?IsSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsSocketOption
  0004f	84 c0		 test	 al, al
  00051	0f 84 fb 00 00
	00		 je	 $LN12@ApplySocke@8

; 1473 : 	{
; 1474 : 		return ;
; 1475 : 	}
; 1476 : 	
; 1477 : 	BYTE loc5 = 0;
; 1478 : 	BYTE loc6 = 0;
; 1479 : 	BYTE loc7 = 0;
; 1480 : 	CSeedSphere SeedSphere;

  00057	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  0005a	e8 00 00 00 00	 call	 ??0CSeedSphere@@QAE@XZ	; CSeedSphere::CSeedSphere
  0005f	8d 87 cc 00 00
	00		 lea	 eax, DWORD PTR [edi+204]
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	89 45 08	 mov	 DWORD PTR tv281[ebp], eax
  0006f	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR tv87[ebp], 5
  00076	eb 03		 jmp	 SHORT $LN11@ApplySocke@8
$LL20@ApplySocke@8:
  00078	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
$LN11@ApplySocke@8:

; 1484 : 	{
; 1485 : 		if(lpItem->m_SocketOption[i] == 0xFF || lpItem->m_SocketOption[i] == 0xFE)

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR tv281[ebp]
  0007e	8a 01		 mov	 al, BYTE PTR [ecx]
  00080	3c ff		 cmp	 al, 255			; 000000ffH
  00082	0f 84 aa 00 00
	00		 je	 $LN10@ApplySocke@8
  00088	3c fe		 cmp	 al, 254			; 000000feH
  0008a	0f 84 a2 00 00
	00		 je	 $LN10@ApplySocke@8

; 1486 : 		{
; 1487 : 			continue;
; 1488 : 		}
; 1489 : 		
; 1490 : 		loc7 = lpItem->m_SocketOption[i];
; 1491 : 		loc5 = loc7 % 50;

  00090	0f b6 c8	 movzx	 ecx, al
  00093	8b c1		 mov	 eax, ecx
  00095	99		 cdq
  00096	bb 32 00 00 00	 mov	 ebx, 50			; 00000032H
  0009b	f7 fb		 idiv	 ebx

; 1492 : 		loc6 = (loc7 - loc5) / 50 + 1;

  0009d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000a2	8a da		 mov	 bl, dl
  000a4	0f b6 d3	 movzx	 edx, bl
  000a7	2b ca		 sub	 ecx, edx
  000a9	f7 e9		 imul	 ecx
  000ab	c1 fa 04	 sar	 edx, 4
  000ae	8b c2		 mov	 eax, edx
  000b0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b3	03 c2		 add	 eax, edx
  000b5	fe c0		 inc	 al
  000b7	88 45 e8	 mov	 BYTE PTR _loc6$[ebp], al

; 1493 : 		
; 1494 : 		if(this->SetSeedSphereData(&SeedSphere,loc5,loc6) == NULL)

  000ba	8b 4d e8	 mov	 ecx, DWORD PTR _loc6$[ebp]
  000bd	51		 push	 ecx
  000be	88 5d e4	 mov	 BYTE PTR _loc5$[ebp], bl
  000c1	8b 55 e4	 mov	 edx, DWORD PTR _loc5$[ebp]
  000c4	52		 push	 edx
  000c5	8d 45 d4	 lea	 eax, DWORD PTR _SeedSphere$[ebp]
  000c8	50		 push	 eax
  000c9	8b ce		 mov	 ecx, esi
  000cb	e8 00 00 00 00	 call	 ?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z ; CSocketOption::SetSeedSphereData
  000d0	84 c0		 test	 al, al
  000d2	74 5e		 je	 SHORT $LN10@ApplySocke@8

; 1495 : 		{
; 1496 : 			continue;
; 1497 : 		}
; 1498 : 
; 1499 : 		if(loc5 == 38)

  000d4	80 fb 26	 cmp	 bl, 38			; 00000026H
  000d7	75 23		 jne	 SHORT $LN5@ApplySocke@8

; 1500 : 		{
; 1501 : 			iIncValue = this->_CalcIncreaseValue(lpItem->m_HJOpStrength,SeedSphere.m_wSocketSlot,SeedSphere.m_btOptionType);

  000d9	8b 4d dd	 mov	 ecx, DWORD PTR _SeedSphere$[ebp+9]
  000dc	8b 55 de	 mov	 edx, DWORD PTR _SeedSphere$[ebp+10]
  000df	0f b7 b7 c6 00
	00 00		 movzx	 esi, WORD PTR [edi+198]
  000e6	51		 push	 ecx
  000e7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ea	52		 push	 edx
  000eb	56		 push	 esi
  000ec	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1502 : 			lpItem->m_HJOpStrength += iIncValue;

  000f1	03 f0		 add	 esi, eax
  000f3	66 89 b7 c6 00
	00 00		 mov	 WORD PTR [edi+198], si
  000fa	eb 36		 jmp	 SHORT $LN10@ApplySocke@8
$LN5@ApplySocke@8:

; 1503 : 		}
; 1504 : 
; 1505 : 		else if(loc5 == 39)

  000fc	80 fb 27	 cmp	 bl, 39			; 00000027H
  000ff	75 23		 jne	 SHORT $LN3@ApplySocke@8

; 1506 : 		{
; 1507 : 			iIncValue = this->_CalcIncreaseValue(lpItem->m_HJOpDexterity,SeedSphere.m_wSocketSlot,SeedSphere.m_btOptionType);

  00101	8b 4d dd	 mov	 ecx, DWORD PTR _SeedSphere$[ebp+9]
  00104	8b 55 de	 mov	 edx, DWORD PTR _SeedSphere$[ebp+10]
  00107	0f b7 b7 c8 00
	00 00		 movzx	 esi, WORD PTR [edi+200]
  0010e	51		 push	 ecx
  0010f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	52		 push	 edx
  00113	56		 push	 esi
  00114	e8 00 00 00 00	 call	 ?_CalcIncreaseValue@CSocketOption@@QAEHHGE@Z ; CSocketOption::_CalcIncreaseValue

; 1508 : 			lpItem->m_HJOpDexterity += iIncValue;

  00119	03 f0		 add	 esi, eax
  0011b	66 89 b7 c8 00
	00 00		 mov	 WORD PTR [edi+200], si
  00122	eb 0e		 jmp	 SHORT $LN10@ApplySocke@8
$LN3@ApplySocke@8:

; 1509 : 		}
; 1510 : 
; 1511 : 		else if(loc5 == 20)

  00124	80 fb 14	 cmp	 bl, 20			; 00000014H
  00127	75 09		 jne	 SHORT $LN10@ApplySocke@8

; 1512 : 		{
; 1513 : 			lpItem->m_SocketBonus += SeedSphere.m_wSocketSlot;

  00129	8a 4d de	 mov	 cl, BYTE PTR _SeedSphere$[ebp+10]
  0012c	00 8f d1 00 00
	00		 add	 BYTE PTR [edi+209], cl
$LN10@ApplySocke@8:

; 1481 : 	int iIncValue = 0;
; 1482 : 
; 1483 : 	for(int i = 0;i < 5; i ++)

  00132	b8 01 00 00 00	 mov	 eax, 1
  00137	01 45 08	 add	 DWORD PTR tv281[ebp], eax
  0013a	29 45 ec	 sub	 DWORD PTR tv87[ebp], eax
  0013d	0f 85 35 ff ff
	ff		 jne	 $LL20@ApplySocke@8

; 1514 : 		}
; 1515 : 	}
; 1516 : }

  00143	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  00146	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014d	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
$LN12@ApplySocke@8:
  00152	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00155	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015c	59		 pop	 ecx
  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	5b		 pop	 ebx
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
__ehhandler$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ApplySocketEffectforWeapons@CSocketOption@@QAEXPAVCItem@@@Z ENDP ; CSocketOption::ApplySocketEffectforWeapons
PUBLIC	?ClearSocketData@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::ClearSocketData
; Function compile flags: /Ogtp
;	COMDAT ?ClearSocketData@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ClearSocketData@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::ClearSocketData, COMDAT
; _this$ = ecx

; 1547 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1548 : 	int i = 0;
; 1549 : 
; 1550 : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 50		 je	 SHORT $LN1@ClearSocke

; 1551 : 	{
; 1552 : 		return;
; 1553 : 	}
; 1554 : 
; 1555 : 	if(lpObj->Type != 1)

  0000b	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00010	75 49		 jne	 SHORT $LN1@ClearSocke

; 1556 : 	{
; 1557 : 		return;
; 1558 : 	}
; 1559 : 
; 1560 : 	for(i = 0;i < 35; i++)

  00012	8d 8e 86 20 00
	00		 lea	 ecx, DWORD PTR [esi+8326]
  00018	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  0001d	8d 49 00	 npad	 3
$LL9@ClearSocke:

; 1561 : 	{
; 1562 : 		lpObj->m_SocketSet[i].RESET();

  00020	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET
  00025	83 c1 06	 add	 ecx, 6
  00028	4a		 dec	 edx
  00029	75 f5		 jne	 SHORT $LL9@ClearSocke

; 1563 : 	}
; 1564 : 
; 1565 : 	for(i = 0;i < 7; i++)

  0002b	8d 8e 58 21 00
	00		 lea	 ecx, DWORD PTR [esi+8536]
  00031	ba 07 00 00 00	 mov	 edx, 7
$LL6@ClearSocke:

; 1566 : 	{
; 1567 : 		lpObj->m_SocketWeapon[i].RESET();

  00036	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET
  0003b	83 c1 06	 add	 ecx, 6
  0003e	4a		 dec	 edx
  0003f	75 f5		 jne	 SHORT $LL6@ClearSocke

; 1568 : 	}
; 1569 : 
; 1570 : 	for(i = 0;i < 2; i++)

  00041	8d 8e 82 21 00
	00		 lea	 ecx, DWORD PTR [esi+8578]
  00047	ba 02 00 00 00	 mov	 edx, 2
  0004c	8d 64 24 00	 npad	 4
$LL3@ClearSocke:

; 1571 : 	{
; 1572 : 		lpObj->m_SocketBonus[i].RESET();

  00050	e8 00 00 00 00	 call	 ?RESET@SOCKET_ITEM@@QAEXXZ ; SOCKET_ITEM::RESET
  00055	83 c1 06	 add	 ecx, 6
  00058	4a		 dec	 edx
  00059	75 f5		 jne	 SHORT $LL3@ClearSocke
$LN1@ClearSocke:
  0005b	5e		 pop	 esi

; 1573 : 	}
; 1574 : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?ClearSocketData@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::ClearSocketData
_TEXT	ENDS
PUBLIC	??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@ ; `string'
PUBLIC	_lpItem$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	_rand:PROC
;	COMDAT ??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@
CONST	SEGMENT
??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@ DB '[Socke'
	DB	'tItem] Set Bonus Socket Option Success - OptionIndex : %d, It'
	DB	'emCode : %d, SocketOption[%d,%d,%d,%d,%d]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z
_TEXT	SEGMENT
_lpItem$GSCopy$ = -24					; size = 4
_this$GSCopy$ = -20					; size = 4
tv515 = -14						; size = 1
_loc5$ = -13						; size = 1
_btSocketOption$ = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_lpItem$ = 8						; size = 4
?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z PROC ; CSocketOption::ManualSetBonusSocketOption, COMDAT
; _this$ = ecx

; 1698 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 1707 : 	{
; 1708 : 		return 0;
; 1709 : 	}
; 1710 : 	
; 1711 : 	for(int n = 0; n < 5; n++)

  00017	89 7d ec	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0001a	89 75 e8	 mov	 DWORD PTR _lpItem$GSCopy$[ebp], esi
  0001d	85 f6		 test	 esi, esi
  0001f	75 14		 jne	 SHORT $LN17@ManualSetB
$LN15@ManualSetB:
  00021	5f		 pop	 edi

; 1699 : 	BYTE btSocketOption[5];
; 1700 : 
; 1701 : 	if(lpItem == NULL)
; 1702 : 	{
; 1703 : 		return 0;

  00022	32 c0		 xor	 al, al
  00024	5e		 pop	 esi

; 1767 : }

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN17@ManualSetB:

; 1704 : 	}
; 1705 : 
; 1706 : 	if(lpItem->IsItem() == FALSE || this->IsActive(lpItem) == FALSE)

  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003c	85 c0		 test	 eax, eax
  0003e	74 e1		 je	 SHORT $LN15@ManualSetB
  00040	56		 push	 esi
  00041	8b cf		 mov	 ecx, edi
  00043	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00048	84 c0		 test	 al, al
  0004a	74 d5		 je	 SHORT $LN15@ManualSetB

; 1707 : 	{
; 1708 : 		return 0;
; 1709 : 	}
; 1710 : 	
; 1711 : 	for(int n = 0; n < 5; n++)

  0004c	53		 push	 ebx
  0004d	8d 7d f4	 lea	 edi, DWORD PTR _btSocketOption$[ebp]
  00050	81 c6 cc 00 00
	00		 add	 esi, 204		; 000000ccH
  00056	bb 05 00 00 00	 mov	 ebx, 5
  0005b	eb 03 8d 49 00	 npad	 5
$LL14@ManualSetB:

; 1712 : 	{
; 1713 : 		if(lpItem->m_SocketOption[n] != 0xFF && lpItem->m_SocketOption[n] != 0xFE)

  00060	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00063	3c ff		 cmp	 al, 255			; 000000ffH
  00065	74 0f		 je	 SHORT $LN13@ManualSetB
  00067	3c fe		 cmp	 al, 254			; 000000feH
  00069	74 0b		 je	 SHORT $LN13@ManualSetB

; 1714 : 		{
; 1715 : 			btSocketOption[n] = this->GetElementIndex(lpItem->m_SocketOption[n]);

  0006b	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?GetElementIndex@CSocketOption@@QAEEE@Z ; CSocketOption::GetElementIndex
  00074	88 07		 mov	 BYTE PTR [edi], al
$LN13@ManualSetB:

; 1707 : 	{
; 1708 : 		return 0;
; 1709 : 	}
; 1710 : 	
; 1711 : 	for(int n = 0; n < 5; n++)

  00076	46		 inc	 esi
  00077	47		 inc	 edi
  00078	4b		 dec	 ebx
  00079	75 e5		 jne	 SHORT $LL14@ManualSetB

; 1716 : 		}
; 1717 : 	}
; 1718 : 
; 1719 : 	BYTE loc5 = 0;
; 1720 : 	WORD loc6 = 0;
; 1721 : 	BYTE loc7 = 0;
; 1722 : 	
; 1723 : 	loc6 = lpItem->m_Type % 512;

  0007b	8b 7d e8	 mov	 edi, DWORD PTR _lpItem$GSCopy$[ebp]
  0007e	0f bf 47 06	 movsx	 eax, WORD PTR [edi+6]
  00082	8b c8		 mov	 ecx, eax
  00084	32 db		 xor	 bl, bl
  00086	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  0008c	79 08		 jns	 SHORT $LN29@ManualSetB
  0008e	49		 dec	 ecx
  0008f	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  00095	41		 inc	 ecx
$LN29@ManualSetB:

; 1724 : 	loc5 = (lpItem->m_Type - loc6) / 512;

  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00099	0f b7 d1	 movzx	 edx, cx
  0009c	2b c2		 sub	 eax, edx
  0009e	99		 cdq
  0009f	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  000a5	03 c2		 add	 eax, edx
  000a7	c1 f8 09	 sar	 eax, 9

; 1725 : 
; 1726 : 	for(int i = 0; i < 6; i++)

  000aa	33 d2		 xor	 edx, edx
  000ac	88 45 f3	 mov	 BYTE PTR _loc5$[ebp], al
  000af	81 c6 2b 04 00
	00		 add	 esi, 1067		; 0000042bH
$LL27@ManualSetB:

; 1727 : 	{
; 1728 : 		if(loc5 >= this->SocketSpear[i].m_btElementIndex && loc5 <= this->SocketSpear[i].m_btElementType)

  000b5	3a 46 ff	 cmp	 al, BYTE PTR [esi-1]
  000b8	72 2c		 jb	 SHORT $LN9@ManualSetB
  000ba	3a 06		 cmp	 al, BYTE PTR [esi]
  000bc	77 28		 ja	 SHORT $LN9@ManualSetB

; 1729 : 		{
; 1730 : 			for(int j = 0;j < 5;j++)

  000be	8a 4e 0e	 mov	 cl, BYTE PTR [esi+14]
  000c1	33 c0		 xor	 eax, eax
  000c3	88 4d f2	 mov	 BYTE PTR tv515[ebp], cl
$LL6@ManualSetB:

; 1731 : 			{
; 1732 : 				if(this->SocketSpear[i].m_btSocketSlot[j] == btSocketOption[j] && btSocketOption[j] != 0)

  000c6	8a 4c 05 f4	 mov	 cl, BYTE PTR _btSocketOption$[ebp+eax]
  000ca	38 4c 06 09	 cmp	 BYTE PTR [esi+eax+9], cl
  000ce	75 06		 jne	 SHORT $LN3@ManualSetB
  000d0	84 c9		 test	 cl, cl
  000d2	74 02		 je	 SHORT $LN3@ManualSetB

; 1733 : 				{
; 1734 : 					loc7++;

  000d4	fe c3		 inc	 bl
$LN3@ManualSetB:

; 1735 : 				}
; 1736 : 
; 1737 : 				if(loc7 >= this->SocketSpear[i].m_btSocketSlotCount)

  000d6	3a 5d f2	 cmp	 bl, BYTE PTR tv515[ebp]
  000d9	73 30		 jae	 SHORT $LN23@ManualSetB

; 1729 : 		{
; 1730 : 			for(int j = 0;j < 5;j++)

  000db	40		 inc	 eax
  000dc	83 f8 05	 cmp	 eax, 5
  000df	7c e5		 jl	 SHORT $LL6@ManualSetB

; 1750 : 
; 1751 : 						return 1;
; 1752 : 					}
; 1753 : 					
; 1754 : 					lpItem->m_SocketOptionIndex = 0xFF;
; 1755 : 
; 1756 : 					return 0;
; 1757 : 				}
; 1758 : 			}
; 1759 : 
; 1760 : 			loc7 = 0;

  000e1	8a 45 f3	 mov	 al, BYTE PTR _loc5$[ebp]
  000e4	32 db		 xor	 bl, bl
$LN9@ManualSetB:

; 1725 : 
; 1726 : 	for(int i = 0; i < 6; i++)

  000e6	42		 inc	 edx
  000e7	83 c6 14	 add	 esi, 20			; 00000014H
  000ea	83 fa 06	 cmp	 edx, 6
  000ed	7c c6		 jl	 SHORT $LL27@ManualSetB
$LN8@ManualSetB:
  000ef	5b		 pop	 ebx

; 1761 : 		}
; 1762 : 	}
; 1763 : 
; 1764 : 	lpItem->m_SocketOptionIndex = 0xFF;

  000f0	c6 87 cb 00 00
	00 ff		 mov	 BYTE PTR [edi+203], 255	; 000000ffH
  000f7	5f		 pop	 edi

; 1765 : 
; 1766 : 	return 0;

  000f8	32 c0		 xor	 al, al
  000fa	5e		 pop	 esi

; 1767 : }

  000fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fe	33 cd		 xor	 ecx, ebp
  00100	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 04 00	 ret	 4
$LN23@ManualSetB:

; 1738 : 				{
; 1739 : 					if(rand() % 100 < this->SocketSpear[i].m_iOptionRate)

  0010b	8b 45 ec	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0010e	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  00111	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]
  00114	e8 00 00 00 00	 call	 _rand
  00119	99		 cdq
  0011a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0011f	f7 f9		 idiv	 ecx
  00121	3b 96 30 04 00
	00		 cmp	 edx, DWORD PTR [esi+1072]
  00127	7d c6		 jge	 SHORT $LN8@ManualSetB

; 1740 : 					{
; 1741 : 						lpItem->m_SocketOptionIndex = this->SocketSpear[i].m_btOptionIndex;
; 1742 : 						
; 1743 : 						LogAddTD("[SocketItem] Set Bonus Socket Option Success - OptionIndex : %d, ItemCode : %d, SocketOption[%d,%d,%d,%d,%d]", 
; 1744 : 							lpItem->m_SocketOptionIndex,lpItem->m_Type,
; 1745 : 							lpItem->m_SocketOption[0],
; 1746 : 							lpItem->m_SocketOption[1],
; 1747 : 							lpItem->m_SocketOption[2],
; 1748 : 							lpItem->m_SocketOption[3],
; 1749 : 							lpItem->m_SocketOption[4]);

  00129	0f b6 97 d0 00
	00 00		 movzx	 edx, BYTE PTR [edi+208]
  00130	0f b6 8f cf 00
	00 00		 movzx	 ecx, BYTE PTR [edi+207]
  00137	8a 86 28 04 00
	00		 mov	 al, BYTE PTR [esi+1064]
  0013d	52		 push	 edx
  0013e	0f b6 97 ce 00
	00 00		 movzx	 edx, BYTE PTR [edi+206]
  00145	51		 push	 ecx
  00146	0f b6 8f cd 00
	00 00		 movzx	 ecx, BYTE PTR [edi+205]
  0014d	52		 push	 edx
  0014e	0f b6 97 cc 00
	00 00		 movzx	 edx, BYTE PTR [edi+204]
  00155	51		 push	 ecx
  00156	0f bf 4f 06	 movsx	 ecx, WORD PTR [edi+6]
  0015a	52		 push	 edx
  0015b	0f b6 d0	 movzx	 edx, al
  0015e	51		 push	 ecx
  0015f	52		 push	 edx
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@
  00165	88 87 cb 00 00
	00		 mov	 BYTE PTR [edi+203], al
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1767 : }

  00171	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00174	83 c4 20	 add	 esp, 32			; 00000020H
  00177	5b		 pop	 ebx
  00178	5f		 pop	 edi
  00179	33 cd		 xor	 ecx, ebp
  0017b	b0 01		 mov	 al, 1
  0017d	5e		 pop	 esi
  0017e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 04 00	 ret	 4
?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ENDP ; CSocketOption::ManualSetBonusSocketOption
_TEXT	ENDS
PUBLIC	?RemakeSocketOption@CSocketOption@@QAEEPAVCItem@@E@Z ; CSocketOption::RemakeSocketOption
; Function compile flags: /Ogtp
;	COMDAT ?RemakeSocketOption@CSocketOption@@QAEEPAVCItem@@E@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_btSlotIndex$ = 12					; size = 1
?RemakeSocketOption@CSocketOption@@QAEEPAVCItem@@E@Z PROC ; CSocketOption::RemakeSocketOption, COMDAT
; _this$ = ecx

; 1771 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1772 : 	if(lpItem == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi

; 1773 : 	{
; 1774 : 		return 0;

  0000c	74 3f		 je	 SHORT $LN1@RemakeSock

; 1775 : 	}
; 1776 : 	
; 1777 : 	if(this->IsActive(lpItem) == FALSE)

  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00014	84 c0		 test	 al, al

; 1778 : 	{
; 1779 : 		return 0;

  00016	74 35		 je	 SHORT $LN1@RemakeSock

; 1780 : 	}
; 1781 : 
; 1782 : 	if(btSlotIndex > 5)

  00018	8a 45 0c	 mov	 al, BYTE PTR _btSlotIndex$[ebp]
  0001b	3c 05		 cmp	 al, 5

; 1783 : 	{
; 1784 : 		return 0;

  0001d	77 2e		 ja	 SHORT $LN1@RemakeSock

; 1785 : 	}
; 1786 : 
; 1787 : 	if(lpItem->m_SocketOption[btSlotIndex] == 0xFF || lpItem->m_SocketOption[btSlotIndex] == 0xFE)

  0001f	0f b6 c0	 movzx	 eax, al
  00022	8a 8c 30 cc 00
	00 00		 mov	 cl, BYTE PTR [eax+esi+204]
  00029	8d 84 30 cc 00
	00 00		 lea	 eax, DWORD PTR [eax+esi+204]
  00030	80 f9 ff	 cmp	 cl, 255			; 000000ffH
  00033	74 18		 je	 SHORT $LN1@RemakeSock
  00035	80 f9 fe	 cmp	 cl, 254			; 000000feH
  00038	74 13		 je	 SHORT $LN1@RemakeSock

; 1790 : 	}
; 1791 : 
; 1792 : 	lpItem->m_SocketOption[btSlotIndex] = 0xFE;
; 1793 : 
; 1794 : 	this->ManualSetBonusSocketOption(lpItem);

  0003a	56		 push	 esi
  0003b	8b cf		 mov	 ecx, edi
  0003d	c6 00 fe	 mov	 BYTE PTR [eax], 254	; 000000feH
  00040	e8 00 00 00 00	 call	 ?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption
  00045	5f		 pop	 edi

; 1795 : 
; 1796 : 	return 1;

  00046	b0 01		 mov	 al, 1
  00048	5e		 pop	 esi

; 1797 : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN1@RemakeSock:
  0004d	5f		 pop	 edi

; 1788 : 	{
; 1789 : 		return 0;

  0004e	32 c0		 xor	 al, al
  00050	5e		 pop	 esi

; 1797 : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?RemakeSocketOption@CSocketOption@@QAEEPAVCItem@@E@Z ENDP ; CSocketOption::RemakeSocketOption
_TEXT	ENDS
PUBLIC	?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketOption::ApplySocketEffect
; Function compile flags: /Ogtp
;	COMDAT ?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_arg2$ = 12						; size = 4
_btEffectType$ = 16					; size = 1
_btOptionType$ = 20					; size = 1
_wOptionValue$ = 24					; size = 2
?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z PROC ; CSocketOption::ApplySocketEffect, COMDAT
; _this$ = ecx

; 1123 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1124 : 	if(btEffectType >= 0 && btEffectType <= 9)

  00004	8b 5d 10	 mov	 ebx, DWORD PTR _btEffectType$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 18	 mov	 edi, DWORD PTR _wOptionValue$[ebp]
  0000f	80 fb 09	 cmp	 bl, 9
  00012	77 11		 ja	 SHORT $LN20@ApplySocke@9

; 1125 : 	{
; 1126 : 		this->ApplySocketFireEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  00014	8b 45 14	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?ApplySocketFireEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketFireEffect
  00020	e9 89 00 00 00	 jmp	 $LN6@ApplySocke@9
$LN20@ApplySocke@9:

; 1127 : 	}
; 1128 : 	else if(btEffectType >= 10 && btEffectType <= 15)

  00025	8d 53 f6	 lea	 edx, DWORD PTR [ebx-10]
  00028	80 fa 05	 cmp	 dl, 5
  0002b	77 0e		 ja	 SHORT $LN18@ApplySocke@9

; 1129 : 	{
; 1130 : 		this->ApplySocketWaterEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  0002d	8b 45 14	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00030	57		 push	 edi
  00031	50		 push	 eax
  00032	53		 push	 ebx
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?ApplySocketWaterEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketWaterEffect
  00039	eb 73		 jmp	 SHORT $LN6@ApplySocke@9
$LN18@ApplySocke@9:

; 1131 : 	}
; 1132 : 	else if(btEffectType >= 16 && btEffectType <= 20)

  0003b	8d 53 f0	 lea	 edx, DWORD PTR [ebx-16]
  0003e	80 fa 04	 cmp	 dl, 4
  00041	77 0e		 ja	 SHORT $LN16@ApplySocke@9

; 1133 : 	{
; 1134 : 		this->ApplySocketIceEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  00043	8b 45 14	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00046	57		 push	 edi
  00047	50		 push	 eax
  00048	53		 push	 ebx
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 ?ApplySocketIceEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketIceEffect
  0004f	eb 5d		 jmp	 SHORT $LN6@ApplySocke@9
$LN16@ApplySocke@9:

; 1135 : 	}
; 1136 : 	else if(btEffectType >= 21 && btEffectType <= 28)

  00051	8d 53 eb	 lea	 edx, DWORD PTR [ebx-21]
  00054	80 fa 07	 cmp	 dl, 7
  00057	77 0e		 ja	 SHORT $LN14@ApplySocke@9

; 1137 : 	{
; 1138 : 		this->ApplySocketWindEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  00059	8b 45 14	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  0005c	57		 push	 edi
  0005d	50		 push	 eax
  0005e	53		 push	 ebx
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 ?ApplySocketWindEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketWindEffect
  00065	eb 47		 jmp	 SHORT $LN6@ApplySocke@9
$LN14@ApplySocke@9:

; 1139 : 	}
; 1140 : 	else if(btEffectType >= 29 && btEffectType <= 33)

  00067	8d 53 e3	 lea	 edx, DWORD PTR [ebx-29]
  0006a	80 fa 04	 cmp	 dl, 4
  0006d	77 0e		 ja	 SHORT $LN12@ApplySocke@9

; 1141 : 	{
; 1142 : 		this->ApplySocketLightningEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  0006f	8b 45 14	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	53		 push	 ebx
  00075	56		 push	 esi
  00076	e8 00 00 00 00	 call	 ?ApplySocketLightningEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketLightningEffect
  0007b	eb 31		 jmp	 SHORT $LN6@ApplySocke@9
$LN12@ApplySocke@9:

; 1143 : 	}
; 1144 : 	else if(btEffectType >= 34 && btEffectType <= 40)

  0007d	8d 53 de	 lea	 edx, DWORD PTR [ebx-34]
  00080	80 fa 06	 cmp	 dl, 6
  00083	77 0e		 ja	 SHORT $LN10@ApplySocke@9

; 1145 : 	{
; 1146 : 		this->ApplySocketEarthEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  00085	8b 45 14	 mov	 eax, DWORD PTR _btOptionType$[ebp]
  00088	57		 push	 edi
  00089	50		 push	 eax
  0008a	53		 push	 ebx
  0008b	56		 push	 esi
  0008c	e8 00 00 00 00	 call	 ?ApplySocketEarthEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketEarthEffect
  00091	eb 1b		 jmp	 SHORT $LN6@ApplySocke@9
$LN10@ApplySocke@9:

; 1147 : 	}
; 1148 : 	else if(btEffectType >= 41 && btEffectType <= 43)

  00093	8d 53 d7	 lea	 edx, DWORD PTR [ebx-41]
  00096	80 fa 02	 cmp	 dl, 2
  00099	76 13		 jbe	 SHORT $LN6@ApplySocke@9

; 1149 : 	{
; 1150 : 		this->ApplySocketReservedEffect(lpObj,btEffectType,btOptionType,wOptionValue);
; 1151 : 	}
; 1152 : 	else if(btEffectType >= 44 && btEffectType <= 45)

  0009b	8d 43 d4	 lea	 eax, DWORD PTR [ebx-44]
  0009e	3c 01		 cmp	 al, 1
  000a0	77 0c		 ja	 SHORT $LN6@ApplySocke@9

; 1153 : 	{
; 1154 : 		this->ApplySocketBonusEffect(lpObj,btEffectType,btOptionType,wOptionValue);

  000a2	8b 55 14	 mov	 edx, DWORD PTR _btOptionType$[ebp]
  000a5	57		 push	 edi
  000a6	52		 push	 edx
  000a7	53		 push	 ebx
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 ?ApplySocketBonusEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketOption::ApplySocketBonusEffect
$LN6@ApplySocke@9:

; 1155 : 	}
; 1156 : 
; 1157 : 	for(int i = 0;i < 43; i++)

  000ae	33 c0		 xor	 eax, eax
  000b0	8d 8e 86 20 00
	00		 lea	 ecx, DWORD PTR [esi+8326]
$LL5@ApplySocke@9:

; 1158 : 	{
; 1159 : 		if(lpObj->m_SocketSet[i].m_btEffectType == btEffectType &&  lpObj->m_SocketSet[i].m_btOptionType == btOptionType)

  000b6	38 19		 cmp	 BYTE PTR [ecx], bl
  000b8	75 08		 jne	 SHORT $LN27@ApplySocke@9
  000ba	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000bd	3a 55 14	 cmp	 dl, BYTE PTR _btOptionType$[ebp]
  000c0	74 15		 je	 SHORT $LN24@ApplySocke@9
$LN27@ApplySocke@9:

; 1163 : 			break;
; 1164 : 		}
; 1165 : 		
; 1166 : 		if(lpObj->m_SocketSet[i].m_btEffectType == 0xFF)

  000c2	80 39 ff	 cmp	 BYTE PTR [ecx], 255	; 000000ffH
  000c5	74 36		 je	 SHORT $LN25@ApplySocke@9

; 1155 : 	}
; 1156 : 
; 1157 : 	for(int i = 0;i < 43; i++)

  000c7	40		 inc	 eax
  000c8	83 c1 06	 add	 ecx, 6
  000cb	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  000ce	7c e6		 jl	 SHORT $LL5@ApplySocke@9
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx

; 1172 : 			break;
; 1173 : 		}
; 1174 : 	}
; 1175 : }

  000d3	5d		 pop	 ebp
  000d4	c2 14 00	 ret	 20			; 00000014H
$LN24@ApplySocke@9:

; 1160 : 		{
; 1161 : 			lpObj->m_SocketSet[i].m_wOptionValue += wOptionValue;

  000d7	8d 8c 40 44 10
	00 00		 lea	 ecx, DWORD PTR [eax+eax*2+4164]
  000de	66 01 3c 4e	 add	 WORD PTR [esi+ecx*2], di
  000e2	8d 0c 4e	 lea	 ecx, DWORD PTR [esi+ecx*2]

; 1162 : 			lpObj->m_SocketSet[i].m_btOptionCount ++;

  000e5	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  000e8	fe 84 56 8a 20
	00 00		 inc	 BYTE PTR [esi+edx*2+8330]
  000ef	5f		 pop	 edi
  000f0	8d 84 56 8a 20
	00 00		 lea	 eax, DWORD PTR [esi+edx*2+8330]
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx

; 1172 : 			break;
; 1173 : 		}
; 1174 : 	}
; 1175 : }

  000f9	5d		 pop	 ebp
  000fa	c2 14 00	 ret	 20			; 00000014H
$LN25@ApplySocke@9:

; 1167 : 		{
; 1168 : 			lpObj->m_SocketSet[i].m_btEffectType = btEffectType;
; 1169 : 			lpObj->m_SocketSet[i].m_btOptionType = btOptionType;

  000fd	8a 55 14	 mov	 dl, BYTE PTR _btOptionType$[ebp]
  00100	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 1170 : 			lpObj->m_SocketSet[i].m_wOptionValue = wOptionValue;

  00103	8d 84 40 44 10
	00 00		 lea	 eax, DWORD PTR [eax+eax*2+4164]
  0010a	8d 0c 4e	 lea	 ecx, DWORD PTR [esi+ecx*2]
  0010d	66 89 3c 46	 mov	 WORD PTR [esi+eax*2], di
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	88 99 86 20 00
	00		 mov	 BYTE PTR [ecx+8326], bl
  00119	88 91 87 20 00
	00		 mov	 BYTE PTR [ecx+8327], dl

; 1171 : 			lpObj->m_SocketSet[i].m_btOptionCount = 1;

  0011f	c6 81 8a 20 00
	00 01		 mov	 BYTE PTR [ecx+8330], 1
  00126	5b		 pop	 ebx

; 1172 : 			break;
; 1173 : 		}
; 1174 : 	}
; 1175 : }

  00127	5d		 pop	 ebp
  00128	c2 14 00	 ret	 20			; 00000014H
?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ENDP ; CSocketOption::ApplySocketEffect
_TEXT	ENDS
PUBLIC	?MakeManualOptionbyJewel@CSocketOption@@QAEEPAVCItem@@0E@Z ; CSocketOption::MakeManualOptionbyJewel
; Function compile flags: /Ogtp
;	COMDAT ?MakeManualOptionbyJewel@CSocketOption@@QAEEPAVCItem@@0E@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpFirstItem$ = 8					; size = 4
_lpSecondItem$ = 12					; size = 4
_btSocketSlot$ = 16					; size = 1
?MakeManualOptionbyJewel@CSocketOption@@QAEEPAVCItem@@0E@Z PROC ; CSocketOption::MakeManualOptionbyJewel, COMDAT
; _this$ = ecx

; 1578 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 1579 : 	if(lpFirstItem == 0 || lpSecondItem == 0)

  00006	8b 75 08	 mov	 esi, DWORD PTR _lpFirstItem$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 7d fc	 mov	 DWORD PTR _this$[ebp], edi
  0000f	85 f6		 test	 esi, esi
  00011	0f 84 8f 00 00
	00		 je	 $LN6@MakeManual
  00017	8b 5d 0c	 mov	 ebx, DWORD PTR _lpSecondItem$[ebp]
  0001a	85 db		 test	 ebx, ebx
  0001c	0f 84 84 00 00
	00		 je	 $LN6@MakeManual

; 1582 : 	}
; 1583 : 	
; 1584 : 	if(lpFirstItem->IsItem() == 0 || lpSecondItem->IsItem() == 0 )

  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00029	85 c0		 test	 eax, eax
  0002b	74 79		 je	 SHORT $LN6@MakeManual
  0002d	8b cb		 mov	 ecx, ebx
  0002f	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00034	85 c0		 test	 eax, eax
  00036	74 6e		 je	 SHORT $LN6@MakeManual

; 1585 : 	{
; 1586 : 		return 0;
; 1587 : 	}
; 1588 : 
; 1589 : 	if(this->IsActive(lpFirstItem) == 0)

  00038	56		 push	 esi
  00039	8b cf		 mov	 ecx, edi
  0003b	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00040	84 c0		 test	 al, al

; 1590 : 	{
; 1591 : 		return 0;

  00042	74 62		 je	 SHORT $LN6@MakeManual

; 1592 : 	}
; 1593 : 
; 1594 : 	if(btSocketSlot > 5)

  00044	8a 45 10	 mov	 al, BYTE PTR _btSocketSlot$[ebp]
  00047	3c 05		 cmp	 al, 5

; 1595 : 	{
; 1596 : 		return 0;

  00049	77 5b		 ja	 SHORT $LN6@MakeManual

; 1597 : 	}
; 1598 : 	
; 1599 : 	if(lpFirstItem->m_SocketOption[btSocketSlot] != 0xFE)

  0004b	0f b6 c0	 movzx	 eax, al
  0004e	80 bc 30 cc 00
	00 00 fe	 cmp	 BYTE PTR [eax+esi+204], 254 ; 000000feH
  00056	8d bc 30 cc 00
	00 00		 lea	 edi, DWORD PTR [eax+esi+204]

; 1600 : 	{
; 1601 : 		return 0;

  0005d	75 47		 jne	 SHORT $LN6@MakeManual

; 1610 : 	loc3 = loc2 - 100;

  0005f	0f bf 5b 06	 movsx	 ebx, WORD PTR [ebx+6]
  00063	81 e3 ff 01 00
	80		 and	 ebx, -2147483137	; 800001ffH
  00069	79 08		 jns	 SHORT $LN10@MakeManual

; 1602 : 	}
; 1603 : 
; 1604 : 	BYTE loc2 = 0;
; 1605 : 	BYTE loc3 = 0;
; 1606 : 	BYTE loc4 = 0;
; 1607 : 	BYTE loc5 = 0;
; 1608 : 
; 1609 : 	loc2 = lpSecondItem->m_Type % 512;

  0006b	4b		 dec	 ebx
  0006c	81 cb 00 fe ff
	ff		 or	 ebx, -512		; fffffe00H
  00072	43		 inc	 ebx
$LN10@MakeManual:

; 1610 : 	loc3 = loc2 - 100;

  00073	80 eb 64	 sub	 bl, 100			; 00000064H

; 1611 : 	loc4 = (loc3 - 1) / 6 + 1;
; 1612 : 	loc5 = loc4 * 50 + loc3;
; 1613 : 
; 1614 : 	lpFirstItem->m_SocketOption[btSocketSlot] = loc5; //SOCKET BYTE ON ITEM BINARY

  00076	0f b6 cb	 movzx	 ecx, bl
  00079	49		 dec	 ecx
  0007a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007f	f7 e9		 imul	 ecx

; 1615 : 
; 1616 : 	this->ManualSetBonusSocketOption(lpFirstItem);

  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	8b c2		 mov	 eax, edx
  00086	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00089	03 c2		 add	 eax, edx
  0008b	fe c0		 inc	 al
  0008d	b2 32		 mov	 dl, 50			; 00000032H
  0008f	f6 ea		 imul	 dl
  00091	02 c3		 add	 al, bl
  00093	56		 push	 esi
  00094	88 07		 mov	 BYTE PTR [edi], al
  00096	e8 00 00 00 00	 call	 ?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi

; 1617 : 
; 1618 : 	return 1;

  0009d	b0 01		 mov	 al, 1
  0009f	5b		 pop	 ebx

; 1619 : }

  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 0c 00	 ret	 12			; 0000000cH
$LN6@MakeManual:
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi

; 1580 : 	{
; 1581 : 		return 0;

  000a8	32 c0		 xor	 al, al
  000aa	5b		 pop	 ebx

; 1619 : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 0c 00	 ret	 12			; 0000000cH
?MakeManualOptionbyJewel@CSocketOption@@QAEEPAVCItem@@0E@Z ENDP ; CSocketOption::MakeManualOptionbyJewel
_TEXT	ENDS
PUBLIC	?MakeManualOptionbyCalc@CSocketOption@@QAEEPAVCItem@@EEE@Z ; CSocketOption::MakeManualOptionbyCalc
; Function compile flags: /Ogtp
;	COMDAT ?MakeManualOptionbyCalc@CSocketOption@@QAEEPAVCItem@@EEE@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_arg2$ = 12						; size = 1
_arg3$ = 16						; size = 1
_btSocketSlot$ = 20					; size = 1
?MakeManualOptionbyCalc@CSocketOption@@QAEEPAVCItem@@EEE@Z PROC ; CSocketOption::MakeManualOptionbyCalc, COMDAT
; _this$ = ecx

; 1623 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1624 : 	if(lpItem == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	75 08		 jne	 SHORT $LN5@MakeManual@2
$LN8@MakeManual@2:
  0000e	5f		 pop	 edi

; 1625 : 	{
; 1626 : 		return 0;

  0000f	32 c0		 xor	 al, al
  00011	5e		 pop	 esi

; 1658 : }

  00012	5d		 pop	 ebp
  00013	c2 10 00	 ret	 16			; 00000010H
$LN5@MakeManual@2:

; 1627 : 	}
; 1628 : 
; 1629 : 	if(lpItem->IsItem() == FALSE)

  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001d	85 c0		 test	 eax, eax

; 1630 : 	{
; 1631 : 		return 0;

  0001f	74 ed		 je	 SHORT $LN8@MakeManual@2

; 1632 : 	}
; 1633 : 
; 1634 : 	if(this->IsActive(lpItem) == FALSE)

  00021	56		 push	 esi
  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00029	84 c0		 test	 al, al

; 1635 : 	{
; 1636 : 		return 0;

  0002b	74 e1		 je	 SHORT $LN8@MakeManual@2

; 1637 : 	}
; 1638 : 
; 1639 : 	if(btSocketSlot > 5)

  0002d	8a 45 14	 mov	 al, BYTE PTR _btSocketSlot$[ebp]
  00030	3c 05		 cmp	 al, 5

; 1640 : 	{
; 1641 : 		return 0;

  00032	77 da		 ja	 SHORT $LN8@MakeManual@2

; 1642 : 	}
; 1643 : 
; 1644 : 	if(lpItem->m_SocketOption[btSocketSlot] != 0xFE)

  00034	0f b6 c0	 movzx	 eax, al
  00037	80 bc 30 cc 00
	00 00 fe	 cmp	 BYTE PTR [eax+esi+204], 254 ; 000000feH
  0003f	8d 8c 30 cc 00
	00 00		 lea	 ecx, DWORD PTR [eax+esi+204]

; 1645 : 	{
; 1646 : 		return 0;

  00046	75 c6		 jne	 SHORT $LN8@MakeManual@2

; 1647 : 	}
; 1648 : 
; 1649 : 	BYTE loc2 = 0;
; 1650 : 
; 1651 : 	loc2 = 50 * arg3 + arg2;

  00048	8a 45 10	 mov	 al, BYTE PTR _arg3$[ebp]
  0004b	b2 32		 mov	 dl, 50			; 00000032H
  0004d	f6 ea		 imul	 dl
  0004f	02 45 0c	 add	 al, BYTE PTR _arg2$[ebp]

; 1652 : 
; 1653 : 	lpItem->m_SocketOption[btSocketSlot] = loc2; //SOCKET BYTE ON ITEM BINARY
; 1654 : 
; 1655 : 	this->ManualSetBonusSocketOption(lpItem);

  00052	56		 push	 esi
  00053	88 01		 mov	 BYTE PTR [ecx], al
  00055	8b cf		 mov	 ecx, edi
  00057	e8 00 00 00 00	 call	 ?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption
  0005c	5f		 pop	 edi

; 1656 : 
; 1657 : 	return 1;

  0005d	b0 01		 mov	 al, 1
  0005f	5e		 pop	 esi

; 1658 : }

  00060	5d		 pop	 ebp
  00061	c2 10 00	 ret	 16			; 00000010H
?MakeManualOptionbyCalc@CSocketOption@@QAEEPAVCItem@@EEE@Z ENDP ; CSocketOption::MakeManualOptionbyCalc
_TEXT	ENDS
PUBLIC	?MakeManualOption@CSocketOption@@QAEEPAVCItem@@EE@Z ; CSocketOption::MakeManualOption
; Function compile flags: /Ogtp
;	COMDAT ?MakeManualOption@CSocketOption@@QAEEPAVCItem@@EE@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_arg2$ = 12						; size = 1
_btSocketSlot$ = 16					; size = 1
?MakeManualOption@CSocketOption@@QAEEPAVCItem@@EE@Z PROC ; CSocketOption::MakeManualOption, COMDAT
; _this$ = ecx

; 1662 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1663 : 	if(lpItem == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	75 08		 jne	 SHORT $LN5@MakeManual@3
$LN8@MakeManual@3:
  0000e	5f		 pop	 edi

; 1664 : 	{
; 1665 : 		return 0;

  0000f	32 c0		 xor	 al, al
  00011	5e		 pop	 esi

; 1693 : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN5@MakeManual@3:

; 1666 : 	}
; 1667 : 
; 1668 : 	if(lpItem->IsItem() == FALSE)

  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001d	85 c0		 test	 eax, eax

; 1669 : 	{
; 1670 : 		return 0;

  0001f	74 ed		 je	 SHORT $LN8@MakeManual@3

; 1671 : 	}
; 1672 : 
; 1673 : 	if(this->IsActive(lpItem) == FALSE)

  00021	56		 push	 esi
  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00029	84 c0		 test	 al, al

; 1674 : 	{
; 1675 : 		return 0;

  0002b	74 e1		 je	 SHORT $LN8@MakeManual@3

; 1676 : 	}
; 1677 : 
; 1678 : 	if(btSocketSlot > 5)

  0002d	8a 45 10	 mov	 al, BYTE PTR _btSocketSlot$[ebp]
  00030	3c 05		 cmp	 al, 5

; 1679 : 	{
; 1680 : 		return 0;

  00032	77 da		 ja	 SHORT $LN8@MakeManual@3

; 1681 : 	}
; 1682 : 
; 1683 : 	if(lpItem->m_SocketOption[btSocketSlot] != 0xFE)

  00034	0f b6 c0	 movzx	 eax, al
  00037	80 bc 30 cc 00
	00 00 fe	 cmp	 BYTE PTR [eax+esi+204], 254 ; 000000feH
  0003f	8d 84 30 cc 00
	00 00		 lea	 eax, DWORD PTR [eax+esi+204]

; 1684 : 	{
; 1685 : 		return 0;

  00046	75 c6		 jne	 SHORT $LN8@MakeManual@3

; 1686 : 	}
; 1687 : 
; 1688 : 	lpItem->m_SocketOption[btSocketSlot] = arg2;

  00048	8a 4d 0c	 mov	 cl, BYTE PTR _arg2$[ebp]
  0004b	88 08		 mov	 BYTE PTR [eax], cl

; 1689 : 
; 1690 : 	this->ManualSetBonusSocketOption(lpItem);

  0004d	56		 push	 esi
  0004e	8b cf		 mov	 ecx, edi
  00050	e8 00 00 00 00	 call	 ?ManualSetBonusSocketOption@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::ManualSetBonusSocketOption
  00055	5f		 pop	 edi

; 1691 : 
; 1692 : 	return 1;

  00056	b0 01		 mov	 al, 1
  00058	5e		 pop	 esi

; 1693 : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?MakeManualOption@CSocketOption@@QAEEPAVCItem@@EE@Z ENDP ; CSocketOption::MakeManualOption
_TEXT	ENDS
PUBLIC	?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z ; CSocketOption::CalcEquipmentSocketOption
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z$0
__ehfuncinfo$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_SeedSphere$ = -44					; size = 16
_loc7$ = -28						; size = 1
_loc8$ = -24						; size = 1
_loc5$ = -20						; size = 4
tv231 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpObj$ = 8						; size = 4
?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::CalcEquipmentSocketOption, COMDAT
; _this$ = ecx

; 928  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 929  : 	int loc5 = 0;

  0002a	33 f6		 xor	 esi, esi

; 930  : 	BYTE loc6 = 0;
; 931  : 	BYTE loc7 = 0;
; 932  : 	BYTE loc8 = 0;
; 933  : 
; 934  : 	CSeedSphere SeedSphere;

  0002c	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  0002f	89 75 ec	 mov	 DWORD PTR _loc5$[ebp], esi
  00032	e8 00 00 00 00	 call	 ??0CSeedSphere@@QAE@XZ	; CSeedSphere::CSeedSphere
  00037	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0003a	89 75 f0	 mov	 DWORD PTR tv231[ebp], esi
$LN10@CalcEquipm:

; 937  : 	{
; 938  : 		if(this->IsActive(&lpObj->pInventory[i]) == 0)

  0003d	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00040	8b 88 24 0e 00
	00		 mov	 ecx, DWORD PTR [eax+3620]
  00046	03 ce		 add	 ecx, esi
  00048	51		 push	 ecx
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00050	84 c0		 test	 al, al
  00052	0f 84 86 00 00
	00		 je	 $LN9@CalcEquipm

; 939  : 		{
; 940  : 			continue;
; 941  : 		}
; 942  : 		
; 943  : 		for(int n = 0; n < MAX_SOCKET_OPTION; n++)

  00058	33 db		 xor	 ebx, ebx
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL6@CalcEquipm:

; 944  : 		{
; 945  : 			loc6 = lpObj->pInventory[i].m_SocketOption[n];

  00060	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00063	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  00069	03 c6		 add	 eax, esi
  0006b	8a 84 18 cc 00
	00 00		 mov	 al, BYTE PTR [eax+ebx+204]

; 946  : 
; 947  : 			if(loc6 == 0xFF || loc6 == 0xFE)

  00072	3c ff		 cmp	 al, 255			; 000000ffH
  00074	74 5f		 je	 SHORT $LN5@CalcEquipm
  00076	3c fe		 cmp	 al, 254			; 000000feH
  00078	74 5b		 je	 SHORT $LN5@CalcEquipm

; 948  : 			{
; 949  : 				continue;
; 950  : 			}
; 951  : 
; 952  : 			loc7 = loc6 % 50;

  0007a	0f b6 c8	 movzx	 ecx, al
  0007d	8b c1		 mov	 eax, ecx
  0007f	99		 cdq
  00080	be 32 00 00 00	 mov	 esi, 50			; 00000032H
  00085	f7 fe		 idiv	 esi

; 953  : 			loc8 = (loc6 - loc7 ) / 50 + 1;

  00087	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0008c	88 55 e4	 mov	 BYTE PTR _loc7$[ebp], dl
  0008f	0f b6 d2	 movzx	 edx, dl
  00092	2b ca		 sub	 ecx, edx
  00094	f7 e9		 imul	 ecx

; 954  : 
; 955  : 			if(this->SetSeedSphereData(&SeedSphere,loc7,loc8) == 0)

  00096	8b 75 e4	 mov	 esi, DWORD PTR _loc7$[ebp]
  00099	c1 fa 04	 sar	 edx, 4
  0009c	8b c2		 mov	 eax, edx
  0009e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a1	03 c2		 add	 eax, edx
  000a3	fe c0		 inc	 al
  000a5	88 45 e8	 mov	 BYTE PTR _loc8$[ebp], al
  000a8	8b 4d e8	 mov	 ecx, DWORD PTR _loc8$[ebp]
  000ab	51		 push	 ecx
  000ac	56		 push	 esi
  000ad	8d 55 d4	 lea	 edx, DWORD PTR _SeedSphere$[ebp]
  000b0	52		 push	 edx
  000b1	8b cf		 mov	 ecx, edi
  000b3	e8 00 00 00 00	 call	 ?SetSeedSphereData@CSocketOption@@QAEEPAVCSeedSphere@@EE@Z ; CSocketOption::SetSeedSphereData
  000b8	84 c0		 test	 al, al
  000ba	74 19		 je	 SHORT $LN5@CalcEquipm

; 956  : 			{
; 957  : 				continue;
; 958  : 			}
; 959  : 			
; 960  : 			this->ApplySocketEffect(lpObj,1,loc7,SeedSphere.m_btOptionType,SeedSphere.m_wSocketSlot);

  000bc	8b 45 de	 mov	 eax, DWORD PTR _SeedSphere$[ebp+10]
  000bf	8b 4d dd	 mov	 ecx, DWORD PTR _SeedSphere$[ebp+9]
  000c2	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000c5	50		 push	 eax
  000c6	51		 push	 ecx
  000c7	56		 push	 esi
  000c8	6a 01		 push	 1
  000ca	52		 push	 edx
  000cb	8b cf		 mov	 ecx, edi
  000cd	e8 00 00 00 00	 call	 ?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketOption::ApplySocketEffect

; 961  : 
; 962  : 			loc5++;

  000d2	ff 45 ec	 inc	 DWORD PTR _loc5$[ebp]
$LN5@CalcEquipm:

; 939  : 		{
; 940  : 			continue;
; 941  : 		}
; 942  : 		
; 943  : 		for(int n = 0; n < MAX_SOCKET_OPTION; n++)

  000d5	8b 75 f0	 mov	 esi, DWORD PTR tv231[ebp]
  000d8	43		 inc	 ebx
  000d9	83 fb 05	 cmp	 ebx, 5
  000dc	7c 82		 jl	 SHORT $LL6@CalcEquipm
$LN9@CalcEquipm:

; 935  : 
; 936  : 	for(int i = 0; i < INVETORY_WEAR_SIZE; i++)

  000de	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  000e4	89 75 f0	 mov	 DWORD PTR tv231[ebp], esi
  000e7	81 fe f0 09 00
	00		 cmp	 esi, 2544		; 000009f0H
  000ed	0f 8c 4a ff ff
	ff		 jl	 $LN10@CalcEquipm

; 963  : 		}
; 964  : 
; 965  : 	}
; 966  : 
; 967  : 	return loc5;

  000f3	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  000f6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fd	e8 00 00 00 00	 call	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
  00102	8b 45 ec	 mov	 eax, DWORD PTR _loc5$[ebp]

; 968  : }

  00105	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00108	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010f	59		 pop	 ecx
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _SeedSphere$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CSeedSphere@@QAE@XZ	; CSeedSphere::~CSeedSphere
__ehhandler$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::CalcEquipmentSocketOption
PUBLIC	??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@ ; `string'
PUBLIC	?SetBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::SetBonusSocketOption
;	COMDAT ??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@
CONST	SEGMENT
??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@ DB '['
	DB	'SocketItem] [%s][%s] Set Bonus Socket Option - OptionIndex : '
	DB	'%d, EffectType : %d, OptionType : %d, OptionValue : %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loc2$ = 8						; size = 1
_lpObj$ = 8						; size = 4
?SetBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::SetBonusSocketOption, COMDAT
; _this$ = ecx

; 973  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 974  : 	BYTE loc2 = 0;
; 975  : 	CSocketSphere * lpSeedSpear = NULL;
; 976  : 
; 977  : 	for(int i = 0;i < INVETORY_WEAR_SIZE; i ++)

  0000f	33 db		 xor	 ebx, ebx
  00011	eb 03		 jmp	 SHORT $LN7@SetBonusSo
$LL13@SetBonusSo:
  00013	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
$LN7@SetBonusSo:

; 978  : 	{
; 979  : 		if(this->IsActive(&lpObj->pInventory[i]) == 0)

  00016	8b 87 24 0e 00
	00		 mov	 eax, DWORD PTR [edi+3620]
  0001c	03 c3		 add	 eax, ebx
  0001e	50		 push	 eax
  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?IsActive@CSocketOption@@QAEEPAVCItem@@@Z ; CSocketOption::IsActive
  00026	84 c0		 test	 al, al
  00028	74 6c		 je	 SHORT $LN6@SetBonusSo

; 980  : 		{
; 981  : 			continue;
; 982  : 		}
; 983  : 
; 984  : 		loc2 = lpObj->pInventory[i].m_SocketOptionIndex;

  0002a	8b 8f 24 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3620]
  00030	8a 84 19 cb 00
	00 00		 mov	 al, BYTE PTR [ecx+ebx+203]
  00037	88 45 08	 mov	 BYTE PTR _loc2$[ebp], al

; 985  : 
; 986  : 		if(loc2 == 0xFF || loc2 == 0xFE)

  0003a	3c ff		 cmp	 al, 255			; 000000ffH
  0003c	74 58		 je	 SHORT $LN6@SetBonusSo
  0003e	3c fe		 cmp	 al, 254			; 000000feH
  00040	74 54		 je	 SHORT $LN6@SetBonusSo

; 987  : 		{
; 988  : 			continue;
; 989  : 		}
; 990  : 
; 991  : 		lpSeedSpear = this->GetSeedSpear(loc2);

  00042	8b 55 08	 mov	 edx, DWORD PTR _loc2$[ebp]
  00045	52		 push	 edx
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?GetSeedSpear@CSocketOption@@QAEPAVCSocketSphere@@E@Z ; CSocketOption::GetSeedSpear
  0004d	8b f0		 mov	 esi, eax

; 992  : 
; 993  : 		if(lpSeedSpear == NULL)

  0004f	85 f6		 test	 esi, esi
  00051	74 43		 je	 SHORT $LN6@SetBonusSo

; 994  : 		{
; 995  : 			continue;
; 996  : 		}
; 997  : 
; 998  : 		LogAddTD("[SocketItem] [%s][%s] Set Bonus Socket Option - OptionIndex : %d, EffectType : %d, OptionType : %d, OptionValue : %d",lpObj->AccountID,lpObj->Name,lpSeedSpear->m_btOptionIndex,lpSeedSpear->m_btEffectType,lpSeedSpear->m_btOptionType,lpSeedSpear->m_btOptionValue);

  00053	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  00057	0f b6 4e 04	 movzx	 ecx, BYTE PTR [esi+4]
  0005b	0f b6 56 01	 movzx	 edx, BYTE PTR [esi+1]
  0005f	50		 push	 eax
  00060	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00063	51		 push	 ecx
  00064	52		 push	 edx
  00065	50		 push	 eax
  00066	8d 4f 77	 lea	 ecx, DWORD PTR [edi+119]
  00069	51		 push	 ecx
  0006a	8d 57 6c	 lea	 edx, DWORD PTR [edi+108]
  0006d	52		 push	 edx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 999  : 
; 1000 : 		//							EffectType : %d, OptionType : %d, OptionValue : %d
; 1001 : 		this->ApplySocketEffect(lpObj,2,lpSeedSpear->m_btEffectType,lpSeedSpear->m_btOptionType,lpSeedSpear->m_btOptionValue);

  00079	0f b6 4e 05	 movzx	 ecx, BYTE PTR [esi+5]
  0007d	0f b6 56 04	 movzx	 edx, BYTE PTR [esi+4]
  00081	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00085	83 c4 1c	 add	 esp, 28			; 0000001cH
  00088	51		 push	 ecx
  00089	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	52		 push	 edx
  0008d	50		 push	 eax
  0008e	6a 02		 push	 2
  00090	57		 push	 edi
  00091	e8 00 00 00 00	 call	 ?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketOption::ApplySocketEffect
$LN6@SetBonusSo:

; 974  : 	BYTE loc2 = 0;
; 975  : 	CSocketSphere * lpSeedSpear = NULL;
; 976  : 
; 977  : 	for(int i = 0;i < INVETORY_WEAR_SIZE; i ++)

  00096	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  0009c	81 fb f0 09 00
	00		 cmp	 ebx, 2544		; 000009f0H
  000a2	0f 8c 6b ff ff
	ff		 jl	 $LL13@SetBonusSo
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx

; 1002 : 	}
; 1003 : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?SetBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::SetBonusSocketOption
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	_lpObj$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetFullBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::SetFullBonusSocketOption
; Function compile flags: /Ogtp
;	COMDAT ?SetFullBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$GSCopy$ = -20					; size = 4
tv833 = -16						; size = 4
_this$GSCopy$ = -16					; size = 4
_loc3$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SetFullBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::SetFullBonusSocketOption, COMDAT
; _this$ = ecx

; 1006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 1007 : 	BYTE loc3[8];
; 1008 : 	BYTE loc4 = 0;
; 1009 : 	BYTE loc5 = 0;
; 1010 : 
; 1011 : 	memset(&loc3, NULL, sizeof(loc3));

  00015	33 c0		 xor	 eax, eax
  00017	57		 push	 edi

; 1038 : 		}
; 1039 : 		loc5 = 0;

  00018	89 75 ec	 mov	 DWORD PTR _lpObj$GSCopy$[ebp], esi
  0001b	32 db		 xor	 bl, bl
  0001d	33 ff		 xor	 edi, edi
  0001f	89 4d f0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00022	89 45 f4	 mov	 DWORD PTR _loc3$[ebp], eax
  00025	89 45 f8	 mov	 DWORD PTR _loc3$[ebp+4], eax
  00028	81 c6 8a 20 00
	00		 add	 esi, 8330		; 0000208aH
  0002e	8b ff		 npad	 2
$LL35@SetFullBon:

; 1012 : 
; 1013 : 	for(int i = 0;i< 35; i++) //loc6
; 1014 : 	{
; 1015 : 		loc4 = this->GetElementIndex(lpObj->m_SocketSet[i].m_btEffectType);

  00030	0f b6 46 fc	 movzx	 eax, BYTE PTR [esi-4]
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?GetElementIndex@CSocketOption@@QAEEE@Z ; CSocketOption::GetElementIndex

; 1016 : 
; 1017 : 		if(loc4 == 0)

  0003d	84 c0		 test	 al, al
  0003f	74 16		 je	 SHORT $LN18@SetFullBon

; 1018 : 		{
; 1019 : 			break;
; 1020 : 		}
; 1021 : 
; 1022 : 		loc3[loc4-1] += lpObj->m_SocketSet[i].m_btOptionCount;

  00041	8a 0e		 mov	 cl, BYTE PTR [esi]
  00043	0f b6 c0	 movzx	 eax, al
  00046	00 4c 05 f3	 add	 BYTE PTR _loc3$[ebp+eax-1], cl
  0004a	8d 44 05 f3	 lea	 eax, DWORD PTR _loc3$[ebp+eax-1]
  0004e	47		 inc	 edi
  0004f	83 c6 06	 add	 esi, 6
  00052	83 ff 23	 cmp	 edi, 35			; 00000023H
  00055	7c d9		 jl	 SHORT $LL35@SetFullBon
$LN18@SetFullBon:

; 1023 : 	}
; 1024 : 
; 1025 : 	for(int n = 0;n< 2; n++) //loc7

  00057	8b 7d f0	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  0005a	8d b7 a9 04 00
	00		 lea	 esi, DWORD PTR [edi+1193]
  00060	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR tv833[ebp], 2
$LL8@SetFullBon:

; 1026 : 	{
; 1027 : 		for(int j = 0;j< 6; j++) //loc8
; 1028 : 		{
; 1029 : 			if(this->SocketBonusOption[n].btElements[j] <= loc3[j])

  00067	8b 45 f4	 mov	 eax, DWORD PTR _loc3$[ebp]
  0006a	38 46 ff	 cmp	 BYTE PTR [esi-1], al
  0006d	77 02		 ja	 SHORT $LN4@SetFullBon

; 1030 : 			{
; 1031 : 				loc5++;

  0006f	b3 01		 mov	 bl, 1
$LN4@SetFullBon:

; 1026 : 	{
; 1027 : 		for(int j = 0;j< 6; j++) //loc8
; 1028 : 		{
; 1029 : 			if(this->SocketBonusOption[n].btElements[j] <= loc3[j])

  00071	38 26		 cmp	 BYTE PTR [esi], ah
  00073	77 02		 ja	 SHORT $LN26@SetFullBon

; 1030 : 			{
; 1031 : 				loc5++;

  00075	fe c3		 inc	 bl
$LN26@SetFullBon:

; 1026 : 	{
; 1027 : 		for(int j = 0;j< 6; j++) //loc8
; 1028 : 		{
; 1029 : 			if(this->SocketBonusOption[n].btElements[j] <= loc3[j])

  00077	8a 55 f6	 mov	 dl, BYTE PTR _loc3$[ebp+2]
  0007a	38 56 01	 cmp	 BYTE PTR [esi+1], dl
  0007d	77 02		 ja	 SHORT $LN28@SetFullBon

; 1030 : 			{
; 1031 : 				loc5++;

  0007f	fe c3		 inc	 bl
$LN28@SetFullBon:

; 1026 : 	{
; 1027 : 		for(int j = 0;j< 6; j++) //loc8
; 1028 : 		{
; 1029 : 			if(this->SocketBonusOption[n].btElements[j] <= loc3[j])

  00081	8a 45 f7	 mov	 al, BYTE PTR _loc3$[ebp+3]
  00084	38 46 02	 cmp	 BYTE PTR [esi+2], al
  00087	77 02		 ja	 SHORT $LN30@SetFullBon

; 1030 : 			{
; 1031 : 				loc5++;

  00089	fe c3		 inc	 bl
$LN30@SetFullBon:

; 1026 : 	{
; 1027 : 		for(int j = 0;j< 6; j++) //loc8
; 1028 : 		{
; 1029 : 			if(this->SocketBonusOption[n].btElements[j] <= loc3[j])

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _loc3$[ebp+4]
  0008e	38 46 03	 cmp	 BYTE PTR [esi+3], al
  00091	77 02		 ja	 SHORT $LN32@SetFullBon

; 1030 : 			{
; 1031 : 				loc5++;

  00093	fe c3		 inc	 bl
$LN32@SetFullBon:

; 1026 : 	{
; 1027 : 		for(int j = 0;j< 6; j++) //loc8
; 1028 : 		{
; 1029 : 			if(this->SocketBonusOption[n].btElements[j] <= loc3[j])

  00095	38 66 04	 cmp	 BYTE PTR [esi+4], ah
  00098	77 02		 ja	 SHORT $LN34@SetFullBon

; 1030 : 			{
; 1031 : 				loc5++;

  0009a	fe c3		 inc	 bl
$LN34@SetFullBon:

; 1032 : 			}
; 1033 : 		}
; 1034 : 
; 1035 : 		if(loc5 == 6)

  0009c	80 fb 06	 cmp	 bl, 6
  0009f	75 1c		 jne	 SHORT $LN1@SetFullBon

; 1036 : 		{
; 1037 : 			this->ApplySocketEffect(lpObj, 3, this->SocketBonusOption[n].btOption, this->SocketBonusOption[n].btType, this->SocketBonusOption[n].btIncrease);

  000a1	0f b6 56 f9	 movzx	 edx, BYTE PTR [esi-7]
  000a5	0f b6 46 f8	 movzx	 eax, BYTE PTR [esi-8]
  000a9	0f b6 4e fa	 movzx	 ecx, BYTE PTR [esi-6]
  000ad	52		 push	 edx
  000ae	8b 55 ec	 mov	 edx, DWORD PTR _lpObj$GSCopy$[ebp]
  000b1	50		 push	 eax
  000b2	51		 push	 ecx
  000b3	6a 03		 push	 3
  000b5	52		 push	 edx
  000b6	8b cf		 mov	 ecx, edi
  000b8	e8 00 00 00 00	 call	 ?ApplySocketEffect@CSocketOption@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketOption::ApplySocketEffect
$LN1@SetFullBon:

; 1038 : 		}
; 1039 : 		loc5 = 0;

  000bd	32 db		 xor	 bl, bl
  000bf	83 c6 10	 add	 esi, 16			; 00000010H
  000c2	ff 4d f0	 dec	 DWORD PTR tv833[ebp]
  000c5	75 a0		 jne	 SHORT $LL8@SetFullBon

; 1040 : 	}
; 1041 : }

  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	33 cd		 xor	 ecx, ebp
  000ce	5b		 pop	 ebx
  000cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 04 00	 ret	 4
?SetFullBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::SetFullBonusSocketOption
_TEXT	ENDS
PUBLIC	?CalCharacterSocketOption@CSocketOption@@QAEEPAUOBJECTSTRUCT@@@Z ; CSocketOption::CalCharacterSocketOption
; Function compile flags: /Ogtp
;	COMDAT ?CalCharacterSocketOption@CSocketOption@@QAEEPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CalCharacterSocketOption@CSocketOption@@QAEEPAUOBJECTSTRUCT@@@Z PROC ; CSocketOption::CalCharacterSocketOption, COMDAT
; _this$ = ecx

; 1045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1046 : 	int loc2 = 0;
; 1047 : 
; 1048 : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi

; 1049 : 	{
; 1050 : 		return 0;

  0000c	74 37		 je	 SHORT $LN2@CalCharact

; 1051 : 	}
; 1052 : 	
; 1053 : 	if(lpObj->Type != 1 || lpObj->Connected < 3)

  0000e	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00013	75 30		 jne	 SHORT $LN2@CalCharact
  00015	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00019	7c 2a		 jl	 SHORT $LN2@CalCharact

; 1056 : 	}
; 1057 : 
; 1058 : 	this->ClearEquipmentSocketOption(lpObj);

  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ?ClearEquipmentSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::ClearEquipmentSocketOption

; 1059 : 
; 1060 : 	loc2 = this->CalcEquipmentSocketOption(lpObj);

  00021	56		 push	 esi
  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 ?CalcEquipmentSocketOption@CSocketOption@@QAEHPAUOBJECTSTRUCT@@@Z ; CSocketOption::CalcEquipmentSocketOption

; 1061 : 
; 1062 : 	if(loc2 <= 0)

  00029	85 c0		 test	 eax, eax

; 1063 : 	{
; 1064 : 		return 0;

  0002b	7e 18		 jle	 SHORT $LN2@CalCharact

; 1065 : 	}
; 1066 : 	
; 1067 : 	this->SetBonusSocketOption(lpObj);

  0002d	56		 push	 esi
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?SetBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::SetBonusSocketOption

; 1068 : 	this->SetFullBonusSocketOption(lpObj);

  00035	56		 push	 esi
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 ?SetFullBonusSocketOption@CSocketOption@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketOption::SetFullBonusSocketOption
  0003d	5f		 pop	 edi

; 1069 : 
; 1070 : 	return 1;

  0003e	b0 01		 mov	 al, 1
  00040	5e		 pop	 esi

; 1071 : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN2@CalCharact:
  00045	5f		 pop	 edi

; 1054 : 	{
; 1055 : 		return 0;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 1071 : }

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?CalCharacterSocketOption@CSocketOption@@QAEEPAUOBJECTSTRUCT@@@Z ENDP ; CSocketOption::CalCharacterSocketOption
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_SocketOption@@YAXXZ
text$yc	SEGMENT
??__Eg_SocketOption@@YAXXZ PROC				; `dynamic initializer for 'g_SocketOption'', COMDAT

; 26   : CSocketOption g_SocketOption;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  00005	e8 00 00 00 00	 call	 ??0CSocketOption@@QAE@XZ ; CSocketOption::CSocketOption
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_SocketOption@@YAXXZ ; `dynamic atexit destructor for 'g_SocketOption''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_SocketOption@@YAXXZ ENDP				; `dynamic initializer for 'g_SocketOption''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_SocketOption@@YAXXZ
text$yd	SEGMENT
??__Fg_SocketOption@@YAXXZ PROC				; `dynamic atexit destructor for 'g_SocketOption'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketOption@@3VCSocketOption@@A ; g_SocketOption
  00005	e9 00 00 00 00	 jmp	 ??1CSocketOption@@UAE@XZ ; CSocketOption::~CSocketOption
??__Fg_SocketOption@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_SocketOption''
text$yd	ENDS
PUBLIC	?g_SocketOption@@3VCSocketOption@@A		; g_SocketOption
_BSS	SEGMENT
?g_SocketOption@@3VCSocketOption@@A DB 07b8H DUP (?)	; g_SocketOption
_BSS	ENDS
CRT$XCU	SEGMENT
_g_SocketOption$initializer$ DD FLAT:??__Eg_SocketOption@@YAXXZ
CRT$XCU	ENDS
END
