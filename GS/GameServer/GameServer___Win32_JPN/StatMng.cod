; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\StatMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CStatMng@@6B@				; CStatMng::`vftable'
PUBLIC	??1CStatMng@@UAE@XZ				; CStatMng::~CStatMng
PUBLIC	??_R4CStatMng@@6B@				; CStatMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStatMng@@@8				; CStatMng `RTTI Type Descriptor'
PUBLIC	??_R3CStatMng@@8				; CStatMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStatMng@@8				; CStatMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStatMng@@8			; CStatMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECStatMng@@UAEPAXI@Z:PROC			; CStatMng::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CStatMng@@8
; File e:\work\tranet_version\gs\gameserver\statmng.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CStatMng@@8 DD FLAT:??_R0?AVCStatMng@@@8	; CStatMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStatMng@@8
rdata$r	ENDS
;	COMDAT ??_R2CStatMng@@8
rdata$r	SEGMENT
??_R2CStatMng@@8 DD FLAT:??_R1A@?0A@EA@CStatMng@@8	; CStatMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CStatMng@@8
rdata$r	SEGMENT
??_R3CStatMng@@8 DD 00H					; CStatMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CStatMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStatMng@@@8
_DATA	SEGMENT
??_R0?AVCStatMng@@@8 DD FLAT:??_7type_info@@6B@		; CStatMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStatMng@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CStatMng@@6B@
rdata$r	SEGMENT
??_R4CStatMng@@6B@ DD 00H				; CStatMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStatMng@@@8
	DD	FLAT:??_R3CStatMng@@8
rdata$r	ENDS
;	COMDAT ??_7CStatMng@@6B@
CONST	SEGMENT
??_7CStatMng@@6B@ DD FLAT:??_R4CStatMng@@6B@		; CStatMng::`vftable'
	DD	FLAT:??_ECStatMng@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CStatMng@@UAE@XZ
_TEXT	SEGMENT
??1CStatMng@@UAE@XZ PROC				; CStatMng::~CStatMng, COMDAT
; _this$ = ecx

; 16   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CStatMng@@6B@

; 17   : 	return;
; 18   : }

  00006	c3		 ret	 0
??1CStatMng@@UAE@XZ ENDP				; CStatMng::~CStatMng
_TEXT	ENDS
PUBLIC	?Init@CStatMng@@QAEXXZ				; CStatMng::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CStatMng@@QAEXXZ
_TEXT	SEGMENT
tv221 = -16						; size = 4
_this$ = -16						; size = 4
tv193 = -12						; size = 4
_iDarkLordFirstState$ = -8				; size = 4
_MagunfirstState$ = -4					; size = 4
?Init@CStatMng@@QAEXXZ PROC				; CStatMng::Init, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 22   : 	int firstState = 2;

  00008	bb 02 00 00 00	 mov	 ebx, 2
  0000d	57		 push	 edi
  0000e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	int MagunfirstState = 2;

  00011	89 5d fc	 mov	 DWORD PTR _MagunfirstState$[ebp], ebx

; 24   : 	int iDarkLordFirstState = 2;

  00014	89 5d f8	 mov	 DWORD PTR _iDarkLordFirstState$[ebp], ebx

; 25   : 
; 26   : 	for (int i=0;i<STAT_TABLE_SIZE;i++)

  00017	33 c0		 xor	 eax, eax
  00019	8d 73 1f	 lea	 esi, DWORD PTR [ebx+31]
  0001c	8d b9 d4 07 00
	00		 lea	 edi, DWORD PTR [ecx+2004]
$LL8@Init:

; 27   : 	{
; 28   : 		if ( ( (i+1) % 10) == 0)

  00022	40		 inc	 eax
  00023	89 45 f4	 mov	 DWORD PTR tv193[ebp], eax
  00026	99		 cdq
  00027	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0002c	f7 f9		 idiv	 ecx
  0002e	85 d2		 test	 edx, edx
  00030	75 4b		 jne	 SHORT $LN16@Init

; 29   : 		{
; 30   : 			firstState +=  3 * ( i + 11 ) / 400 + 2;//Season 4.5 changed

  00032	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00037	f7 ee		 imul	 esi
  00039	c1 fa 07	 sar	 edx, 7
  0003c	8b c2		 mov	 eax, edx
  0003e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00041	03 c2		 add	 eax, edx
  00043	8d 5c 03 02	 lea	 ebx, DWORD PTR [ebx+eax+2]

; 31   : 			MagunfirstState += 3 * ( i + 11 ) / 700 + 2;//Season 4.5 changed

  00047	b8 91 73 9f 5d	 mov	 eax, 1570730897		; 5d9f7391H
  0004c	f7 ee		 imul	 esi
  0004e	c1 fa 08	 sar	 edx, 8
  00051	8b ca		 mov	 ecx, edx
  00053	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00056	03 ca		 add	 ecx, edx
  00058	8b 55 fc	 mov	 edx, DWORD PTR _MagunfirstState$[ebp]
  0005b	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  0005f	89 45 fc	 mov	 DWORD PTR _MagunfirstState$[ebp], eax

; 32   : 			iDarkLordFirstState += 3 * ( i + 11 ) / 500 + 2;//Season 4.5 changed

  00062	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00067	f7 ee		 imul	 esi
  00069	c1 fa 05	 sar	 edx, 5
  0006c	8b ca		 mov	 ecx, edx
  0006e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00071	03 ca		 add	 ecx, edx
  00073	8b 55 f8	 mov	 edx, DWORD PTR _iDarkLordFirstState$[ebp]
  00076	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  0007a	89 45 f8	 mov	 DWORD PTR _iDarkLordFirstState$[ebp], eax
$LN16@Init:

; 33   : 		}
; 34   : 
; 35   : 		this->gObjNormalAddStatTable[i] = firstState;
; 36   : 		this->gObjMagumAddStatTable[i] = MagunfirstState;

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _MagunfirstState$[ebp]

; 37   : 		this->gObjDarkLordAddStatTable[i] = iDarkLordFirstState;

  00080	8b 55 f8	 mov	 edx, DWORD PTR _iDarkLordFirstState$[ebp]
  00083	8b 45 f4	 mov	 eax, DWORD PTR tv193[ebp]
  00086	89 9f 30 f8 ff
	ff		 mov	 DWORD PTR [edi-2000], ebx
  0008c	89 0f		 mov	 DWORD PTR [edi], ecx
  0008e	89 97 d0 07 00
	00		 mov	 DWORD PTR [edi+2000], edx
  00094	83 c6 03	 add	 esi, 3
  00097	83 c7 04	 add	 edi, 4
  0009a	81 fe fd 05 00
	00		 cmp	 esi, 1533		; 000005fdH
  000a0	7c 80		 jl	 SHORT $LL8@Init

; 38   : 	}
; 39   : 
; 40   : 	firstState = 2;

  000a2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	bf 02 00 00 00	 mov	 edi, 2

; 41   : 	MagunfirstState = 2;
; 42   : 	iDarkLordFirstState = 2;
; 43   : 
; 44   : 	for (int i=0;i<STAT_TABLE_SIZE;i++)

  000aa	33 c0		 xor	 eax, eax
  000ac	89 7d fc	 mov	 DWORD PTR _MagunfirstState$[ebp], edi
  000af	89 7d f8	 mov	 DWORD PTR _iDarkLordFirstState$[ebp], edi
  000b2	8d 77 1f	 lea	 esi, DWORD PTR [edi+31]
  000b5	81 c1 44 1f 00
	00		 add	 ecx, 8004		; 00001f44H
  000bb	eb 03 8d 49 00	 npad	 5
$LL4@Init:

; 45   : 	{
; 46   : 		if ( ( (i+1) % 10) == 0)

  000c0	40		 inc	 eax
  000c1	89 45 f0	 mov	 DWORD PTR tv221[ebp], eax
  000c4	99		 cdq
  000c5	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
  000ca	f7 fb		 idiv	 ebx
  000cc	85 d2		 test	 edx, edx
  000ce	75 4b		 jne	 SHORT $LN15@Init

; 47   : 		{
; 48   : 			firstState += 3 * ( i + 11 ) / 400 + 2;//Season 4.5 changed

  000d0	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000d5	f7 ee		 imul	 esi
  000d7	c1 fa 07	 sar	 edx, 7
  000da	8b c2		 mov	 eax, edx
  000dc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000df	03 c2		 add	 eax, edx
  000e1	8d 7c 07 02	 lea	 edi, DWORD PTR [edi+eax+2]

; 49   : 			MagunfirstState += 3 * ( i + 11) / 700 + 2;//Season 4.5 changed

  000e5	b8 91 73 9f 5d	 mov	 eax, 1570730897		; 5d9f7391H
  000ea	f7 ee		 imul	 esi
  000ec	c1 fa 08	 sar	 edx, 8
  000ef	8b c2		 mov	 eax, edx
  000f1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f4	03 c2		 add	 eax, edx
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _MagunfirstState$[ebp]
  000f9	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  000fd	89 45 fc	 mov	 DWORD PTR _MagunfirstState$[ebp], eax

; 50   : 			iDarkLordFirstState += 3 * ( i + 11 ) / 500 + 2;//Season 4.5 changed

  00100	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00105	f7 ee		 imul	 esi
  00107	c1 fa 05	 sar	 edx, 5
  0010a	8b c2		 mov	 eax, edx
  0010c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0010f	03 c2		 add	 eax, edx
  00111	8b 55 f8	 mov	 edx, DWORD PTR _iDarkLordFirstState$[ebp]
  00114	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  00118	89 45 f8	 mov	 DWORD PTR _iDarkLordFirstState$[ebp], eax
$LN15@Init:

; 51   : 		}
; 52   : 
; 53   : 		this->gObjNormalMinusStatTable[i] = firstState;
; 54   : 		this->gObjMagumMinusStatTable[i] = MagunfirstState;
; 55   : 		this->gObjDarkLordMinusStatTable[i] = iDarkLordFirstState;

  0011b	8b 45 f8	 mov	 eax, DWORD PTR _iDarkLordFirstState$[ebp]
  0011e	8b 55 fc	 mov	 edx, DWORD PTR _MagunfirstState$[ebp]
  00121	89 81 d0 07 00
	00		 mov	 DWORD PTR [ecx+2000], eax
  00127	8b 45 f0	 mov	 eax, DWORD PTR tv221[ebp]
  0012a	89 b9 30 f8 ff
	ff		 mov	 DWORD PTR [ecx-2000], edi
  00130	89 11		 mov	 DWORD PTR [ecx], edx
  00132	83 c6 03	 add	 esi, 3
  00135	83 c1 04	 add	 ecx, 4
  00138	81 fe fd 05 00
	00		 cmp	 esi, 1533		; 000005fdH
  0013e	7c 80		 jl	 SHORT $LL4@Init
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx

; 56   : 	}
; 57   : }

  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c3		 ret	 0
?Init@CStatMng@@QAEXXZ ENDP				; CStatMng::Init
_TEXT	ENDS
PUBLIC	?GetMaxStat@CStatMng@@QAEHHH@Z			; CStatMng::GetMaxStat
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
; Function compile flags: /Ogtp
;	COMDAT ?GetMaxStat@CStatMng@@QAEHHH@Z
_TEXT	SEGMENT
_level$ = 8						; size = 4
_Class$ = 12						; size = 4
?GetMaxStat@CStatMng@@QAEHHH@Z PROC			; CStatMng::GetMaxStat, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 	#if(ENABLE_CHARLVL1000)
; 63   : 
; 64   : 	if ( (level < 1) || (level > ZtConfig.ZtCustom.MaxLevel) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  00006	83 f8 01	 cmp	 eax, 1
  00009	7c 32		 jl	 SHORT $LN3@GetMaxStat
  0000b	3b 05 24 00 00
	00		 cmp	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+36
  00011	7f 2a		 jg	 SHORT $LN3@GetMaxStat

; 67   : 	}
; 68   : 
; 69   : 	#else
; 70   : 
; 71   : 	if ( (level < 1) || (level> MAX_CHAR_LEVEL) )
; 72   : 	{
; 73   : 		return 0;
; 74   : 	}
; 75   : 
; 76   : 	#endif
; 77   : 
; 78   : 	if (Class == CLASS_MAGUMSA)

  00013	8b 55 0c	 mov	 edx, DWORD PTR _Class$[ebp]
  00016	83 fa 03	 cmp	 edx, 3
  00019	75 0b		 jne	 SHORT $LN2@GetMaxStat

; 79   : 	{
; 80   : 		return this->gObjMagumAddStatTable[level-1];

  0001b	8b 84 81 d0 07
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+2000]

; 89   : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN2@GetMaxStat:

; 81   : 	}
; 82   : 	
; 83   : 	if ( Class == CLASS_DARKLORD )

  00026	83 fa 04	 cmp	 edx, 4
  00029	75 0b		 jne	 SHORT $LN1@GetMaxStat

; 84   : 	{
; 85   : 		return this->gObjDarkLordAddStatTable[level-1];

  0002b	8b 84 81 a0 0f
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+4000]

; 89   : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
$LN1@GetMaxStat:

; 86   : 	}
; 87   : 	
; 88   : 	return this->gObjNormalAddStatTable[level-1];

  00036	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 89   : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN3@GetMaxStat:

; 65   : 	{
; 66   : 		return 0;

  0003d	33 c0		 xor	 eax, eax

; 89   : }

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?GetMaxStat@CStatMng@@QAEHHH@Z ENDP			; CStatMng::GetMaxStat
_TEXT	ENDS
PUBLIC	?GetMaxMinusStat@CStatMng@@QAEHHH@Z		; CStatMng::GetMaxMinusStat
; Function compile flags: /Ogtp
;	COMDAT ?GetMaxMinusStat@CStatMng@@QAEHHH@Z
_TEXT	SEGMENT
_iLevel$ = 8						; size = 4
_iClass$ = 12						; size = 4
?GetMaxMinusStat@CStatMng@@QAEHHH@Z PROC		; CStatMng::GetMaxMinusStat, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   : 	if ( (iLevel < 1) || (iLevel> MAX_CHAR_LEVEL) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iLevel$[ebp]
  00006	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]
  00009	81 fa e7 03 00
	00		 cmp	 edx, 999		; 000003e7H
  0000f	77 2e		 ja	 SHORT $LN3@GetMaxMinu

; 97   : 	}
; 98   : 
; 99   : 	if ( iClass == CLASS_MAGUMSA)

  00011	8b 55 0c	 mov	 edx, DWORD PTR _iClass$[ebp]
  00014	83 fa 03	 cmp	 edx, 3
  00017	75 0b		 jne	 SHORT $LN2@GetMaxMinu

; 100  : 	{
; 101  : 		return this->gObjMagumMinusStatTable[iLevel-1];

  00019	8b 84 81 40 1f
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+8000]

; 110  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN2@GetMaxMinu:

; 102  : 	}
; 103  : 	
; 104  : 	if ( iClass == CLASS_DARKLORD )

  00024	83 fa 04	 cmp	 edx, 4
  00027	75 0b		 jne	 SHORT $LN1@GetMaxMinu

; 105  : 	{
; 106  : 		return this->gObjDarkLordMinusStatTable[iLevel-1];

  00029	8b 84 81 10 27
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+10000]

; 110  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN1@GetMaxMinu:

; 107  : 	}
; 108  : 	
; 109  : 	return this->gObjNormalMinusStatTable[iLevel-1];

  00034	8b 84 81 70 17
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+6000]

; 110  : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN3@GetMaxMinu:

; 95   : 	{
; 96   : 		return 0;

  0003f	33 c0		 xor	 eax, eax

; 110  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?GetMaxMinusStat@CStatMng@@QAEHHH@Z ENDP		; CStatMng::GetMaxMinusStat
_TEXT	ENDS
PUBLIC	??0CStatMng@@QAE@XZ				; CStatMng::CStatMng
; Function compile flags: /Ogtp
;	COMDAT ??0CStatMng@@QAE@XZ
_TEXT	SEGMENT
??0CStatMng@@QAE@XZ PROC				; CStatMng::CStatMng, COMDAT
; _this$ = ecx

; 11   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CStatMng@@6B@

; 12   : 	this->Init();

  00009	e8 00 00 00 00	 call	 ?Init@CStatMng@@QAEXXZ	; CStatMng::Init

; 13   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CStatMng@@QAE@XZ ENDP				; CStatMng::CStatMng
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCStatMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCStatMng@@UAEPAXI@Z PROC				; CStatMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CStatMng@@UAE@XZ	; CStatMng::~CStatMng
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCStatMng@@UAEPAXI@Z ENDP				; CStatMng::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgStatMng@@YAXXZ
text$yc	SEGMENT
??__EgStatMng@@YAXXZ PROC				; `dynamic initializer for 'gStatMng'', COMDAT

; 8    : CStatMng gStatMng;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gStatMng@@3VCStatMng@@A ; gStatMng
  00005	e8 00 00 00 00	 call	 ??0CStatMng@@QAE@XZ	; CStatMng::CStatMng
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgStatMng@@YAXXZ ; `dynamic atexit destructor for 'gStatMng''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgStatMng@@YAXXZ ENDP				; `dynamic initializer for 'gStatMng''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgStatMng@@YAXXZ
text$yd	SEGMENT
??__FgStatMng@@YAXXZ PROC				; `dynamic atexit destructor for 'gStatMng'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gStatMng@@3VCStatMng@@A ; gStatMng
  00005	e9 00 00 00 00	 jmp	 ??1CStatMng@@UAE@XZ	; CStatMng::~CStatMng
??__FgStatMng@@YAXXZ ENDP				; `dynamic atexit destructor for 'gStatMng''
text$yd	ENDS
PUBLIC	?gStatMng@@3VCStatMng@@A			; gStatMng
_BSS	SEGMENT
?gStatMng@@3VCStatMng@@A DB 02ee4H DUP (?)		; gStatMng
_BSS	ENDS
CRT$XCU	SEGMENT
_gStatMng$initializer$ DD FLAT:??__EgStatMng@@YAXXZ
CRT$XCU	ENDS
END
