; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\StatsAdvance.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CStatsAdvance@@QAE@XZ			; CStatsAdvance::CStatsAdvance
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\statsadvance.cpp
;	COMDAT ??0CStatsAdvance@@QAE@XZ
_TEXT	SEGMENT
??0CStatsAdvance@@QAE@XZ PROC				; CStatsAdvance::CStatsAdvance, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx

; 13   : 	this->m_Enable = false;

  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 14   : }

  00008	c3		 ret	 0
??0CStatsAdvance@@QAE@XZ ENDP				; CStatsAdvance::CStatsAdvance
_TEXT	ENDS
PUBLIC	??1CStatsAdvance@@QAE@XZ			; CStatsAdvance::~CStatsAdvance
; Function compile flags: /Ogtp
;	COMDAT ??1CStatsAdvance@@QAE@XZ
_TEXT	SEGMENT
??1CStatsAdvance@@QAE@XZ PROC				; CStatsAdvance::~CStatsAdvance, COMDAT
; _this$ = ecx

; 18   : }

  00000	c3		 ret	 0
??1CStatsAdvance@@QAE@XZ ENDP				; CStatsAdvance::~CStatsAdvance
_TEXT	ENDS
PUBLIC	?Load@CStatsAdvance@@QAEXXZ			; CStatsAdvance::Load
EXTRN	?GetCustom@CZtLicense@@QAEHXZ:PROC		; CZtLicense::GetCustom
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
; Function compile flags: /Ogtp
;	COMDAT ?Load@CStatsAdvance@@QAEXXZ
_TEXT	SEGMENT
?Load@CStatsAdvance@@QAEXXZ PROC			; CStatsAdvance::Load, COMDAT
; _this$ = ecx

; 21   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 22   : 	this->m_Enable = false;
; 23   : 
; 24   : 	if(	g_ZtLicense.CheckUser(eZtUB::Local) || 
; 25   : 		g_ZtLicense.CheckUser(eZtUB::NSGames) || 
; 26   : 		g_ZtLicense.CheckUser(eZtUB::eternalmu) || 
; 27   : 		g_ZtLicense.GetCustom())

  00003	6a 00		 push	 0
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00015	84 c0		 test	 al, al
  00017	75 2e		 jne	 SHORT $LN1@Load
  00019	6a 51		 push	 81			; 00000051H
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00020	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00025	84 c0		 test	 al, al
  00027	75 1e		 jne	 SHORT $LN1@Load
  00029	6a 4f		 push	 79			; 0000004fH
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00030	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00035	84 c0		 test	 al, al
  00037	75 0e		 jne	 SHORT $LN1@Load
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003e	e8 00 00 00 00	 call	 ?GetCustom@CZtLicense@@QAEHXZ ; CZtLicense::GetCustom
  00043	85 c0		 test	 eax, eax
  00045	74 06		 je	 SHORT $LN2@Load
$LN1@Load:

; 28   : 	{
; 29   : 		this->m_Enable = true;

  00047	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
$LN2@Load:
  0004d	5e		 pop	 esi

; 30   : 	}
; 31   : }

  0004e	c3		 ret	 0
?Load@CStatsAdvance@@QAEXXZ ENDP			; CStatsAdvance::Load
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Send@CStatsAdvance@@QAEXH@Z			; CStatsAdvance::Send
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Send@CStatsAdvance@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -156						; size = 152
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?Send@CStatsAdvance@@QAEXH@Z PROC			; CStatsAdvance::Send, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 35   : 	if(!this->m_Enable)

  00013	33 d2		 xor	 edx, edx
  00015	56		 push	 esi
  00016	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00019	39 11		 cmp	 DWORD PTR [ecx], edx
  0001b	0f 84 49 01 00
	00		 je	 $LN3@Send

; 36   : 	{
; 37   : 		return;
; 38   : 	}
; 39   : 
; 40   : 	if(!OBJMAX_RANGE(aIndex))

  00021	3b f2		 cmp	 esi, edx
  00023	0f 8c 41 01 00
	00		 jl	 $LN3@Send
  00029	33 c0		 xor	 eax, eax
  0002b	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00031	0f 9e c0	 setle	 al
  00034	3b c2		 cmp	 eax, edx
  00036	0f 84 2e 01 00
	00		 je	 $LN3@Send

; 41   : 	{
; 42   : 		return;
; 43   : 	}
; 44   : 
; 45   : 	LPOBJ lpUser = &gObj[aIndex];
; 46   : 
; 47   : 	PMSG_STATS_ADVANCE pMsg;
; 48   : 
; 49   : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xDA, sizeof(pMsg));

  0003c	c7 85 64 ff ff
	ff c1 98 fb da	 mov	 DWORD PTR _pMsg$[ebp], -621045567 ; dafb98c1H

; 50   : 
; 51   : 	pMsg.Result = true;

  00046	c6 85 68 ff ff
	ff 01		 mov	 BYTE PTR _pMsg$[ebp+4], 1
  0004d	8b c6		 mov	 eax, esi
  0004f	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00055	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 52   : 
; 53   : 	pMsg.StatInfo.Level = lpUser->Level;
; 54   : 	pMsg.StatInfo.MasterLevel = 0;
; 55   : 	pMsg.StatInfo.Reset = lpUser->Reset;
; 56   : 	pMsg.StatInfo.GrandReset = lpUser->GReset;
; 57   : 	pMsg.StatInfo.TotalDamageReflect = lpUser->DamageReflect;
; 58   : 	pMsg.StatInfo.FullDamageReflectRate = lpUser->DamageReflect;
; 59   : 	pMsg.StatInfo.CriticalDamageRate = lpUser->m_CriticalDamage;
; 60   : 	pMsg.StatInfo.CriticalDamagePower = lpUser->m_CriticalDamage;
; 61   : 	pMsg.StatInfo.ExellentDamageRate = lpUser->m_ExcelentDamage;
; 62   : 	pMsg.StatInfo.ExellentDamagePower = lpUser->m_ExcelentDamage;
; 63   : 	pMsg.StatInfo.DoubleDamageRate = lpUser->SetOpDoubleDamage;
; 64   : 	pMsg.StatInfo.TripleDamageRate = 0;
; 65   : 	pMsg.StatInfo.DamageReductionRate = lpUser->DamageMinus;
; 66   : 	pMsg.StatInfo.ShieldSkillDamageReductionRate = 0;
; 67   : 	pMsg.StatInfo.SDDamageReductionRate = 0;
; 68   : 	pMsg.StatInfo.SDDecreaseDamageRate = 0;
; 69   : 	pMsg.StatInfo.IgnoreDefenceRate = lpUser->SetOpIgnoreDefense;
; 70   : 	pMsg.StatInfo.IgnoreSDRate = 0;
; 71   : 	pMsg.StatInfo.IncreaseDamagePvP = 0;
; 72   : 	pMsg.StatInfo.IncreaseDefencePvP = 0;
; 73   : 	pMsg.StatInfo.ResistDoubleDamageRate = 0;
; 74   : 	pMsg.StatInfo.ResistIgnoreDefenceRate = 0;
; 75   : 	pMsg.StatInfo.ResistIgnoreSDRate = 0;
; 76   : 	pMsg.StatInfo.ResistCriticalDamageRate = 0;
; 77   : 	pMsg.StatInfo.ResistExellentDamageRate = 0;
; 78   : 	pMsg.StatInfo.ResistStumRate = 0;
; 79   : 	pMsg.StatInfo.ResistIce = lpUser->m_Resistance[R_ICE];
; 80   : 	pMsg.StatInfo.ResistPoison = lpUser->m_Resistance[R_POISON];
; 81   : 	pMsg.StatInfo.ResistLighting = lpUser->m_Resistance[R_LIGHTNING];
; 82   : 	pMsg.StatInfo.ResistFire = lpUser->m_Resistance[R_FIRE];
; 83   : 	pMsg.StatInfo.ResistEarth = lpUser->m_Resistance[R_EARTH];
; 84   : 	pMsg.StatInfo.ResistWind = lpUser->m_Resistance[R_WIND];
; 85   : 	pMsg.StatInfo.ResistWater = lpUser->m_Resistance[R_WATER];
; 86   : 	pMsg.StatInfo.FullHPRestoreRate = 0;
; 87   : 	pMsg.StatInfo.FullMPRestoreRate = 0;
; 88   : 	pMsg.StatInfo.FullSDRestoreRate = 0;
; 89   : 
; 90   : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0005b	68 98 00 00 00	 push	 152			; 00000098H
  00060	0f bf 88 be 00
	00 00		 movsx	 ecx, WORD PTR [eax+190]
  00067	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  0006d	89 95 70 ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00073	8b 88 90 22 00
	00		 mov	 ecx, DWORD PTR [eax+8848]
  00079	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+16], ecx
  0007f	8b 88 94 22 00
	00		 mov	 ecx, DWORD PTR [eax+8852]
  00085	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+20], ecx
  0008b	0f b6 88 71 01
	00 00		 movzx	 ecx, BYTE PTR [eax+369]
  00092	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  00098	0f b6 88 71 01
	00 00		 movzx	 ecx, BYTE PTR [eax+369]
  0009f	89 4d 80	 mov	 DWORD PTR _pMsg$[ebp+28], ecx
  000a2	8b 88 bc 04 00
	00		 mov	 ecx, DWORD PTR [eax+1212]
  000a8	89 4d 84	 mov	 DWORD PTR _pMsg$[ebp+32], ecx
  000ab	8b 88 bc 04 00
	00		 mov	 ecx, DWORD PTR [eax+1212]
  000b1	89 4d 88	 mov	 DWORD PTR _pMsg$[ebp+36], ecx
  000b4	8b 88 c0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1216]
  000ba	89 4d 8c	 mov	 DWORD PTR _pMsg$[ebp+40], ecx
  000bd	8b 88 c0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1216]
  000c3	89 4d 90	 mov	 DWORD PTR _pMsg$[ebp+44], ecx
  000c6	0f b6 88 3f 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4415]
  000cd	89 4d 94	 mov	 DWORD PTR _pMsg$[ebp+48], ecx
  000d0	89 55 98	 mov	 DWORD PTR _pMsg$[ebp+52], edx
  000d3	0f b6 88 70 01
	00 00		 movzx	 ecx, BYTE PTR [eax+368]
  000da	89 4d 9c	 mov	 DWORD PTR _pMsg$[ebp+56], ecx
  000dd	89 55 a0	 mov	 DWORD PTR _pMsg$[ebp+60], edx
  000e0	89 55 a4	 mov	 DWORD PTR _pMsg$[ebp+64], edx
  000e3	89 55 a8	 mov	 DWORD PTR _pMsg$[ebp+68], edx
  000e6	0f b6 88 3e 11
	00 00		 movzx	 ecx, BYTE PTR [eax+4414]
  000ed	89 4d ac	 mov	 DWORD PTR _pMsg$[ebp+72], ecx
  000f0	89 55 b0	 mov	 DWORD PTR _pMsg$[ebp+76], edx
  000f3	89 55 b4	 mov	 DWORD PTR _pMsg$[ebp+80], edx
  000f6	89 55 b8	 mov	 DWORD PTR _pMsg$[ebp+84], edx
  000f9	89 55 bc	 mov	 DWORD PTR _pMsg$[ebp+88], edx
  000fc	89 55 c0	 mov	 DWORD PTR _pMsg$[ebp+92], edx
  000ff	89 55 c4	 mov	 DWORD PTR _pMsg$[ebp+96], edx
  00102	89 55 c8	 mov	 DWORD PTR _pMsg$[ebp+100], edx
  00105	89 55 cc	 mov	 DWORD PTR _pMsg$[ebp+104], edx
  00108	89 55 d0	 mov	 DWORD PTR _pMsg$[ebp+108], edx
  0010b	0f be 88 f8 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1272]
  00112	89 4d d4	 mov	 DWORD PTR _pMsg$[ebp+112], ecx
  00115	0f be 88 f9 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1273]
  0011c	89 4d d8	 mov	 DWORD PTR _pMsg$[ebp+116], ecx
  0011f	0f be 88 fa 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1274]
  00126	89 4d dc	 mov	 DWORD PTR _pMsg$[ebp+120], ecx
  00129	0f be 88 fb 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1275]
  00130	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+124], ecx
  00133	0f be 88 fc 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1276]
  0013a	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+128], ecx
  0013d	0f be 88 fd 04
	00 00		 movsx	 ecx, BYTE PTR [eax+1277]
  00144	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+132], ecx
  00147	0f be 80 fe 04
	00 00		 movsx	 eax, BYTE PTR [eax+1278]
  0014e	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00154	51		 push	 ecx
  00155	56		 push	 esi
  00156	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+136], eax
  00159	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+140], edx
  0015c	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+144], edx
  0015f	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+148], edx
  00162	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00167	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@Send:

; 91   : }

  0016a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016d	33 cd		 xor	 ecx, ebp
  0016f	5e		 pop	 esi
  00170	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 04 00	 ret	 4
?Send@CStatsAdvance@@QAEXH@Z ENDP			; CStatsAdvance::Send
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_StatsAdvance@@YAXXZ
text$yc	SEGMENT
??__Eg_StatsAdvance@@YAXXZ PROC				; `dynamic initializer for 'g_StatsAdvance'', COMDAT

; 9    : CStatsAdvance g_StatsAdvance;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_StatsAdvance@@3VCStatsAdvance@@A ; g_StatsAdvance
  00005	e8 00 00 00 00	 call	 ??0CStatsAdvance@@QAE@XZ ; CStatsAdvance::CStatsAdvance
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_StatsAdvance@@YAXXZ ; `dynamic atexit destructor for 'g_StatsAdvance''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_StatsAdvance@@YAXXZ ENDP				; `dynamic initializer for 'g_StatsAdvance''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_StatsAdvance@@YAXXZ
text$yd	SEGMENT
??__Fg_StatsAdvance@@YAXXZ PROC				; `dynamic atexit destructor for 'g_StatsAdvance'', COMDAT
  00000	c3		 ret	 0
??__Fg_StatsAdvance@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_StatsAdvance''
text$yd	ENDS
PUBLIC	?g_StatsAdvance@@3VCStatsAdvance@@A		; g_StatsAdvance
_BSS	SEGMENT
?g_StatsAdvance@@3VCStatsAdvance@@A DD 01H DUP (?)	; g_StatsAdvance
_BSS	ENDS
CRT$XCU	SEGMENT
_g_StatsAdvance$initializer$ DD FLAT:??__Eg_StatsAdvance@@YAXXZ
CRT$XCU	ENDS
END
