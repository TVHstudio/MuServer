; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\SystemOfRage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gSystemOfRage@@3VcSystemOfRage@@A		; gSystemOfRage
_BSS	SEGMENT
?gSystemOfRage@@3VcSystemOfRage@@A DB 024a8d0H DUP (?)	; gSystemOfRage
_BSS	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?int_binary@@YAHHHPAE@Z				; int_binary
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\systemofrage.cpp
;	COMDAT ?int_binary@@YAHHHPAE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_buf$ = 16						; size = 4
?int_binary@@YAHHHPAE@Z PROC				; int_binary, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   : 	WORD hiWord = SET_NUMBERHW(a);

  00003	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]

; 19   : 	WORD loWord = SET_NUMBERLW(a);
; 20   : 	buf[b] = SET_NUMBERH(hiWord);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00009	53		 push	 ebx
  0000a	8b ca		 mov	 ecx, edx
  0000c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	8b 75 10	 mov	 esi, DWORD PTR _buf$[ebp]
  00015	c1 eb 08	 shr	 ebx, 8
  00018	88 1c 30	 mov	 BYTE PTR [eax+esi], bl

; 21   : 	b++;
; 22   : 	buf[b] = SET_NUMBERL(hiWord);

  0001b	88 4c 30 01	 mov	 BYTE PTR [eax+esi+1], cl

; 23   : 	b++;
; 24   : 	buf[b] = SET_NUMBERH(loWord);

  0001f	8b ca		 mov	 ecx, edx
  00021	c1 e9 08	 shr	 ecx, 8
  00024	88 4c 30 02	 mov	 BYTE PTR [eax+esi+2], cl

; 25   : 	b++;
; 26   : 	buf[b] = SET_NUMBERL(loWord);

  00028	88 54 30 03	 mov	 BYTE PTR [eax+esi+3], dl
  0002c	5e		 pop	 esi

; 27   : 	b++;

  0002d	83 c0 04	 add	 eax, 4
  00030	5b		 pop	 ebx

; 28   : 	return b;
; 29   : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?int_binary@@YAHHHPAE@Z ENDP				; int_binary
_TEXT	ENDS
PUBLIC	?bynary_int@@YAHAAHHPAE@Z			; bynary_int
; Function compile flags: /Ogtp
;	COMDAT ?bynary_int@@YAHAAHHPAE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_buf$ = 16						; size = 4
?bynary_int@@YAHAAHHPAE@Z PROC				; bynary_int, COMDAT

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   : 	a = 0;
; 34   : 	WORD hiword = MAKE_NUMBERW(buf[b], buf[b+1]);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00009	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0000c	56		 push	 esi
  0000d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 35   : 	WORD loword = MAKE_NUMBERW(buf[b+2], buf[b+3]);
; 36   : 	a = MAKE_NUMBERDW(hiword, loword);

  00013	0f b6 34 08	 movzx	 esi, BYTE PTR [eax+ecx]
  00017	57		 push	 edi
  00018	0f b6 7c 08 01	 movzx	 edi, BYTE PTR [eax+ecx+1]
  0001d	66 c1 e6 08	 shl	 si, 8
  00021	0f b7 f6	 movzx	 esi, si
  00024	0b f7		 or	 esi, edi
  00026	0f b6 7c 08 02	 movzx	 edi, BYTE PTR [eax+ecx+2]
  0002b	0f b6 4c 08 03	 movzx	 ecx, BYTE PTR [eax+ecx+3]
  00030	66 c1 e7 08	 shl	 di, 8
  00034	0f b7 ff	 movzx	 edi, di
  00037	c1 e6 10	 shl	 esi, 16			; 00000010H
  0003a	0b f9		 or	 edi, ecx
  0003c	0b f7		 or	 esi, edi
  0003e	5f		 pop	 edi
  0003f	89 32		 mov	 DWORD PTR [edx], esi

; 37   : 	return b+4;

  00041	83 c0 04	 add	 eax, 4
  00044	5e		 pop	 esi

; 38   : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?bynary_int@@YAHAAHHPAE@Z ENDP				; bynary_int
_TEXT	ENDS
PUBLIC	?LoadSkill@cSystemOfRage@@QAEXHPADHHH_N@Z	; cSystemOfRage::LoadSkill
; Function compile flags: /Ogtp
;	COMDAT ?LoadSkill@cSystemOfRage@@QAEXHPADHHH_N@Z
_TEXT	SEGMENT
_ID$ = 8						; size = 4
_cName$ = 12						; size = 4
_a1$ = 16						; size = 4
_a2$ = 20						; size = 4
_NextPoint$ = 24					; size = 4
_Percent$ = 28						; size = 1
?LoadSkill@cSystemOfRage@@QAEXHPADHHH_N@Z PROC		; cSystemOfRage::LoadSkill, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 	strcpy(this->rSkill[ID].Name,cName);

  00003	8b 55 08	 mov	 edx, DWORD PTR _ID$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _cName$[ebp]
  00009	56		 push	 esi
  0000a	8b f2		 mov	 esi, edx
  0000c	c1 e6 04	 shl	 esi, 4
  0000f	03 f2		 add	 esi, edx
  00011	8d 34 b1	 lea	 esi, DWORD PTR [ecx+esi*4]
  00014	8d 96 30 9f 24
	00		 lea	 edx, DWORD PTR [esi+2400048]
  0001a	2b d0		 sub	 edx, eax
  0001c	8d 64 24 00	 npad	 4
$LL3@LoadSkill:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00025	40		 inc	 eax
  00026	84 c9		 test	 cl, cl
  00028	75 f6		 jne	 SHORT $LL3@LoadSkill

; 47   : 	this->rSkill[ID].StartDamage = a1;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _a1$[ebp]

; 48   : 	this->rSkill[ID].MaxPoint = a2;

  0002d	8b 4d 14	 mov	 ecx, DWORD PTR _a2$[ebp]

; 49   : 	this->rSkill[ID].PointNext = NextPoint;

  00030	8b 55 18	 mov	 edx, DWORD PTR _NextPoint$[ebp]
  00033	89 86 64 9f 24
	00		 mov	 DWORD PTR [esi+2400100], eax

; 50   : 	this->rSkill[ID].Percent = Percent;

  00039	8a 45 1c	 mov	 al, BYTE PTR _Percent$[ebp]
  0003c	89 8e 68 9f 24
	00		 mov	 DWORD PTR [esi+2400104], ecx
  00042	89 96 70 9f 24
	00		 mov	 DWORD PTR [esi+2400112], edx
  00048	88 86 6c 9f 24
	00		 mov	 BYTE PTR [esi+2400108], al
  0004e	5e		 pop	 esi

; 51   : }

  0004f	5d		 pop	 ebp
  00050	c2 18 00	 ret	 24			; 00000018H
?LoadSkill@cSystemOfRage@@QAEXHPADHHH_N@Z ENDP		; cSystemOfRage::LoadSkill
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@		; `string'
PUBLIC	_this$GSCopy$
PUBLIC	??_C@_0BO@KMOBPPDK@?4?4?2Data?2ZtData?2RageSystem?4ini?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cSystemOfRage@@QAEXXZ			; cSystemOfRage::Load
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	_fclose:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
CONST	SEGMENT
??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@ DB 'CRITICAL ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KMOBPPDK@?4?4?2Data?2ZtData?2RageSystem?4ini?$AA@
CONST	SEGMENT
??_C@_0BO@KMOBPPDK@?4?4?2Data?2ZtData?2RageSystem?4ini?$AA@ DB '..\Data\Z'
	DB	'tData\RageSystem.ini', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@cSystemOfRage@@QAEXXZ
_TEXT	SEGMENT
_type$ = -72						; size = 4
_sN$204868 = -68					; size = 4
_this$GSCopy$ = -64					; size = 4
_sNum$ = -60						; size = 4
_sName$204869 = -56					; size = 50
__$ArrayPad$ = -4					; size = 4
?Load@cSystemOfRage@@QAEXXZ PROC			; cSystemOfRage::Load, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f1		 mov	 esi, ecx

; 55   : 	//this->Enable = g_ZtLicense.user.Rage;
; 56   : 
; 57   : 	//if(!this->Enable)
; 58   : 	//{
; 59   : 	//	return;
; 60   : 	//}
; 61   : 
; 62   : 	this->m_sNPC_Class = 0;

  00014	33 c0		 xor	 eax, eax

; 63   : 	this->m_btNPC_Map = 0;
; 64   : 	this->m_btNPC_X = 0;
; 65   : 	this->m_btNPC_Y = 0;
; 66   : 	this->m_ResetRageWCoin = 0;

  00016	33 ff		 xor	 edi, edi

; 67   : 	this->m_ResetRageCredit = 0;
; 68   : 
; 69   : 	//ZeroMemory(&this->rUser,sizeof(this->rUser));
; 70   : 
; 71   : 	SMDFile = fopen(RAGE_SYSTEM_DIR, "r");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KMOBPPDK@?4?4?2Data?2ZtData?2RageSystem?4ini?$AA@

; 178  : 
; 179  : 				Token = GetToken();

  00022	89 75 c0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00025	89 86 c0 a8 24
	00		 mov	 DWORD PTR [esi+2402496], eax
  0002b	88 86 c4 a8 24
	00		 mov	 BYTE PTR [esi+2402500], al
  00031	89 be c8 a8 24
	00		 mov	 DWORD PTR [esi+2402504], edi
  00037	89 be cc a8 24
	00		 mov	 DWORD PTR [esi+2402508], edi
  0003d	e8 00 00 00 00	 call	 _fopen
  00042	83 c4 08	 add	 esp, 8
  00045	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  0004a	3b c7		 cmp	 eax, edi
  0004c	75 25		 jne	 SHORT $LN20@Load

; 72   : 
; 73   : 	if ( SMDFile == NULL )
; 74   : 	{
; 75   : 		MessageBoxA(0,RAGE_SYSTEM_DIR,"CRITICAL ERROR",0);

  0004e	57		 push	 edi
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BPENEPNJ@CRITICAL?5ERROR?$AA@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KMOBPPDK@?4?4?2Data?2ZtData?2RageSystem?4ini?$AA@
  00059	57		 push	 edi
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00060	5f		 pop	 edi

; 76   : 		this->Enable = false;

  00061	c6 06 00	 mov	 BYTE PTR [esi], 0
  00064	5e		 pop	 esi

; 227  : }

  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN20@Load:

; 77   : 		return;
; 78   : 	}
; 79   : 
; 80   : 	int Token;
; 81   : 	int type = -1;
; 82   : 
; 83   : 	int sNum = 1;

  00073	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _sNum$[ebp], 1

; 84   : 	int lNum = 1;
; 85   : 
; 86   : 	while ( true )
; 87   : 	{
; 88   : 	    Token = GetToken();

  0007a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 
; 90   :         if( Token == END)

  0007f	83 f8 02	 cmp	 eax, 2
  00082	0f 84 96 02 00
	00		 je	 $LN36@Load
  00088	53		 push	 ebx
  00089	8d a4 24 00 00
	00 00		 npad	 7
$LL19@Load:

; 91   : 		{
; 92   :             break;
; 93   : 		}
; 94   : 
; 95   : 		type = (int)TokenNumber;

  00090	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00096	e8 00 00 00 00	 call	 __ftol2_sse
  0009b	8b f8		 mov	 edi, eax
  0009d	89 7d b8	 mov	 DWORD PTR _type$[ebp], edi

; 96   : 
; 97   : 		if(type == 3)

  000a0	83 ff 03	 cmp	 edi, 3
  000a3	0f 84 74 02 00
	00		 je	 $LN53@Load
  000a9	8d a4 24 00 00
	00 00		 npad	 7
$LL14@Load:

; 98   : 		{
; 99   : 			if(!THINNAKORN_MAC)
; 100  : 			{
; 101  : 				break;
; 102  : 			}
; 103  : 		}
; 104  : 
; 105  : 		while ( true )
; 106  : 		{
; 107  : 			if(type == 0)

  000b0	85 ff		 test	 edi, edi
  000b2	0f 85 f2 00 00
	00		 jne	 $LN12@Load

; 108  : 			{
; 109  : 				Token = GetToken();

  000b8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 110  : 
; 111  : 				if (strcmp("end", TokenString ) == 0)

  000bd	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000c2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL38@Load:
  000c7	8a 10		 mov	 dl, BYTE PTR [eax]
  000c9	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000cb	75 1a		 jne	 SHORT $LN39@Load
  000cd	84 d2		 test	 dl, dl
  000cf	74 12		 je	 SHORT $LN50@Load
  000d1	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000d4	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d7	75 0e		 jne	 SHORT $LN39@Load
  000d9	83 c0 02	 add	 eax, 2
  000dc	83 c1 02	 add	 ecx, 2
  000df	84 d2		 test	 dl, dl
  000e1	75 e4		 jne	 SHORT $LL38@Load
$LN50@Load:
  000e3	33 c0		 xor	 eax, eax
  000e5	eb 05		 jmp	 SHORT $LN41@Load
$LN39@Load:
  000e7	1b c0		 sbb	 eax, eax
  000e9	83 d8 ff	 sbb	 eax, -1
$LN41@Load:
  000ec	85 c0		 test	 eax, eax
  000ee	0f 84 1b 02 00
	00		 je	 $LN52@Load

; 112  : 				{
; 113  : 					break;
; 114  : 				}
; 115  : 
; 116  : 				this->Enable = TokenNumber;

  000f4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fa	d9 ee		 fldz
  000fc	da e9		 fucompp
  000fe	df e0		 fnstsw	 ax
  00100	f6 c4 44	 test	 ah, 68			; 00000044H
  00103	7b 04		 jnp	 SHORT $LN23@Load
  00105	b0 01		 mov	 al, 1
  00107	eb 02		 jmp	 SHORT $LN24@Load
$LN23@Load:
  00109	32 c0		 xor	 al, al
$LN24@Load:
  0010b	88 06		 mov	 BYTE PTR [esi], al

; 117  : 
; 118  : 				Token = GetToken();

  0010d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 119  : 				this->AddExp = TokenNumber;

  00112	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00118	e8 00 00 00 00	 call	 __ftol2_sse
  0011d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 120  : 
; 121  : 				Token = GetToken();

  00120	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 				this->CreateMob = TokenNumber;

  00125	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0012b	e8 00 00 00 00	 call	 __ftol2_sse
  00130	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 123  : 
; 124  : 				Token = GetToken();

  00133	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 125  : 				this->MaxLevel = TokenNumber;

  00138	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0013e	e8 00 00 00 00	 call	 __ftol2_sse
  00143	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 126  : 
; 127  : 				Token = GetToken();

  00146	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 128  : 				this->rPointLvl = TokenNumber;

  0014b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00151	e8 00 00 00 00	 call	 __ftol2_sse
  00156	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 129  : 
; 130  : 				Token = GetToken();

  00159	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 131  : 				this->NextExp = TokenNumber;

  0015e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00164	e8 00 00 00 00	 call	 __ftol2_sse
  00169	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 132  : 
; 133  : 				Token = GetToken();

  0016c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 134  : 				this->MobExpLvL = TokenNumber;

  00171	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00177	e8 00 00 00 00	 call	 __ftol2_sse
  0017c	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 135  : 
; 136  : 				Token = GetToken();

  0017f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 137  : 				this->NeedLevel = TokenNumber;

  00184	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018a	e8 00 00 00 00	 call	 __ftol2_sse
  0018f	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 138  : 
; 139  : 				Token = GetToken();

  00192	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 				this->NeedMasterLevel = TokenNumber;

  00197	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0019d	e8 00 00 00 00	 call	 __ftol2_sse
  001a2	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  001a5	e9 06 ff ff ff	 jmp	 $LL14@Load
$LN12@Load:

; 141  : 			}	
; 142  : 			else if(type == 1)

  001aa	83 ff 01	 cmp	 edi, 1
  001ad	75 77		 jne	 SHORT $LN9@Load

; 143  : 			{
; 144  : 				Token = GetToken();

  001af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 145  : 
; 146  : 				if ( strcmp("end", TokenString ) == 0)

  001b4	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001b9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001be	8b ff		 npad	 2
$LL42@Load:
  001c0	8a 10		 mov	 dl, BYTE PTR [eax]
  001c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001c4	75 1a		 jne	 SHORT $LN43@Load
  001c6	84 d2		 test	 dl, dl
  001c8	74 12		 je	 SHORT $LN51@Load
  001ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001d0	75 0e		 jne	 SHORT $LN43@Load
  001d2	83 c0 02	 add	 eax, 2
  001d5	83 c1 02	 add	 ecx, 2
  001d8	84 d2		 test	 dl, dl
  001da	75 e4		 jne	 SHORT $LL42@Load
$LN51@Load:
  001dc	33 c0		 xor	 eax, eax
  001de	eb 05		 jmp	 SHORT $LN45@Load
$LN43@Load:
  001e0	1b c0		 sbb	 eax, eax
  001e2	83 d8 ff	 sbb	 eax, -1
$LN45@Load:
  001e5	85 c0		 test	 eax, eax
  001e7	0f 84 22 01 00
	00		 je	 $LN52@Load

; 147  : 				{
; 148  : 					break;
; 149  : 				}
; 150  : 
; 151  : 				this->TeleportMap = TokenNumber;

  001ed	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001f3	e8 00 00 00 00	 call	 __ftol2_sse
  001f8	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 152  : 
; 153  : 				Token = GetToken();

  001fb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 154  : 				this->TeleportX = TokenNumber;

  00200	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00206	e8 00 00 00 00	 call	 __ftol2_sse
  0020b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 155  : 
; 156  : 				Token = GetToken();

  0020e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 157  : 				this->TeleportY = TokenNumber;

  00213	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00219	e8 00 00 00 00	 call	 __ftol2_sse
  0021e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00221	e9 8a fe ff ff	 jmp	 $LL14@Load
$LN9@Load:

; 158  : 			}
; 159  : 			else if(type == 2)

  00226	83 ff 02	 cmp	 edi, 2
  00229	0f 85 81 fe ff
	ff		 jne	 $LL14@Load

; 160  : 			{
; 161  : 				Token = GetToken();

  0022f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 162  : 
; 163  : 				if ( strcmp("end", TokenString ) == 0)

  00234	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00239	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0023e	8b ff		 npad	 2
$LL46@Load:
  00240	8a 10		 mov	 dl, BYTE PTR [eax]
  00242	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00244	75 1a		 jne	 SHORT $LN47@Load
  00246	84 d2		 test	 dl, dl
  00248	74 12		 je	 SHORT $LN48@Load
  0024a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0024d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00250	75 0e		 jne	 SHORT $LN47@Load
  00252	83 c0 02	 add	 eax, 2
  00255	83 c1 02	 add	 ecx, 2
  00258	84 d2		 test	 dl, dl
  0025a	75 e4		 jne	 SHORT $LL46@Load
$LN48@Load:
  0025c	33 c0		 xor	 eax, eax
  0025e	eb 05		 jmp	 SHORT $LN49@Load
$LN47@Load:
  00260	1b c0		 sbb	 eax, eax
  00262	83 d8 ff	 sbb	 eax, -1
$LN49@Load:
  00265	85 c0		 test	 eax, eax
  00267	0f 84 a2 00 00
	00		 je	 $LN52@Load

; 164  : 				{
; 165  : 					break;
; 166  : 				}
; 167  : 
; 168  : 				if(sNum >= R_MAX_SKILL)

  0026d	83 7d c4 24	 cmp	 DWORD PTR _sNum$[ebp], 36 ; 00000024H
  00271	0f 8d 98 00 00
	00		 jge	 $LN52@Load

; 169  : 				{
; 170  : 					break;
; 171  : 				}
; 172  : 
; 173  : 				int sN = TokenNumber;

  00277	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0027d	e8 00 00 00 00	 call	 __ftol2_sse
  00282	89 45 bc	 mov	 DWORD PTR _sN$204868[ebp], eax

; 174  : 
; 175  : 				char sName[50];
; 176  : 				Token = GetToken();

  00285	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 177  : 				strcpy(sName, TokenString );

  0028a	33 c0		 xor	 eax, eax
  0028c	8d 64 24 00	 npad	 4
$LL25@Load:
  00290	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _TokenString[eax]
  00296	88 4c 05 c8	 mov	 BYTE PTR _sName$204869[ebp+eax], cl
  0029a	40		 inc	 eax
  0029b	84 c9		 test	 cl, cl
  0029d	75 f1		 jne	 SHORT $LL25@Load

; 178  : 
; 179  : 				Token = GetToken();

  0029f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 180  : 				int Damage = TokenNumber;

  002a4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002aa	e8 00 00 00 00	 call	 __ftol2_sse
  002af	8b f0		 mov	 esi, eax

; 181  : 
; 182  : 				Token = GetToken();

  002b1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 183  : 				int MaxPoint = TokenNumber;

  002b6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002bc	e8 00 00 00 00	 call	 __ftol2_sse
  002c1	8b f8		 mov	 edi, eax

; 184  : 
; 185  : 				Token = GetToken();

  002c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 186  : 				int NextPoint = TokenNumber;

  002c8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002ce	e8 00 00 00 00	 call	 __ftol2_sse
  002d3	8b d8		 mov	 ebx, eax

; 187  : 
; 188  : 				Token = GetToken();

  002d5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 189  : 				int sProc = TokenNumber;
; 190  : 
; 191  : 				this->LoadSkill(sN, sName,Damage,MaxPoint,NextPoint,(bool)sProc);

  002da	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002e0	e8 00 00 00 00	 call	 __ftol2_sse
  002e5	85 c0		 test	 eax, eax
  002e7	0f 95 c1	 setne	 cl
  002ea	0f b6 d1	 movzx	 edx, cl
  002ed	8b 4d bc	 mov	 ecx, DWORD PTR _sN$204868[ebp]
  002f0	52		 push	 edx
  002f1	53		 push	 ebx
  002f2	57		 push	 edi
  002f3	56		 push	 esi
  002f4	8d 45 c8	 lea	 eax, DWORD PTR _sName$204869[ebp]
  002f7	50		 push	 eax
  002f8	51		 push	 ecx
  002f9	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002fc	e8 00 00 00 00	 call	 ?LoadSkill@cSystemOfRage@@QAEXHPADHHH_N@Z ; cSystemOfRage::LoadSkill

; 192  : 
; 193  : 				sNum++;

  00301	ff 45 c4	 inc	 DWORD PTR _sNum$[ebp]

; 194  : 			}
; 195  : 			else if(type == 3)
; 196  : 			{
; 197  : 				Token = GetToken();
; 198  : 
; 199  : 				if ( strcmp("end", TokenString ) == 0)
; 200  : 				{
; 201  : 					break;
; 202  : 				}
; 203  : 
; 204  : 				this->m_sNPC_Class = TokenNumber;
; 205  : 
; 206  : 				Token = GetToken();
; 207  : 				this->m_btNPC_Map = TokenNumber;
; 208  : 
; 209  : 				Token = GetToken();
; 210  : 				this->m_btNPC_X = TokenNumber;
; 211  : 
; 212  : 				Token = GetToken();
; 213  : 				this->m_btNPC_Y = TokenNumber;
; 214  : 
; 215  : 				Token = GetToken();
; 216  : 				this->m_ResetRageWCoin = TokenNumber;
; 217  : 
; 218  : 				Token = GetToken();
; 219  : 				this->m_ResetRageCredit = TokenNumber;
; 220  : 			}
; 221  : 		}

  00304	8b 7d b8	 mov	 edi, DWORD PTR _type$[ebp]
  00307	8b 75 c0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0030a	e9 a1 fd ff ff	 jmp	 $LL14@Load
$LN52@Load:

; 84   : 	int lNum = 1;
; 85   : 
; 86   : 	while ( true )
; 87   : 	{
; 88   : 	    Token = GetToken();

  0030f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 
; 90   :         if( Token == END)

  00314	83 f8 02	 cmp	 eax, 2
  00317	0f 85 73 fd ff
	ff		 jne	 $LL19@Load
$LN53@Load:
  0031d	5b		 pop	 ebx
$LN36@Load:

; 222  :     }
; 223  : 
; 224  : 	fclose(SMDFile);

  0031e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00324	52		 push	 edx
  00325	e8 00 00 00 00	 call	 _fclose

; 225  : 
; 226  : 	g_ZtLicense.user.Rage = this->Enable;

  0032a	8a 06		 mov	 al, BYTE PTR [esi]

; 227  : }

  0032c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0032f	83 c4 04	 add	 esp, 4
  00332	5f		 pop	 edi
  00333	33 cd		 xor	 ecx, ebp
  00335	a2 cd 00 00 00	 mov	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, al
  0033a	5e		 pop	 esi
  0033b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00340	8b e5		 mov	 esp, ebp
  00342	5d		 pop	 ebp
  00343	c3		 ret	 0
?Load@cSystemOfRage@@QAEXXZ ENDP			; cSystemOfRage::Load
_TEXT	ENDS
PUBLIC	?FilterSkill@cSystemOfRage@@QAEXHH@Z		; cSystemOfRage::FilterSkill
; Function compile flags: /Ogtp
;	COMDAT ?FilterSkill@cSystemOfRage@@QAEXHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_SkillID$ = 12						; size = 4
?FilterSkill@cSystemOfRage@@QAEXHH@Z PROC		; cSystemOfRage::FilterSkill, COMDAT
; _this$ = ecx

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  : 	switch(SkillID)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _SkillID$[ebp]
  00006	48		 dec	 eax
  00007	83 f8 22	 cmp	 eax, 34			; 00000022H
  0000a	0f 87 50 03 00
	00		 ja	 $LN36@FilterSkil
  00010	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN41@FilterSkil[eax*4]
$LN35@FilterSkil:

; 232  : 	{
; 233  : 	case eSkill1:  this->rUser[aIndex].Damage++;		break;

  00017	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0001d	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00020	ff 44 08 44	 inc	 DWORD PTR [eax+ecx+68]
  00024	8d 44 08 44	 lea	 eax, DWORD PTR [eax+ecx+68]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
$LN34@FilterSkil:

; 234  : 	case eSkill2:  this->rUser[aIndex].FreePoints++;		break;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0002f	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00032	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00035	ff 44 0a 48	 inc	 DWORD PTR [edx+ecx+72]
  00039	8d 44 0a 48	 lea	 eax, DWORD PTR [edx+ecx+72]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN33@FilterSkil:

; 235  : 	case eSkill3:  this->rUser[aIndex].SummonPet++;		break;

  00041	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00044	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00047	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  0004a	ff 44 08 4c	 inc	 DWORD PTR [eax+ecx+76]
  0004e	8d 44 08 4c	 lea	 eax, DWORD PTR [eax+ecx+76]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN32@FilterSkil:

; 236  : 	case eSkill4:  this->rUser[aIndex].WingsDamagePlus++;		break;

  00056	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00059	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0005c	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  0005f	ff 44 0a 50	 inc	 DWORD PTR [edx+ecx+80]
  00063	8d 44 0a 50	 lea	 eax, DWORD PTR [edx+ecx+80]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN31@FilterSkil:

; 237  : 	case eSkill5:  this->rUser[aIndex].FinalMana++;		break;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0006e	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00071	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00074	ff 44 08 54	 inc	 DWORD PTR [eax+ecx+84]
  00078	8d 44 08 54	 lea	 eax, DWORD PTR [eax+ecx+84]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN30@FilterSkil:

; 238  : 	case eSkill6:  this->rUser[aIndex].IgnoreDefence++;		break;

  00080	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00083	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00086	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00089	ff 44 0a 58	 inc	 DWORD PTR [edx+ecx+88]
  0008d	8d 44 0a 58	 lea	 eax, DWORD PTR [edx+ecx+88]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00091	5d		 pop	 ebp
  00092	c2 08 00	 ret	 8
$LN29@FilterSkil:

; 239  : 	case eSkill7:  this->rUser[aIndex].ResetLevel++;		break;

  00095	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00098	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0009b	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  0009e	ff 44 08 5c	 inc	 DWORD PTR [eax+ecx+92]
  000a2	8d 44 08 5c	 lea	 eax, DWORD PTR [eax+ecx+92]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  000a6	5d		 pop	 ebp
  000a7	c2 08 00	 ret	 8
$LN28@FilterSkil:

; 240  : 	case eSkill8:  this->rUser[aIndex].Teleport++;		break;

  000aa	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000ad	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  000b0	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  000b3	ff 44 0a 60	 inc	 DWORD PTR [edx+ecx+96]
  000b7	8d 44 0a 60	 lea	 eax, DWORD PTR [edx+ecx+96]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  000bb	5d		 pop	 ebp
  000bc	c2 08 00	 ret	 8
$LN27@FilterSkil:

; 241  : 	case eSkill9:  this->rUser[aIndex].CriticalDamageRate++;		break;

  000bf	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000c2	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000c5	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  000c8	ff 44 08 64	 inc	 DWORD PTR [eax+ecx+100]
  000cc	8d 44 08 64	 lea	 eax, DWORD PTR [eax+ecx+100]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
$LN26@FilterSkil:

; 242  : 	case eSkill10: this->rUser[aIndex].AbsordDamage++;	break;

  000d4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000d7	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  000da	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  000dd	ff 44 0a 68	 inc	 DWORD PTR [edx+ecx+104]
  000e1	8d 44 0a 68	 lea	 eax, DWORD PTR [edx+ecx+104]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  000e5	5d		 pop	 ebp
  000e6	c2 08 00	 ret	 8
$LN25@FilterSkil:

; 243  : 	case eSkill11: this->rUser[aIndex].PetDamageBonus++;	break;

  000e9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000ec	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000ef	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  000f2	ff 44 08 6c	 inc	 DWORD PTR [eax+ecx+108]
  000f6	8d 44 08 6c	 lea	 eax, DWORD PTR [eax+ecx+108]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
$LN24@FilterSkil:

; 244  : 	case eSkill12: this->rUser[aIndex].FinalLife++;	break;

  000fe	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00101	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00104	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00107	ff 44 0a 70	 inc	 DWORD PTR [edx+ecx+112]
  0010b	8d 44 0a 70	 lea	 eax, DWORD PTR [edx+ecx+112]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  0010f	5d		 pop	 ebp
  00110	c2 08 00	 ret	 8
$LN23@FilterSkil:

; 245  : 	case eSkill13: this->rUser[aIndex].Strength++;	break;

  00113	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00116	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00119	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  0011c	ff 44 08 74	 inc	 DWORD PTR [eax+ecx+116]
  00120	8d 44 08 74	 lea	 eax, DWORD PTR [eax+ecx+116]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00124	5d		 pop	 ebp
  00125	c2 08 00	 ret	 8
$LN22@FilterSkil:

; 246  : 	case eSkill14: this->rUser[aIndex].DefenceRate++;	break;

  00128	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0012b	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0012e	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00131	ff 44 0a 78	 inc	 DWORD PTR [edx+ecx+120]
  00135	8d 44 0a 78	 lea	 eax, DWORD PTR [edx+ecx+120]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00139	5d		 pop	 ebp
  0013a	c2 08 00	 ret	 8
$LN21@FilterSkil:

; 247  : 	case eSkill15: this->rUser[aIndex].FireDamage++;	break;

  0013d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00140	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00143	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00146	ff 44 08 7c	 inc	 DWORD PTR [eax+ecx+124]
  0014a	8d 44 08 7c	 lea	 eax, DWORD PTR [eax+ecx+124]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN20@FilterSkil:

; 248  : 	case eSkill16: this->rUser[aIndex].Energy++;	break;

  00152	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00155	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00158	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  0015b	ff 84 0a 80 00
	00 00		 inc	 DWORD PTR [edx+ecx+128]
  00162	8d 84 0a 80 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+128]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00169	5d		 pop	 ebp
  0016a	c2 08 00	 ret	 8
$LN19@FilterSkil:

; 249  : 	case eSkill17: this->rUser[aIndex].Agility++;	break;

  0016d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00170	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00173	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00176	ff 84 08 84 00
	00 00		 inc	 DWORD PTR [eax+ecx+132]
  0017d	8d 84 08 84 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+132]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00184	5d		 pop	 ebp
  00185	c2 08 00	 ret	 8
$LN18@FilterSkil:

; 250  : 	case eSkill18: this->rUser[aIndex].DoubleDamage++;	break;

  00188	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0018b	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0018e	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00191	ff 84 0a 88 00
	00 00		 inc	 DWORD PTR [edx+ecx+136]
  00198	8d 84 0a 88 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+136]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  0019f	5d		 pop	 ebp
  001a0	c2 08 00	 ret	 8
$LN17@FilterSkil:

; 251  : 	case eSkill19: this->rUser[aIndex].FinalSD++;	break;

  001a3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001a6	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001a9	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  001ac	ff 84 08 8c 00
	00 00		 inc	 DWORD PTR [eax+ecx+140]
  001b3	8d 84 08 8c 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+140]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  001ba	5d		 pop	 ebp
  001bb	c2 08 00	 ret	 8
$LN16@FilterSkil:

; 252  : 	case eSkill20: this->rUser[aIndex].FinalDefence++;	break;

  001be	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001c1	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  001c4	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  001c7	ff 84 0a 90 00
	00 00		 inc	 DWORD PTR [edx+ecx+144]
  001ce	8d 84 0a 90 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+144]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  001d5	5d		 pop	 ebp
  001d6	c2 08 00	 ret	 8
$LN15@FilterSkil:

; 253  : 	case eSkill21: this->rUser[aIndex].ZenDrop++;	break;

  001d9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001dc	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001df	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  001e2	ff 84 08 94 00
	00 00		 inc	 DWORD PTR [eax+ecx+148]
  001e9	8d 84 08 94 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+148]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  001f0	5d		 pop	 ebp
  001f1	c2 08 00	 ret	 8
$LN14@FilterSkil:

; 254  : 	case eSkill22: this->rUser[aIndex].GuildBonus++;	break;

  001f4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001f7	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  001fa	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  001fd	ff 84 0a 98 00
	00 00		 inc	 DWORD PTR [edx+ecx+152]
  00204	8d 84 0a 98 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+152]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  0020b	5d		 pop	 ebp
  0020c	c2 08 00	 ret	 8
$LN13@FilterSkil:

; 255  : 	case eSkill23: this->rUser[aIndex].ReflectDamage++;	break;

  0020f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00212	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00215	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00218	ff 84 08 9c 00
	00 00		 inc	 DWORD PTR [eax+ecx+156]
  0021f	8d 84 08 9c 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+156]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00226	5d		 pop	 ebp
  00227	c2 08 00	 ret	 8
$LN12@FilterSkil:

; 256  : 	case eSkill24: this->rUser[aIndex].ExellentDamageRate++;	break;

  0022a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0022d	8d 44 80 05	 lea	 eax, DWORD PTR [eax+eax*4+5]
  00231	c1 e0 05	 shl	 eax, 5
  00234	ff 04 08	 inc	 DWORD PTR [eax+ecx]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00237	5d		 pop	 ebp
  00238	c2 08 00	 ret	 8
$LN11@FilterSkil:

; 257  : 	case eSkill25: this->rUser[aIndex].PvPBonusPlus++;	break;

  0023b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0023e	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00241	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00244	ff 84 08 a4 00
	00 00		 inc	 DWORD PTR [eax+ecx+164]
  0024b	8d 84 08 a4 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+164]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00252	5d		 pop	 ebp
  00253	c2 08 00	 ret	 8
$LN10@FilterSkil:

; 258  : 	case eSkill26: this->rUser[aIndex].MinDefence++;	break;

  00256	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00259	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0025c	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  0025f	ff 84 0a a8 00
	00 00		 inc	 DWORD PTR [edx+ecx+168]
  00266	8d 84 0a a8 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+168]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  0026d	5d		 pop	 ebp
  0026e	c2 08 00	 ret	 8
$LN9@FilterSkil:

; 259  : 	case eSkill27: this->rUser[aIndex].Experience++;	break;

  00271	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00274	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00277	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  0027a	ff 84 08 ac 00
	00 00		 inc	 DWORD PTR [eax+ecx+172]
  00281	8d 84 08 ac 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+172]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00288	5d		 pop	 ebp
  00289	c2 08 00	 ret	 8
$LN8@FilterSkil:

; 260  : 	case eSkill28: this->rUser[aIndex].StartSD++;	break;

  0028c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0028f	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00292	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00295	ff 84 0a b0 00
	00 00		 inc	 DWORD PTR [edx+ecx+176]
  0029c	8d 84 0a b0 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+176]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  002a3	5d		 pop	 ebp
  002a4	c2 08 00	 ret	 8
$LN7@FilterSkil:

; 261  : 	case eSkill29: this->rUser[aIndex].PartyBonus++;	break;

  002a7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002aa	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  002ad	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  002b0	ff 84 08 b4 00
	00 00		 inc	 DWORD PTR [eax+ecx+180]
  002b7	8d 84 08 b4 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+180]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  002be	5d		 pop	 ebp
  002bf	c2 08 00	 ret	 8
$LN6@FilterSkil:

; 262  : 	case eSkill30: this->rUser[aIndex].IceDamage++;	break;

  002c2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002c5	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  002c8	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  002cb	ff 84 0a b8 00
	00 00		 inc	 DWORD PTR [edx+ecx+184]
  002d2	8d 84 0a b8 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+184]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  002d9	5d		 pop	 ebp
  002da	c2 08 00	 ret	 8
$LN5@FilterSkil:

; 263  : 	case eSkill31: this->rUser[aIndex].DistanceAttack++;	break;

  002dd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002e0	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  002e3	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  002e6	ff 84 08 bc 00
	00 00		 inc	 DWORD PTR [eax+ecx+188]
  002ed	8d 84 08 bc 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+188]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  002f4	5d		 pop	 ebp
  002f5	c2 08 00	 ret	 8
$LN4@FilterSkil:

; 264  : 	case eSkill32: this->rUser[aIndex].AttackRate++;	break;

  002f8	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002fb	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  002fe	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00301	ff 84 0a c0 00
	00 00		 inc	 DWORD PTR [edx+ecx+192]
  00308	8d 84 0a c0 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+192]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  0030f	5d		 pop	 ebp
  00310	c2 08 00	 ret	 8
$LN3@FilterSkil:

; 265  : 	case eSkill33: this->rUser[aIndex].WeaponBonus++;	break;

  00313	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00316	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00319	c1 e0 05	 shl	 eax, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  0031c	ff 84 08 c4 00
	00 00		 inc	 DWORD PTR [eax+ecx+196]
  00323	8d 84 08 c4 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+196]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  0032a	5d		 pop	 ebp
  0032b	c2 08 00	 ret	 8
$LN2@FilterSkil:

; 266  : 	case eSkill34: this->rUser[aIndex].ExellentDamage++;	break;

  0032e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00331	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00334	c1 e2 05	 shl	 edx, 5

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00337	ff 84 0a c8 00
	00 00		 inc	 DWORD PTR [edx+ecx+200]
  0033e	8d 84 0a c8 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+200]

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00345	5d		 pop	 ebp
  00346	c2 08 00	 ret	 8
$LN1@FilterSkil:

; 267  : 	case eSkill35: this->rUser[aIndex].CriticalDamage++;	break;

  00349	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0034c	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0034f	c1 e0 05	 shl	 eax, 5
  00352	ff 84 08 cc 00
	00 00		 inc	 DWORD PTR [eax+ecx+204]
  00359	8d 84 08 cc 00
	00 00		 lea	 eax, DWORD PTR [eax+ecx+204]
$LN36@FilterSkil:

; 268  : 	}
; 269  : 
; 270  : 	//LPOBJ lpObj =&gObj[aIndex];
; 271  : 	//if(SkillID == eSkill2)
; 272  : 	//{
; 273  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 274  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 275  : 	//}
; 276  : 	////Fix Debug
; 277  : 	////Strength
; 278  : 	//if(SkillID == eSkill13)
; 279  : 	//{
; 280  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 281  : 	//}
; 282  : 	////Energy
; 283  : 	//if(SkillID == eSkill16)
; 284  : 	//{
; 285  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 286  : 	//}
; 287  : 	////Agility
; 288  : 	//if(SkillID == eSkill17)
; 289  : 	//{
; 290  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 291  : 	//}
; 292  : }

  00360	5d		 pop	 ebp
  00361	c2 08 00	 ret	 8
$LN41@FilterSkil:
  00364	00 00 00 00	 DD	 $LN35@FilterSkil
  00368	00 00 00 00	 DD	 $LN34@FilterSkil
  0036c	00 00 00 00	 DD	 $LN33@FilterSkil
  00370	00 00 00 00	 DD	 $LN32@FilterSkil
  00374	00 00 00 00	 DD	 $LN31@FilterSkil
  00378	00 00 00 00	 DD	 $LN30@FilterSkil
  0037c	00 00 00 00	 DD	 $LN29@FilterSkil
  00380	00 00 00 00	 DD	 $LN28@FilterSkil
  00384	00 00 00 00	 DD	 $LN27@FilterSkil
  00388	00 00 00 00	 DD	 $LN26@FilterSkil
  0038c	00 00 00 00	 DD	 $LN25@FilterSkil
  00390	00 00 00 00	 DD	 $LN24@FilterSkil
  00394	00 00 00 00	 DD	 $LN23@FilterSkil
  00398	00 00 00 00	 DD	 $LN22@FilterSkil
  0039c	00 00 00 00	 DD	 $LN21@FilterSkil
  003a0	00 00 00 00	 DD	 $LN20@FilterSkil
  003a4	00 00 00 00	 DD	 $LN19@FilterSkil
  003a8	00 00 00 00	 DD	 $LN18@FilterSkil
  003ac	00 00 00 00	 DD	 $LN17@FilterSkil
  003b0	00 00 00 00	 DD	 $LN16@FilterSkil
  003b4	00 00 00 00	 DD	 $LN15@FilterSkil
  003b8	00 00 00 00	 DD	 $LN14@FilterSkil
  003bc	00 00 00 00	 DD	 $LN13@FilterSkil
  003c0	00 00 00 00	 DD	 $LN12@FilterSkil
  003c4	00 00 00 00	 DD	 $LN11@FilterSkil
  003c8	00 00 00 00	 DD	 $LN10@FilterSkil
  003cc	00 00 00 00	 DD	 $LN9@FilterSkil
  003d0	00 00 00 00	 DD	 $LN8@FilterSkil
  003d4	00 00 00 00	 DD	 $LN7@FilterSkil
  003d8	00 00 00 00	 DD	 $LN6@FilterSkil
  003dc	00 00 00 00	 DD	 $LN5@FilterSkil
  003e0	00 00 00 00	 DD	 $LN4@FilterSkil
  003e4	00 00 00 00	 DD	 $LN3@FilterSkil
  003e8	00 00 00 00	 DD	 $LN2@FilterSkil
  003ec	00 00 00 00	 DD	 $LN1@FilterSkil
?FilterSkill@cSystemOfRage@@QAEXHH@Z ENDP		; cSystemOfRage::FilterSkill
_TEXT	ENDS
PUBLIC	?ReturnPoint@cSystemOfRage@@QAEHHH@Z		; cSystemOfRage::ReturnPoint
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
; Function compile flags: /Ogtp
;	COMDAT ?ReturnPoint@cSystemOfRage@@QAEHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_SkillID$ = 12						; size = 4
?ReturnPoint@cSystemOfRage@@QAEHHH@Z PROC		; cSystemOfRage::ReturnPoint, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 296  : 	switch(SkillID)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _SkillID$[ebp]
  00006	48		 dec	 eax
  00007	83 f8 22	 cmp	 eax, 34			; 00000022H
  0000a	0f 87 93 02 00
	00		 ja	 $LN36@ReturnPoin
  00010	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN40@ReturnPoin[eax*4]
$LN35@ReturnPoin:

; 297  : 	{
; 298  : 	case eSkill1:  return this->rUser[aIndex].Damage;		break;

  00017	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0001d	c1 e0 05	 shl	 eax, 5
  00020	8b 44 08 44	 mov	 eax, DWORD PTR [eax+ecx+68]

; 336  : }

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
$LN34@ReturnPoin:

; 299  : 	case eSkill2:  return this->rUser[aIndex].FreePoints;		break;

  00028	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0002b	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0002e	c1 e2 05	 shl	 edx, 5
  00031	8b 44 0a 48	 mov	 eax, DWORD PTR [edx+ecx+72]

; 336  : }

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN33@ReturnPoin:

; 300  : 	case eSkill3:  return this->rUser[aIndex].SummonPet;		break;

  00039	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0003c	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0003f	c1 e0 05	 shl	 eax, 5
  00042	8b 44 08 4c	 mov	 eax, DWORD PTR [eax+ecx+76]

; 336  : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN32@ReturnPoin:

; 301  : 	case eSkill4:  return this->rUser[aIndex].WingsDamagePlus;		break;

  0004a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0004d	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00050	c1 e2 05	 shl	 edx, 5
  00053	8b 44 0a 50	 mov	 eax, DWORD PTR [edx+ecx+80]

; 336  : }

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
$LN31@ReturnPoin:

; 302  : 	case eSkill5:  return this->rUser[aIndex].FinalMana;		break;

  0005b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0005e	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00061	c1 e0 05	 shl	 eax, 5
  00064	8b 44 08 54	 mov	 eax, DWORD PTR [eax+ecx+84]

; 336  : }

  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
$LN30@ReturnPoin:

; 303  : 	case eSkill6:  return this->rUser[aIndex].IgnoreDefence;		break;

  0006c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0006f	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00072	c1 e2 05	 shl	 edx, 5
  00075	8b 44 0a 58	 mov	 eax, DWORD PTR [edx+ecx+88]

; 336  : }

  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
$LN29@ReturnPoin:

; 304  : 	case eSkill7:  return this->rUser[aIndex].ResetLevel;		break;

  0007d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00080	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00083	c1 e0 05	 shl	 eax, 5
  00086	8b 44 08 5c	 mov	 eax, DWORD PTR [eax+ecx+92]

; 336  : }

  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
$LN28@ReturnPoin:

; 305  : 	case eSkill8:  return this->rUser[aIndex].Teleport;		break;

  0008e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00091	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00094	c1 e2 05	 shl	 edx, 5
  00097	8b 44 0a 60	 mov	 eax, DWORD PTR [edx+ecx+96]

; 336  : }

  0009b	5d		 pop	 ebp
  0009c	c2 08 00	 ret	 8
$LN27@ReturnPoin:

; 306  : 	case eSkill9:  return this->rUser[aIndex].CriticalDamageRate;		break;

  0009f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000a2	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000a5	c1 e0 05	 shl	 eax, 5
  000a8	8b 44 08 64	 mov	 eax, DWORD PTR [eax+ecx+100]

; 336  : }

  000ac	5d		 pop	 ebp
  000ad	c2 08 00	 ret	 8
$LN26@ReturnPoin:

; 307  : 	case eSkill10: return this->rUser[aIndex].AbsordDamage;	break;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000b3	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  000b6	c1 e2 05	 shl	 edx, 5
  000b9	8b 44 0a 68	 mov	 eax, DWORD PTR [edx+ecx+104]

; 336  : }

  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN25@ReturnPoin:

; 308  : 	case eSkill11: return this->rUser[aIndex].PetDamageBonus;	break;

  000c1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000c4	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000c7	c1 e0 05	 shl	 eax, 5
  000ca	8b 44 08 6c	 mov	 eax, DWORD PTR [eax+ecx+108]

; 336  : }

  000ce	5d		 pop	 ebp
  000cf	c2 08 00	 ret	 8
$LN24@ReturnPoin:

; 309  : 	case eSkill12: return this->rUser[aIndex].FinalLife;	break;

  000d2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000d5	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  000d8	c1 e2 05	 shl	 edx, 5
  000db	8b 44 0a 70	 mov	 eax, DWORD PTR [edx+ecx+112]

; 336  : }

  000df	5d		 pop	 ebp
  000e0	c2 08 00	 ret	 8
$LN23@ReturnPoin:

; 310  : 	case eSkill13: return this->rUser[aIndex].Strength;	break;

  000e3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000e6	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000e9	c1 e0 05	 shl	 eax, 5
  000ec	8b 44 08 74	 mov	 eax, DWORD PTR [eax+ecx+116]

; 336  : }

  000f0	5d		 pop	 ebp
  000f1	c2 08 00	 ret	 8
$LN22@ReturnPoin:

; 311  : 	case eSkill14: return this->rUser[aIndex].DefenceRate;	break;

  000f4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000f7	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  000fa	c1 e2 05	 shl	 edx, 5
  000fd	8b 44 0a 78	 mov	 eax, DWORD PTR [edx+ecx+120]

; 336  : }

  00101	5d		 pop	 ebp
  00102	c2 08 00	 ret	 8
$LN21@ReturnPoin:

; 312  : 	case eSkill15: return this->rUser[aIndex].FireDamage;	break;

  00105	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00108	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0010b	c1 e0 05	 shl	 eax, 5
  0010e	8b 44 08 7c	 mov	 eax, DWORD PTR [eax+ecx+124]

; 336  : }

  00112	5d		 pop	 ebp
  00113	c2 08 00	 ret	 8
$LN20@ReturnPoin:

; 313  : 	case eSkill16: return this->rUser[aIndex].Energy;	break;

  00116	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00119	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0011c	c1 e2 05	 shl	 edx, 5
  0011f	8b 84 0a 80 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+128]

; 336  : }

  00126	5d		 pop	 ebp
  00127	c2 08 00	 ret	 8
$LN19@ReturnPoin:

; 314  : 	case eSkill17: return this->rUser[aIndex].Agility;	break;

  0012a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0012d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00130	c1 e0 05	 shl	 eax, 5
  00133	8b 84 08 84 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+132]

; 336  : }

  0013a	5d		 pop	 ebp
  0013b	c2 08 00	 ret	 8
$LN18@ReturnPoin:

; 315  : 	case eSkill18: return this->rUser[aIndex].DoubleDamage;	break;

  0013e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00141	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00144	c1 e2 05	 shl	 edx, 5
  00147	8b 84 0a 88 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+136]

; 336  : }

  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN17@ReturnPoin:

; 316  : 	case eSkill19: return this->rUser[aIndex].FinalSD;	break;

  00152	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00155	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00158	c1 e0 05	 shl	 eax, 5
  0015b	8b 84 08 8c 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+140]

; 336  : }

  00162	5d		 pop	 ebp
  00163	c2 08 00	 ret	 8
$LN16@ReturnPoin:

; 317  : 	case eSkill20: return this->rUser[aIndex].FinalDefence;	break;

  00166	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00169	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  0016c	c1 e2 05	 shl	 edx, 5
  0016f	8b 84 0a 90 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+144]

; 336  : }

  00176	5d		 pop	 ebp
  00177	c2 08 00	 ret	 8
$LN15@ReturnPoin:

; 318  : 	case eSkill21: return this->rUser[aIndex].ZenDrop;	break;

  0017a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0017d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00180	c1 e0 05	 shl	 eax, 5
  00183	8b 84 08 94 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+148]

; 336  : }

  0018a	5d		 pop	 ebp
  0018b	c2 08 00	 ret	 8
$LN14@ReturnPoin:

; 319  : 	case eSkill22: return this->rUser[aIndex].GuildBonus;	break;

  0018e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00191	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00194	c1 e2 05	 shl	 edx, 5
  00197	8b 84 0a 98 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+152]

; 336  : }

  0019e	5d		 pop	 ebp
  0019f	c2 08 00	 ret	 8
$LN13@ReturnPoin:

; 320  : 	case eSkill23: return this->rUser[aIndex].ReflectDamage;	break;

  001a2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001a5	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001a8	c1 e0 05	 shl	 eax, 5
  001ab	8b 84 08 9c 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+156]

; 336  : }

  001b2	5d		 pop	 ebp
  001b3	c2 08 00	 ret	 8
$LN12@ReturnPoin:

; 321  : 	case eSkill24: return this->rUser[aIndex].ExellentDamageRate;	break;

  001b6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001b9	8d 54 80 05	 lea	 edx, DWORD PTR [eax+eax*4+5]
  001bd	c1 e2 05	 shl	 edx, 5
  001c0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]

; 336  : }

  001c3	5d		 pop	 ebp
  001c4	c2 08 00	 ret	 8
$LN11@ReturnPoin:

; 322  : 	case eSkill25: return this->rUser[aIndex].PvPBonusPlus;	break;

  001c7	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001ca	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001cd	c1 e0 05	 shl	 eax, 5
  001d0	8b 84 08 a4 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+164]

; 336  : }

  001d7	5d		 pop	 ebp
  001d8	c2 08 00	 ret	 8
$LN10@ReturnPoin:

; 323  : 	case eSkill26: return this->rUser[aIndex].MinDefence;	break;

  001db	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001de	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  001e1	c1 e2 05	 shl	 edx, 5
  001e4	8b 84 0a a8 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+168]

; 336  : }

  001eb	5d		 pop	 ebp
  001ec	c2 08 00	 ret	 8
$LN9@ReturnPoin:

; 324  : 	case eSkill27: return this->rUser[aIndex].Experience;	break;

  001ef	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001f2	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001f5	c1 e0 05	 shl	 eax, 5
  001f8	8b 84 08 ac 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+172]

; 336  : }

  001ff	5d		 pop	 ebp
  00200	c2 08 00	 ret	 8
$LN8@ReturnPoin:

; 325  : 	case eSkill28: return this->rUser[aIndex].StartSD;	break;

  00203	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00206	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00209	c1 e2 05	 shl	 edx, 5
  0020c	8b 84 0a b0 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+176]

; 336  : }

  00213	5d		 pop	 ebp
  00214	c2 08 00	 ret	 8
$LN7@ReturnPoin:

; 326  : 	case eSkill29: return this->rUser[aIndex].PartyBonus;	break;

  00217	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0021a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0021d	c1 e0 05	 shl	 eax, 5
  00220	8b 84 08 b4 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+180]

; 336  : }

  00227	5d		 pop	 ebp
  00228	c2 08 00	 ret	 8
$LN6@ReturnPoin:

; 327  : 	case eSkill30: return this->rUser[aIndex].IceDamage;	break;

  0022b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0022e	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00231	c1 e2 05	 shl	 edx, 5
  00234	8b 84 0a b8 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+184]

; 336  : }

  0023b	5d		 pop	 ebp
  0023c	c2 08 00	 ret	 8
$LN5@ReturnPoin:

; 328  : 	case eSkill31: return this->rUser[aIndex].DistanceAttack;	break;

  0023f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00242	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00245	c1 e0 05	 shl	 eax, 5
  00248	8b 84 08 bc 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+188]

; 336  : }

  0024f	5d		 pop	 ebp
  00250	c2 08 00	 ret	 8
$LN4@ReturnPoin:

; 329  : 	case eSkill32: return this->rUser[aIndex].AttackRate;	break;

  00253	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00256	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00259	c1 e2 05	 shl	 edx, 5
  0025c	8b 84 0a c0 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+192]

; 336  : }

  00263	5d		 pop	 ebp
  00264	c2 08 00	 ret	 8
$LN3@ReturnPoin:

; 330  : 	case eSkill33: return this->rUser[aIndex].WeaponBonus;	break;

  00267	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0026a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0026d	c1 e0 05	 shl	 eax, 5
  00270	8b 84 08 c4 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+196]

; 336  : }

  00277	5d		 pop	 ebp
  00278	c2 08 00	 ret	 8
$LN2@ReturnPoin:

; 331  : 	case eSkill34: return this->rUser[aIndex].ExellentDamage;	break;

  0027b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0027e	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00281	c1 e2 05	 shl	 edx, 5
  00284	8b 84 0a c8 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+200]

; 336  : }

  0028b	5d		 pop	 ebp
  0028c	c2 08 00	 ret	 8
$LN1@ReturnPoin:

; 332  : 	case eSkill35: return this->rUser[aIndex].CriticalDamage;	break;

  0028f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00292	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00295	c1 e0 05	 shl	 eax, 5
  00298	8b 84 08 cc 00
	00 00		 mov	 eax, DWORD PTR [eax+ecx+204]

; 336  : }

  0029f	5d		 pop	 ebp
  002a0	c2 08 00	 ret	 8
$LN36@ReturnPoin:

; 333  : 	}
; 334  : 	CloseClient(aIndex);

  002a3	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  002a6	51		 push	 ecx
  002a7	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  002ac	83 c4 04	 add	 esp, 4

; 335  : 	return -1;

  002af	83 c8 ff	 or	 eax, -1

; 336  : }

  002b2	5d		 pop	 ebp
  002b3	c2 08 00	 ret	 8
  002b6	8b ff		 npad	 2
$LN40@ReturnPoin:
  002b8	00 00 00 00	 DD	 $LN35@ReturnPoin
  002bc	00 00 00 00	 DD	 $LN34@ReturnPoin
  002c0	00 00 00 00	 DD	 $LN33@ReturnPoin
  002c4	00 00 00 00	 DD	 $LN32@ReturnPoin
  002c8	00 00 00 00	 DD	 $LN31@ReturnPoin
  002cc	00 00 00 00	 DD	 $LN30@ReturnPoin
  002d0	00 00 00 00	 DD	 $LN29@ReturnPoin
  002d4	00 00 00 00	 DD	 $LN28@ReturnPoin
  002d8	00 00 00 00	 DD	 $LN27@ReturnPoin
  002dc	00 00 00 00	 DD	 $LN26@ReturnPoin
  002e0	00 00 00 00	 DD	 $LN25@ReturnPoin
  002e4	00 00 00 00	 DD	 $LN24@ReturnPoin
  002e8	00 00 00 00	 DD	 $LN23@ReturnPoin
  002ec	00 00 00 00	 DD	 $LN22@ReturnPoin
  002f0	00 00 00 00	 DD	 $LN21@ReturnPoin
  002f4	00 00 00 00	 DD	 $LN20@ReturnPoin
  002f8	00 00 00 00	 DD	 $LN19@ReturnPoin
  002fc	00 00 00 00	 DD	 $LN18@ReturnPoin
  00300	00 00 00 00	 DD	 $LN17@ReturnPoin
  00304	00 00 00 00	 DD	 $LN16@ReturnPoin
  00308	00 00 00 00	 DD	 $LN15@ReturnPoin
  0030c	00 00 00 00	 DD	 $LN14@ReturnPoin
  00310	00 00 00 00	 DD	 $LN13@ReturnPoin
  00314	00 00 00 00	 DD	 $LN12@ReturnPoin
  00318	00 00 00 00	 DD	 $LN11@ReturnPoin
  0031c	00 00 00 00	 DD	 $LN10@ReturnPoin
  00320	00 00 00 00	 DD	 $LN9@ReturnPoin
  00324	00 00 00 00	 DD	 $LN8@ReturnPoin
  00328	00 00 00 00	 DD	 $LN7@ReturnPoin
  0032c	00 00 00 00	 DD	 $LN6@ReturnPoin
  00330	00 00 00 00	 DD	 $LN5@ReturnPoin
  00334	00 00 00 00	 DD	 $LN4@ReturnPoin
  00338	00 00 00 00	 DD	 $LN3@ReturnPoin
  0033c	00 00 00 00	 DD	 $LN2@ReturnPoin
  00340	00 00 00 00	 DD	 $LN1@ReturnPoin
?ReturnPoint@cSystemOfRage@@QAEHHH@Z ENDP		; cSystemOfRage::ReturnPoint
_TEXT	ENDS
PUBLIC	?ReturnCalc@cSystemOfRage@@QAEHHHH@Z		; cSystemOfRage::ReturnCalc
; Function compile flags: /Ogtp
;	COMDAT ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_SkillID$ = 12						; size = 4
_Pw$ = 16						; size = 4
?ReturnCalc@cSystemOfRage@@QAEHHHH@Z PROC		; cSystemOfRage::ReturnCalc, COMDAT
; _this$ = ecx

; 339  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 340  : 	int Result = 0;
; 341  : 	switch(SkillID)

  00003	8b 55 0c	 mov	 edx, DWORD PTR _SkillID$[ebp]
  00006	56		 push	 esi
  00007	8d 72 ff	 lea	 esi, DWORD PTR [edx-1]
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fe 22	 cmp	 esi, 34			; 00000022H
  0000f	0f 87 b7 04 00
	00		 ja	 $LN40@ReturnCalc
  00015	57		 push	 edi
  00016	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN46@ReturnCalc[esi*4]
$LN39@ReturnCalc:

; 342  : 	{
; 343  : 	case eSkill1:  Result = this->rUser[aIndex].Damage * this->rSkill[SkillID].StartDamage;		break;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00020	8b f2		 mov	 esi, edx
  00022	c1 e6 04	 shl	 esi, 4
  00025	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00028	03 f2		 add	 esi, edx
  0002a	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00031	c1 e7 05	 shl	 edi, 5
  00034	0f af 44 0f 44	 imul	 eax, DWORD PTR [edi+ecx+68]
  00039	e9 8d 04 00 00	 jmp	 $LN44@ReturnCalc
$LN38@ReturnCalc:

; 344  : 	case eSkill2:  Result = this->rUser[aIndex].FreePoints * this->rSkill[SkillID].StartDamage;		break;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00041	8b f2		 mov	 esi, edx
  00043	c1 e6 04	 shl	 esi, 4
  00046	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00049	03 f2		 add	 esi, edx
  0004b	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00052	c1 e7 05	 shl	 edi, 5
  00055	0f af 44 0f 48	 imul	 eax, DWORD PTR [edi+ecx+72]
  0005a	e9 6c 04 00 00	 jmp	 $LN44@ReturnCalc
$LN37@ReturnCalc:

; 345  : 	case eSkill3:  Result = this->rUser[aIndex].SummonPet * this->rSkill[SkillID].StartDamage;		break;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00062	8b f2		 mov	 esi, edx
  00064	c1 e6 04	 shl	 esi, 4
  00067	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  0006a	03 f2		 add	 esi, edx
  0006c	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00073	c1 e7 05	 shl	 edi, 5
  00076	0f af 44 0f 4c	 imul	 eax, DWORD PTR [edi+ecx+76]
  0007b	e9 4b 04 00 00	 jmp	 $LN44@ReturnCalc
$LN36@ReturnCalc:

; 346  : 	case eSkill4:  Result = this->rUser[aIndex].WingsDamagePlus * this->rSkill[SkillID].StartDamage;		break;

  00080	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00083	8b f2		 mov	 esi, edx
  00085	c1 e6 04	 shl	 esi, 4
  00088	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  0008b	03 f2		 add	 esi, edx
  0008d	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00094	c1 e7 05	 shl	 edi, 5
  00097	0f af 44 0f 50	 imul	 eax, DWORD PTR [edi+ecx+80]
  0009c	e9 2a 04 00 00	 jmp	 $LN44@ReturnCalc
$LN35@ReturnCalc:

; 347  : 	case eSkill5:  Result = this->rUser[aIndex].FinalMana * this->rSkill[SkillID].StartDamage;		break;

  000a1	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000a4	8b f2		 mov	 esi, edx
  000a6	c1 e6 04	 shl	 esi, 4
  000a9	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  000ac	03 f2		 add	 esi, edx
  000ae	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  000b5	c1 e7 05	 shl	 edi, 5
  000b8	0f af 44 0f 54	 imul	 eax, DWORD PTR [edi+ecx+84]
  000bd	e9 09 04 00 00	 jmp	 $LN44@ReturnCalc
$LN34@ReturnCalc:

; 348  : 	case eSkill6:  Result = this->rUser[aIndex].IgnoreDefence * this->rSkill[SkillID].StartDamage;		break;

  000c2	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000c5	8b f2		 mov	 esi, edx
  000c7	c1 e6 04	 shl	 esi, 4
  000ca	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  000cd	03 f2		 add	 esi, edx
  000cf	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  000d6	c1 e7 05	 shl	 edi, 5
  000d9	0f af 44 0f 58	 imul	 eax, DWORD PTR [edi+ecx+88]
  000de	e9 e8 03 00 00	 jmp	 $LN44@ReturnCalc
$LN33@ReturnCalc:

; 349  : 	case eSkill7:  Result = this->rUser[aIndex].ResetLevel * this->rSkill[SkillID].StartDamage;		break;

  000e3	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000e6	8b f2		 mov	 esi, edx
  000e8	c1 e6 04	 shl	 esi, 4
  000eb	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  000ee	03 f2		 add	 esi, edx
  000f0	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  000f7	c1 e7 05	 shl	 edi, 5
  000fa	0f af 44 0f 5c	 imul	 eax, DWORD PTR [edi+ecx+92]
  000ff	e9 c7 03 00 00	 jmp	 $LN44@ReturnCalc
$LN32@ReturnCalc:

; 350  : 	case eSkill8:  Result = this->rUser[aIndex].Teleport * this->rSkill[SkillID].StartDamage;		break;

  00104	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00107	8b f2		 mov	 esi, edx
  00109	c1 e6 04	 shl	 esi, 4
  0010c	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  0010f	03 f2		 add	 esi, edx
  00111	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00118	c1 e7 05	 shl	 edi, 5
  0011b	0f af 44 0f 60	 imul	 eax, DWORD PTR [edi+ecx+96]
  00120	e9 a6 03 00 00	 jmp	 $LN44@ReturnCalc
$LN31@ReturnCalc:

; 351  : 	case eSkill9:  Result = this->rUser[aIndex].CriticalDamageRate * this->rSkill[SkillID].StartDamage;		break;

  00125	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00128	8b f2		 mov	 esi, edx
  0012a	c1 e6 04	 shl	 esi, 4
  0012d	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00130	03 f2		 add	 esi, edx
  00132	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00139	c1 e7 05	 shl	 edi, 5
  0013c	0f af 44 0f 64	 imul	 eax, DWORD PTR [edi+ecx+100]
  00141	e9 85 03 00 00	 jmp	 $LN44@ReturnCalc
$LN30@ReturnCalc:

; 352  : 	case eSkill10: Result = this->rUser[aIndex].AbsordDamage * this->rSkill[SkillID].StartDamage;	break;

  00146	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00149	8b f2		 mov	 esi, edx
  0014b	c1 e6 04	 shl	 esi, 4
  0014e	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00151	03 f2		 add	 esi, edx
  00153	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  0015a	c1 e7 05	 shl	 edi, 5
  0015d	0f af 44 0f 68	 imul	 eax, DWORD PTR [edi+ecx+104]
  00162	e9 64 03 00 00	 jmp	 $LN44@ReturnCalc
$LN29@ReturnCalc:

; 353  : 	case eSkill11: Result = this->rUser[aIndex].PetDamageBonus * this->rSkill[SkillID].StartDamage;	break;

  00167	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0016a	8b f2		 mov	 esi, edx
  0016c	c1 e6 04	 shl	 esi, 4
  0016f	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00172	03 f2		 add	 esi, edx
  00174	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  0017b	c1 e7 05	 shl	 edi, 5
  0017e	0f af 44 0f 6c	 imul	 eax, DWORD PTR [edi+ecx+108]
  00183	e9 43 03 00 00	 jmp	 $LN44@ReturnCalc
$LN28@ReturnCalc:

; 354  : 	case eSkill12: Result = this->rUser[aIndex].FinalLife * this->rSkill[SkillID].StartDamage;	break;

  00188	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0018b	8b f2		 mov	 esi, edx
  0018d	c1 e6 04	 shl	 esi, 4
  00190	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00193	03 f2		 add	 esi, edx
  00195	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  0019c	c1 e7 05	 shl	 edi, 5
  0019f	0f af 44 0f 70	 imul	 eax, DWORD PTR [edi+ecx+112]
  001a4	e9 22 03 00 00	 jmp	 $LN44@ReturnCalc
$LN27@ReturnCalc:

; 355  : 	case eSkill13: Result = this->rUser[aIndex].Strength * this->rSkill[SkillID].StartDamage;	break;

  001a9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001ac	8b f2		 mov	 esi, edx
  001ae	c1 e6 04	 shl	 esi, 4
  001b1	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  001b4	03 f2		 add	 esi, edx
  001b6	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  001bd	c1 e7 05	 shl	 edi, 5
  001c0	0f af 44 0f 74	 imul	 eax, DWORD PTR [edi+ecx+116]
  001c5	e9 01 03 00 00	 jmp	 $LN44@ReturnCalc
$LN26@ReturnCalc:

; 356  : 	case eSkill14: Result = this->rUser[aIndex].DefenceRate * this->rSkill[SkillID].StartDamage;	break;

  001ca	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001cd	8b f2		 mov	 esi, edx
  001cf	c1 e6 04	 shl	 esi, 4
  001d2	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  001d5	03 f2		 add	 esi, edx
  001d7	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  001de	c1 e7 05	 shl	 edi, 5
  001e1	0f af 44 0f 78	 imul	 eax, DWORD PTR [edi+ecx+120]
  001e6	e9 e0 02 00 00	 jmp	 $LN44@ReturnCalc
$LN25@ReturnCalc:

; 357  : 	case eSkill15: Result = this->rUser[aIndex].FireDamage * this->rSkill[SkillID].StartDamage;	break;

  001eb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001ee	8b f2		 mov	 esi, edx
  001f0	c1 e6 04	 shl	 esi, 4
  001f3	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  001f6	03 f2		 add	 esi, edx
  001f8	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  001ff	c1 e7 05	 shl	 edi, 5
  00202	0f af 44 0f 7c	 imul	 eax, DWORD PTR [edi+ecx+124]
  00207	e9 bf 02 00 00	 jmp	 $LN44@ReturnCalc
$LN24@ReturnCalc:

; 358  : 	case eSkill16: Result = this->rUser[aIndex].Energy * this->rSkill[SkillID].StartDamage;	break;

  0020c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0020f	8b f2		 mov	 esi, edx
  00211	c1 e6 04	 shl	 esi, 4
  00214	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00217	03 f2		 add	 esi, edx
  00219	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00220	c1 e7 05	 shl	 edi, 5
  00223	0f af 84 0f 80
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+128]
  0022b	e9 9b 02 00 00	 jmp	 $LN44@ReturnCalc
$LN23@ReturnCalc:

; 359  : 	case eSkill17: Result = this->rUser[aIndex].Agility * this->rSkill[SkillID].StartDamage;	break;

  00230	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00233	8b f2		 mov	 esi, edx
  00235	c1 e6 04	 shl	 esi, 4
  00238	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  0023b	03 f2		 add	 esi, edx
  0023d	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00244	c1 e7 05	 shl	 edi, 5
  00247	0f af 84 0f 84
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+132]
  0024f	e9 77 02 00 00	 jmp	 $LN44@ReturnCalc
$LN22@ReturnCalc:

; 360  : 	case eSkill18: Result = this->rUser[aIndex].DoubleDamage * this->rSkill[SkillID].StartDamage;	break;

  00254	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00257	8b f2		 mov	 esi, edx
  00259	c1 e6 04	 shl	 esi, 4
  0025c	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  0025f	03 f2		 add	 esi, edx
  00261	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00268	c1 e7 05	 shl	 edi, 5
  0026b	0f af 84 0f 88
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+136]
  00273	e9 53 02 00 00	 jmp	 $LN44@ReturnCalc
$LN21@ReturnCalc:

; 361  : 	case eSkill19: Result = this->rUser[aIndex].FinalSD * this->rSkill[SkillID].StartDamage;	break;

  00278	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0027b	8b f2		 mov	 esi, edx
  0027d	c1 e6 04	 shl	 esi, 4
  00280	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00283	03 f2		 add	 esi, edx
  00285	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  0028c	c1 e7 05	 shl	 edi, 5
  0028f	0f af 84 0f 8c
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+140]
  00297	e9 2f 02 00 00	 jmp	 $LN44@ReturnCalc
$LN20@ReturnCalc:

; 362  : 	case eSkill20: Result = this->rUser[aIndex].FinalDefence * this->rSkill[SkillID].StartDamage;	break;

  0029c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0029f	8b f2		 mov	 esi, edx
  002a1	c1 e6 04	 shl	 esi, 4
  002a4	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  002a7	03 f2		 add	 esi, edx
  002a9	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  002b0	c1 e7 05	 shl	 edi, 5
  002b3	0f af 84 0f 90
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+144]
  002bb	e9 0b 02 00 00	 jmp	 $LN44@ReturnCalc
$LN19@ReturnCalc:

; 363  : 	case eSkill21: Result = this->rUser[aIndex].ZenDrop * this->rSkill[SkillID].StartDamage;	break;

  002c0	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002c3	8b f2		 mov	 esi, edx
  002c5	c1 e6 04	 shl	 esi, 4
  002c8	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  002cb	03 f2		 add	 esi, edx
  002cd	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  002d4	c1 e7 05	 shl	 edi, 5
  002d7	0f af 84 0f 94
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+148]
  002df	e9 e7 01 00 00	 jmp	 $LN44@ReturnCalc
$LN18@ReturnCalc:

; 364  : 	case eSkill22: Result = this->rUser[aIndex].GuildBonus * this->rSkill[SkillID].StartDamage;	break;

  002e4	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  002e7	8b f2		 mov	 esi, edx
  002e9	c1 e6 04	 shl	 esi, 4
  002ec	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  002ef	03 f2		 add	 esi, edx
  002f1	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  002f8	c1 e7 05	 shl	 edi, 5
  002fb	0f af 84 0f 98
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+152]
  00303	e9 c3 01 00 00	 jmp	 $LN44@ReturnCalc
$LN17@ReturnCalc:

; 365  : 	case eSkill23: Result = this->rUser[aIndex].ReflectDamage * this->rSkill[SkillID].StartDamage;	break;

  00308	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0030b	8b f2		 mov	 esi, edx
  0030d	c1 e6 04	 shl	 esi, 4
  00310	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00313	03 f2		 add	 esi, edx
  00315	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  0031c	c1 e7 05	 shl	 edi, 5
  0031f	0f af 84 0f 9c
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+156]
  00327	e9 9f 01 00 00	 jmp	 $LN44@ReturnCalc
$LN16@ReturnCalc:

; 366  : 	case eSkill24: Result = this->rUser[aIndex].ExellentDamageRate * this->rSkill[SkillID].StartDamage;	break;

  0032c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0032f	8d 44 80 05	 lea	 eax, DWORD PTR [eax+eax*4+5]
  00333	8b f2		 mov	 esi, edx
  00335	c1 e0 05	 shl	 eax, 5
  00338	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0033b	c1 e6 04	 shl	 esi, 4
  0033e	03 f2		 add	 esi, edx
  00340	0f af 84 b1 64
	9f 24 00	 imul	 eax, DWORD PTR [ecx+esi*4+2400100]
  00348	e9 7e 01 00 00	 jmp	 $LN44@ReturnCalc
$LN15@ReturnCalc:

; 367  : 	case eSkill25: Result = this->rUser[aIndex].PvPBonusPlus * this->rSkill[SkillID].StartDamage;	break;

  0034d	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00350	8b f2		 mov	 esi, edx
  00352	c1 e6 04	 shl	 esi, 4
  00355	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00358	03 f2		 add	 esi, edx
  0035a	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00361	c1 e7 05	 shl	 edi, 5
  00364	0f af 84 0f a4
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+164]
  0036c	e9 5a 01 00 00	 jmp	 $LN44@ReturnCalc
$LN14@ReturnCalc:

; 368  : 	case eSkill26: Result = this->rUser[aIndex].MinDefence * this->rSkill[SkillID].StartDamage;	break;

  00371	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00374	8b f2		 mov	 esi, edx
  00376	c1 e6 04	 shl	 esi, 4
  00379	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  0037c	03 f2		 add	 esi, edx
  0037e	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00385	c1 e7 05	 shl	 edi, 5
  00388	0f af 84 0f a8
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+168]
  00390	e9 36 01 00 00	 jmp	 $LN44@ReturnCalc
$LN13@ReturnCalc:

; 369  : 	case eSkill27: Result = this->rUser[aIndex].Experience * this->rSkill[SkillID].StartDamage;	break;

  00395	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00398	8b f2		 mov	 esi, edx
  0039a	c1 e6 04	 shl	 esi, 4
  0039d	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  003a0	03 f2		 add	 esi, edx
  003a2	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  003a9	c1 e7 05	 shl	 edi, 5
  003ac	0f af 84 0f ac
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+172]
  003b4	e9 12 01 00 00	 jmp	 $LN44@ReturnCalc
$LN12@ReturnCalc:

; 370  : 	case eSkill28: Result = this->rUser[aIndex].StartSD * this->rSkill[SkillID].StartDamage;	break;

  003b9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  003bc	8b f2		 mov	 esi, edx
  003be	c1 e6 04	 shl	 esi, 4
  003c1	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  003c4	03 f2		 add	 esi, edx
  003c6	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  003cd	c1 e7 05	 shl	 edi, 5
  003d0	0f af 84 0f b0
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+176]
  003d8	e9 ee 00 00 00	 jmp	 $LN44@ReturnCalc
$LN11@ReturnCalc:

; 371  : 	case eSkill29: Result = this->rUser[aIndex].PartyBonus * this->rSkill[SkillID].StartDamage;	break;

  003dd	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  003e0	8b f2		 mov	 esi, edx
  003e2	c1 e6 04	 shl	 esi, 4
  003e5	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  003e8	03 f2		 add	 esi, edx
  003ea	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  003f1	c1 e7 05	 shl	 edi, 5
  003f4	0f af 84 0f b4
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+180]
  003fc	e9 ca 00 00 00	 jmp	 $LN44@ReturnCalc
$LN10@ReturnCalc:

; 372  : 	case eSkill30: Result = this->rUser[aIndex].IceDamage * this->rSkill[SkillID].StartDamage;	break;

  00401	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00404	8b f2		 mov	 esi, edx
  00406	c1 e6 04	 shl	 esi, 4
  00409	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  0040c	03 f2		 add	 esi, edx
  0040e	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00415	c1 e7 05	 shl	 edi, 5
  00418	0f af 84 0f b8
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+184]
  00420	e9 a6 00 00 00	 jmp	 $LN44@ReturnCalc
$LN9@ReturnCalc:

; 373  : 	case eSkill31: Result = this->rUser[aIndex].DistanceAttack * this->rSkill[SkillID].StartDamage;	break;

  00425	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00428	8b f2		 mov	 esi, edx
  0042a	c1 e6 04	 shl	 esi, 4
  0042d	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00430	03 f2		 add	 esi, edx
  00432	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  00439	c1 e7 05	 shl	 edi, 5
  0043c	0f af 84 0f bc
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+188]
  00444	e9 82 00 00 00	 jmp	 $LN44@ReturnCalc
$LN8@ReturnCalc:

; 374  : 	case eSkill32: Result = this->rUser[aIndex].AttackRate * this->rSkill[SkillID].StartDamage;	break;

  00449	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0044c	8b f2		 mov	 esi, edx
  0044e	c1 e6 04	 shl	 esi, 4
  00451	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00454	03 f2		 add	 esi, edx
  00456	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  0045d	c1 e7 05	 shl	 edi, 5
  00460	0f af 84 0f c0
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+192]
  00468	eb 61		 jmp	 SHORT $LN44@ReturnCalc
$LN7@ReturnCalc:

; 375  : 	case eSkill33: Result = this->rUser[aIndex].WeaponBonus * this->rSkill[SkillID].StartDamage;	break;

  0046a	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0046d	8b f2		 mov	 esi, edx
  0046f	c1 e6 04	 shl	 esi, 4
  00472	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00475	03 f2		 add	 esi, edx
  00477	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  0047e	c1 e7 05	 shl	 edi, 5
  00481	0f af 84 0f c4
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+196]
  00489	eb 40		 jmp	 SHORT $LN44@ReturnCalc
$LN6@ReturnCalc:

; 376  : 	case eSkill34: Result = this->rUser[aIndex].ExellentDamage * this->rSkill[SkillID].StartDamage;	break;

  0048b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0048e	8b f2		 mov	 esi, edx
  00490	c1 e6 04	 shl	 esi, 4
  00493	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  00496	03 f2		 add	 esi, edx
  00498	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  0049f	c1 e7 05	 shl	 edi, 5
  004a2	0f af 84 0f c8
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+200]
  004aa	eb 1f		 jmp	 SHORT $LN44@ReturnCalc
$LN5@ReturnCalc:

; 377  : 	case eSkill35: Result = this->rUser[aIndex].CriticalDamage * this->rSkill[SkillID].StartDamage;	break;

  004ac	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  004af	8b f2		 mov	 esi, edx
  004b1	c1 e6 04	 shl	 esi, 4
  004b4	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  004b7	03 f2		 add	 esi, edx
  004b9	8b 84 b1 64 9f
	24 00		 mov	 eax, DWORD PTR [ecx+esi*4+2400100]
  004c0	c1 e7 05	 shl	 edi, 5
  004c3	0f af 84 0f cc
	00 00 00	 imul	 eax, DWORD PTR [edi+ecx+204]
$LN44@ReturnCalc:
  004cb	5f		 pop	 edi
$LN40@ReturnCalc:

; 378  : 	}
; 379  : 
; 380  : 	if(Pw > 0)

  004cc	8b 75 10	 mov	 esi, DWORD PTR _Pw$[ebp]
  004cf	85 f6		 test	 esi, esi
  004d1	7e 05		 jle	 SHORT $LN4@ReturnCalc

; 381  : 	{
; 382  : #if(RAGE_DEBUG==1)
; 383  : 		LogAddC(2,"%s : ( %d * %d ) / 100 = %d",this->rSkill[SkillID].Name,Result,Pw,( Result * Pw ) / 100);
; 384  : #endif
; 385  : 		return ( Result * Pw ) / 100;

  004d3	0f af c6	 imul	 eax, esi
  004d6	eb 14		 jmp	 SHORT $LN45@ReturnCalc
$LN4@ReturnCalc:

; 386  : 	}
; 387  : 	else if(this->rSkill[SkillID].Percent == true)

  004d8	8b f2		 mov	 esi, edx
  004da	c1 e6 04	 shl	 esi, 4
  004dd	03 f2		 add	 esi, edx
  004df	80 bc b1 6c 9f
	24 00 01	 cmp	 BYTE PTR [ecx+esi*4+2400108], 1
  004e7	75 16		 jne	 SHORT $LN1@ReturnCalc

; 388  : 	{
; 389  : #if(RAGE_DEBUG==1)
; 390  : 		LogAddC(2,"%s : ( %d * 100 ) / 100 = %d",this->rSkill[SkillID].Name,Result,( Result * 100 ) / 100);
; 391  : #endif
; 392  : 		return ( Result * 100 ) / 100;

  004e9	6b c0 64	 imul	 eax, 100		; 00000064H
$LN45@ReturnCalc:
  004ec	8b c8		 mov	 ecx, eax
  004ee	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  004f3	f7 e9		 imul	 ecx
  004f5	c1 fa 05	 sar	 edx, 5
  004f8	8b c2		 mov	 eax, edx
  004fa	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004fd	03 c2		 add	 eax, edx
$LN1@ReturnCalc:
  004ff	5e		 pop	 esi

; 393  : 	}
; 394  : 	else
; 395  : 	{
; 396  : 		return Result;
; 397  : 	}
; 398  : }

  00500	5d		 pop	 ebp
  00501	c2 0c 00	 ret	 12			; 0000000cH
$LN46@ReturnCalc:
  00504	00 00 00 00	 DD	 $LN39@ReturnCalc
  00508	00 00 00 00	 DD	 $LN38@ReturnCalc
  0050c	00 00 00 00	 DD	 $LN37@ReturnCalc
  00510	00 00 00 00	 DD	 $LN36@ReturnCalc
  00514	00 00 00 00	 DD	 $LN35@ReturnCalc
  00518	00 00 00 00	 DD	 $LN34@ReturnCalc
  0051c	00 00 00 00	 DD	 $LN33@ReturnCalc
  00520	00 00 00 00	 DD	 $LN32@ReturnCalc
  00524	00 00 00 00	 DD	 $LN31@ReturnCalc
  00528	00 00 00 00	 DD	 $LN30@ReturnCalc
  0052c	00 00 00 00	 DD	 $LN29@ReturnCalc
  00530	00 00 00 00	 DD	 $LN28@ReturnCalc
  00534	00 00 00 00	 DD	 $LN27@ReturnCalc
  00538	00 00 00 00	 DD	 $LN26@ReturnCalc
  0053c	00 00 00 00	 DD	 $LN25@ReturnCalc
  00540	00 00 00 00	 DD	 $LN24@ReturnCalc
  00544	00 00 00 00	 DD	 $LN23@ReturnCalc
  00548	00 00 00 00	 DD	 $LN22@ReturnCalc
  0054c	00 00 00 00	 DD	 $LN21@ReturnCalc
  00550	00 00 00 00	 DD	 $LN20@ReturnCalc
  00554	00 00 00 00	 DD	 $LN19@ReturnCalc
  00558	00 00 00 00	 DD	 $LN18@ReturnCalc
  0055c	00 00 00 00	 DD	 $LN17@ReturnCalc
  00560	00 00 00 00	 DD	 $LN16@ReturnCalc
  00564	00 00 00 00	 DD	 $LN15@ReturnCalc
  00568	00 00 00 00	 DD	 $LN14@ReturnCalc
  0056c	00 00 00 00	 DD	 $LN13@ReturnCalc
  00570	00 00 00 00	 DD	 $LN12@ReturnCalc
  00574	00 00 00 00	 DD	 $LN11@ReturnCalc
  00578	00 00 00 00	 DD	 $LN10@ReturnCalc
  0057c	00 00 00 00	 DD	 $LN9@ReturnCalc
  00580	00 00 00 00	 DD	 $LN8@ReturnCalc
  00584	00 00 00 00	 DD	 $LN7@ReturnCalc
  00588	00 00 00 00	 DD	 $LN6@ReturnCalc
  0058c	00 00 00 00	 DD	 $LN5@ReturnCalc
?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ENDP		; cSystemOfRage::ReturnCalc
_TEXT	ENDS
PUBLIC	?DataRecv@cSystemOfRage@@QAEXPAUClickSend@@H@Z	; cSystemOfRage::DataRecv
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Ogtp
;	COMDAT ?DataRecv@cSystemOfRage@@QAEXPAUClickSend@@H@Z
_TEXT	SEGMENT
_rSend$205023 = -8					; size = 8
_iSkill$ = -4						; size = 4
_aRecv$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?DataRecv@cSystemOfRage@@QAEXPAUClickSend@@H@Z PROC	; cSystemOfRage::DataRecv, COMDAT
; _this$ = ecx

; 401  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 402  : 	int iSkill = aRecv->SkillID;

  00006	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00009	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi

; 403  : 
; 404  : 	if(this->rUser[aIndex].rPoints > 0 && this->rSkill[iSkill].MaxPoint > this->ReturnPoint(aIndex,iSkill))

  0000f	8b 75 0c	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00012	57		 push	 edi
  00013	8b f9		 mov	 edi, ecx
  00015	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00018	c1 e1 05	 shl	 ecx, 5
  0001b	83 7c 39 38 00	 cmp	 DWORD PTR [ecx+edi+56], 0
  00020	8d 5c 39 38	 lea	 ebx, DWORD PTR [ecx+edi+56]
  00024	89 45 fc	 mov	 DWORD PTR _iSkill$[ebp], eax
  00027	7e 5c		 jle	 SHORT $LN2@DataRecv
  00029	50		 push	 eax
  0002a	56		 push	 esi
  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ?ReturnPoint@cSystemOfRage@@QAEHHH@Z ; cSystemOfRage::ReturnPoint
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  00035	8b d1		 mov	 edx, ecx
  00037	c1 e2 04	 shl	 edx, 4
  0003a	03 d1		 add	 edx, ecx
  0003c	39 84 97 68 9f
	24 00		 cmp	 DWORD PTR [edi+edx*4+2400104], eax
  00043	7e 40		 jle	 SHORT $LN2@DataRecv

; 405  : 	{
; 406  : 		this->rUser[aIndex].rPoints--;

  00045	ff 0b		 dec	 DWORD PTR [ebx]

; 407  : 		this->FilterSkill(aIndex,iSkill);

  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?FilterSkill@cSystemOfRage@@QAEXHH@Z ; cSystemOfRage::FilterSkill

; 408  : 
; 409  : 		ClickSend rSend;
; 410  : 		rSend.h.set((LPBYTE)&rSend, 0xFB, 1, sizeof(rSend));

  00050	b0 01		 mov	 al, 1

; 411  : 		rSend.Click = 1;

  00052	88 45 fc	 mov	 BYTE PTR _rSend$205023[ebp+4], al

; 412  : 		rSend.SkillID = aRecv->SkillID;

  00055	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00058	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]

; 413  : 		DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  0005c	6a 08		 push	 8
  0005e	8d 55 f8	 lea	 edx, DWORD PTR _rSend$205023[ebp]
  00061	52		 push	 edx
  00062	56		 push	 esi
  00063	c7 45 f8 c1 08
	fb 01		 mov	 DWORD PTR _rSend$205023[ebp], 33228993 ; 01fb08c1H
  0006a	66 89 4d fe	 mov	 WORD PTR _rSend$205023[ebp+6], cx
  0006e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 414  : 		gObjCalCharacter(aIndex);

  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00079	83 c4 10	 add	 esp, 16			; 00000010H
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 419  : 	}
; 420  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
$LN2@DataRecv:

; 415  : 	}
; 416  : 	else
; 417  : 	{
; 418  : 		CloseClient(aIndex);

  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  0008b	83 c4 04	 add	 esp, 4
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx

; 419  : 	}
; 420  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
?DataRecv@cSystemOfRage@@QAEXPAUClickSend@@H@Z ENDP	; cSystemOfRage::DataRecv
_TEXT	ENDS
PUBLIC	?CalcCharacter@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::CalcCharacter
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjWingSprite
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?CalcCharacter@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?CalcCharacter@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::CalcCharacter, COMDAT
; _this$ = ecx

; 423  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 424  : 	if(!Enable)return;

  00006	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  00009	0f 84 c6 04 00
	00		 je	 $LN1@CalcCharac

; 425  : 	LPOBJ lpObj = &gObj[aIndex];

  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00014	8b f7		 mov	 esi, edi
  00016	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001c	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 426  : 	//Damage
; 427  : 	lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill1,0);	// 6

  00022	6a 00		 push	 0
  00024	6a 01		 push	 1
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0002c	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 428  : 	lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill1,0);// 4

  00032	6a 00		 push	 0
  00034	6a 01		 push	 1
  00036	57		 push	 edi
  00037	8b cb		 mov	 ecx, ebx
  00039	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0003e	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 429  : 	lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill1,0);	// 6

  00044	6a 00		 push	 0
  00046	6a 01		 push	 1
  00048	57		 push	 edi
  00049	8b cb		 mov	 ecx, ebx
  0004b	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00050	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 430  : 	lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill1,0);	// 4

  00056	6a 00		 push	 0
  00058	6a 01		 push	 1
  0005a	57		 push	 edi
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00062	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 431  : 	lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill1,0);

  00068	6a 00		 push	 0
  0006a	6a 01		 push	 1
  0006c	57		 push	 edi
  0006d	8b cb		 mov	 ecx, ebx
  0006f	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00074	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax

; 432  : 	lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill1,0);

  0007a	6a 00		 push	 0
  0007c	6a 01		 push	 1
  0007e	57		 push	 edi
  0007f	8b cb		 mov	 ecx, ebx
  00081	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00086	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 433  : 	//WingsDamagePlus
; 434  : 	if(gObjWingSprite(lpObj))

  0008c	56		 push	 esi
  0008d	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  00092	83 c4 04	 add	 esp, 4
  00095	85 c0		 test	 eax, eax
  00097	74 6c		 je	 SHORT $LN12@CalcCharac

; 435  : 	{
; 436  : 		lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill4,0);

  00099	6a 00		 push	 0
  0009b	6a 04		 push	 4
  0009d	57		 push	 edi
  0009e	8b cb		 mov	 ecx, ebx
  000a0	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000a5	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 437  : 		lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill4,0);

  000ab	6a 00		 push	 0
  000ad	6a 04		 push	 4
  000af	57		 push	 edi
  000b0	8b cb		 mov	 ecx, ebx
  000b2	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000b7	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 438  : 		lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill4,0);

  000bd	6a 00		 push	 0
  000bf	6a 04		 push	 4
  000c1	57		 push	 edi
  000c2	8b cb		 mov	 ecx, ebx
  000c4	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000c9	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 439  : 		lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill4,0);

  000cf	6a 00		 push	 0
  000d1	6a 04		 push	 4
  000d3	57		 push	 edi
  000d4	8b cb		 mov	 ecx, ebx
  000d6	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000db	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 440  : 		lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill4,0);

  000e1	6a 00		 push	 0
  000e3	6a 04		 push	 4
  000e5	57		 push	 edi
  000e6	8b cb		 mov	 ecx, ebx
  000e8	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000ed	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax

; 441  : 		lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill4,0);

  000f3	6a 00		 push	 0
  000f5	6a 04		 push	 4
  000f7	57		 push	 edi
  000f8	8b cb		 mov	 ecx, ebx
  000fa	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000ff	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax
$LN12@CalcCharac:

; 442  : 	}
; 443  : 	//FinalMana
; 444  : 	lpObj->AddMana +=  this->ReturnCalc(aIndex, eSkill5,(lpObj->Mana));

  00105	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  0010b	e8 00 00 00 00	 call	 __ftol2_sse
  00110	50		 push	 eax
  00111	6a 05		 push	 5
  00113	57		 push	 edi
  00114	8b cb		 mov	 ecx, ebx
  00116	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0011b	01 86 50 01 00
	00		 add	 DWORD PTR [esi+336], eax

; 445  : 	//IgnoreDefence
; 446  : 	lpObj->SetOpIgnoreDefense += this->ReturnCalc(aIndex, eSkill6,0);

  00121	6a 00		 push	 0
  00123	6a 06		 push	 6
  00125	57		 push	 edi
  00126	8b cb		 mov	 ecx, ebx
  00128	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0012d	00 86 3e 11 00
	00		 add	 BYTE PTR [esi+4414], al

; 447  : 	if(lpObj->SetOpIgnoreDefense>90)

  00133	80 be 3e 11 00
	00 5a		 cmp	 BYTE PTR [esi+4414], 90	; 0000005aH
  0013a	76 07		 jbe	 SHORT $LN11@CalcCharac

; 448  : 	{
; 449  : 		lpObj->SetOpIgnoreDefense = 90;

  0013c	c6 86 3e 11 00
	00 5a		 mov	 BYTE PTR [esi+4414], 90	; 0000005aH
$LN11@CalcCharac:

; 450  : 	}
; 451  : 	//CriticalDamageRate
; 452  : 	lpObj->m_CriticalDamage += this->ReturnCalc(aIndex, eSkill9,0);

  00143	6a 00		 push	 0
  00145	6a 09		 push	 9
  00147	57		 push	 edi
  00148	8b cb		 mov	 ecx, ebx
  0014a	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0014f	01 86 bc 04 00
	00		 add	 DWORD PTR [esi+1212], eax

; 453  : 	if(lpObj->m_CriticalDamage>90)

  00155	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH
  0015a	39 86 bc 04 00
	00		 cmp	 DWORD PTR [esi+1212], eax
  00160	7e 06		 jle	 SHORT $LN10@CalcCharac

; 454  : 	{
; 455  : 		lpObj->m_CriticalDamage = 90;

  00162	89 86 bc 04 00
	00		 mov	 DWORD PTR [esi+1212], eax
$LN10@CalcCharac:

; 456  : 	}
; 457  : 	//AbsordDamage
; 458  : 	lpObj->DamageMinus += this->ReturnCalc(aIndex, eSkill10,0);	//DeBug Error Fix

  00168	6a 00		 push	 0
  0016a	6a 0a		 push	 10			; 0000000aH
  0016c	57		 push	 edi
  0016d	8b cb		 mov	 ecx, ebx
  0016f	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00174	00 86 70 01 00
	00		 add	 BYTE PTR [esi+368], al

; 459  : 	if(lpObj->DamageMinus > 50)

  0017a	80 be 70 01 00
	00 32		 cmp	 BYTE PTR [esi+368], 50	; 00000032H
  00181	76 07		 jbe	 SHORT $LN9@CalcCharac

; 460  : 	{
; 461  : 		lpObj->DamageMinus = 50;

  00183	c6 86 70 01 00
	00 32		 mov	 BYTE PTR [esi+368], 50	; 00000032H
$LN9@CalcCharac:

; 462  : 	}
; 463  : 	//PetDamageBonus
; 464  : 	if(lpObj->pInventory[8].IsItem())

  0018a	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00190	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  00196	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0019b	85 c0		 test	 eax, eax
  0019d	74 6c		 je	 SHORT $LN8@CalcCharac

; 465  : 	{
; 466  : 		lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill11,0);

  0019f	6a 00		 push	 0
  001a1	6a 0b		 push	 11			; 0000000bH
  001a3	57		 push	 edi
  001a4	8b cb		 mov	 ecx, ebx
  001a6	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  001ab	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 467  : 		lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill11,0);

  001b1	6a 00		 push	 0
  001b3	6a 0b		 push	 11			; 0000000bH
  001b5	57		 push	 edi
  001b6	8b cb		 mov	 ecx, ebx
  001b8	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  001bd	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 468  : 		lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill11,0);

  001c3	6a 00		 push	 0
  001c5	6a 0b		 push	 11			; 0000000bH
  001c7	57		 push	 edi
  001c8	8b cb		 mov	 ecx, ebx
  001ca	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  001cf	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 469  : 		lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill11,0);

  001d5	6a 00		 push	 0
  001d7	6a 0b		 push	 11			; 0000000bH
  001d9	57		 push	 edi
  001da	8b cb		 mov	 ecx, ebx
  001dc	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  001e1	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 470  : 		lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill11,0);

  001e7	6a 00		 push	 0
  001e9	6a 0b		 push	 11			; 0000000bH
  001eb	57		 push	 edi
  001ec	8b cb		 mov	 ecx, ebx
  001ee	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  001f3	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax

; 471  : 		lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill11,0);

  001f9	6a 00		 push	 0
  001fb	6a 0b		 push	 11			; 0000000bH
  001fd	57		 push	 edi
  001fe	8b cb		 mov	 ecx, ebx
  00200	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00205	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax
$LN8@CalcCharac:

; 472  : 	}
; 473  : 	//FinalLife
; 474  : 	int iAddFinallife = this->ReturnCalc(aIndex, eSkill12,(lpObj->MaxLife+lpObj->AddLife));
; 475  : 	lpObj->AddLife += iAddFinallife;

  0020b	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00211	da 86 4c 01 00
	00		 fiadd	 DWORD PTR [esi+332]
  00217	e8 00 00 00 00	 call	 __ftol2_sse
  0021c	50		 push	 eax
  0021d	6a 0c		 push	 12			; 0000000cH
  0021f	57		 push	 edi
  00220	8b cb		 mov	 ecx, ebx
  00222	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00227	01 86 4c 01 00
	00		 add	 DWORD PTR [esi+332], eax

; 476  : 	//DoubleDamage
; 477  : 	lpObj->SetOpDoubleDamage +=  this->ReturnCalc(aIndex, eSkill18,0);

  0022d	6a 00		 push	 0
  0022f	6a 12		 push	 18			; 00000012H
  00231	57		 push	 edi
  00232	8b cb		 mov	 ecx, ebx
  00234	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00239	00 86 3f 11 00
	00		 add	 BYTE PTR [esi+4415], al

; 478  : 	//FinalSD
; 479  : 	lpObj->iAddShield += this->ReturnCalc(aIndex, eSkill19,(lpObj->iMaxShield+lpObj->iAddShield));

  0023f	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  00245	03 86 5c 01 00
	00		 add	 eax, DWORD PTR [esi+348]
  0024b	8b cb		 mov	 ecx, ebx
  0024d	50		 push	 eax
  0024e	6a 13		 push	 19			; 00000013H
  00250	57		 push	 edi
  00251	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc

; 480  : 	//FinalDefence
; 481  : 	lpObj->m_Defense += this->ReturnCalc(aIndex, eSkill20,lpObj->m_Defense);

  00256	8b 8e 94 04 00
	00		 mov	 ecx, DWORD PTR [esi+1172]
  0025c	01 86 5c 01 00
	00		 add	 DWORD PTR [esi+348], eax
  00262	51		 push	 ecx
  00263	6a 14		 push	 20			; 00000014H
  00265	57		 push	 edi
  00266	8b cb		 mov	 ecx, ebx
  00268	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0026d	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 482  : 
; 483  : 	//GuildBonus
; 484  : 	if ( lpObj->GuildNumber > 0 )

  00273	83 be 34 04 00
	00 00		 cmp	 DWORD PTR [esi+1076], 0
  0027a	7e 30		 jle	 SHORT $LN7@CalcCharac

; 485  : 	{
; 486  : 		lpObj->AddLife += this->ReturnCalc(aIndex, eSkill22,0);

  0027c	6a 00		 push	 0
  0027e	6a 16		 push	 22			; 00000016H
  00280	57		 push	 edi
  00281	8b cb		 mov	 ecx, ebx
  00283	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00288	03 86 4c 01 00
	00		 add	 eax, DWORD PTR [esi+332]

; 487  : 		lpObj->m_Defense += this->ReturnCalc(aIndex, eSkill22,0);

  0028e	6a 00		 push	 0
  00290	6a 16		 push	 22			; 00000016H
  00292	57		 push	 edi
  00293	8b cb		 mov	 ecx, ebx
  00295	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax
  0029b	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  002a0	03 86 94 04 00
	00		 add	 eax, DWORD PTR [esi+1172]
  002a6	89 86 94 04 00
	00		 mov	 DWORD PTR [esi+1172], eax
$LN7@CalcCharac:

; 488  : 	}
; 489  : 	//ReflectDamage
; 490  : 	lpObj->DamageReflect += this->ReturnCalc(aIndex, eSkill23,0);

  002ac	6a 00		 push	 0
  002ae	6a 17		 push	 23			; 00000017H
  002b0	57		 push	 edi
  002b1	8b cb		 mov	 ecx, ebx
  002b3	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  002b8	00 86 71 01 00
	00		 add	 BYTE PTR [esi+369], al

; 491  : 	if(lpObj->DamageReflect>90)

  002be	80 be 71 01 00
	00 5a		 cmp	 BYTE PTR [esi+369], 90	; 0000005aH
  002c5	76 07		 jbe	 SHORT $LN6@CalcCharac

; 492  : 	{
; 493  : 		lpObj->DamageReflect = 90;

  002c7	c6 86 71 01 00
	00 5a		 mov	 BYTE PTR [esi+369], 90	; 0000005aH
$LN6@CalcCharac:

; 494  : 	}
; 495  : 	//MinDefence
; 496  : 	lpObj->m_Defense += this->ReturnCalc(aIndex, eSkill26,0);

  002ce	6a 00		 push	 0
  002d0	6a 1a		 push	 26			; 0000001aH
  002d2	57		 push	 edi
  002d3	8b cb		 mov	 ecx, ebx
  002d5	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  002da	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 497  : 	//StartSD
; 498  : 	lpObj->iAddShield += this->ReturnCalc(aIndex, eSkill28,0);

  002e0	6a 00		 push	 0
  002e2	6a 1c		 push	 28			; 0000001cH
  002e4	57		 push	 edi
  002e5	8b cb		 mov	 ecx, ebx
  002e7	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  002ec	03 86 5c 01 00
	00		 add	 eax, DWORD PTR [esi+348]

; 499  : 	//PartyBonus
; 500  : 	if(lpObj->PartyNumber >= 0)

  002f2	83 be 2c 04 00
	00 00		 cmp	 DWORD PTR [esi+1068], 0
  002f9	89 86 5c 01 00
	00		 mov	 DWORD PTR [esi+348], eax
  002ff	7c 7e		 jl	 SHORT $LN5@CalcCharac

; 501  : 	{
; 502  : 		lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill29,0);

  00301	6a 00		 push	 0
  00303	6a 1d		 push	 29			; 0000001dH
  00305	57		 push	 edi
  00306	8b cb		 mov	 ecx, ebx
  00308	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0030d	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 503  : 		lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill29,0);

  00313	6a 00		 push	 0
  00315	6a 1d		 push	 29			; 0000001dH
  00317	57		 push	 edi
  00318	8b cb		 mov	 ecx, ebx
  0031a	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0031f	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 504  : 		lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill29,0);

  00325	6a 00		 push	 0
  00327	6a 1d		 push	 29			; 0000001dH
  00329	57		 push	 edi
  0032a	8b cb		 mov	 ecx, ebx
  0032c	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00331	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 505  : 		lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill29,0);

  00337	6a 00		 push	 0
  00339	6a 1d		 push	 29			; 0000001dH
  0033b	57		 push	 edi
  0033c	8b cb		 mov	 ecx, ebx
  0033e	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00343	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 506  : 		lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill29,0);

  00349	6a 00		 push	 0
  0034b	6a 1d		 push	 29			; 0000001dH
  0034d	57		 push	 edi
  0034e	8b cb		 mov	 ecx, ebx
  00350	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00355	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax

; 507  : 		lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill29,0);

  0035b	6a 00		 push	 0
  0035d	6a 1d		 push	 29			; 0000001dH
  0035f	57		 push	 edi
  00360	8b cb		 mov	 ecx, ebx
  00362	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00367	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 508  : 		lpObj->AddLife += this->ReturnCalc(aIndex, eSkill29,0);

  0036d	6a 00		 push	 0
  0036f	6a 1d		 push	 29			; 0000001dH
  00371	57		 push	 edi
  00372	8b cb		 mov	 ecx, ebx
  00374	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00379	01 86 4c 01 00
	00		 add	 DWORD PTR [esi+332], eax
$LN5@CalcCharac:

; 509  : 	}
; 510  : 	//WeaponBonus
; 511  : 	if(lpObj->pInventory[0].IsItem() || lpObj->pInventory[1].IsItem())

  0037f	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00385	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0038a	85 c0		 test	 eax, eax
  0038c	75 15		 jne	 SHORT $LN3@CalcCharac
  0038e	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00394	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  0039a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0039f	85 c0		 test	 eax, eax
  003a1	74 6c		 je	 SHORT $LN4@CalcCharac
$LN3@CalcCharac:

; 512  : 	{
; 513  : 		lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill33,0);

  003a3	6a 00		 push	 0
  003a5	6a 21		 push	 33			; 00000021H
  003a7	57		 push	 edi
  003a8	8b cb		 mov	 ecx, ebx
  003aa	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  003af	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 514  : 		lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill33,0);

  003b5	6a 00		 push	 0
  003b7	6a 21		 push	 33			; 00000021H
  003b9	57		 push	 edi
  003ba	8b cb		 mov	 ecx, ebx
  003bc	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  003c1	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 515  : 		lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill33,0);

  003c7	6a 00		 push	 0
  003c9	6a 21		 push	 33			; 00000021H
  003cb	57		 push	 edi
  003cc	8b cb		 mov	 ecx, ebx
  003ce	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  003d3	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 516  : 		lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill33,0);

  003d9	6a 00		 push	 0
  003db	6a 21		 push	 33			; 00000021H
  003dd	57		 push	 edi
  003de	8b cb		 mov	 ecx, ebx
  003e0	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  003e5	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 517  : 		lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill33,0);

  003eb	6a 00		 push	 0
  003ed	6a 21		 push	 33			; 00000021H
  003ef	57		 push	 edi
  003f0	8b cb		 mov	 ecx, ebx
  003f2	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  003f7	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax

; 518  : 		lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill33,0);

  003fd	6a 00		 push	 0
  003ff	6a 21		 push	 33			; 00000021H
  00401	57		 push	 edi
  00402	8b cb		 mov	 ecx, ebx
  00404	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00409	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax
$LN4@CalcCharac:

; 519  : 	}
; 520  : 	//ExellentDamageRate
; 521  : 	lpObj->m_ExcelentDamage += this->ReturnCalc(aIndex, eSkill24,0);		

  0040f	6a 00		 push	 0
  00411	6a 18		 push	 24			; 00000018H
  00413	57		 push	 edi
  00414	8b cb		 mov	 ecx, ebx
  00416	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0041b	01 86 c0 04 00
	00		 add	 DWORD PTR [esi+1216], eax

; 522  : 	if(lpObj->m_ExcelentDamage>90)

  00421	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH
  00426	39 86 c0 04 00
	00		 cmp	 DWORD PTR [esi+1216], eax
  0042c	7e 06		 jle	 SHORT $LN2@CalcCharac

; 523  : 	{
; 524  : 		lpObj->m_ExcelentDamage = 90;

  0042e	89 86 c0 04 00
	00		 mov	 DWORD PTR [esi+1216], eax
$LN2@CalcCharac:

; 525  : 	}
; 526  : 
; 527  : 	//LPOBJ lpObj =&gObj[aIndex];
; 528  : 	//if(SkillID == eSkill2)
; 529  : 	//{
; 530  : 	//	lpObj->LevelUpPoint += this->rSkill[eSkill2].StartDamage; 
; 531  : 	//	lpObj->ZtFreePoints += this->rSkill[eSkill2].StartDamage;
; 532  : 	//}
; 533  : 	//Fix Debug
; 534  : 	//Strength
; 535  : 	lpObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill13,0);

  00434	6a 00		 push	 0
  00436	6a 0d		 push	 13			; 0000000dH
  00438	57		 push	 edi
  00439	8b cb		 mov	 ecx, ebx
  0043b	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00440	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 536  : 	lpObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill13,0);

  00446	6a 00		 push	 0
  00448	6a 0d		 push	 13			; 0000000dH
  0044a	57		 push	 edi
  0044b	8b cb		 mov	 ecx, ebx
  0044d	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00452	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 537  : 	lpObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill13,0);

  00458	6a 00		 push	 0
  0045a	6a 0d		 push	 13			; 0000000dH
  0045c	57		 push	 edi
  0045d	8b cb		 mov	 ecx, ebx
  0045f	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00464	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 538  : 	lpObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill13,0);

  0046a	6a 00		 push	 0
  0046c	6a 0d		 push	 13			; 0000000dH
  0046e	57		 push	 edi
  0046f	8b cb		 mov	 ecx, ebx
  00471	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00476	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 539  : 	//if(SkillID == eSkill13)
; 540  : 	//{
; 541  : 	//	lpObj->Strength += this->rSkill[SkillID].StartDamage;
; 542  : 	//}
; 543  : 	////Energy
; 544  : 	lpObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill16,0);

  0047c	6a 00		 push	 0
  0047e	6a 10		 push	 16			; 00000010H
  00480	57		 push	 edi
  00481	8b cb		 mov	 ecx, ebx
  00483	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00488	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax

; 545  : 	lpObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill16,0);

  0048e	6a 00		 push	 0
  00490	6a 10		 push	 16			; 00000010H
  00492	57		 push	 edi
  00493	8b cb		 mov	 ecx, ebx
  00495	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0049a	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 546  : 	//if(SkillID == eSkill16)
; 547  : 	//{
; 548  : 	//	lpObj->Energy += this->rSkill[SkillID].StartDamage;
; 549  : 	//}
; 550  : 	////Agility
; 551  : 	if(lpObj->pInventory[1].m_Type >= ITEMGET(6,0) && lpObj->pInventory[1].m_Type <= ITEMGET(6,255))

  004a0	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  004a6	0f b7 82 da 00
	00 00		 movzx	 eax, WORD PTR [edx+218]
  004ad	b9 00 0c 00 00	 mov	 ecx, 3072		; 00000c00H
  004b2	66 3b c1	 cmp	 ax, cx
  004b5	7c 1c		 jl	 SHORT $LN16@CalcCharac
  004b7	ba ff 0c 00 00	 mov	 edx, 3327		; 00000cffH
  004bc	66 3b c2	 cmp	 ax, dx
  004bf	7f 12		 jg	 SHORT $LN16@CalcCharac

; 552  : 	{
; 553  : 		lpObj->m_Defense += this->ReturnCalc(aIndex, eSkill17,0);

  004c1	6a 00		 push	 0
  004c3	6a 11		 push	 17			; 00000011H
  004c5	57		 push	 edi
  004c6	8b cb		 mov	 ecx, ebx
  004c8	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  004cd	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax
$LN16@CalcCharac:
  004d3	5f		 pop	 edi
  004d4	5e		 pop	 esi
$LN1@CalcCharac:
  004d5	5b		 pop	 ebx

; 554  : 	}
; 555  : 	//if(SkillID == eSkill17)
; 556  : 	//{
; 557  : 	//	lpObj->Dexterity += this->ReturnCalc(aIndex, SkillID,0);
; 558  : 	//}
; 559  : }

  004d6	5d		 pop	 ebp
  004d7	c2 04 00	 ret	 4
?CalcCharacter@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::CalcCharacter
_TEXT	ENDS
PUBLIC	?SummonPetSkill@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::SummonPetSkill
EXTRN	?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z:PROC	; CObjUseSkill::SkillMonsterCall
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
; Function compile flags: /Ogtp
;	COMDAT ?SummonPetSkill@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?SummonPetSkill@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::SummonPetSkill, COMDAT
; _this$ = ecx

; 562  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 563  : 	LPOBJ lpObj = &gObj[aIndex];

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	53		 push	 ebx
  00009	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0000c	56		 push	 esi
  0000d	8b f3		 mov	 esi, ebx
  0000f	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 564  : 	gObjUseSkill.SkillMonsterCall(lpObj->m_Index,this->CreateMob,lpObj->X-1,lpObj->Y+1);

  00015	0f bf 94 06 44
	01 00 00	 movsx	 edx, WORD PTR [esi+eax+324]
  0001d	57		 push	 edi
  0001e	8b f9		 mov	 edi, ecx
  00020	0f bf 8c 06 46
	01 00 00	 movsx	 ecx, WORD PTR [esi+eax+326]
  00028	41		 inc	 ecx
  00029	51		 push	 ecx
  0002a	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0002d	4a		 dec	 edx
  0002e	52		 push	 edx
  0002f	8b 14 06	 mov	 edx, DWORD PTR [esi+eax]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  00039	e8 00 00 00 00	 call	 ?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z ; CObjUseSkill::SkillMonsterCall

; 565  : 
; 566  : 	int mIndex = gObj[aIndex].m_RecallMon;
; 567  : 	LPOBJ mObj = &gObj[mIndex];

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00043	8b b4 06 50 04
	00 00		 mov	 esi, DWORD PTR [esi+eax+1104]
  0004a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 568  : 
; 569  : 	mObj->m_AttackDamageMin += this->ReturnCalc(aIndex, eSkill3,0);

  00050	6a 00		 push	 0
  00052	6a 03		 push	 3
  00054	53		 push	 ebx
  00055	8b cf		 mov	 ecx, edi
  00057	03 f0		 add	 esi, eax
  00059	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0005e	01 86 60 04 00
	00		 add	 DWORD PTR [esi+1120], eax

; 570  : 	mObj->m_AttackDamageMax += this->ReturnCalc(aIndex, eSkill3,0);

  00064	6a 00		 push	 0
  00066	6a 03		 push	 3
  00068	53		 push	 ebx
  00069	8b cf		 mov	 ecx, edi
  0006b	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00070	01 86 64 04 00
	00		 add	 DWORD PTR [esi+1124], eax

; 571  : 	mObj->m_AttackDamageMinRight += this->ReturnCalc(aIndex, eSkill3,0);

  00076	6a 00		 push	 0
  00078	6a 03		 push	 3
  0007a	53		 push	 ebx
  0007b	8b cf		 mov	 ecx, edi
  0007d	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00082	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 572  : 	mObj->m_AttackDamageMaxRight += this->ReturnCalc(aIndex, eSkill3,0);

  00088	6a 00		 push	 0
  0008a	6a 03		 push	 3
  0008c	53		 push	 ebx
  0008d	8b cf		 mov	 ecx, edi
  0008f	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00094	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 573  : 	mObj->m_AttackDamageMinLeft += this->ReturnCalc(aIndex, eSkill3,0);

  0009a	6a 00		 push	 0
  0009c	6a 03		 push	 3
  0009e	53		 push	 ebx
  0009f	8b cf		 mov	 ecx, edi
  000a1	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000a6	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 574  : 	mObj->m_AttackDamageMaxLeft += this->ReturnCalc(aIndex, eSkill3,0);

  000ac	6a 00		 push	 0
  000ae	6a 03		 push	 3
  000b0	53		 push	 ebx
  000b1	8b cf		 mov	 ecx, edi
  000b3	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000b8	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 575  : 	mObj->m_MagicDamageMin += this->ReturnCalc(aIndex, eSkill3,0);

  000be	6a 00		 push	 0
  000c0	6a 03		 push	 3
  000c2	53		 push	 ebx
  000c3	8b cf		 mov	 ecx, edi
  000c5	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000ca	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax

; 576  : 	mObj->m_MagicDamageMax += this->ReturnCalc(aIndex, eSkill3,0);

  000d0	6a 00		 push	 0
  000d2	6a 03		 push	 3
  000d4	53		 push	 ebx
  000d5	8b cf		 mov	 ecx, edi
  000d7	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000dc	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 577  : 	mObj->m_Defense += this->ReturnCalc(aIndex, eSkill3,0);

  000e2	6a 00		 push	 0
  000e4	6a 03		 push	 3
  000e6	53		 push	 ebx
  000e7	8b cf		 mov	 ecx, edi
  000e9	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000ee	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 578  : }

  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
?SummonPetSkill@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::SummonPetSkill
_TEXT	ENDS
PUBLIC	?TeleportSkill@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::TeleportSkill
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
; Function compile flags: /Ogtp
;	COMDAT ?TeleportSkill@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?TeleportSkill@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::TeleportSkill, COMDAT
; _this$ = ecx

; 581  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 	gObjTeleport(aIndex, this->TeleportMap, this->TeleportX, this->TeleportY);

  00003	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00009	50		 push	 eax
  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 583  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?TeleportSkill@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::TeleportSkill
_TEXT	ENDS
PUBLIC	?CalcStats@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::CalcStats
; Function compile flags: /Ogtp
;	COMDAT ?CalcStats@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?CalcStats@cSystemOfRage@@QAEXH@Z PROC			; cSystemOfRage::CalcStats, COMDAT
; _this$ = ecx

; 587  : 	//Fix
; 588  : 	//LPOBJ lpObj = &gObj[aIndex];
; 589  : 	////Strength
; 590  : 	//lpObj->AddStrength += this->ReturnCalc(aIndex, eSkill13,0);
; 591  : 	////Energy
; 592  : 	//lpObj->AddEnergy += this->ReturnCalc(aIndex, eSkill16,0);
; 593  : 	////Agility
; 594  : 	//lpObj->AddDexterity += this->ReturnCalc(aIndex, eSkill17,0);
; 595  : }

  00000	c2 04 00	 ret	 4
?CalcStats@cSystemOfRage@@QAEXH@Z ENDP			; cSystemOfRage::CalcStats
_TEXT	ENDS
PUBLIC	?DropZen@cSystemOfRage@@QAEXHAAM@Z		; cSystemOfRage::DropZen
; Function compile flags: /Ogtp
;	COMDAT ?DropZen@cSystemOfRage@@QAEXHAAM@Z
_TEXT	SEGMENT
tv139 = 8						; size = 4
_aIndex$ = 8						; size = 4
_money$ = 12						; size = 4
?DropZen@cSystemOfRage@@QAEXHAAM@Z PROC			; cSystemOfRage::DropZen, COMDAT
; _this$ = ecx

; 598  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 	if(!this->Enable) return;

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	74 1a		 je	 SHORT $LN2@DropZen

; 600  : 
; 601  : 	money += this->ReturnCalc(aIndex, eSkill17,0);

  00008	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000b	6a 00		 push	 0
  0000d	6a 11		 push	 17			; 00000011H
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00015	89 45 08	 mov	 DWORD PTR tv139[ebp], eax
  00018	db 45 08	 fild	 DWORD PTR tv139[ebp]
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _money$[ebp]
  0001e	d8 00		 fadd	 DWORD PTR [eax]
  00020	d9 18		 fstp	 DWORD PTR [eax]
$LN2@DropZen:

; 602  : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?DropZen@cSystemOfRage@@QAEXHAAM@Z ENDP			; cSystemOfRage::DropZen
_TEXT	ENDS
PUBLIC	?ExpFunction@cSystemOfRage@@QAEXHAA_J@Z		; cSystemOfRage::ExpFunction
; Function compile flags: /Ogtp
;	COMDAT ?ExpFunction@cSystemOfRage@@QAEXHAA_J@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_exp$ = 12						; size = 4
?ExpFunction@cSystemOfRage@@QAEXHAA_J@Z PROC		; cSystemOfRage::ExpFunction, COMDAT
; _this$ = ecx

; 605  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 606  : 	exp += this->ReturnCalc(aIndex, eSkill27,0);

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	6a 00		 push	 0
  00008	6a 1b		 push	 27			; 0000001bH
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _exp$[ebp]
  00013	99		 cdq
  00014	01 01		 add	 DWORD PTR [ecx], eax
  00016	11 51 04	 adc	 DWORD PTR [ecx+4], edx

; 607  : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?ExpFunction@cSystemOfRage@@QAEXHAA_J@Z ENDP		; cSystemOfRage::ExpFunction
_TEXT	ENDS
PUBLIC	?AttackDefenceRate@cSystemOfRage@@QAEXHHAAM0@Z	; cSystemOfRage::AttackDefenceRate
; Function compile flags: /Ogtp
;	COMDAT ?AttackDefenceRate@cSystemOfRage@@QAEXHHAAM0@Z
_TEXT	SEGMENT
tv139 = 8						; size = 4
tv132 = 8						; size = 4
_aIndex$ = 8						; size = 4
_Target$ = 12						; size = 4
_Attack$ = 16						; size = 4
_Defence$ = 20						; size = 4
?AttackDefenceRate@cSystemOfRage@@QAEXHHAAM0@Z PROC	; cSystemOfRage::AttackDefenceRate, COMDAT
; _this$ = ecx

; 610  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 611  : 	Attack += this->ReturnCalc(aIndex, eSkill32,0);

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	56		 push	 esi
  00007	6a 00		 push	 0
  00009	6a 20		 push	 32			; 00000020H
  0000b	50		 push	 eax
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc

; 612  : 	Defence += this->ReturnCalc(Target, eSkill14,0);

  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _Target$[ebp]
  00016	89 45 08	 mov	 DWORD PTR tv139[ebp], eax
  00019	db 45 08	 fild	 DWORD PTR tv139[ebp]
  0001c	8b 45 10	 mov	 eax, DWORD PTR _Attack$[ebp]
  0001f	6a 00		 push	 0
  00021	6a 0e		 push	 14			; 0000000eH
  00023	d8 00		 fadd	 DWORD PTR [eax]
  00025	51		 push	 ecx
  00026	8b ce		 mov	 ecx, esi
  00028	d9 18		 fstp	 DWORD PTR [eax]
  0002a	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0002f	89 45 08	 mov	 DWORD PTR tv132[ebp], eax
  00032	db 45 08	 fild	 DWORD PTR tv132[ebp]
  00035	8b 45 14	 mov	 eax, DWORD PTR _Defence$[ebp]
  00038	5e		 pop	 esi
  00039	d8 00		 fadd	 DWORD PTR [eax]
  0003b	d9 18		 fstp	 DWORD PTR [eax]

; 613  : }

  0003d	5d		 pop	 ebp
  0003e	c2 10 00	 ret	 16			; 00000010H
?AttackDefenceRate@cSystemOfRage@@QAEXHHAAM0@Z ENDP	; cSystemOfRage::AttackDefenceRate
_TEXT	ENDS
PUBLIC	?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z	; cSystemOfRage::ExlCritDamage
; Function compile flags: /Ogtp
;	COMDAT ?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_effect$ = 12						; size = 4
_AttackDamage$ = 16					; size = 4
?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z PROC		; cSystemOfRage::ExlCritDamage, COMDAT
; _this$ = ecx

; 616  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 	if(effect == 2)//Exl Damage

  00003	8b 45 0c	 mov	 eax, DWORD PTR _effect$[ebp]
  00006	83 f8 02	 cmp	 eax, 2
  00009	75 16		 jne	 SHORT $LN2@ExlCritDam

; 618  : 	{
; 619  : 		AttackDamage += this->ReturnCalc(aIndex, eSkill34,0);

  0000b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000e	6a 00		 push	 0
  00010	6a 22		 push	 34			; 00000022H
  00012	50		 push	 eax

; 622  : 	{
; 623  : 		AttackDamage += this->ReturnCalc(aIndex, eSkill35,0);

  00013	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00018	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  0001b	01 01		 add	 DWORD PTR [ecx], eax

; 624  : 	}
; 625  : }

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@ExlCritDam:

; 620  : 	}
; 621  : 	if(effect == 3)//Critical Damage

  00021	83 f8 03	 cmp	 eax, 3
  00024	75 12		 jne	 SHORT $LN1@ExlCritDam

; 622  : 	{
; 623  : 		AttackDamage += this->ReturnCalc(aIndex, eSkill35,0);

  00026	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00029	6a 00		 push	 0
  0002b	6a 23		 push	 35			; 00000023H
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  00033	8b 4d 10	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  00036	01 01		 add	 DWORD PTR [ecx], eax
$LN1@ExlCritDam:

; 624  : 	}
; 625  : }

  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
?ExlCritDamage@cSystemOfRage@@QAEXHHAAH@Z ENDP		; cSystemOfRage::ExlCritDamage
_TEXT	ENDS
PUBLIC	?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z ; cSystemOfRage::AttackDamageRG
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
; Function compile flags: /Ogtp
;	COMDAT ?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTarget$ = 12						; size = 4
_dmg$ = 16						; size = 4
_bDamageReflect$ = 20					; size = 1
?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z PROC ; cSystemOfRage::AttackDamageRG, COMDAT
; _this$ = ecx

; 628  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 629  : 	if(bDamageReflect == true) return;

  00003	80 7d 14 01	 cmp	 BYTE PTR _bDamageReflect$[ebp], 1
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	0f 84 d9 00 00
	00		 je	 $LN1@AttackDama

; 630  : 	if(lpObj->Type != OBJ_USER)

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00013	66 83 79 68 01	 cmp	 WORD PTR [ecx+104], 1
  00018	0f 85 cb 00 00
	00		 jne	 $LN1@AttackDama

; 631  : 	{
; 632  : 		return;
; 633  : 	}
; 634  : 	int aIndex =  lpObj->m_Index;
; 635  : 	int Magic = lpObj->UseMagicNumber;

  0001e	0f b6 81 cd 04
	00 00		 movzx	 eax, BYTE PTR [ecx+1229]
  00025	56		 push	 esi

; 636  : 	//Ice Damage
; 637  : 	if(Magic == 7 || Magic == 39 || Magic == 51 || Magic == 75 ||
; 638  : 		Magic == 450 || Magic == 451 || Magic == 452 || Magic == 453 || Magic == 454)

  00026	8b 75 10	 mov	 esi, DWORD PTR _dmg$[ebp]
  00029	57		 push	 edi
  0002a	8b 39		 mov	 edi, DWORD PTR [ecx]
  0002c	83 f8 07	 cmp	 eax, 7
  0002f	74 60		 je	 SHORT $LN6@AttackDama
  00031	83 f8 27	 cmp	 eax, 39			; 00000027H
  00034	74 5b		 je	 SHORT $LN6@AttackDama
  00036	83 f8 33	 cmp	 eax, 51			; 00000033H
  00039	74 56		 je	 SHORT $LN6@AttackDama
  0003b	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  0003e	74 51		 je	 SHORT $LN6@AttackDama
  00040	3d c2 01 00 00	 cmp	 eax, 450		; 000001c2H
  00045	74 4a		 je	 SHORT $LN6@AttackDama
  00047	3d c3 01 00 00	 cmp	 eax, 451		; 000001c3H
  0004c	74 43		 je	 SHORT $LN6@AttackDama
  0004e	3d c4 01 00 00	 cmp	 eax, 452		; 000001c4H
  00053	74 3c		 je	 SHORT $LN6@AttackDama
  00055	3d c5 01 00 00	 cmp	 eax, 453		; 000001c5H
  0005a	74 35		 je	 SHORT $LN6@AttackDama
  0005c	3d c6 01 00 00	 cmp	 eax, 454		; 000001c6H
  00061	74 2e		 je	 SHORT $LN6@AttackDama

; 641  : 	}
; 642  : 	//Fire Damage
; 643  : 	else if(Magic == 4 || Magic == 10 || Magic == 49 || Magic == 61 ||
; 644  : 		Magic == 74 ||Magic == 78 ||Magic == 14 || Magic == 55 )

  00063	83 f8 04	 cmp	 eax, 4
  00066	74 23		 je	 SHORT $LN3@AttackDama
  00068	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0006b	74 1e		 je	 SHORT $LN3@AttackDama
  0006d	83 f8 31	 cmp	 eax, 49			; 00000031H
  00070	74 19		 je	 SHORT $LN3@AttackDama
  00072	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00075	74 14		 je	 SHORT $LN3@AttackDama
  00077	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  0007a	74 0f		 je	 SHORT $LN3@AttackDama
  0007c	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  0007f	74 0a		 je	 SHORT $LN3@AttackDama
  00081	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00084	74 05		 je	 SHORT $LN3@AttackDama
  00086	83 f8 37	 cmp	 eax, 55			; 00000037H
  00089	75 17		 jne	 SHORT $LN4@AttackDama
$LN3@AttackDama:

; 645  : 	{
; 646  : 		dmg += this->ReturnCalc(aIndex, eSkill15,0);

  0008b	6a 00		 push	 0
  0008d	6a 0f		 push	 15			; 0000000fH
  0008f	eb 04		 jmp	 SHORT $LN14@AttackDama
$LN6@AttackDama:

; 639  : 	{
; 640  : 		dmg += this->ReturnCalc(aIndex, eSkill30,0);

  00091	6a 00		 push	 0
  00093	6a 1e		 push	 30			; 0000001eH
$LN14@AttackDama:
  00095	57		 push	 edi
  00096	8b cb		 mov	 ecx, ebx
  00098	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000a0	01 06		 add	 DWORD PTR [esi], eax
$LN4@AttackDama:

; 647  : 	}
; 648  : 	//DistanceAttack
; 649  : 	if(gObjCalDistance(lpObj, lpTarget) > 2)

  000a2	8b 45 0c	 mov	 eax, DWORD PTR _lpTarget$[ebp]
  000a5	50		 push	 eax
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000ac	83 c4 08	 add	 esp, 8
  000af	83 f8 02	 cmp	 eax, 2
  000b2	7e 0e		 jle	 SHORT $LN2@AttackDama

; 650  : 	{
; 651  : 		dmg += this->ReturnCalc(aIndex, eSkill31,0);

  000b4	6a 00		 push	 0
  000b6	6a 1f		 push	 31			; 0000001fH
  000b8	57		 push	 edi
  000b9	8b cb		 mov	 ecx, ebx
  000bb	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000c0	01 06		 add	 DWORD PTR [esi], eax
$LN2@AttackDama:

; 652  : 	}
; 653  : 	if(lpObj->Type == OBJ_USER && lpTarget->Type == OBJ_USER)

  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000c5	b8 01 00 00 00	 mov	 eax, 1
  000ca	66 39 41 68	 cmp	 WORD PTR [ecx+104], ax
  000ce	75 17		 jne	 SHORT $LN12@AttackDama
  000d0	8b 55 0c	 mov	 edx, DWORD PTR _lpTarget$[ebp]
  000d3	66 39 42 68	 cmp	 WORD PTR [edx+104], ax
  000d7	75 0e		 jne	 SHORT $LN12@AttackDama

; 654  : 	{
; 655  : 		dmg += this->ReturnCalc(aIndex, eSkill25,0);

  000d9	6a 00		 push	 0
  000db	6a 19		 push	 25			; 00000019H
  000dd	57		 push	 edi
  000de	8b cb		 mov	 ecx, ebx
  000e0	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  000e5	01 06		 add	 DWORD PTR [esi], eax
$LN12@AttackDama:
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
$LN1@AttackDama:
  000e9	5b		 pop	 ebx

; 656  : 	}
; 657  : }

  000ea	5d		 pop	 ebp
  000eb	c2 10 00	 ret	 16			; 00000010H
?AttackDamageRG@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0AAH_N@Z ENDP ; cSystemOfRage::AttackDamageRG
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendUser@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::SendUser
; Function compile flags: /Ogtp
;	COMDAT ?SendUser@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_rSend$ = -164						; size = 160
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?SendUser@cSystemOfRage@@QAEXH@Z PROC			; cSystemOfRage::SendUser, COMDAT
; _this$ = ecx

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b d1		 mov	 edx, ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 661  : 	LPOBJ lpObj = &gObj[aIndex];
; 662  : 
; 663  : 	sRageUserSend rSend;
; 664  : 
; 665  : 	rSend.h.set((LPBYTE)&rSend, 0xFB, 2, sizeof(rSend));
; 666  : 
; 667  : 	rSend.rLevel = this->rUser[aIndex].rLevel;

  00018	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	c1 e0 05	 shl	 eax, 5
  00020	03 c2		 add	 eax, edx

; 668  : 	rSend.rPoints = this->rUser[aIndex].rPoints;

  00022	8b 78 38	 mov	 edi, DWORD PTR [eax+56]
  00025	89 bd 64 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+8], edi

; 669  : 	rSend.rExperience = this->rUser[aIndex].rExperience;

  0002b	8b 78 3c	 mov	 edi, DWORD PTR [eax+60]
  0002e	89 bd 68 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+12], edi

; 670  : 
; 671  : 	rSend.Damage = this->rUser[aIndex].Damage;

  00034	8b 78 44	 mov	 edi, DWORD PTR [eax+68]
  00037	89 bd 6c ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+16], edi

; 672  : 	rSend.FreePoints = this->rUser[aIndex].FreePoints;

  0003d	8b 78 48	 mov	 edi, DWORD PTR [eax+72]
  00040	89 bd 70 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+20], edi

; 673  : 	rSend.SummonPet = this->rUser[aIndex].SummonPet;

  00046	8b 78 4c	 mov	 edi, DWORD PTR [eax+76]
  00049	89 bd 74 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+24], edi

; 674  : 	rSend.WingsDamagePlus = this->rUser[aIndex].WingsDamagePlus;

  0004f	8b 78 50	 mov	 edi, DWORD PTR [eax+80]
  00052	89 bd 78 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+28], edi

; 675  : 	rSend.FinalMana = this->rUser[aIndex].FinalMana;

  00058	8b 78 54	 mov	 edi, DWORD PTR [eax+84]
  0005b	89 bd 7c ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+32], edi

; 676  : 	rSend.IgnoreDefence = this->rUser[aIndex].IgnoreDefence;

  00061	8b 78 58	 mov	 edi, DWORD PTR [eax+88]
  00064	89 7d 80	 mov	 DWORD PTR _rSend$[ebp+36], edi

; 677  : 	rSend.ResetLevel = this->rUser[aIndex].ResetLevel;

  00067	8b 78 5c	 mov	 edi, DWORD PTR [eax+92]
  0006a	89 7d 84	 mov	 DWORD PTR _rSend$[ebp+40], edi

; 678  : 	rSend.Teleport = this->rUser[aIndex].Teleport;

  0006d	8b 78 60	 mov	 edi, DWORD PTR [eax+96]
  00070	89 7d 88	 mov	 DWORD PTR _rSend$[ebp+44], edi

; 679  : 	rSend.CriticalDamageRate = this->rUser[aIndex].CriticalDamageRate;

  00073	8b 78 64	 mov	 edi, DWORD PTR [eax+100]
  00076	89 7d 8c	 mov	 DWORD PTR _rSend$[ebp+48], edi

; 680  : 	rSend.AbsordDamage = this->rUser[aIndex].AbsordDamage;

  00079	8b 78 68	 mov	 edi, DWORD PTR [eax+104]
  0007c	89 7d 90	 mov	 DWORD PTR _rSend$[ebp+52], edi

; 681  : 	rSend.PetDamageBonus = this->rUser[aIndex].PetDamageBonus;

  0007f	8b 78 6c	 mov	 edi, DWORD PTR [eax+108]
  00082	89 7d 94	 mov	 DWORD PTR _rSend$[ebp+56], edi

; 682  : 	rSend.FinalLife = this->rUser[aIndex].FinalLife;

  00085	8b 78 70	 mov	 edi, DWORD PTR [eax+112]
  00088	89 7d 98	 mov	 DWORD PTR _rSend$[ebp+60], edi

; 683  : 	rSend.Strength = this->rUser[aIndex].Strength;

  0008b	8b 78 74	 mov	 edi, DWORD PTR [eax+116]
  0008e	89 7d 9c	 mov	 DWORD PTR _rSend$[ebp+64], edi

; 684  : 	rSend.DefenceRate = this->rUser[aIndex].DefenceRate;

  00091	8b 78 78	 mov	 edi, DWORD PTR [eax+120]
  00094	89 7d a0	 mov	 DWORD PTR _rSend$[ebp+68], edi

; 685  : 	rSend.FireDamage = this->rUser[aIndex].FireDamage;

  00097	8b 78 7c	 mov	 edi, DWORD PTR [eax+124]
  0009a	89 7d a4	 mov	 DWORD PTR _rSend$[ebp+72], edi

; 686  : 	rSend.Energy = this->rUser[aIndex].Energy;

  0009d	8b b8 80 00 00
	00		 mov	 edi, DWORD PTR [eax+128]
  000a3	89 7d a8	 mov	 DWORD PTR _rSend$[ebp+76], edi

; 687  : 	rSend.Agility = this->rUser[aIndex].Agility;

  000a6	8b b8 84 00 00
	00		 mov	 edi, DWORD PTR [eax+132]
  000ac	89 7d ac	 mov	 DWORD PTR _rSend$[ebp+80], edi

; 688  : 	rSend.DoubleDamage = this->rUser[aIndex].DoubleDamage;

  000af	8b b8 88 00 00
	00		 mov	 edi, DWORD PTR [eax+136]
  000b5	89 7d b0	 mov	 DWORD PTR _rSend$[ebp+84], edi

; 689  : 	rSend.FinalSD = this->rUser[aIndex].FinalSD;

  000b8	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  000be	89 7d b4	 mov	 DWORD PTR _rSend$[ebp+88], edi

; 690  : 	rSend.FinalDefence = this->rUser[aIndex].FinalDefence;

  000c1	8b b8 90 00 00
	00		 mov	 edi, DWORD PTR [eax+144]
  000c7	89 7d b8	 mov	 DWORD PTR _rSend$[ebp+92], edi

; 691  : 	rSend.ZenDrop = this->rUser[aIndex].ZenDrop;

  000ca	8b b8 94 00 00
	00		 mov	 edi, DWORD PTR [eax+148]
  000d0	89 7d bc	 mov	 DWORD PTR _rSend$[ebp+96], edi

; 692  : 	rSend.GuildBonus = this->rUser[aIndex].GuildBonus;

  000d3	8b b8 98 00 00
	00		 mov	 edi, DWORD PTR [eax+152]
  000d9	89 7d c0	 mov	 DWORD PTR _rSend$[ebp+100], edi

; 693  : 	rSend.ReflectDamage = this->rUser[aIndex].ReflectDamage;

  000dc	8b b8 9c 00 00
	00		 mov	 edi, DWORD PTR [eax+156]
  000e2	89 7d c4	 mov	 DWORD PTR _rSend$[ebp+104], edi

; 694  : 	rSend.ExellentDamageRate = this->rUser[aIndex].ExellentDamageRate;

  000e5	8b b8 a0 00 00
	00		 mov	 edi, DWORD PTR [eax+160]
  000eb	89 7d c8	 mov	 DWORD PTR _rSend$[ebp+108], edi

; 695  : 	rSend.PvPBonusPlus = this->rUser[aIndex].PvPBonusPlus;

  000ee	8b b8 a4 00 00
	00		 mov	 edi, DWORD PTR [eax+164]
  000f4	8b 70 34	 mov	 esi, DWORD PTR [eax+52]
  000f7	89 7d cc	 mov	 DWORD PTR _rSend$[ebp+112], edi

; 696  : 	rSend.MinDefence = this->rUser[aIndex].MinDefence;

  000fa	8b b8 a8 00 00
	00		 mov	 edi, DWORD PTR [eax+168]
  00100	89 7d d0	 mov	 DWORD PTR _rSend$[ebp+116], edi

; 697  : 	rSend.Experience = this->rUser[aIndex].Experience;

  00103	8b b8 ac 00 00
	00		 mov	 edi, DWORD PTR [eax+172]
  00109	89 7d d4	 mov	 DWORD PTR _rSend$[ebp+120], edi

; 698  : 	rSend.StartSD = this->rUser[aIndex].StartSD;

  0010c	8b b8 b0 00 00
	00		 mov	 edi, DWORD PTR [eax+176]
  00112	89 7d d8	 mov	 DWORD PTR _rSend$[ebp+124], edi

; 699  : 	rSend.PartyBonus = this->rUser[aIndex].PartyBonus;

  00115	8b b8 b4 00 00
	00		 mov	 edi, DWORD PTR [eax+180]
  0011b	89 7d dc	 mov	 DWORD PTR _rSend$[ebp+128], edi

; 700  : 	rSend.IceDamage = this->rUser[aIndex].IceDamage;

  0011e	8b b8 b8 00 00
	00		 mov	 edi, DWORD PTR [eax+184]
  00124	89 7d e0	 mov	 DWORD PTR _rSend$[ebp+132], edi

; 701  : 	rSend.DistanceAttack = this->rUser[aIndex].DistanceAttack;

  00127	8b b8 bc 00 00
	00		 mov	 edi, DWORD PTR [eax+188]
  0012d	89 7d e4	 mov	 DWORD PTR _rSend$[ebp+136], edi

; 702  : 	rSend.AttackRate = this->rUser[aIndex].AttackRate;

  00130	8b b8 c0 00 00
	00		 mov	 edi, DWORD PTR [eax+192]
  00136	89 7d e8	 mov	 DWORD PTR _rSend$[ebp+140], edi

; 703  : 	rSend.WeaponBonus = this->rUser[aIndex].WeaponBonus;

  00139	8b b8 c4 00 00
	00		 mov	 edi, DWORD PTR [eax+196]
  0013f	89 7d ec	 mov	 DWORD PTR _rSend$[ebp+144], edi

; 704  : 	rSend.ExellentDamage = this->rUser[aIndex].ExellentDamage;

  00142	8b b8 c8 00 00
	00		 mov	 edi, DWORD PTR [eax+200]
  00148	c7 85 5c ff ff
	ff c1 a0 fb 02	 mov	 DWORD PTR _rSend$[ebp], 50045121 ; 02fba0c1H
  00152	89 b5 60 ff ff
	ff		 mov	 DWORD PTR _rSend$[ebp+4], esi

; 705  : 	rSend.CriticalDamage = this->rUser[aIndex].CriticalDamage;
; 706  : 
; 707  : 	rSend.NextExp = this->NextExp * this->rUser[aIndex].rLevel;

  00158	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  0015b	8b 80 cc 00 00
	00		 mov	 eax, DWORD PTR [eax+204]
  00161	0f af d6	 imul	 edx, esi
  00164	89 45 f4	 mov	 DWORD PTR _rSend$[ebp+152], eax

; 708  : 
; 709  : 	DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  00167	68 a0 00 00 00	 push	 160			; 000000a0H
  0016c	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _rSend$[ebp]
  00172	50		 push	 eax
  00173	51		 push	 ecx
  00174	89 7d f0	 mov	 DWORD PTR _rSend$[ebp+148], edi
  00177	89 55 f8	 mov	 DWORD PTR _rSend$[ebp+156], edx
  0017a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 710  : }

  0017f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00182	83 c4 0c	 add	 esp, 12			; 0000000cH
  00185	5f		 pop	 edi
  00186	33 cd		 xor	 ecx, ebp
  00188	5e		 pop	 esi
  00189	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c2 04 00	 ret	 4
?SendUser@cSystemOfRage@@QAEXH@Z ENDP			; cSystemOfRage::SendUser
_TEXT	ENDS
PUBLIC	??_C@_0P@HAENLNCN@Rage?5Level?3?5?$CFd?$AA@	; `string'
PUBLIC	?RageExpFunction@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z ; cSystemOfRage::RageExpFunction
EXTRN	?CheckLevels@cBMQuest@@QAEXH@Z:PROC		; cBMQuest::CheckLevels
EXTRN	?BMQuest@@3VcBMQuest@@A:BYTE			; BMQuest
EXTRN	?MsgNormal@@YAXHPADZZ:PROC			; MsgNormal
;	COMDAT ??_C@_0P@HAENLNCN@Rage?5Level?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@HAENLNCN@Rage?5Level?3?5?$CFd?$AA@ DB 'Rage Level: %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?RageExpFunction@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_TargetObj$ = 12					; size = 4
?RageExpFunction@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; cSystemOfRage::RageExpFunction, COMDAT
; _this$ = ecx

; 713  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 714  : 	int aIndex = lpObj->m_Index;
; 715  : 	if(!this->Enable)

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000b	8b 37		 mov	 esi, DWORD PTR [edi]
  0000d	74 72		 je	 SHORT $LN2@RageExpFun

; 716  : 	{
; 717  : 		return;
; 718  : 	}
; 719  : 
; 720  : 	if(this->rUser[aIndex].rLevel >= this->MaxLevel)

  0000f	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00012	c1 e0 05	 shl	 eax, 5
  00015	8b 54 08 34	 mov	 edx, DWORD PTR [eax+ecx+52]
  00019	03 c1		 add	 eax, ecx
  0001b	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0001e	7d 61		 jge	 SHORT $LN2@RageExpFun

; 721  : 	{
; 722  : 		return;
; 723  : 	}
; 724  : 
; 725  : 	if(this->NeedLevel > lpObj->Level || this->NeedMasterLevel > lpObj->MLevel)

  00020	53		 push	 ebx
  00021	0f bf 9f be 00
	00 00		 movsx	 ebx, WORD PTR [edi+190]
  00028	39 59 28	 cmp	 DWORD PTR [ecx+40], ebx
  0002b	7f 53		 jg	 SHORT $LN8@RageExpFun
  0002d	0f bf bf d0 00
	00 00		 movsx	 edi, WORD PTR [edi+208]
  00034	39 79 2c	 cmp	 DWORD PTR [ecx+44], edi
  00037	7f 47		 jg	 SHORT $LN8@RageExpFun

; 726  : 	{
; 727  : 		return;
; 728  : 	}
; 729  : 
; 730  : 	int tExp = TargetObj->Level * this->AddExp;
; 731  : 	//MsgNormal(aIndex,"Rage Exp: %d Obtainded",tExp);
; 732  : 	this->rUser[aIndex].rExperience += tExp;

  00039	8b 7d 0c	 mov	 edi, DWORD PTR _TargetObj$[ebp]
  0003c	0f bf bf be 00
	00 00		 movsx	 edi, WORD PTR [edi+190]
  00043	0f af 79 08	 imul	 edi, DWORD PTR [ecx+8]
  00047	01 78 3c	 add	 DWORD PTR [eax+60], edi

; 733  : 	if(this->rUser[aIndex].rExperience > (this->NextExp * this->rUser[aIndex].rLevel))

  0004a	8b 59 20	 mov	 ebx, DWORD PTR [ecx+32]
  0004d	0f af da	 imul	 ebx, edx
  00050	39 58 3c	 cmp	 DWORD PTR [eax+60], ebx
  00053	7e 2b		 jle	 SHORT $LN8@RageExpFun

; 734  : 	{
; 735  : 		this->rUser[aIndex].rLevel++;

  00055	42		 inc	 edx

; 736  : 		this->rUser[aIndex].rPoints += this->rPointLvl;
; 737  : 		this->rUser[aIndex].rExperience = 0;
; 738  : 		MsgNormal(aIndex,"Rage Level: %d",this->rUser[aIndex].rLevel);

  00056	52		 push	 edx
  00057	89 50 34	 mov	 DWORD PTR [eax+52], edx
  0005a	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0005d	01 48 38	 add	 DWORD PTR [eax+56], ecx
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HAENLNCN@Rage?5Level?3?5?$CFd?$AA@
  00065	56		 push	 esi
  00066	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
  0006d	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 739  : 
; 740  : 		BMQuest.CheckLevels(aIndex);

  00075	56		 push	 esi
  00076	b9 00 00 00 00	 mov	 ecx, OFFSET ?BMQuest@@3VcBMQuest@@A ; BMQuest
  0007b	e8 00 00 00 00	 call	 ?CheckLevels@cBMQuest@@QAEXH@Z ; cBMQuest::CheckLevels
$LN8@RageExpFun:
  00080	5b		 pop	 ebx
$LN2@RageExpFun:
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 741  : 	}
; 742  : 
; 743  : 	//RageExpSend rSend;
; 744  : 	//rSend.h.set((LPBYTE)&rSend, 0xFB, 3, sizeof(rSend));
; 745  : 	//rSend.Level = this->rUser[aIndex].rLevel;
; 746  : 	//rSend.Point = this->rUser[aIndex].rPoints;
; 747  : 	//rSend.Exp = this->rUser[aIndex].rExperience;
; 748  : 	//rSend.NextExp = (this->NextExp * this->rUser[aIndex].rLevel);
; 749  : 	//
; 750  : 	//DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));
; 751  : }

  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?RageExpFunction@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; cSystemOfRage::RageExpFunction
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ConfigSend@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::ConfigSend
; Function compile flags: /Ogtp
;	COMDAT ?ConfigSend@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_rSend$205145 = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?ConfigSend@cSystemOfRage@@QAEXH@Z PROC			; cSystemOfRage::ConfigSend, COMDAT
; _this$ = ecx

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b c1		 mov	 eax, ecx

; 780  : 		strcpy(rSend.Name,this->rSkill[i].Name);

  00015	8d 7d d1	 lea	 edi, DWORD PTR _rSend$205145[ebp+5]
  00018	2b f8		 sub	 edi, eax
  0001a	bb 01 00 00 00	 mov	 ebx, 1
  0001f	8d b0 a8 9f 24
	00		 lea	 esi, DWORD PTR [eax+2400168]
  00025	81 ef 74 9f 24
	00		 sub	 edi, 2400116		; 00249f74H
  0002b	eb 03 8d 49 00	 npad	 5
$LL12@ConfigSend:

; 775  : 	for(int i=1;i<R_MAX_SKILL;i++)
; 776  : 	{
; 777  : 		sConfigStruct rSend;
; 778  : 		rSend.h.set((LPBYTE)&rSend, 0xFB, 0x00, sizeof(rSend));
; 779  : 		rSend.SkillID = i;

  00030	c7 45 cc c1 30
	fb 00		 mov	 DWORD PTR _rSend$205145[ebp], 16462017 ; 00fb30c1H
  00037	88 5d d0	 mov	 BYTE PTR _rSend$205145[ebp+4], bl

; 780  : 		strcpy(rSend.Name,this->rSkill[i].Name);

  0003a	8d 46 cc	 lea	 eax, DWORD PTR [esi-52]
  0003d	8d 49 00	 npad	 3
$LL6@ConfigSend:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	88 0c 07	 mov	 BYTE PTR [edi+eax], cl
  00045	40		 inc	 eax
  00046	84 c9		 test	 cl, cl
  00048	75 f6		 jne	 SHORT $LL6@ConfigSend

; 781  : 		rSend.Damage = this->rSkill[i].StartDamage;
; 782  : 		rSend.MaxPoint = this->rSkill[i].MaxPoint;

  0004a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 783  : 		rSend.PointNext = this->rSkill[i].PointNext;

  0004d	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00050	8b 06		 mov	 eax, DWORD PTR [esi]
  00052	89 4d f0	 mov	 DWORD PTR _rSend$205145[ebp+36], ecx

; 784  : 		rSend.Percent = this->rSkill[i].Percent;
; 785  : 		DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  00055	6a 30		 push	 48			; 00000030H
  00057	8d 4d cc	 lea	 ecx, DWORD PTR _rSend$205145[ebp]
  0005a	89 55 f4	 mov	 DWORD PTR _rSend$205145[ebp+40], edx
  0005d	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00060	89 45 ec	 mov	 DWORD PTR _rSend$205145[ebp+32], eax
  00063	8a 46 08	 mov	 al, BYTE PTR [esi+8]
  00066	51		 push	 ecx
  00067	52		 push	 edx
  00068	88 45 f8	 mov	 BYTE PTR _rSend$205145[ebp+44], al
  0006b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00070	43		 inc	 ebx
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	83 ef 44	 sub	 edi, 68			; 00000044H
  00077	83 c6 44	 add	 esi, 68			; 00000044H
  0007a	83 fb 24	 cmp	 ebx, 36			; 00000024H
  0007d	7c b1		 jl	 SHORT $LL12@ConfigSend

; 786  : 	}
; 787  : }

  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	33 cd		 xor	 ecx, ebp
  00086	5b		 pop	 ebx
  00087	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
?ConfigSend@cSystemOfRage@@QAEXH@Z ENDP			; cSystemOfRage::ConfigSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendDataServer@cSystemOfRage@@QAEXHPAD@Z	; cSystemOfRage::SendDataServer
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	_strncpy:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SendDataServer@cSystemOfRage@@QAEXHPAD@Z
_TEXT	SEGMENT
_pInfo$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_NAme$ = 12						; size = 4
?SendDataServer@cSystemOfRage@@QAEXHPAD@Z PROC		; cSystemOfRage::SendDataServer, COMDAT
; _this$ = ecx

; 790  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _NAme$[ebp]

; 791  : 	DSQuerySend pInfo;
; 792  : 
; 793  : 	pInfo.h.c =0xC1;
; 794  : 	pInfo.h.size = sizeof(DSQuerySend);
; 795  : 	pInfo.h.headcode =0xE0;
; 796  : 	pInfo.aIndex = aIndex;

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 797  : 	//strncpy(pInfo.Accaunt,gObj[aIndex].AccountID,10);
; 798  : 	strncpy(pInfo.Name,NAme,10);

  00016	6a 0a		 push	 10			; 0000000aH
  00018	50		 push	 eax
  00019	8d 55 f0	 lea	 edx, DWORD PTR _pInfo$[ebp+8]
  0001c	52		 push	 edx
  0001d	66 c7 45 e8 c1
	14		 mov	 WORD PTR _pInfo$[ebp], 5313 ; 000014c1H
  00023	c6 45 ea e0	 mov	 BYTE PTR _pInfo$[ebp+2], 224 ; 000000e0H
  00027	89 4d ec	 mov	 DWORD PTR _pInfo$[ebp+4], ecx
  0002a	e8 00 00 00 00	 call	 _strncpy

; 799  : 
; 800  : 	cDBSMng.Send((char*)&pInfo, pInfo.h.size);

  0002f	0f b6 45 e9	 movzx	 eax, BYTE PTR _pInfo$[ebp+1]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	50		 push	 eax
  00037	8d 4d e8	 lea	 ecx, DWORD PTR _pInfo$[ebp]
  0003a	51		 push	 ecx
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00040	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 801  : }

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	33 cd		 xor	 ecx, ebp
  0004a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?SendDataServer@cSystemOfRage@@QAEXHPAD@Z ENDP		; cSystemOfRage::SendDataServer
_TEXT	ENDS
PUBLIC	?RageConnect@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::RageConnect
; Function compile flags: /Ogtp
;	COMDAT ?RageConnect@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?RageConnect@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::RageConnect, COMDAT
; _this$ = ecx

; 804  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 805  : 	LPOBJ lpObj = &gObj[aIndex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	8b d0		 mov	 edx, eax
  00008	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  0000e	56		 push	 esi

; 806  : 	this->SendDataServer(aIndex, lpObj->Name);

  0000f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	8d 54 32 77	 lea	 edx, DWORD PTR [edx+esi+119]
  00019	52		 push	 edx
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?SendDataServer@cSystemOfRage@@QAEXHPAD@Z ; cSystemOfRage::SendDataServer
  00020	5e		 pop	 esi

; 807  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?RageConnect@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::RageConnect
_TEXT	ENDS
PUBLIC	?JewelsDropRate@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z ; cSystemOfRage::JewelsDropRate
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterTopHitDamageUser
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?JewelsDropRate@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMobObj$ = 12						; size = 4
?JewelsDropRate@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; cSystemOfRage::JewelsDropRate, COMDAT
; _this$ = ecx

; 840  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 841  : 	if(!this->Enable) return;

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	0f 84 ac 00 00
	00		 je	 $LN9@JewelsDrop

; 842  : 	if ( (rand()%10000) < this->ReturnCalc(lpObj->m_Index, eSkill2,0) )

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	56		 push	 esi
  00012	6a 00		 push	 0
  00014	6a 02		 push	 2
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?ReturnCalc@cSystemOfRage@@QAEHHHH@Z ; cSystemOfRage::ReturnCalc
  0001c	8b f0		 mov	 esi, eax
  0001e	e8 00 00 00 00	 call	 _rand
  00023	99		 cdq
  00024	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00029	f7 f9		 idiv	 ecx
  0002b	3b d6		 cmp	 edx, esi
  0002d	0f 8d 84 00 00
	00		 jge	 $LN13@JewelsDrop

; 843  : 	{
; 844  : 		int iTopHitUser = gObjMonsterTopHitDamageUser(lpMobObj);

  00033	8b 75 0c	 mov	 esi, DWORD PTR _lpMobObj$[ebp]
  00036	57		 push	 edi
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 ?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterTopHitDamageUser
  0003d	83 c4 04	 add	 esp, 4
  00040	8b f8		 mov	 edi, eax

; 845  : 
; 846  : 		int Type;
; 847  : 		int num = rand()%4;

  00042	e8 00 00 00 00	 call	 _rand
  00047	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0004c	79 05		 jns	 SHORT $LN14@JewelsDrop
  0004e	48		 dec	 eax
  0004f	83 c8 fc	 or	 eax, -4			; fffffffcH
  00052	40		 inc	 eax
$LN14@JewelsDrop:

; 848  : 		if(num == 0)

  00053	75 07		 jne	 SHORT $LN8@JewelsDrop

; 849  : 		Type = ITEMGET(12,15);

  00055	b8 0f 18 00 00	 mov	 eax, 6159		; 0000180fH
  0005a	eb 27		 jmp	 SHORT $LN2@JewelsDrop
$LN8@JewelsDrop:

; 850  : 		else if(num == 1)

  0005c	83 f8 01	 cmp	 eax, 1
  0005f	75 07		 jne	 SHORT $LN6@JewelsDrop

; 851  : 		Type = ITEMGET(14,13);

  00061	b8 0d 1c 00 00	 mov	 eax, 7181		; 00001c0dH
  00066	eb 1b		 jmp	 SHORT $LN2@JewelsDrop
$LN6@JewelsDrop:

; 852  : 		else if(num == 2)

  00068	83 f8 02	 cmp	 eax, 2
  0006b	75 07		 jne	 SHORT $LN4@JewelsDrop

; 853  : 		Type =  ITEMGET(14,14);

  0006d	b8 0e 1c 00 00	 mov	 eax, 7182		; 00001c0eH
  00072	eb 0f		 jmp	 SHORT $LN2@JewelsDrop
$LN4@JewelsDrop:

; 854  : 		else if(num == 3)

  00074	83 e8 03	 sub	 eax, 3
  00077	f7 d8		 neg	 eax
  00079	1b c0		 sbb	 eax, eax
  0007b	83 e0 06	 and	 eax, 6
  0007e	05 10 1c 00 00	 add	 eax, 7184		; 00001c10H
$LN2@JewelsDrop:

; 855  : 		Type = ITEMGET(14,16);
; 856  : 		else
; 857  : 		Type = ITEMGET(14,22);
; 858  : 
; 859  : 		ItemSerialCreateSend(lpMobObj->m_Index,lpMobObj->MapNumber,lpMobObj->X,lpMobObj->Y,Type,0,0,0,0,0,iTopHitUser,0,0);

  00083	0f b6 96 46 01
	00 00		 movzx	 edx, BYTE PTR [esi+326]
  0008a	0f b6 8e 49 01
	00 00		 movzx	 ecx, BYTE PTR [esi+329]
  00091	6a 00		 push	 0
  00093	6a 00		 push	 0
  00095	57		 push	 edi
  00096	6a 00		 push	 0
  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
  0009c	6a 00		 push	 0
  0009e	6a 00		 push	 0
  000a0	50		 push	 eax
  000a1	0f b6 86 44 01
	00 00		 movzx	 eax, BYTE PTR [esi+324]
  000a8	52		 push	 edx
  000a9	8b 16		 mov	 edx, DWORD PTR [esi]
  000ab	50		 push	 eax
  000ac	51		 push	 ecx
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  000b3	83 c4 34	 add	 esp, 52			; 00000034H
  000b6	5f		 pop	 edi
$LN13@JewelsDrop:
  000b7	5e		 pop	 esi
$LN9@JewelsDrop:

; 860  : 	}
; 861  : }

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
?JewelsDropRate@cSystemOfRage@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; cSystemOfRage::JewelsDropRate
_TEXT	ENDS
PUBLIC	?GetActive@cSystemOfRage@@QAE_NXZ		; cSystemOfRage::GetActive
; Function compile flags: /Ogtp
;	COMDAT ?GetActive@cSystemOfRage@@QAE_NXZ
_TEXT	SEGMENT
?GetActive@cSystemOfRage@@QAE_NXZ PROC			; cSystemOfRage::GetActive, COMDAT
; _this$ = ecx

; 865  : 	return this->Enable;

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 866  : }

  00002	c3		 ret	 0
?GetActive@cSystemOfRage@@QAE_NXZ ENDP			; cSystemOfRage::GetActive
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?RageClientSend@cSystemOfRage@@QAEXXZ		; cSystemOfRage::RageClientSend
; Function compile flags: /Ogtp
;	COMDAT ?RageClientSend@cSystemOfRage@@QAEXXZ
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
_rSend$205209 = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
?RageClientSend@cSystemOfRage@@QAEXXZ PROC		; cSystemOfRage::RageClientSend, COMDAT
; _this$ = ecx

; 869  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 870  : 	if(!this->Enable) return;

  00010	80 39 00	 cmp	 BYTE PTR [ecx], 0

; 871  : 	for (int  aIndex=OBJ_STARTUSERINDZT;aIndex<OBJMAX;aIndex++)

  00013	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00016	0f 84 83 00 00
	00		 je	 $LN4@RageClient
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	bb b0 36 00 00	 mov	 ebx, 14000		; 000036b0H
  00029	bf 00 a7 40 09	 mov	 edi, 155232000		; 0940a700H
  0002e	8d b1 34 2e 22
	00		 lea	 esi, DWORD PTR [ecx+2240052]
$LL6@RageClient:

; 872  : 	{
; 873  : 		LPOBJ lpObj = &gObj[aIndex];
; 874  : 		if(lpObj->Connected < PLAYER_PLAYING ) continue;

  00034	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  00039	7c 4c		 jl	 SHORT $LN5@RageClient

; 875  : 
; 876  : 		if(lpObj->OffExp != 0 || lpObj->OffTrade != 0) continue;

  0003b	83 bc 07 98 22
	00 00 00	 cmp	 DWORD PTR [edi+eax+8856], 0
  00043	75 42		 jne	 SHORT $LN5@RageClient
  00045	83 bc 07 ac 22
	00 00 00	 cmp	 DWORD PTR [edi+eax+8876], 0
  0004d	75 38		 jne	 SHORT $LN5@RageClient

; 877  : 
; 878  : 		RageExpSend rSend;
; 879  : 		rSend.h.set((LPBYTE)&rSend, 0xFB, 3, sizeof(rSend));
; 880  : 		rSend.Level = this->rUser[aIndex].rLevel;

  0004f	8b 06		 mov	 eax, DWORD PTR [esi]

; 881  : 		rSend.Point = this->rUser[aIndex].rPoints;
; 882  : 		rSend.Exp = this->rUser[aIndex].rExperience;
; 883  : 		rSend.NextExp = (this->NextExp * this->rUser[aIndex].rLevel);

  00051	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00054	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00057	0f af c8	 imul	 ecx, eax
  0005a	89 55 f0	 mov	 DWORD PTR _rSend$205209[ebp+8], edx
  0005d	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00060	89 55 f4	 mov	 DWORD PTR _rSend$205209[ebp+12], edx

; 884  : 	
; 885  : 		DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  00063	6a 14		 push	 20			; 00000014H
  00065	8d 55 e8	 lea	 edx, DWORD PTR _rSend$205209[ebp]
  00068	52		 push	 edx
  00069	53		 push	 ebx
  0006a	c7 45 e8 c1 14
	fb 03		 mov	 DWORD PTR _rSend$205209[ebp], 66786497 ; 03fb14c1H
  00071	89 45 ec	 mov	 DWORD PTR _rSend$205209[ebp+4], eax
  00074	89 4d f8	 mov	 DWORD PTR _rSend$205209[ebp+16], ecx
  00077	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00081	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@RageClient:

; 871  : 	for (int  aIndex=OBJ_STARTUSERINDZT;aIndex<OBJMAX;aIndex++)

  00087	81 c7 50 2b 00
	00		 add	 edi, 11088		; 00002b50H
  0008d	43		 inc	 ebx
  0008e	81 c6 a0 00 00
	00		 add	 esi, 160		; 000000a0H
  00094	81 ff 80 d7 e9
	09		 cmp	 edi, 166320000		; 09e9d780H
  0009a	7c 98		 jl	 SHORT $LL6@RageClient
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
$LN4@RageClient:

; 886  : 	}
; 887  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
?RageClientSend@cSystemOfRage@@QAEXXZ ENDP		; cSystemOfRage::RageClientSend
_TEXT	ENDS
PUBLIC	?NewDBSave@cSystemOfRage@@QAEXHPAE@Z		; cSystemOfRage::NewDBSave
; Function compile flags: /Ogtp
;	COMDAT ?NewDBSave@cSystemOfRage@@QAEXHPAE@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_buf$ = 12						; size = 4
?NewDBSave@cSystemOfRage@@QAEXHPAE@Z PROC		; cSystemOfRage::NewDBSave, COMDAT
; _this$ = ecx

; 890  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 891  : 	if(!this->Enable) return;

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	0f 84 07 02 00
	00		 je	 $LN2@NewDBSave

; 892  : 
; 893  : 	int DataSize = 0;
; 894  : 	int irSave = 0;
; 895  : 
; 896  : 	irSave = this->rUser[aIndex].rLevel;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000f	56		 push	 esi
  00010	57		 push	 edi

; 897  : 	DataSize = int_binary( irSave, DataSize, buf );

  00011	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  00014	8d 34 80	 lea	 esi, DWORD PTR [eax+eax*4]
  00017	c1 e6 05	 shl	 esi, 5
  0001a	8b 44 0e 34	 mov	 eax, DWORD PTR [esi+ecx+52]
  0001e	03 f1		 add	 esi, ecx
  00020	57		 push	 edi
  00021	6a 00		 push	 0
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 898  : 	irSave = this->rUser[aIndex].rPoints;

  00029	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]

; 899  : 	DataSize = int_binary( irSave, DataSize, buf );

  0002c	57		 push	 edi
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 900  : 	irSave = this->rUser[aIndex].rExperience;

  00034	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]

; 901  : 	DataSize = int_binary( irSave, DataSize, buf );

  00037	57		 push	 edi
  00038	50		 push	 eax
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 902  : 	irSave = this->rUser[aIndex].Damage;

  0003f	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]

; 903  : 	DataSize = int_binary( irSave, DataSize, buf );

  00042	57		 push	 edi
  00043	50		 push	 eax
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 904  : 	irSave = this->rUser[aIndex].FreePoints;

  0004a	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]

; 905  : 	DataSize = int_binary( irSave, DataSize, buf );

  0004d	57		 push	 edi
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 906  : 	irSave = this->rUser[aIndex].SummonPet;

  00055	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]

; 907  : 	DataSize = int_binary( irSave, DataSize, buf );

  00058	57		 push	 edi
  00059	50		 push	 eax
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 908  : 	irSave = this->rUser[aIndex].WingsDamagePlus;

  00060	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00063	83 c4 48	 add	 esp, 72			; 00000048H

; 909  : 	DataSize = int_binary( irSave, DataSize, buf );

  00066	57		 push	 edi
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 910  : 	irSave = this->rUser[aIndex].FinalMana;

  0006e	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]

; 911  : 	DataSize = int_binary( irSave, DataSize, buf );

  00071	57		 push	 edi
  00072	50		 push	 eax
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 912  : 	irSave = this->rUser[aIndex].IgnoreDefence;

  00079	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 913  : 	DataSize = int_binary( irSave, DataSize, buf );

  0007c	57		 push	 edi
  0007d	50		 push	 eax
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 914  : 	irSave = this->rUser[aIndex].ResetLevel;

  00084	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]

; 915  : 	DataSize = int_binary( irSave, DataSize, buf );

  00087	57		 push	 edi
  00088	50		 push	 eax
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 916  : 	irSave = this->rUser[aIndex].Teleport;

  0008f	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]

; 917  : 	DataSize = int_binary( irSave, DataSize, buf );

  00092	57		 push	 edi
  00093	50		 push	 eax
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 918  : 	irSave = this->rUser[aIndex].CriticalDamageRate;

  0009a	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]

; 919  : 	DataSize = int_binary( irSave, DataSize, buf );

  0009d	57		 push	 edi
  0009e	50		 push	 eax
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 920  : 	irSave = this->rUser[aIndex].AbsordDamage;

  000a5	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  000a8	83 c4 48	 add	 esp, 72			; 00000048H

; 921  : 	DataSize = int_binary( irSave, DataSize, buf );

  000ab	57		 push	 edi
  000ac	50		 push	 eax
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 922  : 	irSave = this->rUser[aIndex].PetDamageBonus;

  000b3	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]

; 923  : 	DataSize = int_binary( irSave, DataSize, buf );

  000b6	57		 push	 edi
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 924  : 	irSave = this->rUser[aIndex].FinalLife;

  000be	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]

; 925  : 	DataSize = int_binary( irSave, DataSize, buf );

  000c1	57		 push	 edi
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 926  : 	irSave = this->rUser[aIndex].Strength;

  000c9	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]

; 927  : 	DataSize = int_binary( irSave, DataSize, buf );

  000cc	57		 push	 edi
  000cd	50		 push	 eax
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 928  : 	irSave = this->rUser[aIndex].DefenceRate;

  000d4	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]

; 929  : 	DataSize = int_binary( irSave, DataSize, buf );

  000d7	57		 push	 edi
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 930  : 	irSave = this->rUser[aIndex].FireDamage;

  000df	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]

; 931  : 	DataSize = int_binary( irSave, DataSize, buf );

  000e2	57		 push	 edi
  000e3	50		 push	 eax
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 932  : 	irSave = this->rUser[aIndex].Energy;

  000ea	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  000f0	83 c4 48	 add	 esp, 72			; 00000048H

; 933  : 	DataSize = int_binary( irSave, DataSize, buf );

  000f3	57		 push	 edi
  000f4	50		 push	 eax
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 934  : 	irSave = this->rUser[aIndex].Agility;

  000fb	8b 8e 84 00 00
	00		 mov	 ecx, DWORD PTR [esi+132]

; 935  : 	DataSize = int_binary( irSave, DataSize, buf );

  00101	57		 push	 edi
  00102	50		 push	 eax
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 936  : 	irSave = this->rUser[aIndex].DoubleDamage;

  00109	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]

; 937  : 	DataSize = int_binary( irSave, DataSize, buf );

  0010f	57		 push	 edi
  00110	50		 push	 eax
  00111	51		 push	 ecx
  00112	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 938  : 	irSave = this->rUser[aIndex].FinalSD;

  00117	8b 8e 8c 00 00
	00		 mov	 ecx, DWORD PTR [esi+140]

; 939  : 	DataSize = int_binary( irSave, DataSize, buf );

  0011d	57		 push	 edi
  0011e	50		 push	 eax
  0011f	51		 push	 ecx
  00120	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 940  : 	irSave = this->rUser[aIndex].FinalDefence;

  00125	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]

; 941  : 	DataSize = int_binary( irSave, DataSize, buf );

  0012b	57		 push	 edi
  0012c	50		 push	 eax
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 942  : 	irSave = this->rUser[aIndex].ZenDrop;

  00133	8b 8e 94 00 00
	00		 mov	 ecx, DWORD PTR [esi+148]

; 943  : 	DataSize = int_binary( irSave, DataSize, buf );

  00139	57		 push	 edi
  0013a	50		 push	 eax
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 944  : 	irSave = this->rUser[aIndex].GuildBonus;

  00141	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  00147	83 c4 48	 add	 esp, 72			; 00000048H

; 945  : 	DataSize = int_binary( irSave, DataSize, buf );

  0014a	57		 push	 edi
  0014b	50		 push	 eax
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 946  : 	irSave = this->rUser[aIndex].ReflectDamage;

  00152	8b 8e 9c 00 00
	00		 mov	 ecx, DWORD PTR [esi+156]

; 947  : 	DataSize = int_binary( irSave, DataSize, buf );

  00158	57		 push	 edi
  00159	50		 push	 eax
  0015a	51		 push	 ecx
  0015b	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 948  : 	irSave = this->rUser[aIndex].ExellentDamageRate;

  00160	8b 8e a0 00 00
	00		 mov	 ecx, DWORD PTR [esi+160]

; 949  : 	DataSize = int_binary( irSave, DataSize, buf );

  00166	57		 push	 edi
  00167	50		 push	 eax
  00168	51		 push	 ecx
  00169	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 950  : 	irSave = this->rUser[aIndex].PvPBonusPlus;

  0016e	8b 8e a4 00 00
	00		 mov	 ecx, DWORD PTR [esi+164]

; 951  : 	DataSize = int_binary( irSave, DataSize, buf );

  00174	57		 push	 edi
  00175	50		 push	 eax
  00176	51		 push	 ecx
  00177	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 952  : 	irSave = this->rUser[aIndex].MinDefence;

  0017c	8b 8e a8 00 00
	00		 mov	 ecx, DWORD PTR [esi+168]

; 953  : 	DataSize = int_binary( irSave, DataSize, buf );

  00182	57		 push	 edi
  00183	50		 push	 eax
  00184	51		 push	 ecx
  00185	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 954  : 	irSave = this->rUser[aIndex].Experience;

  0018a	8b 8e ac 00 00
	00		 mov	 ecx, DWORD PTR [esi+172]

; 955  : 	DataSize = int_binary( irSave, DataSize, buf );

  00190	57		 push	 edi
  00191	50		 push	 eax
  00192	51		 push	 ecx
  00193	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  00198	83 c4 48	 add	 esp, 72			; 00000048H

; 956  : 	irSave = this->rUser[aIndex].StartSD;

  0019b	8b 8e b0 00 00
	00		 mov	 ecx, DWORD PTR [esi+176]

; 957  : 	DataSize = int_binary( irSave, DataSize, buf );

  001a1	57		 push	 edi
  001a2	50		 push	 eax
  001a3	51		 push	 ecx
  001a4	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 958  : 	irSave = this->rUser[aIndex].PartyBonus;

  001a9	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]

; 959  : 	DataSize = int_binary( irSave, DataSize, buf );

  001af	57		 push	 edi
  001b0	50		 push	 eax
  001b1	51		 push	 ecx
  001b2	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 960  : 	irSave = this->rUser[aIndex].IceDamage;

  001b7	8b 8e b8 00 00
	00		 mov	 ecx, DWORD PTR [esi+184]

; 961  : 	DataSize = int_binary( irSave, DataSize, buf );

  001bd	57		 push	 edi
  001be	50		 push	 eax
  001bf	51		 push	 ecx
  001c0	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 962  : 	irSave = this->rUser[aIndex].DistanceAttack;

  001c5	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]

; 963  : 	DataSize = int_binary( irSave, DataSize, buf );

  001cb	57		 push	 edi
  001cc	50		 push	 eax
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 964  : 	irSave = this->rUser[aIndex].AttackRate;

  001d3	8b 8e c0 00 00
	00		 mov	 ecx, DWORD PTR [esi+192]

; 965  : 	DataSize = int_binary( irSave, DataSize, buf );

  001d9	57		 push	 edi
  001da	50		 push	 eax
  001db	51		 push	 ecx
  001dc	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 966  : 	irSave = this->rUser[aIndex].WeaponBonus;

  001e1	8b 8e c4 00 00
	00		 mov	 ecx, DWORD PTR [esi+196]

; 967  : 	DataSize = int_binary( irSave, DataSize, buf );

  001e7	57		 push	 edi
  001e8	50		 push	 eax
  001e9	51		 push	 ecx
  001ea	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 968  : 	irSave = this->rUser[aIndex].ExellentDamage;

  001ef	8b 8e c8 00 00
	00		 mov	 ecx, DWORD PTR [esi+200]
  001f5	83 c4 48	 add	 esp, 72			; 00000048H

; 969  : 	DataSize = int_binary( irSave, DataSize, buf );

  001f8	57		 push	 edi
  001f9	50		 push	 eax
  001fa	51		 push	 ecx
  001fb	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary

; 970  : 	irSave = this->rUser[aIndex].CriticalDamage;
; 971  : 	DataSize = int_binary( irSave, DataSize, buf );

  00200	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00206	57		 push	 edi
  00207	50		 push	 eax
  00208	51		 push	 ecx
  00209	e8 00 00 00 00	 call	 ?int_binary@@YAHHHPAE@Z	; int_binary
  0020e	83 c4 18	 add	 esp, 24			; 00000018H
  00211	5f		 pop	 edi
  00212	5e		 pop	 esi
$LN2@NewDBSave:

; 972  : 
; 973  : 	//LogAddC(2, "DataSize: %d", DataSize);
; 974  : }

  00213	5d		 pop	 ebp
  00214	c2 08 00	 ret	 8
?NewDBSave@cSystemOfRage@@QAEXHPAE@Z ENDP		; cSystemOfRage::NewDBSave
_TEXT	ENDS
PUBLIC	?NewDBLoad@cSystemOfRage@@QAEXHPAE@Z		; cSystemOfRage::NewDBLoad
; Function compile flags: /Ogtp
;	COMDAT ?NewDBLoad@cSystemOfRage@@QAEXHPAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_irLoad$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_buf$ = 12						; size = 4
?NewDBLoad@cSystemOfRage@@QAEXHPAE@Z PROC		; cSystemOfRage::NewDBLoad, COMDAT
; _this$ = ecx

; 977  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 978  : 	//if(!this->Enable) 
; 979  : 	//{
; 980  : 	//	return;	// -> data rage
; 981  : 	//}
; 982  : 
; 983  : 	int DataSize = 0;
; 984  : 	int irLoad = 0;
; 985  : 
; 986  : 	this->rUser[aIndex].LoadInfo = 0;

  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1026 : 	this->rUser[aIndex].CriticalDamage = 0;

  00008	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 978  : 	//if(!this->Enable) 
; 979  : 	//{
; 980  : 	//	return;	// -> data rage
; 981  : 	//}
; 982  : 
; 983  : 	int DataSize = 0;
; 984  : 	int irLoad = 0;
; 985  : 
; 986  : 	this->rUser[aIndex].LoadInfo = 0;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000e	33 db		 xor	 ebx, ebx
  00010	8d 34 80	 lea	 esi, DWORD PTR [eax+eax*4]
  00013	c1 e6 05	 shl	 esi, 5
  00016	03 f1		 add	 esi, ecx
  00018	89 5e 30	 mov	 DWORD PTR [esi+48], ebx

; 987  : 
; 988  : 	this->rUser[aIndex].rLevel = 0;

  0001b	89 5e 34	 mov	 DWORD PTR [esi+52], ebx

; 989  : 	this->rUser[aIndex].rPoints = 0;

  0001e	89 5e 38	 mov	 DWORD PTR [esi+56], ebx

; 990  : 	this->rUser[aIndex].rExperience = 0;

  00021	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx

; 991  : 
; 992  : 	this->rUser[aIndex].Damage = 0;

  00024	89 5e 44	 mov	 DWORD PTR [esi+68], ebx

; 993  : 	this->rUser[aIndex].FreePoints = 0;

  00027	89 5e 48	 mov	 DWORD PTR [esi+72], ebx

; 994  : 	this->rUser[aIndex].SummonPet = 0;

  0002a	89 5e 4c	 mov	 DWORD PTR [esi+76], ebx

; 995  : 	this->rUser[aIndex].WingsDamagePlus = 0;

  0002d	89 5e 50	 mov	 DWORD PTR [esi+80], ebx

; 996  : 	this->rUser[aIndex].FinalMana = 0;

  00030	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 997  : 	this->rUser[aIndex].IgnoreDefence = 0;

  00033	89 5e 58	 mov	 DWORD PTR [esi+88], ebx

; 998  : 	this->rUser[aIndex].ResetLevel = 0;

  00036	89 5e 5c	 mov	 DWORD PTR [esi+92], ebx

; 999  : 	this->rUser[aIndex].Teleport = 0;

  00039	89 5e 60	 mov	 DWORD PTR [esi+96], ebx

; 1000 : 	this->rUser[aIndex].CriticalDamageRate = 0;

  0003c	89 5e 64	 mov	 DWORD PTR [esi+100], ebx

; 1001 : 	this->rUser[aIndex].AbsordDamage = 0;

  0003f	89 5e 68	 mov	 DWORD PTR [esi+104], ebx

; 1002 : 	this->rUser[aIndex].PetDamageBonus = 0;

  00042	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx

; 1003 : 	this->rUser[aIndex].FinalLife = 0;

  00045	89 5e 70	 mov	 DWORD PTR [esi+112], ebx

; 1004 : 	this->rUser[aIndex].Strength = 0;

  00048	89 5e 74	 mov	 DWORD PTR [esi+116], ebx

; 1005 : 	this->rUser[aIndex].DefenceRate = 0;

  0004b	89 5e 78	 mov	 DWORD PTR [esi+120], ebx

; 1006 : 	this->rUser[aIndex].FireDamage = 0;

  0004e	89 5e 7c	 mov	 DWORD PTR [esi+124], ebx

; 1007 : 	this->rUser[aIndex].Energy = 0;

  00051	89 9e 80 00 00
	00		 mov	 DWORD PTR [esi+128], ebx

; 1008 : 	this->rUser[aIndex].Agility = 0;

  00057	89 9e 84 00 00
	00		 mov	 DWORD PTR [esi+132], ebx

; 1009 : 	this->rUser[aIndex].DoubleDamage = 0;

  0005d	89 9e 88 00 00
	00		 mov	 DWORD PTR [esi+136], ebx

; 1010 : 	this->rUser[aIndex].FinalSD = 0;

  00063	89 9e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ebx

; 1011 : 	this->rUser[aIndex].FinalDefence = 0;

  00069	89 9e 90 00 00
	00		 mov	 DWORD PTR [esi+144], ebx

; 1012 : 	this->rUser[aIndex].ZenDrop = 0;

  0006f	89 9e 94 00 00
	00		 mov	 DWORD PTR [esi+148], ebx

; 1013 : 	this->rUser[aIndex].GuildBonus;
; 1014 : 	this->rUser[aIndex].ReflectDamage = 0;

  00075	89 9e 9c 00 00
	00		 mov	 DWORD PTR [esi+156], ebx

; 1015 : 	this->rUser[aIndex].ExellentDamageRate = 0;

  0007b	89 9e a0 00 00
	00		 mov	 DWORD PTR [esi+160], ebx

; 1016 : 	this->rUser[aIndex].PvPBonusPlus = 0;

  00081	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx

; 1017 : 	this->rUser[aIndex].MinDefence = 0;

  00087	89 9e a8 00 00
	00		 mov	 DWORD PTR [esi+168], ebx

; 1018 : 	this->rUser[aIndex].Experience = 0;

  0008d	89 9e ac 00 00
	00		 mov	 DWORD PTR [esi+172], ebx

; 1019 : 	this->rUser[aIndex].StartSD = 0;

  00093	89 9e b0 00 00
	00		 mov	 DWORD PTR [esi+176], ebx

; 1020 : 	this->rUser[aIndex].PartyBonus = 0;

  00099	89 9e b4 00 00
	00		 mov	 DWORD PTR [esi+180], ebx

; 1021 : 	this->rUser[aIndex].IceDamage = 0;

  0009f	89 9e b8 00 00
	00		 mov	 DWORD PTR [esi+184], ebx

; 1022 : 	this->rUser[aIndex].DistanceAttack = 0;

  000a5	89 9e bc 00 00
	00		 mov	 DWORD PTR [esi+188], ebx

; 1023 : 	this->rUser[aIndex].AttackRate = 0;

  000ab	89 9e c0 00 00
	00		 mov	 DWORD PTR [esi+192], ebx

; 1024 : 	this->rUser[aIndex].WeaponBonus = 0;

  000b1	89 9e c4 00 00
	00		 mov	 DWORD PTR [esi+196], ebx

; 1025 : 	this->rUser[aIndex].ExellentDamage = 0;

  000b7	89 9e c8 00 00
	00		 mov	 DWORD PTR [esi+200], ebx

; 1026 : 	this->rUser[aIndex].CriticalDamage = 0;

  000bd	89 9e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ebx
  000c3	89 5d fc	 mov	 DWORD PTR _irLoad$[ebp], ebx

; 1027 : 
; 1028 : 	if(!this->Enable) 

  000c6	38 19		 cmp	 BYTE PTR [ecx], bl
  000c8	0f 84 0e 03 00
	00		 je	 $LN3@NewDBLoad

; 1029 : 	{
; 1030 : 		return;	// -> data rage
; 1031 : 	}
; 1032 : 
; 1033 : 	//----
; 1034 : 
; 1035 : 	this->rUser[aIndex].LoadInfo = 1;
; 1036 : 
; 1037 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  000ce	57		 push	 edi
  000cf	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  000d2	57		 push	 edi
  000d3	8d 4d fc	 lea	 ecx, DWORD PTR _irLoad$[ebp]
  000d6	53		 push	 ebx
  000d7	51		 push	 ecx
  000d8	c7 46 30 01 00
	00 00		 mov	 DWORD PTR [esi+48], 1
  000df	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1038 : 	this->rUser[aIndex].rLevel = irLoad;

  000e4	8b 55 fc	 mov	 edx, DWORD PTR _irLoad$[ebp]

; 1039 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  000e7	57		 push	 edi
  000e8	50		 push	 eax
  000e9	8d 45 fc	 lea	 eax, DWORD PTR _irLoad$[ebp]
  000ec	50		 push	 eax
  000ed	89 56 34	 mov	 DWORD PTR [esi+52], edx
  000f0	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1040 : 	this->rUser[aIndex].rPoints = irLoad;

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1041 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  000f8	57		 push	 edi
  000f9	50		 push	 eax
  000fa	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  000fd	52		 push	 edx
  000fe	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00101	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1042 : 	this->rUser[aIndex].rExperience = irLoad;

  00106	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1043 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00109	57		 push	 edi
  0010a	50		 push	 eax
  0010b	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0010e	52		 push	 edx
  0010f	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx
  00112	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1044 : 	this->rUser[aIndex].Damage = irLoad;

  00117	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1045 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0011a	57		 push	 edi
  0011b	50		 push	 eax
  0011c	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0011f	52		 push	 edx
  00120	89 4e 44	 mov	 DWORD PTR [esi+68], ecx
  00123	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1046 : 	this->rUser[aIndex].FreePoints = irLoad;

  00128	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1047 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0012b	57		 push	 edi
  0012c	50		 push	 eax
  0012d	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00130	52		 push	 edx
  00131	89 4e 48	 mov	 DWORD PTR [esi+72], ecx
  00134	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1048 : 	this->rUser[aIndex].SummonPet = irLoad;

  00139	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]
  0013c	83 c4 48	 add	 esp, 72			; 00000048H

; 1049 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0013f	57		 push	 edi
  00140	50		 push	 eax
  00141	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00144	52		 push	 edx
  00145	89 4e 4c	 mov	 DWORD PTR [esi+76], ecx
  00148	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1050 : 	this->rUser[aIndex].WingsDamagePlus = irLoad;

  0014d	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1051 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00150	57		 push	 edi
  00151	50		 push	 eax
  00152	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00155	52		 push	 edx
  00156	89 4e 50	 mov	 DWORD PTR [esi+80], ecx
  00159	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1052 : 	this->rUser[aIndex].FinalMana = irLoad;

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1053 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00161	57		 push	 edi
  00162	50		 push	 eax
  00163	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00166	52		 push	 edx
  00167	89 4e 54	 mov	 DWORD PTR [esi+84], ecx
  0016a	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1054 : 	this->rUser[aIndex].IgnoreDefence = irLoad;

  0016f	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1055 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00172	57		 push	 edi
  00173	50		 push	 eax
  00174	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00177	52		 push	 edx
  00178	89 4e 58	 mov	 DWORD PTR [esi+88], ecx
  0017b	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1056 : 	this->rUser[aIndex].ResetLevel = irLoad;

  00180	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1057 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00183	57		 push	 edi
  00184	50		 push	 eax
  00185	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00188	52		 push	 edx
  00189	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  0018c	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1058 : 	this->rUser[aIndex].Teleport = irLoad;

  00191	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]
  00194	89 4e 60	 mov	 DWORD PTR [esi+96], ecx

; 1059 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00197	57		 push	 edi
  00198	50		 push	 eax
  00199	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0019c	52		 push	 edx
  0019d	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1060 : 	this->rUser[aIndex].CriticalDamageRate = irLoad;

  001a2	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]
  001a5	83 c4 48	 add	 esp, 72			; 00000048H

; 1061 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  001a8	57		 push	 edi
  001a9	50		 push	 eax
  001aa	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  001ad	52		 push	 edx
  001ae	89 4e 64	 mov	 DWORD PTR [esi+100], ecx
  001b1	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1062 : 	this->rUser[aIndex].AbsordDamage = irLoad;

  001b6	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1063 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  001b9	57		 push	 edi
  001ba	50		 push	 eax
  001bb	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  001be	52		 push	 edx
  001bf	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  001c2	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1064 : 	this->rUser[aIndex].PetDamageBonus = irLoad;

  001c7	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1065 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  001ca	57		 push	 edi
  001cb	50		 push	 eax
  001cc	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  001cf	52		 push	 edx
  001d0	89 4e 6c	 mov	 DWORD PTR [esi+108], ecx
  001d3	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1066 : 	this->rUser[aIndex].FinalLife = irLoad;

  001d8	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1067 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  001db	57		 push	 edi
  001dc	50		 push	 eax
  001dd	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  001e0	52		 push	 edx
  001e1	89 4e 70	 mov	 DWORD PTR [esi+112], ecx
  001e4	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1068 : 	this->rUser[aIndex].Strength = irLoad;

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1069 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  001ec	57		 push	 edi
  001ed	50		 push	 eax
  001ee	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  001f1	52		 push	 edx
  001f2	89 4e 74	 mov	 DWORD PTR [esi+116], ecx
  001f5	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1070 : 	this->rUser[aIndex].DefenceRate = irLoad;

  001fa	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1071 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  001fd	57		 push	 edi
  001fe	50		 push	 eax
  001ff	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00202	52		 push	 edx
  00203	89 4e 78	 mov	 DWORD PTR [esi+120], ecx
  00206	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1072 : 	this->rUser[aIndex].FireDamage = irLoad;

  0020b	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]
  0020e	83 c4 48	 add	 esp, 72			; 00000048H

; 1073 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00211	57		 push	 edi
  00212	50		 push	 eax
  00213	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00216	52		 push	 edx
  00217	89 4e 7c	 mov	 DWORD PTR [esi+124], ecx
  0021a	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1074 : 	this->rUser[aIndex].Energy = irLoad;

  0021f	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1075 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00222	57		 push	 edi
  00223	50		 push	 eax
  00224	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00227	52		 push	 edx
  00228	89 8e 80 00 00
	00		 mov	 DWORD PTR [esi+128], ecx
  0022e	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1076 : 	this->rUser[aIndex].Agility = irLoad;

  00233	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1077 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00236	57		 push	 edi
  00237	50		 push	 eax
  00238	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0023b	52		 push	 edx
  0023c	89 8e 84 00 00
	00		 mov	 DWORD PTR [esi+132], ecx
  00242	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1078 : 	this->rUser[aIndex].DoubleDamage = irLoad;

  00247	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1079 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0024a	57		 push	 edi
  0024b	50		 push	 eax
  0024c	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0024f	52		 push	 edx
  00250	89 8e 88 00 00
	00		 mov	 DWORD PTR [esi+136], ecx
  00256	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1080 : 	this->rUser[aIndex].FinalSD = irLoad;

  0025b	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1081 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0025e	57		 push	 edi
  0025f	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx
  00265	50		 push	 eax
  00266	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00269	52		 push	 edx
  0026a	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1082 : 	this->rUser[aIndex].FinalDefence = irLoad;

  0026f	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1083 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00272	57		 push	 edi
  00273	50		 push	 eax
  00274	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00277	52		 push	 edx
  00278	89 8e 90 00 00
	00		 mov	 DWORD PTR [esi+144], ecx
  0027e	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1084 : 	this->rUser[aIndex].ZenDrop = irLoad;

  00283	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]
  00286	83 c4 48	 add	 esp, 72			; 00000048H

; 1085 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00289	57		 push	 edi
  0028a	50		 push	 eax
  0028b	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0028e	52		 push	 edx
  0028f	89 8e 94 00 00
	00		 mov	 DWORD PTR [esi+148], ecx
  00295	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1086 : 	this->rUser[aIndex].GuildBonus = irLoad;

  0029a	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1087 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0029d	57		 push	 edi
  0029e	50		 push	 eax
  0029f	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  002a2	52		 push	 edx
  002a3	89 8e 98 00 00
	00		 mov	 DWORD PTR [esi+152], ecx
  002a9	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1088 : 	this->rUser[aIndex].ReflectDamage = irLoad;

  002ae	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1089 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  002b1	57		 push	 edi
  002b2	50		 push	 eax
  002b3	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  002b6	52		 push	 edx
  002b7	89 8e 9c 00 00
	00		 mov	 DWORD PTR [esi+156], ecx
  002bd	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1090 : 	this->rUser[aIndex].ExellentDamageRate = irLoad;

  002c2	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1091 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  002c5	57		 push	 edi
  002c6	50		 push	 eax
  002c7	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  002ca	52		 push	 edx
  002cb	89 8e a0 00 00
	00		 mov	 DWORD PTR [esi+160], ecx
  002d1	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1092 : 	this->rUser[aIndex].PvPBonusPlus = irLoad;

  002d6	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1093 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  002d9	57		 push	 edi
  002da	50		 push	 eax
  002db	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  002de	52		 push	 edx
  002df	89 8e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ecx
  002e5	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1094 : 	this->rUser[aIndex].MinDefence = irLoad;

  002ea	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1095 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  002ed	57		 push	 edi
  002ee	50		 push	 eax
  002ef	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  002f2	52		 push	 edx
  002f3	89 8e a8 00 00
	00		 mov	 DWORD PTR [esi+168], ecx
  002f9	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1096 : 	this->rUser[aIndex].Experience = irLoad;

  002fe	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]
  00301	83 c4 48	 add	 esp, 72			; 00000048H

; 1097 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00304	57		 push	 edi
  00305	50		 push	 eax
  00306	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00309	52		 push	 edx
  0030a	89 8e ac 00 00
	00		 mov	 DWORD PTR [esi+172], ecx
  00310	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1098 : 	this->rUser[aIndex].StartSD = irLoad;

  00315	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1099 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00318	57		 push	 edi
  00319	50		 push	 eax
  0031a	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0031d	52		 push	 edx
  0031e	89 8e b0 00 00
	00		 mov	 DWORD PTR [esi+176], ecx
  00324	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1100 : 	this->rUser[aIndex].PartyBonus = irLoad;

  00329	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1101 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0032c	57		 push	 edi
  0032d	50		 push	 eax
  0032e	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00331	52		 push	 edx
  00332	89 8e b4 00 00
	00		 mov	 DWORD PTR [esi+180], ecx
  00338	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1102 : 	this->rUser[aIndex].IceDamage = irLoad;

  0033d	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1103 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00340	57		 push	 edi
  00341	50		 push	 eax
  00342	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00345	89 8e b8 00 00
	00		 mov	 DWORD PTR [esi+184], ecx
  0034b	52		 push	 edx
  0034c	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1104 : 	this->rUser[aIndex].DistanceAttack = irLoad;

  00351	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1105 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00354	57		 push	 edi
  00355	50		 push	 eax
  00356	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00359	52		 push	 edx
  0035a	89 8e bc 00 00
	00		 mov	 DWORD PTR [esi+188], ecx
  00360	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1106 : 	this->rUser[aIndex].AttackRate = irLoad;

  00365	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1107 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00368	57		 push	 edi
  00369	50		 push	 eax
  0036a	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  0036d	52		 push	 edx
  0036e	89 8e c0 00 00
	00		 mov	 DWORD PTR [esi+192], ecx
  00374	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1108 : 	this->rUser[aIndex].WeaponBonus = irLoad;

  00379	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]
  0037c	83 c4 48	 add	 esp, 72			; 00000048H

; 1109 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  0037f	57		 push	 edi
  00380	50		 push	 eax
  00381	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00384	52		 push	 edx
  00385	89 8e c4 00 00
	00		 mov	 DWORD PTR [esi+196], ecx
  0038b	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1110 : 	this->rUser[aIndex].ExellentDamage = irLoad;

  00390	8b 4d fc	 mov	 ecx, DWORD PTR _irLoad$[ebp]

; 1111 : 	DataSize = bynary_int(irLoad, DataSize, buf);

  00393	57		 push	 edi
  00394	50		 push	 eax
  00395	8d 55 fc	 lea	 edx, DWORD PTR _irLoad$[ebp]
  00398	52		 push	 edx
  00399	89 8e c8 00 00
	00		 mov	 DWORD PTR [esi+200], ecx
  0039f	e8 00 00 00 00	 call	 ?bynary_int@@YAHAAHHPAE@Z ; bynary_int

; 1112 : 	this->rUser[aIndex].CriticalDamage = irLoad;

  003a4	8b 45 fc	 mov	 eax, DWORD PTR _irLoad$[ebp]
  003a7	83 c4 18	 add	 esp, 24			; 00000018H
  003aa	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax

; 1113 : 
; 1114 : 	if(this->rUser[aIndex].rLevel <= 0)

  003b0	39 5e 34	 cmp	 DWORD PTR [esi+52], ebx
  003b3	7f 07		 jg	 SHORT $LN1@NewDBLoad

; 1115 : 	{
; 1116 : 		this->rUser[aIndex].rLevel = 1;

  003b5	c7 46 34 01 00
	00 00		 mov	 DWORD PTR [esi+52], 1
$LN1@NewDBLoad:

; 1117 : 	}
; 1118 : 
; 1119 : 	//this->rUser[aIndex].rPoints = 1000;
; 1120 : 
; 1121 : 	this->ConfigSend(aIndex);

  003bc	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  003bf	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  003c2	56		 push	 esi
  003c3	8b cf		 mov	 ecx, edi
  003c5	e8 00 00 00 00	 call	 ?ConfigSend@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::ConfigSend

; 1122 : 	this->SendUser(aIndex);

  003ca	56		 push	 esi
  003cb	8b cf		 mov	 ecx, edi
  003cd	e8 00 00 00 00	 call	 ?SendUser@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SendUser

; 1123 : 	gObjCalCharacter(aIndex);

  003d2	56		 push	 esi
  003d3	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  003d8	83 c4 04	 add	 esp, 4
  003db	5f		 pop	 edi
$LN3@NewDBLoad:
  003dc	5e		 pop	 esi
  003dd	5b		 pop	 ebx

; 1124 : 
; 1125 : 	//LogAddC(2, "DataSize: %d", DataSize);
; 1126 : 	//MsgNormal(aIndex,"DataSize: %d", DataSize);
; 1127 : }

  003de	8b e5		 mov	 esp, ebp
  003e0	5d		 pop	 ebp
  003e1	c2 08 00	 ret	 8
?NewDBLoad@cSystemOfRage@@QAEXHPAE@Z ENDP		; cSystemOfRage::NewDBLoad
_TEXT	ENDS
PUBLIC	?CharacterZero@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::CharacterZero
; Function compile flags: /Ogtp
;	COMDAT ?CharacterZero@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?CharacterZero@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::CharacterZero, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	if(!OBJMAX_RANGE(aIndex))

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	3b c2		 cmp	 eax, edx
  0000d	0f 8c cb 00 00
	00		 jl	 $LN2@CharacterZ
  00013	33 c9		 xor	 ecx, ecx
  00015	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0001a	0f 9e c1	 setle	 cl
  0001d	56		 push	 esi
  0001e	5e		 pop	 esi
  0001f	3b ca		 cmp	 ecx, edx
  00021	0f 84 b7 00 00
	00		 je	 $LN2@CharacterZ

; 1132 : 	{
; 1133 : 		return;
; 1134 : 	}
; 1135 : 
; 1136 : 	this->rUser[aIndex].LoadInfo = 0;

  00027	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0002a	c1 e0 05	 shl	 eax, 5
  0002d	03 c7		 add	 eax, edi
  0002f	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 1137 : 
; 1138 : 	this->rUser[aIndex].rLevel = 1;

  00032	c7 40 34 01 00
	00 00		 mov	 DWORD PTR [eax+52], 1

; 1139 : 	this->rUser[aIndex].rPoints = 0;

  00039	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 1140 : 	this->rUser[aIndex].rExperience = 0;

  0003c	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 1141 : 	this->rUser[aIndex].Damage = 0;

  0003f	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 1142 : 	this->rUser[aIndex].FreePoints = 0;

  00042	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 1143 : 	this->rUser[aIndex].SummonPet = 0;

  00045	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 1144 : 	this->rUser[aIndex].WingsDamagePlus = 0;

  00048	89 50 50	 mov	 DWORD PTR [eax+80], edx

; 1145 : 	this->rUser[aIndex].FinalMana = 0;

  0004b	89 50 54	 mov	 DWORD PTR [eax+84], edx

; 1146 : 	this->rUser[aIndex].IgnoreDefence = 0;

  0004e	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 1147 : 	this->rUser[aIndex].ResetLevel = 0;

  00051	89 50 5c	 mov	 DWORD PTR [eax+92], edx

; 1148 : 	this->rUser[aIndex].Teleport = 0;

  00054	89 50 60	 mov	 DWORD PTR [eax+96], edx

; 1149 : 	this->rUser[aIndex].CriticalDamageRate = 0;

  00057	89 50 64	 mov	 DWORD PTR [eax+100], edx

; 1150 : 	this->rUser[aIndex].AbsordDamage = 0;

  0005a	89 50 68	 mov	 DWORD PTR [eax+104], edx

; 1151 : 	this->rUser[aIndex].PetDamageBonus = 0;

  0005d	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 1152 : 	this->rUser[aIndex].FinalLife = 0;

  00060	89 50 70	 mov	 DWORD PTR [eax+112], edx

; 1153 : 	this->rUser[aIndex].Strength = 0;

  00063	89 50 74	 mov	 DWORD PTR [eax+116], edx

; 1154 : 	this->rUser[aIndex].DefenceRate = 0;

  00066	89 50 78	 mov	 DWORD PTR [eax+120], edx

; 1155 : 	this->rUser[aIndex].FireDamage = 0;

  00069	89 50 7c	 mov	 DWORD PTR [eax+124], edx

; 1156 : 	this->rUser[aIndex].Energy = 0;

  0006c	89 90 80 00 00
	00		 mov	 DWORD PTR [eax+128], edx

; 1157 : 	this->rUser[aIndex].Agility = 0;

  00072	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx

; 1158 : 	this->rUser[aIndex].DoubleDamage = 0;

  00078	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 1159 : 	this->rUser[aIndex].FinalSD = 0;

  0007e	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 1160 : 	this->rUser[aIndex].FinalDefence = 0;

  00084	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 1161 : 	this->rUser[aIndex].ZenDrop = 0;

  0008a	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx

; 1162 : 	this->rUser[aIndex].GuildBonus;
; 1163 : 	this->rUser[aIndex].ReflectDamage = 0;

  00090	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx

; 1164 : 	this->rUser[aIndex].ExellentDamageRate = 0;

  00096	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx

; 1165 : 	this->rUser[aIndex].PvPBonusPlus = 0;

  0009c	89 90 a4 00 00
	00		 mov	 DWORD PTR [eax+164], edx

; 1166 : 	this->rUser[aIndex].MinDefence = 0;

  000a2	89 90 a8 00 00
	00		 mov	 DWORD PTR [eax+168], edx

; 1167 : 	this->rUser[aIndex].Experience = 0;

  000a8	89 90 ac 00 00
	00		 mov	 DWORD PTR [eax+172], edx

; 1168 : 	this->rUser[aIndex].StartSD = 0;

  000ae	89 90 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edx

; 1169 : 	this->rUser[aIndex].PartyBonus = 0;

  000b4	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx

; 1170 : 	this->rUser[aIndex].IceDamage = 0;

  000ba	89 90 b8 00 00
	00		 mov	 DWORD PTR [eax+184], edx

; 1171 : 	this->rUser[aIndex].DistanceAttack = 0;

  000c0	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 1172 : 	this->rUser[aIndex].AttackRate = 0;

  000c6	89 90 c0 00 00
	00		 mov	 DWORD PTR [eax+192], edx

; 1173 : 	this->rUser[aIndex].WeaponBonus = 0;

  000cc	89 90 c4 00 00
	00		 mov	 DWORD PTR [eax+196], edx

; 1174 : 	this->rUser[aIndex].ExellentDamage = 0;

  000d2	89 90 c8 00 00
	00		 mov	 DWORD PTR [eax+200], edx

; 1175 : 	this->rUser[aIndex].CriticalDamage = 0;

  000d8	89 90 cc 00 00
	00		 mov	 DWORD PTR [eax+204], edx
$LN2@CharacterZ:
  000de	5f		 pop	 edi

; 1176 : }

  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
?CharacterZero@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::CharacterZero
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?NpcDialog@cSystemOfRage@@QAE_NHH@Z		; cSystemOfRage::NpcDialog
; Function compile flags: /Ogtp
;	COMDAT ?NpcDialog@cSystemOfRage@@QAE_NHH@Z
_TEXT	SEGMENT
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aNpcIndex$ = 12					; size = 4
?NpcDialog@cSystemOfRage@@QAE_NHH@Z PROC		; cSystemOfRage::NpcDialog, COMDAT
; _this$ = ecx

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00009	33 c5		 xor	 eax, ebp
  0000b	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1180 : 	if(!THINNAKORN_MAC)
; 1181 : 	{
; 1182 : 		return false;
; 1183 : 	}
; 1184 : 
; 1185 : 	if(!this->Enable)
; 1186 : 	{
; 1187 : 		return false;
; 1188 : 	}
; 1189 : 
; 1190 : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aNpcIndex))
; 1191 : 	{
; 1192 : 		return false;
; 1193 : 	}
; 1194 : 
; 1195 : 	if(!this->rUser[aIndex].LoadInfo)
; 1196 : 	{
; 1197 : 		return false;
; 1198 : 	}
; 1199 : 
; 1200 : 	LPOBJ lpNpc = &gObj[aNpcIndex];
; 1201 : 
; 1202 : 	if(lpNpc->Class == this->m_sNPC_Class && lpNpc->MapNumber == this->m_btNPC_Map && lpNpc->X == this->m_btNPC_X && lpNpc->Y == this->m_btNPC_Y)
; 1203 : 	{
; 1204 : 		PMSG_REQ_RESETRAGE pMsg;
; 1205 : 		pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0x95, sizeof(pMsg));
; 1206 : 		pMsg.ResetRageWCoin = this->m_ResetRageWCoin;
; 1207 : 		pMsg.ResetRageCredit = this->m_ResetRageCredit;
; 1208 : 		DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));
; 1209 : 		return true;
; 1210 : 	}
; 1211 : 
; 1212 : 	return false;
; 1213 : }

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00011	33 cd		 xor	 ecx, ebp
  00013	32 c0		 xor	 al, al
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?NpcDialog@cSystemOfRage@@QAE_NHH@Z ENDP		; cSystemOfRage::NpcDialog
_TEXT	ENDS
PUBLIC	??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@ ; `string'
PUBLIC	?CGRageReset@cSystemOfRage@@QAEXHPAUPMSG_ANS_RESETRAGE@@@Z ; cSystemOfRage::CGRageReset
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?GDSaveUserInfo@GameShop@@QAEXH@Z:PROC		; GameShop::GDSaveUserInfo
EXTRN	?gGameShop@@3VGameShop@@A:BYTE			; gGameShop
;	COMDAT ??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@
CONST	SEGMENT
??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@ DB '[Rage'
	DB	' System] Reset points, total points: %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CGRageReset@cSystemOfRage@@QAEXHPAUPMSG_ANS_RESETRAGE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv599 = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMsg$ = 12						; size = 4
?CGRageReset@cSystemOfRage@@QAEXHPAUPMSG_ANS_RESETRAGE@@@Z PROC ; cSystemOfRage::CGRageReset, COMDAT
; _this$ = ecx

; 1216 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1217 : 	if(!OBJMAX_RANGE(aIndex))

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	3b df		 cmp	 ebx, edi
  00010	0f 8c 18 02 00
	00		 jl	 $LN8@CGRageRese
  00016	33 c0		 xor	 eax, eax
  00018	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0001e	0f 9e c0	 setle	 al
  00021	3b c7		 cmp	 eax, edi
  00023	0f 84 05 02 00
	00		 je	 $LN8@CGRageRese

; 1218 : 	{
; 1219 : 		return;
; 1220 : 	}
; 1221 : 
; 1222 : 	if(lpMsg->Result != 1 && lpMsg->Result != 2)

  00029	8b 45 0c	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  0002c	8a 40 04	 mov	 al, BYTE PTR [eax+4]
  0002f	3c 01		 cmp	 al, 1
  00031	74 08		 je	 SHORT $LN6@CGRageRese
  00033	3c 02		 cmp	 al, 2
  00035	0f 85 f3 01 00
	00		 jne	 $LN8@CGRageRese
$LN6@CGRageRese:

; 1223 : 	{
; 1224 : 		return;
; 1225 : 	}
; 1226 : 
; 1227 : 	LPOBJ lpUser = &gObj[aIndex];

  0003b	8b d3		 mov	 edx, ebx
  0003d	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H
  00043	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1228 : 
; 1229 : 	if(lpMsg->Result == 1)

  00049	3c 01		 cmp	 al, 1
  0004b	75 33		 jne	 SHORT $LN5@CGRageRese

; 1230 : 	{
; 1231 : 		if(this->m_ResetRageWCoin > lpUser->GameShop.WCoinC)

  0004d	db 81 c8 a8 24
	00		 fild	 DWORD PTR [ecx+2402504]
  00053	dc 92 00 23 00
	00		 fcom	 QWORD PTR [edx+8960]
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	0f 84 c8 01 00
	00		 je	 $LN16@CGRageRese

; 1232 : 		{
; 1233 : 			return;
; 1234 : 		}
; 1235 : 		lpUser->GameShop.WCoinC -= this->m_ResetRageWCoin;	

  00064	dc aa 00 23 00
	00		 fsubr	 QWORD PTR [edx+8960]

; 1236 : 		gGameShop.GDSaveUserInfo(aIndex);

  0006a	53		 push	 ebx
  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00070	dd 9a 00 23 00
	00		 fstp	 QWORD PTR [edx+8960]
  00076	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	eb 2f		 jmp	 SHORT $LN2@CGRageRese
$LN5@CGRageRese:

; 1237 : 	}
; 1238 : 	else if(lpMsg->Result == 2)

  00080	3c 02		 cmp	 al, 2
  00082	75 2b		 jne	 SHORT $LN2@CGRageRese

; 1239 : 	{
; 1240 : 		if(this->m_ResetRageCredit > lpUser->ZtCred)

  00084	db 81 cc a8 24
	00		 fild	 DWORD PTR [ecx+2402508]
  0008a	d9 5d 08	 fstp	 DWORD PTR tv599[ebp]
  0008d	d9 45 08	 fld	 DWORD PTR tv599[ebp]
  00090	d9 82 a8 22 00
	00		 fld	 DWORD PTR [edx+8872]
  00096	d8 d9		 fcomp	 ST(1)
  00098	df e0		 fnstsw	 ax
  0009a	f6 c4 05	 test	 ah, 5
  0009d	0f 8b 89 01 00
	00		 jnp	 $LN16@CGRageRese

; 1241 : 		{
; 1242 : 			return;
; 1243 : 		}
; 1244 : 		lpUser->ZtCred -= this->m_ResetRageCredit;

  000a3	d8 aa a8 22 00
	00		 fsubr	 DWORD PTR [edx+8872]
  000a9	d9 9a a8 22 00
	00		 fstp	 DWORD PTR [edx+8872]
$LN2@CGRageRese:

; 1245 : 	}
; 1246 : 
; 1247 : 	int iTotalRagePoint = this->rUser[aIndex].rPoints;
; 1248 : 
; 1249 : 	iTotalRagePoint += this->rUser[aIndex].Damage;
; 1250 : 	iTotalRagePoint += this->rUser[aIndex].FreePoints;
; 1251 : 	iTotalRagePoint += this->rUser[aIndex].SummonPet;
; 1252 : 	iTotalRagePoint += this->rUser[aIndex].WingsDamagePlus;
; 1253 : 	iTotalRagePoint += this->rUser[aIndex].FinalMana;
; 1254 : 	iTotalRagePoint += this->rUser[aIndex].IgnoreDefence;
; 1255 : 	iTotalRagePoint += this->rUser[aIndex].ResetLevel;
; 1256 : 	iTotalRagePoint += this->rUser[aIndex].Teleport;
; 1257 : 	iTotalRagePoint += this->rUser[aIndex].CriticalDamageRate;
; 1258 : 	iTotalRagePoint += this->rUser[aIndex].AbsordDamage;
; 1259 : 	iTotalRagePoint += this->rUser[aIndex].PetDamageBonus;
; 1260 : 	iTotalRagePoint += this->rUser[aIndex].FinalLife;
; 1261 : 	iTotalRagePoint += this->rUser[aIndex].Strength;
; 1262 : 	iTotalRagePoint += this->rUser[aIndex].DefenceRate;
; 1263 : 	iTotalRagePoint += this->rUser[aIndex].FireDamage;
; 1264 : 	iTotalRagePoint += this->rUser[aIndex].Energy;
; 1265 : 	iTotalRagePoint += this->rUser[aIndex].Agility;
; 1266 : 	iTotalRagePoint += this->rUser[aIndex].DoubleDamage;
; 1267 : 	iTotalRagePoint += this->rUser[aIndex].FinalSD;
; 1268 : 	iTotalRagePoint += this->rUser[aIndex].FinalDefence;
; 1269 : 	iTotalRagePoint += this->rUser[aIndex].ZenDrop;
; 1270 : 	iTotalRagePoint += this->rUser[aIndex].GuildBonus;
; 1271 : 	iTotalRagePoint += this->rUser[aIndex].ReflectDamage;
; 1272 : 	iTotalRagePoint += this->rUser[aIndex].ExellentDamageRate;
; 1273 : 	iTotalRagePoint += this->rUser[aIndex].PvPBonusPlus;
; 1274 : 	iTotalRagePoint += this->rUser[aIndex].MinDefence;
; 1275 : 	iTotalRagePoint += this->rUser[aIndex].Experience;
; 1276 : 	iTotalRagePoint += this->rUser[aIndex].StartSD;
; 1277 : 	iTotalRagePoint += this->rUser[aIndex].PartyBonus;
; 1278 : 	iTotalRagePoint += this->rUser[aIndex].IceDamage;
; 1279 : 	iTotalRagePoint += this->rUser[aIndex].DistanceAttack;
; 1280 : 	iTotalRagePoint += this->rUser[aIndex].AttackRate;
; 1281 : 	iTotalRagePoint += this->rUser[aIndex].WeaponBonus;
; 1282 : 	iTotalRagePoint += this->rUser[aIndex].ExellentDamage;
; 1283 : 	iTotalRagePoint += this->rUser[aIndex].CriticalDamage;

  000af	56		 push	 esi
  000b0	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  000b3	c1 e0 05	 shl	 eax, 5
  000b6	03 c1		 add	 eax, ecx
  000b8	8b b0 cc 00 00
	00		 mov	 esi, DWORD PTR [eax+204]
  000be	03 b0 c8 00 00
	00		 add	 esi, DWORD PTR [eax+200]

; 1284 : 
; 1285 : 	this->rUser[aIndex].rPoints = iTotalRagePoint;
; 1286 : 
; 1287 : 	this->rUser[aIndex].Damage = 0;
; 1288 : 	this->rUser[aIndex].FreePoints = 0;
; 1289 : 	this->rUser[aIndex].SummonPet = 0;
; 1290 : 	this->rUser[aIndex].WingsDamagePlus = 0;
; 1291 : 	this->rUser[aIndex].FinalMana = 0;
; 1292 : 	this->rUser[aIndex].IgnoreDefence = 0;
; 1293 : 	this->rUser[aIndex].ResetLevel = 0;
; 1294 : 	this->rUser[aIndex].Teleport = 0;
; 1295 : 	this->rUser[aIndex].CriticalDamageRate = 0;
; 1296 : 	this->rUser[aIndex].AbsordDamage = 0;
; 1297 : 	this->rUser[aIndex].PetDamageBonus = 0;
; 1298 : 	this->rUser[aIndex].FinalLife = 0;
; 1299 : 	this->rUser[aIndex].Strength = 0;
; 1300 : 	this->rUser[aIndex].DefenceRate = 0;
; 1301 : 	this->rUser[aIndex].FireDamage = 0;
; 1302 : 	this->rUser[aIndex].Energy = 0;
; 1303 : 	this->rUser[aIndex].Agility = 0;
; 1304 : 	this->rUser[aIndex].DoubleDamage = 0;
; 1305 : 	this->rUser[aIndex].FinalSD = 0;
; 1306 : 	this->rUser[aIndex].FinalDefence = 0;
; 1307 : 	this->rUser[aIndex].ZenDrop = 0;
; 1308 : 	this->rUser[aIndex].GuildBonus = 0;
; 1309 : 	this->rUser[aIndex].ReflectDamage = 0;
; 1310 : 	this->rUser[aIndex].ExellentDamageRate = 0;
; 1311 : 	this->rUser[aIndex].PvPBonusPlus = 0;
; 1312 : 	this->rUser[aIndex].MinDefence = 0;
; 1313 : 	this->rUser[aIndex].Experience = 0;
; 1314 : 	this->rUser[aIndex].StartSD = 0;
; 1315 : 	this->rUser[aIndex].PartyBonus = 0;
; 1316 : 	this->rUser[aIndex].IceDamage = 0;
; 1317 : 	this->rUser[aIndex].DistanceAttack = 0;
; 1318 : 	this->rUser[aIndex].AttackRate = 0;
; 1319 : 	this->rUser[aIndex].WeaponBonus = 0;
; 1320 : 	this->rUser[aIndex].ExellentDamage = 0;
; 1321 : 	this->rUser[aIndex].CriticalDamage = 0;
; 1322 : 
; 1323 : 	this->SendUser(aIndex);

  000c4	53		 push	 ebx
  000c5	03 b0 c4 00 00
	00		 add	 esi, DWORD PTR [eax+196]
  000cb	89 b8 c4 00 00
	00		 mov	 DWORD PTR [eax+196], edi
  000d1	03 b0 c0 00 00
	00		 add	 esi, DWORD PTR [eax+192]
  000d7	89 b8 c0 00 00
	00		 mov	 DWORD PTR [eax+192], edi
  000dd	03 b0 bc 00 00
	00		 add	 esi, DWORD PTR [eax+188]
  000e3	89 b8 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edi
  000e9	03 b0 b8 00 00
	00		 add	 esi, DWORD PTR [eax+184]
  000ef	89 b8 b8 00 00
	00		 mov	 DWORD PTR [eax+184], edi
  000f5	03 b0 b4 00 00
	00		 add	 esi, DWORD PTR [eax+180]
  000fb	89 b8 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edi
  00101	03 b0 b0 00 00
	00		 add	 esi, DWORD PTR [eax+176]
  00107	89 b8 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edi
  0010d	03 b0 ac 00 00
	00		 add	 esi, DWORD PTR [eax+172]
  00113	89 b8 ac 00 00
	00		 mov	 DWORD PTR [eax+172], edi
  00119	03 b0 a8 00 00
	00		 add	 esi, DWORD PTR [eax+168]
  0011f	89 b8 a8 00 00
	00		 mov	 DWORD PTR [eax+168], edi
  00125	03 b0 a4 00 00
	00		 add	 esi, DWORD PTR [eax+164]
  0012b	89 b8 a4 00 00
	00		 mov	 DWORD PTR [eax+164], edi
  00131	03 b0 a0 00 00
	00		 add	 esi, DWORD PTR [eax+160]
  00137	89 b8 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edi
  0013d	03 b0 9c 00 00
	00		 add	 esi, DWORD PTR [eax+156]
  00143	89 b8 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edi
  00149	03 b0 98 00 00
	00		 add	 esi, DWORD PTR [eax+152]
  0014f	89 b8 98 00 00
	00		 mov	 DWORD PTR [eax+152], edi
  00155	03 b0 94 00 00
	00		 add	 esi, DWORD PTR [eax+148]
  0015b	89 b8 94 00 00
	00		 mov	 DWORD PTR [eax+148], edi
  00161	03 b0 90 00 00
	00		 add	 esi, DWORD PTR [eax+144]
  00167	89 b8 90 00 00
	00		 mov	 DWORD PTR [eax+144], edi
  0016d	03 b0 8c 00 00
	00		 add	 esi, DWORD PTR [eax+140]
  00173	89 b8 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edi
  00179	03 b0 88 00 00
	00		 add	 esi, DWORD PTR [eax+136]
  0017f	89 b8 88 00 00
	00		 mov	 DWORD PTR [eax+136], edi
  00185	03 b0 84 00 00
	00		 add	 esi, DWORD PTR [eax+132]
  0018b	89 b8 84 00 00
	00		 mov	 DWORD PTR [eax+132], edi
  00191	03 b0 80 00 00
	00		 add	 esi, DWORD PTR [eax+128]
  00197	89 b8 80 00 00
	00		 mov	 DWORD PTR [eax+128], edi
  0019d	03 70 7c	 add	 esi, DWORD PTR [eax+124]
  001a0	89 78 7c	 mov	 DWORD PTR [eax+124], edi
  001a3	03 70 78	 add	 esi, DWORD PTR [eax+120]
  001a6	89 78 78	 mov	 DWORD PTR [eax+120], edi
  001a9	03 70 74	 add	 esi, DWORD PTR [eax+116]
  001ac	89 78 74	 mov	 DWORD PTR [eax+116], edi
  001af	03 70 70	 add	 esi, DWORD PTR [eax+112]
  001b2	89 78 70	 mov	 DWORD PTR [eax+112], edi
  001b5	03 70 6c	 add	 esi, DWORD PTR [eax+108]
  001b8	89 78 6c	 mov	 DWORD PTR [eax+108], edi
  001bb	03 70 68	 add	 esi, DWORD PTR [eax+104]
  001be	89 78 68	 mov	 DWORD PTR [eax+104], edi
  001c1	03 70 64	 add	 esi, DWORD PTR [eax+100]
  001c4	89 78 64	 mov	 DWORD PTR [eax+100], edi
  001c7	03 70 60	 add	 esi, DWORD PTR [eax+96]
  001ca	89 78 60	 mov	 DWORD PTR [eax+96], edi
  001cd	03 70 5c	 add	 esi, DWORD PTR [eax+92]
  001d0	89 78 5c	 mov	 DWORD PTR [eax+92], edi
  001d3	03 70 58	 add	 esi, DWORD PTR [eax+88]
  001d6	89 78 58	 mov	 DWORD PTR [eax+88], edi
  001d9	03 70 54	 add	 esi, DWORD PTR [eax+84]
  001dc	89 78 54	 mov	 DWORD PTR [eax+84], edi
  001df	03 70 50	 add	 esi, DWORD PTR [eax+80]
  001e2	89 78 50	 mov	 DWORD PTR [eax+80], edi
  001e5	03 70 4c	 add	 esi, DWORD PTR [eax+76]
  001e8	89 78 4c	 mov	 DWORD PTR [eax+76], edi
  001eb	03 70 48	 add	 esi, DWORD PTR [eax+72]
  001ee	89 78 48	 mov	 DWORD PTR [eax+72], edi
  001f1	03 70 44	 add	 esi, DWORD PTR [eax+68]
  001f4	89 78 44	 mov	 DWORD PTR [eax+68], edi
  001f7	03 70 38	 add	 esi, DWORD PTR [eax+56]
  001fa	89 b8 c8 00 00
	00		 mov	 DWORD PTR [eax+200], edi
  00200	89 70 38	 mov	 DWORD PTR [eax+56], esi
  00203	89 b8 cc 00 00
	00		 mov	 DWORD PTR [eax+204], edi
  00209	e8 00 00 00 00	 call	 ?SendUser@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SendUser

; 1324 : 	gObjCalCharacter(aIndex);

  0020e	53		 push	 ebx
  0020f	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter

; 1325 : 
; 1326 : 	MsgOutput(aIndex, "[Rage System] Reset points, total points: %d", iTotalRagePoint);

  00214	56		 push	 esi
  00215	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@
  0021a	53		 push	 ebx
  0021b	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00220	83 c4 10	 add	 esp, 16			; 00000010H
  00223	5e		 pop	 esi
  00224	5f		 pop	 edi
  00225	5b		 pop	 ebx

; 1327 : }

  00226	8b e5		 mov	 esp, ebp
  00228	5d		 pop	 ebp
  00229	c2 08 00	 ret	 8
$LN16@CGRageRese:

; 1239 : 	{
; 1240 : 		if(this->m_ResetRageCredit > lpUser->ZtCred)

  0022c	dd d8		 fstp	 ST(0)
$LN8@CGRageRese:
  0022e	5f		 pop	 edi
  0022f	5b		 pop	 ebx

; 1327 : }

  00230	8b e5		 mov	 esp, ebp
  00232	5d		 pop	 ebp
  00233	c2 08 00	 ret	 8
?CGRageReset@cSystemOfRage@@QAEXHPAUPMSG_ANS_RESETRAGE@@@Z ENDP ; cSystemOfRage::CGRageReset
_TEXT	ENDS
PUBLIC	?EvoRageReset@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::EvoRageReset
; Function compile flags: /Ogtp
;	COMDAT ?EvoRageReset@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?EvoRageReset@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::EvoRageReset, COMDAT
; _this$ = ecx

; 1330 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1331 : 	if(!this->Enable)

  00003	33 d2		 xor	 edx, edx
  00005	38 11		 cmp	 BYTE PTR [ecx], dl
  00007	0f 84 9e 01 00
	00		 je	 $LN4@EvoRageRes

; 1332 : 	{
; 1333 : 		return;
; 1334 : 	}
; 1335 : 
; 1336 : 	if(!OBJMAX_RANGE(aIndex))

  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00011	3b fa		 cmp	 edi, edx
  00013	0f 8c 91 01 00
	00		 jl	 $LN8@EvoRageRes
  00019	33 c0		 xor	 eax, eax
  0001b	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00021	0f 9e c0	 setle	 al
  00024	3b c2		 cmp	 eax, edx
  00026	0f 84 7e 01 00
	00		 je	 $LN8@EvoRageRes

; 1337 : 	{
; 1338 : 		return;
; 1339 : 	}
; 1340 : 
; 1341 : 	if(!this->rUser[aIndex].LoadInfo)

  0002c	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  0002f	c1 e0 05	 shl	 eax, 5
  00032	03 c1		 add	 eax, ecx
  00034	39 50 30	 cmp	 DWORD PTR [eax+48], edx
  00037	0f 84 6d 01 00
	00		 je	 $LN8@EvoRageRes

; 1342 : 	{
; 1343 : 		return;
; 1344 : 	}
; 1345 : 
; 1346 : 	int iTotalRagePoint = this->rUser[aIndex].rPoints;
; 1347 : 
; 1348 : 	iTotalRagePoint += this->rUser[aIndex].Damage;
; 1349 : 	iTotalRagePoint += this->rUser[aIndex].FreePoints;
; 1350 : 	iTotalRagePoint += this->rUser[aIndex].SummonPet;
; 1351 : 	iTotalRagePoint += this->rUser[aIndex].WingsDamagePlus;
; 1352 : 	iTotalRagePoint += this->rUser[aIndex].FinalMana;
; 1353 : 	iTotalRagePoint += this->rUser[aIndex].IgnoreDefence;
; 1354 : 	iTotalRagePoint += this->rUser[aIndex].ResetLevel;
; 1355 : 	iTotalRagePoint += this->rUser[aIndex].Teleport;
; 1356 : 	iTotalRagePoint += this->rUser[aIndex].CriticalDamageRate;
; 1357 : 	iTotalRagePoint += this->rUser[aIndex].AbsordDamage;
; 1358 : 	iTotalRagePoint += this->rUser[aIndex].PetDamageBonus;
; 1359 : 	iTotalRagePoint += this->rUser[aIndex].FinalLife;
; 1360 : 	iTotalRagePoint += this->rUser[aIndex].Strength;
; 1361 : 	iTotalRagePoint += this->rUser[aIndex].DefenceRate;
; 1362 : 	iTotalRagePoint += this->rUser[aIndex].FireDamage;
; 1363 : 	iTotalRagePoint += this->rUser[aIndex].Energy;
; 1364 : 	iTotalRagePoint += this->rUser[aIndex].Agility;
; 1365 : 	iTotalRagePoint += this->rUser[aIndex].DoubleDamage;
; 1366 : 	iTotalRagePoint += this->rUser[aIndex].FinalSD;
; 1367 : 	iTotalRagePoint += this->rUser[aIndex].FinalDefence;
; 1368 : 	iTotalRagePoint += this->rUser[aIndex].ZenDrop;
; 1369 : 	iTotalRagePoint += this->rUser[aIndex].GuildBonus;
; 1370 : 	iTotalRagePoint += this->rUser[aIndex].ReflectDamage;
; 1371 : 	iTotalRagePoint += this->rUser[aIndex].ExellentDamageRate;
; 1372 : 	iTotalRagePoint += this->rUser[aIndex].PvPBonusPlus;
; 1373 : 	iTotalRagePoint += this->rUser[aIndex].MinDefence;
; 1374 : 	iTotalRagePoint += this->rUser[aIndex].Experience;
; 1375 : 	iTotalRagePoint += this->rUser[aIndex].StartSD;
; 1376 : 	iTotalRagePoint += this->rUser[aIndex].PartyBonus;
; 1377 : 	iTotalRagePoint += this->rUser[aIndex].IceDamage;
; 1378 : 	iTotalRagePoint += this->rUser[aIndex].DistanceAttack;
; 1379 : 	iTotalRagePoint += this->rUser[aIndex].AttackRate;
; 1380 : 	iTotalRagePoint += this->rUser[aIndex].WeaponBonus;
; 1381 : 	iTotalRagePoint += this->rUser[aIndex].ExellentDamage;
; 1382 : 	iTotalRagePoint += this->rUser[aIndex].CriticalDamage;

  0003d	56		 push	 esi
  0003e	8b b0 c8 00 00
	00		 mov	 esi, DWORD PTR [eax+200]
  00044	03 b0 c4 00 00
	00		 add	 esi, DWORD PTR [eax+196]

; 1383 : 
; 1384 : 	this->rUser[aIndex].Damage = 0;
; 1385 : 	this->rUser[aIndex].FreePoints = 0;
; 1386 : 	this->rUser[aIndex].SummonPet = 0;
; 1387 : 	this->rUser[aIndex].WingsDamagePlus = 0;
; 1388 : 	this->rUser[aIndex].FinalMana = 0;
; 1389 : 	this->rUser[aIndex].IgnoreDefence = 0;
; 1390 : 	this->rUser[aIndex].ResetLevel = 0;
; 1391 : 	this->rUser[aIndex].Teleport = 0;
; 1392 : 	this->rUser[aIndex].CriticalDamageRate = 0;
; 1393 : 	this->rUser[aIndex].AbsordDamage = 0;
; 1394 : 	this->rUser[aIndex].PetDamageBonus = 0;
; 1395 : 	this->rUser[aIndex].FinalLife = 0;
; 1396 : 	this->rUser[aIndex].Strength = 0;
; 1397 : 	this->rUser[aIndex].DefenceRate = 0;
; 1398 : 	this->rUser[aIndex].FireDamage = 0;
; 1399 : 	this->rUser[aIndex].Energy = 0;
; 1400 : 	this->rUser[aIndex].Agility = 0;
; 1401 : 	this->rUser[aIndex].DoubleDamage = 0;
; 1402 : 	this->rUser[aIndex].FinalSD = 0;
; 1403 : 	this->rUser[aIndex].FinalDefence = 0;
; 1404 : 	this->rUser[aIndex].ZenDrop = 0;
; 1405 : 	this->rUser[aIndex].GuildBonus = 0;
; 1406 : 	this->rUser[aIndex].ReflectDamage = 0;
; 1407 : 	this->rUser[aIndex].ExellentDamageRate = 0;
; 1408 : 	this->rUser[aIndex].PvPBonusPlus = 0;
; 1409 : 	this->rUser[aIndex].MinDefence = 0;
; 1410 : 	this->rUser[aIndex].Experience = 0;
; 1411 : 	this->rUser[aIndex].StartSD = 0;
; 1412 : 	this->rUser[aIndex].PartyBonus = 0;
; 1413 : 	this->rUser[aIndex].IceDamage = 0;
; 1414 : 	this->rUser[aIndex].DistanceAttack = 0;
; 1415 : 	this->rUser[aIndex].AttackRate = 0;
; 1416 : 	this->rUser[aIndex].WeaponBonus = 0;
; 1417 : 	this->rUser[aIndex].ExellentDamage = 0;
; 1418 : 	this->rUser[aIndex].CriticalDamage = 0;
; 1419 : 
; 1420 : 	this->rUser[aIndex].rPoints = iTotalRagePoint;
; 1421 : 
; 1422 : 	this->SendUser(aIndex);

  0004a	57		 push	 edi
  0004b	03 b0 c0 00 00
	00		 add	 esi, DWORD PTR [eax+192]
  00051	89 90 c0 00 00
	00		 mov	 DWORD PTR [eax+192], edx
  00057	03 b0 bc 00 00
	00		 add	 esi, DWORD PTR [eax+188]
  0005d	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx
  00063	03 b0 b8 00 00
	00		 add	 esi, DWORD PTR [eax+184]
  00069	89 90 b8 00 00
	00		 mov	 DWORD PTR [eax+184], edx
  0006f	03 b0 b4 00 00
	00		 add	 esi, DWORD PTR [eax+180]
  00075	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx
  0007b	03 b0 b0 00 00
	00		 add	 esi, DWORD PTR [eax+176]
  00081	89 90 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edx
  00087	03 b0 ac 00 00
	00		 add	 esi, DWORD PTR [eax+172]
  0008d	89 90 ac 00 00
	00		 mov	 DWORD PTR [eax+172], edx
  00093	03 b0 a8 00 00
	00		 add	 esi, DWORD PTR [eax+168]
  00099	89 90 a8 00 00
	00		 mov	 DWORD PTR [eax+168], edx
  0009f	03 b0 a4 00 00
	00		 add	 esi, DWORD PTR [eax+164]
  000a5	89 90 a4 00 00
	00		 mov	 DWORD PTR [eax+164], edx
  000ab	03 b0 a0 00 00
	00		 add	 esi, DWORD PTR [eax+160]
  000b1	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx
  000b7	03 b0 9c 00 00
	00		 add	 esi, DWORD PTR [eax+156]
  000bd	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  000c3	03 b0 98 00 00
	00		 add	 esi, DWORD PTR [eax+152]
  000c9	89 90 98 00 00
	00		 mov	 DWORD PTR [eax+152], edx
  000cf	03 b0 94 00 00
	00		 add	 esi, DWORD PTR [eax+148]
  000d5	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx
  000db	03 b0 90 00 00
	00		 add	 esi, DWORD PTR [eax+144]
  000e1	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx
  000e7	03 b0 8c 00 00
	00		 add	 esi, DWORD PTR [eax+140]
  000ed	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx
  000f3	03 b0 88 00 00
	00		 add	 esi, DWORD PTR [eax+136]
  000f9	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx
  000ff	03 b0 84 00 00
	00		 add	 esi, DWORD PTR [eax+132]
  00105	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx
  0010b	03 b0 80 00 00
	00		 add	 esi, DWORD PTR [eax+128]
  00111	89 90 80 00 00
	00		 mov	 DWORD PTR [eax+128], edx
  00117	03 70 7c	 add	 esi, DWORD PTR [eax+124]
  0011a	89 50 7c	 mov	 DWORD PTR [eax+124], edx
  0011d	03 70 78	 add	 esi, DWORD PTR [eax+120]
  00120	89 50 78	 mov	 DWORD PTR [eax+120], edx
  00123	03 70 74	 add	 esi, DWORD PTR [eax+116]
  00126	89 50 74	 mov	 DWORD PTR [eax+116], edx
  00129	03 70 70	 add	 esi, DWORD PTR [eax+112]
  0012c	89 50 70	 mov	 DWORD PTR [eax+112], edx
  0012f	03 70 6c	 add	 esi, DWORD PTR [eax+108]
  00132	89 50 6c	 mov	 DWORD PTR [eax+108], edx
  00135	03 70 68	 add	 esi, DWORD PTR [eax+104]
  00138	89 50 68	 mov	 DWORD PTR [eax+104], edx
  0013b	03 70 64	 add	 esi, DWORD PTR [eax+100]
  0013e	89 50 64	 mov	 DWORD PTR [eax+100], edx
  00141	03 70 60	 add	 esi, DWORD PTR [eax+96]
  00144	89 50 60	 mov	 DWORD PTR [eax+96], edx
  00147	03 70 5c	 add	 esi, DWORD PTR [eax+92]
  0014a	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  0014d	03 70 58	 add	 esi, DWORD PTR [eax+88]
  00150	89 50 58	 mov	 DWORD PTR [eax+88], edx
  00153	03 70 54	 add	 esi, DWORD PTR [eax+84]
  00156	89 50 54	 mov	 DWORD PTR [eax+84], edx
  00159	03 70 50	 add	 esi, DWORD PTR [eax+80]
  0015c	89 50 50	 mov	 DWORD PTR [eax+80], edx
  0015f	03 70 4c	 add	 esi, DWORD PTR [eax+76]
  00162	89 50 4c	 mov	 DWORD PTR [eax+76], edx
  00165	03 70 48	 add	 esi, DWORD PTR [eax+72]
  00168	89 50 48	 mov	 DWORD PTR [eax+72], edx
  0016b	03 70 44	 add	 esi, DWORD PTR [eax+68]
  0016e	89 50 44	 mov	 DWORD PTR [eax+68], edx
  00171	03 70 38	 add	 esi, DWORD PTR [eax+56]
  00174	89 90 c4 00 00
	00		 mov	 DWORD PTR [eax+196], edx
  0017a	03 b0 cc 00 00
	00		 add	 esi, DWORD PTR [eax+204]
  00180	89 90 c8 00 00
	00		 mov	 DWORD PTR [eax+200], edx
  00186	89 90 cc 00 00
	00		 mov	 DWORD PTR [eax+204], edx
  0018c	89 70 38	 mov	 DWORD PTR [eax+56], esi
  0018f	e8 00 00 00 00	 call	 ?SendUser@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SendUser

; 1423 : 	gObjCalCharacter(aIndex);

  00194	57		 push	 edi
  00195	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter

; 1424 : 
; 1425 : 	MsgOutput(aIndex, "[Rage System] Reset points, total points: %d", iTotalRagePoint);

  0019a	56		 push	 esi
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@PJIICCPP@?$FLRage?5System?$FN?5Reset?5points?0?5tota@
  001a0	57		 push	 edi
  001a1	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  001a6	83 c4 10	 add	 esp, 16			; 00000010H
  001a9	5e		 pop	 esi
$LN8@EvoRageRes:
  001aa	5f		 pop	 edi
$LN4@EvoRageRes:

; 1426 : }

  001ab	5d		 pop	 ebp
  001ac	c2 04 00	 ret	 4
?EvoRageReset@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::EvoRageReset
_TEXT	ENDS
PUBLIC	?RecvActiveSkill@cSystemOfRage@@QAEXPAUsRageTabSend@@H@Z ; cSystemOfRage::RecvActiveSkill
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
; Function compile flags: /Ogtp
;	COMDAT ?RecvActiveSkill@cSystemOfRage@@QAEXPAUsRageTabSend@@H@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?RecvActiveSkill@cSystemOfRage@@QAEXPAUsRageTabSend@@H@Z PROC ; cSystemOfRage::RecvActiveSkill, COMDAT
; _this$ = ecx

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 755  : 	if(aRecv->Num == eSkill8 && this->rUser[aIndex].Teleport > 0)	//Teleport

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _aRecv$[ebp]
  00007	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	83 f8 08	 cmp	 eax, 8
  00014	75 17		 jne	 SHORT $LN6@RecvActive
  00016	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00019	c1 e1 05	 shl	 ecx, 5
  0001c	83 7c 39 60 00	 cmp	 DWORD PTR [ecx+edi+96], 0
  00021	7e 0a		 jle	 SHORT $LN6@RecvActive

; 756  : 	{
; 757  : 		this->TeleportSkill(aIndex);

  00023	56		 push	 esi
  00024	8b cf		 mov	 ecx, edi
  00026	e8 00 00 00 00	 call	 ?TeleportSkill@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::TeleportSkill
  0002b	eb 1a		 jmp	 SHORT $LN4@RecvActive
$LN6@RecvActive:

; 758  : 	}
; 759  : 	else if(aRecv->Num == eSkill3 && this->rUser[aIndex].SummonPet > 0)

  0002d	83 f8 03	 cmp	 eax, 3
  00030	75 15		 jne	 SHORT $LN4@RecvActive
  00032	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  00035	c1 e2 05	 shl	 edx, 5
  00038	83 7c 3a 4c 00	 cmp	 DWORD PTR [edx+edi+76], 0
  0003d	7e 08		 jle	 SHORT $LN4@RecvActive

; 760  : 	{
; 761  : 		this->SummonPetSkill(aIndex);

  0003f	56		 push	 esi
  00040	8b cf		 mov	 ecx, edi
  00042	e8 00 00 00 00	 call	 ?SummonPetSkill@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SummonPetSkill
$LN4@RecvActive:

; 762  : 	}
; 763  : 
; 764  : 	if( g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::Gredy2) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) )

  00047	6a 20		 push	 32			; 00000020H
  00049	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0004e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00053	84 c0		 test	 al, al
  00055	75 20		 jne	 SHORT $LN2@RecvActive
  00057	6a 22		 push	 34			; 00000022H
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0005e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00063	84 c0		 test	 al, al
  00065	75 10		 jne	 SHORT $LN2@RecvActive
  00067	6a 21		 push	 33			; 00000021H
  00069	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0006e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00073	84 c0		 test	 al, al
  00075	74 0e		 je	 SHORT $LN1@RecvActive
$LN2@RecvActive:

; 765  : 	{
; 766  : 		if(aRecv->Num == eSkillReset)

  00077	83 7b 04 24	 cmp	 DWORD PTR [ebx+4], 36	; 00000024H
  0007b	75 08		 jne	 SHORT $LN1@RecvActive

; 767  : 		{
; 768  : 			this->EvoRageReset(aIndex);

  0007d	56		 push	 esi
  0007e	8b cf		 mov	 ecx, edi
  00080	e8 00 00 00 00	 call	 ?EvoRageReset@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::EvoRageReset
$LN1@RecvActive:
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx

; 769  : 		}
; 770  : 	}
; 771  : }

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
?RecvActiveSkill@cSystemOfRage@@QAEXPAUsRageTabSend@@H@Z ENDP ; cSystemOfRage::RecvActiveSkill
_TEXT	ENDS
PUBLIC	?RecvDSProtocol@cSystemOfRage@@QAEXPAUDSRageUser@@@Z ; cSystemOfRage::RecvDSProtocol
; Function compile flags: /Ogtp
;	COMDAT ?RecvDSProtocol@cSystemOfRage@@QAEXPAUDSRageUser@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?RecvDSProtocol@cSystemOfRage@@QAEXPAUDSRageUser@@@Z PROC ; cSystemOfRage::RecvDSProtocol, COMDAT
; _this$ = ecx

; 810  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 811  : 
; 812  : 	if(g_ZtLicense.user.Rage)

  00003	80 3d cd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, 0
  0000a	74 15		 je	 SHORT $LN1@RecvDSProt

; 813  : 	{
; 814  : 		gSystemOfRage.NewDBLoad(aRecv->aIndex, aRecv->RageSystem);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0000f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00012	8d 48 14	 lea	 ecx, DWORD PTR [eax+20]
  00015	51		 push	 ecx
  00016	52		 push	 edx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  0001c	e8 00 00 00 00	 call	 ?NewDBLoad@cSystemOfRage@@QAEXHPAE@Z ; cSystemOfRage::NewDBLoad
$LN1@RecvDSProt:

; 815  : 	}
; 816  : 	return;
; 817  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?RecvDSProtocol@cSystemOfRage@@QAEXPAUDSRageUser@@@Z ENDP ; cSystemOfRage::RecvDSProtocol
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendSaveData@cSystemOfRage@@QAEXH@Z		; cSystemOfRage::SendSaveData
; Function compile flags: /Ogtp
;	COMDAT ?SendSaveData@cSystemOfRage@@QAEXH@Z
_TEXT	SEGMENT
_pInfo$ = -172						; size = 166
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?SendSaveData@cSystemOfRage@@QAEXH@Z PROC		; cSystemOfRage::SendSaveData, COMDAT
; _this$ = ecx

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 821  : 	if(!this->Enable) return;

  00013	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0001a	74 6c		 je	 SHORT $LN3@SendSaveDa

; 822  : 
; 823  : 	if(!this->rUser[aIndex].LoadInfo)

  0001c	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0001f	c1 e0 05	 shl	 eax, 5
  00022	83 7c 08 30 00	 cmp	 DWORD PTR [eax+ecx+48], 0
  00027	74 5f		 je	 SHORT $LN3@SendSaveDa

; 824  : 	{
; 825  : 		return;
; 826  : 	}
; 827  : 
; 828  : 	LPOBJ lpUser = &gObj[aIndex];
; 829  : 
; 830  : 	DBRageUserSave pInfo;
; 831  : 	pInfo.h.c =0xC1;
; 832  : 	pInfo.h.size = sizeof(DBRageUserSave);
; 833  : 	pInfo.h.headcode =0xE1;
; 834  : 	strncpy(pInfo.Name,lpUser->Name,10);

  00029	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002f	8b ce		 mov	 ecx, esi
  00031	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00037	8d 44 11 77	 lea	 eax, DWORD PTR [ecx+edx+119]
  0003b	6a 0a		 push	 10			; 0000000aH
  0003d	50		 push	 eax
  0003e	8d 8d 57 ff ff
	ff		 lea	 ecx, DWORD PTR _pInfo$[ebp+3]
  00044	51		 push	 ecx
  00045	66 c7 85 54 ff
	ff ff c1 a6	 mov	 WORD PTR _pInfo$[ebp], 42689 ; 0000a6c1H
  0004e	c6 85 56 ff ff
	ff e1		 mov	 BYTE PTR _pInfo$[ebp+2], 225 ; 000000e1H
  00055	e8 00 00 00 00	 call	 _strncpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 835  : 	gSystemOfRage.NewDBSave(aIndex, pInfo.RageSystem);

  0005d	8d 95 62 ff ff
	ff		 lea	 edx, DWORD PTR _pInfo$[ebp+14]
  00063	52		 push	 edx
  00064	56		 push	 esi
  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  0006a	e8 00 00 00 00	 call	 ?NewDBSave@cSystemOfRage@@QAEXHPAE@Z ; cSystemOfRage::NewDBSave

; 836  : 	cDBSMng.Send((char*)&pInfo, pInfo.h.size);

  0006f	0f b6 85 55 ff
	ff ff		 movzx	 eax, BYTE PTR _pInfo$[ebp+1]
  00076	50		 push	 eax
  00077	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _pInfo$[ebp]
  0007d	51		 push	 ecx
  0007e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00083	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@SendSaveDa:

; 837  : }

  00088	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008b	33 cd		 xor	 ecx, ebp
  0008d	5e		 pop	 esi
  0008e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
?SendSaveData@cSystemOfRage@@QAEXH@Z ENDP		; cSystemOfRage::SendSaveData
_TEXT	ENDS
END
