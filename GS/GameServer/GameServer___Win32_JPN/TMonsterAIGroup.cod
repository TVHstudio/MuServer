; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\TMonsterAIGroup.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA ; TMonsterAIGroup::s_iMonsterAIGroupMemberCount
PUBLIC	?s_bDataLoad@TMonsterAIGroup@@2HA		; TMonsterAIGroup::s_bDataLoad
_BSS	SEGMENT
?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA DD 064H DUP (?) ; TMonsterAIGroup::s_iMonsterAIGroupMemberCount
?s_bDataLoad@TMonsterAIGroup@@2HA DD 01H DUP (?)	; TMonsterAIGroup::s_bDataLoad
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7TMonsterAIGroup@@6B@			; TMonsterAIGroup::`vftable'
PUBLIC	??1TMonsterAIGroup@@UAE@XZ			; TMonsterAIGroup::~TMonsterAIGroup
PUBLIC	??_R4TMonsterAIGroup@@6B@			; TMonsterAIGroup::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTMonsterAIGroup@@@8			; TMonsterAIGroup `RTTI Type Descriptor'
PUBLIC	??_R3TMonsterAIGroup@@8				; TMonsterAIGroup::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TMonsterAIGroup@@8				; TMonsterAIGroup::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TMonsterAIGroup@@8		; TMonsterAIGroup::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETMonsterAIGroup@@UAEPAXI@Z:PROC		; TMonsterAIGroup::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@TMonsterAIGroup@@8
; File e:\work\tranet_version\gs\gameserver\tmonsteraigroup.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@TMonsterAIGroup@@8 DD FLAT:??_R0?AVTMonsterAIGroup@@@8 ; TMonsterAIGroup::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TMonsterAIGroup@@8
rdata$r	ENDS
;	COMDAT ??_R2TMonsterAIGroup@@8
rdata$r	SEGMENT
??_R2TMonsterAIGroup@@8 DD FLAT:??_R1A@?0A@EA@TMonsterAIGroup@@8 ; TMonsterAIGroup::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TMonsterAIGroup@@8
rdata$r	SEGMENT
??_R3TMonsterAIGroup@@8 DD 00H				; TMonsterAIGroup::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TMonsterAIGroup@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTMonsterAIGroup@@@8
_DATA	SEGMENT
??_R0?AVTMonsterAIGroup@@@8 DD FLAT:??_7type_info@@6B@	; TMonsterAIGroup `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTMonsterAIGroup@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TMonsterAIGroup@@6B@
rdata$r	SEGMENT
??_R4TMonsterAIGroup@@6B@ DD 00H			; TMonsterAIGroup::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTMonsterAIGroup@@@8
	DD	FLAT:??_R3TMonsterAIGroup@@8
rdata$r	ENDS
;	COMDAT ??_7TMonsterAIGroup@@6B@
CONST	SEGMENT
??_7TMonsterAIGroup@@6B@ DD FLAT:??_R4TMonsterAIGroup@@6B@ ; TMonsterAIGroup::`vftable'
	DD	FLAT:??_ETMonsterAIGroup@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1TMonsterAIGroup@@UAE@XZ
_TEXT	SEGMENT
??1TMonsterAIGroup@@UAE@XZ PROC				; TMonsterAIGroup::~TMonsterAIGroup, COMDAT
; _this$ = ecx

; 31   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TMonsterAIGroup@@6B@

; 32   : 	return;
; 33   : }

  00006	c3		 ret	 0
??1TMonsterAIGroup@@UAE@XZ ENDP				; TMonsterAIGroup::~TMonsterAIGroup
_TEXT	ENDS
PUBLIC	??_C@_0DH@EJJEEGKC@?$FLMonster?5AI?5Group?$FN?5?9?5File?5load?5e@ ; `string'
PUBLIC	??_C@_0DJ@HODFGLNJ@?$FLMonster?5AI?5Group?$FN?5?9?5Loading?5Exc@ ; `string'
PUBLIC	??_C@_0DC@LFNOMCBG@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@ ; `string'
PUBLIC	??_C@_0CN@CNMPNCB@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CI@CJPFLHBA@?$FLMonster?5AI?5Group?5?$FN?5?9?5?$CFs?5file?5is@ ; `string'
PUBLIC	??_C@_0CE@LNCDKEDF@?$FLMonster?5AI?5Group?$FN?5?9?5Can?8t?5Open?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?LoadData@TMonsterAIGroup@@SAHPAD@Z		; TMonsterAIGroup::LoadData
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0DH@EJJEEGKC@?$FLMonster?5AI?5Group?$FN?5?9?5File?5load?5e@
CONST	SEGMENT
??_C@_0DH@EJJEEGKC@?$FLMonster?5AI?5Group?$FN?5?9?5File?5load?5e@ DB '[Mo'
	DB	'nster AI Group] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@HODFGLNJ@?$FLMonster?5AI?5Group?$FN?5?9?5Loading?5Exc@
CONST	SEGMENT
??_C@_0DJ@HODFGLNJ@?$FLMonster?5AI?5Group?$FN?5?9?5Loading?5Exc@ DB '[Mon'
	DB	'ster AI Group] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LFNOMCBG@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@
CONST	SEGMENT
??_C@_0DC@LFNOMCBG@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@ DB '[Mons'
	DB	'ter AI Group] Exceed Max GroupMember %d, %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CNMPNCB@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@
CONST	SEGMENT
??_C@_0CN@CNMPNCB@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@ DB '[Monst'
	DB	'er AI Group] Exceed Max GroupNumber %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CJPFLHBA@?$FLMonster?5AI?5Group?5?$FN?5?9?5?$CFs?5file?5is@
CONST	SEGMENT
??_C@_0CI@CJPFLHBA@?$FLMonster?5AI?5Group?5?$FN?5?9?5?$CFs?5file?5is@ DB '['
	DB	'Monster AI Group ] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LNCDKEDF@?$FLMonster?5AI?5Group?$FN?5?9?5Can?8t?5Open?5@
CONST	SEGMENT
??_C@_0CE@LNCDKEDF@?$FLMonster?5AI?5Group?$FN?5?9?5Can?8t?5Open?5@ DB '[M'
	DB	'onster AI Group] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@TMonsterAIGroup@@SAHPAD@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadData@TMonsterAIGroup@@SAHPAD@Z$0
__unwindtable$?LoadData@TMonsterAIGroup@@SAHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@TMonsterAIGroup@@SAHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@TMonsterAIGroup@@SAHPAD@Z$2
__ehfuncinfo$?LoadData@TMonsterAIGroup@@SAHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@TMonsterAIGroup@@SAHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@TMonsterAIGroup@@SAHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadData@TMonsterAIGroup@@SAHPAD@Z
_TEXT	SEGMENT
_iStartDir$209117 = -60					; size = 4
_iStartY$209116 = -56					; size = 4
_iStartX$209115 = -52					; size = 4
_iMapNumber$209114 = -48				; size = 4
_iCreateType$209113 = -44				; size = 4
_iAI03$209112 = -40					; size = 4
_iAI02$209111 = -36					; size = 4
_iAI01$209110 = -32					; size = 4
_iStartAI$209109 = -28					; size = 4
_iRank$209108 = -24					; size = 4
_iType$209079 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@TMonsterAIGroup@@SAHPAD@Z PROC		; TMonsterAIGroup::LoadData, COMDAT

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@TMonsterAIGroup@@SAHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 39   : 	TMonsterAIGroup::s_bDataLoad = FALSE;
; 40   : 
; 41   : 	if ( !lpszFileName || !strcmp(lpszFileName, ""))

  0002b	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  0002e	33 ff		 xor	 edi, edi
  00030	89 3d 00 00 00
	00		 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIGroup@@2HA, edi ; TMonsterAIGroup::s_bDataLoad
  00036	3b f7		 cmp	 esi, edi
  00038	0f 84 e3 02 00
	00		 je	 $LN12@LoadData
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00043	8b c6		 mov	 eax, esi
$LL26@LoadData:
  00045	8a 10		 mov	 dl, BYTE PTR [eax]
  00047	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00049	75 1a		 jne	 SHORT $LN27@LoadData
  0004b	84 d2		 test	 dl, dl
  0004d	74 12		 je	 SHORT $LN28@LoadData
  0004f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00052	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00055	75 0e		 jne	 SHORT $LN27@LoadData
  00057	83 c0 02	 add	 eax, 2
  0005a	83 c1 02	 add	 ecx, 2
  0005d	84 d2		 test	 dl, dl
  0005f	75 e4		 jne	 SHORT $LL26@LoadData
$LN28@LoadData:
  00061	33 c0		 xor	 eax, eax
  00063	eb 05		 jmp	 SHORT $LN29@LoadData
$LN27@LoadData:
  00065	1b c0		 sbb	 eax, eax
  00067	83 d8 ff	 sbb	 eax, -1
$LN29@LoadData:
  0006a	3b c7		 cmp	 eax, edi
  0006c	0f 84 af 02 00
	00		 je	 $LN12@LoadData

; 45   : 	}
; 46   : 
; 47   : 	try
; 48   : 	{
; 49   : 		SMDToken Token;
; 50   : 		SMDFile = fopen(lpszFileName, "r");

  00072	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00077	56		 push	 esi
  00078	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0007b	e8 00 00 00 00	 call	 _fopen
  00080	83 c4 08	 add	 esp, 8
  00083	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 51   : 
; 52   : 		if ( SMDFile == NULL )

  00088	3b c7		 cmp	 eax, edi
  0008a	75 24		 jne	 SHORT $LL9@LoadData

; 53   : 		{
; 54   : 			MsgBox("[Monster AI Group] - Can't Open %s ", lpszFileName);

  0008c	56		 push	 esi
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LNCDKEDF@?$FLMonster?5AI?5Group?$FN?5?9?5Can?8t?5Open?5@
  00092	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00097	83 c4 08	 add	 esp, 8
  0009a	33 c0		 xor	 eax, eax

; 178  : 
; 179  : 	return FALSE;
; 180  : }

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
  000ae	8b ff		 npad	 2
$LL9@LoadData:

; 55   : 			return FALSE;
; 56   : 		}
; 57   : 
; 58   : 		int iType = -1;
; 59   : 
; 60   : 		while ( true )
; 61   : 		{
; 62   : 			Token = GetToken();

  000b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 63   : 
; 64   : 			if ( Token == END )

  000b5	83 f8 02	 cmp	 eax, 2
  000b8	75 3a		 jne	 SHORT $LN7@LoadData

; 166  : 		}	// while ( true )
; 167  : 
; 168  : 		fclose(SMDFile);

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _fclose

; 169  : 
; 170  : 		LogAddC(2, "[Monster AI Group ] - %s file is Loaded", lpszFileName);

  000c5	56		 push	 esi
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CJPFLHBA@?$FLMonster?5AI?5Group?5?$FN?5?9?5?$CFs?5file?5is@
  000cb	6a 02		 push	 2
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 171  : 
; 172  : 		TMonsterAIGroup::s_bDataLoad = TRUE;

  000d6	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIGroup@@2HA, 1 ; TMonsterAIGroup::s_bDataLoad
  000e0	33 c0		 xor	 eax, eax

; 178  : 
; 179  : 	return FALSE;
; 180  : }

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
$LN7@LoadData:

; 65   : 				break;
; 66   : 
; 67   : 			iType = (int)TokenNumber;

  000f4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fa	e8 00 00 00 00	 call	 __ftol2_sse
  000ff	89 45 ec	 mov	 DWORD PTR _iType$209079[ebp], eax
$LL6@LoadData:

; 68   : 
; 69   : 			while ( true )
; 70   : 			{
; 71   : 				if ( iType == 0 )

  00102	83 7d ec 00	 cmp	 DWORD PTR _iType$209079[ebp], 0
  00106	75 fa		 jne	 SHORT $LL6@LoadData

; 72   : 				{
; 73   : 					int iGroupNumber = -1;
; 74   : 					int iGuid = -1;
; 75   : 					int iClass = -1;
; 76   : 					int iRank = -1;
; 77   : 					int iStartAI = 0;
; 78   : 					int iAI01 = 0;
; 79   : 					int iAI02 = 0;
; 80   : 					int iAI03 = 0;
; 81   : 					int iCreateType = -1;
; 82   : 					int iMapNumber = -1;
; 83   : 					int iStartX = -1;
; 84   : 					int iStartY = -1;
; 85   : 					int iStartDir = -1;
; 86   : 					int iRegenType = -1;
; 87   : 
; 88   : 					Token = GetToken();

  00108	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 
; 90   : 					if ( !strcmp("end", TokenString))

  0010d	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00112	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL30@LoadData:
  00117	8a 10		 mov	 dl, BYTE PTR [eax]
  00119	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0011b	75 1a		 jne	 SHORT $LN31@LoadData
  0011d	84 d2		 test	 dl, dl
  0011f	74 12		 je	 SHORT $LN32@LoadData
  00121	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00124	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00127	75 0e		 jne	 SHORT $LN31@LoadData
  00129	83 c0 02	 add	 eax, 2
  0012c	83 c1 02	 add	 ecx, 2
  0012f	84 d2		 test	 dl, dl
  00131	75 e4		 jne	 SHORT $LL30@LoadData
$LN32@LoadData:
  00133	33 c0		 xor	 eax, eax
  00135	eb 05		 jmp	 SHORT $LN33@LoadData
$LN31@LoadData:
  00137	1b c0		 sbb	 eax, eax
  00139	83 d8 ff	 sbb	 eax, -1
$LN33@LoadData:
  0013c	85 c0		 test	 eax, eax
  0013e	0f 84 d5 01 00
	00		 je	 $LN37@LoadData

; 91   : 						break;
; 92   : 
; 93   : 					iGroupNumber = (int)TokenNumber;

  00144	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0014a	e8 00 00 00 00	 call	 __ftol2_sse
  0014f	8b f0		 mov	 esi, eax

; 94   : 
; 95   : 					Token = GetToken();

  00151	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 96   : 					iGuid = (int)TokenNumber;

  00156	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0015c	e8 00 00 00 00	 call	 __ftol2_sse
  00161	8b f8		 mov	 edi, eax

; 97   : 
; 98   : 					Token = GetToken();

  00163	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 99   : 					iClass = (int)TokenNumber;

  00168	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0016e	e8 00 00 00 00	 call	 __ftol2_sse
  00173	8b d8		 mov	 ebx, eax

; 100  : 
; 101  : 					Token = GetToken();

  00175	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 102  : 					iRank = (int)TokenNumber;

  0017a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00180	e8 00 00 00 00	 call	 __ftol2_sse
  00185	89 45 e8	 mov	 DWORD PTR _iRank$209108[ebp], eax

; 103  : 
; 104  : 					Token = GetToken();

  00188	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 105  : 					iStartAI = (int)TokenNumber;

  0018d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00193	e8 00 00 00 00	 call	 __ftol2_sse
  00198	89 45 e4	 mov	 DWORD PTR _iStartAI$209109[ebp], eax

; 106  : 
; 107  : 					Token = GetToken();

  0019b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 108  : 					iAI01 = (int)TokenNumber;

  001a0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a6	e8 00 00 00 00	 call	 __ftol2_sse
  001ab	89 45 e0	 mov	 DWORD PTR _iAI01$209110[ebp], eax

; 109  : 
; 110  : 					Token = GetToken();

  001ae	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 111  : 					iAI02 = (int)TokenNumber;

  001b3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b9	e8 00 00 00 00	 call	 __ftol2_sse
  001be	89 45 dc	 mov	 DWORD PTR _iAI02$209111[ebp], eax

; 112  : 
; 113  : 					Token = GetToken();

  001c1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 					iAI03 = (int)TokenNumber;

  001c6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001cc	e8 00 00 00 00	 call	 __ftol2_sse
  001d1	89 45 d8	 mov	 DWORD PTR _iAI03$209112[ebp], eax

; 115  : 
; 116  : 					Token = GetToken();

  001d4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 					iCreateType = (int)TokenNumber;

  001d9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001df	e8 00 00 00 00	 call	 __ftol2_sse
  001e4	89 45 d4	 mov	 DWORD PTR _iCreateType$209113[ebp], eax

; 118  : 
; 119  : 					Token = GetToken();

  001e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 120  : 					iMapNumber = (int)TokenNumber;

  001ec	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001f2	e8 00 00 00 00	 call	 __ftol2_sse
  001f7	89 45 d0	 mov	 DWORD PTR _iMapNumber$209114[ebp], eax

; 121  : 
; 122  : 					Token = GetToken();

  001fa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 					iStartX = (int)TokenNumber;

  001ff	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00205	e8 00 00 00 00	 call	 __ftol2_sse
  0020a	89 45 cc	 mov	 DWORD PTR _iStartX$209115[ebp], eax

; 124  : 
; 125  : 					Token = GetToken();

  0020d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 126  : 					iStartY = (int)TokenNumber;

  00212	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00218	e8 00 00 00 00	 call	 __ftol2_sse
  0021d	89 45 c8	 mov	 DWORD PTR _iStartY$209116[ebp], eax

; 127  : 
; 128  : 					Token = GetToken();

  00220	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 129  : 					iStartDir = (int)TokenNumber;

  00225	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0022b	e8 00 00 00 00	 call	 __ftol2_sse
  00230	89 45 c4	 mov	 DWORD PTR _iStartDir$209117[ebp], eax

; 130  : 
; 131  : 					Token = GetToken();

  00233	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 132  : 					iRegenType = (int)TokenNumber;

  00238	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023e	e8 00 00 00 00	 call	 __ftol2_sse

; 133  : 
; 134  : 					if ( iGroupNumber > MAX_MONSTER_AI_GROUP )

  00243	83 fe 64	 cmp	 esi, 100		; 00000064H
  00246	7e 13		 jle	 SHORT $LN2@LoadData

; 135  : 					{
; 136  : 						MsgBox("[Monster AI Group] Exceed Max GroupNumber %d",
; 137  : 							iGroupNumber);

  00248	56		 push	 esi
  00249	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@CNMPNCB@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@
  0024e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00253	83 c4 08	 add	 esp, 8

; 138  : 						continue;

  00256	e9 a7 fe ff ff	 jmp	 $LL6@LoadData
$LN2@LoadData:

; 139  : 					}
; 140  : 
; 141  : 					if ( iGuid > MAX_MONSTER_AI_GROUP_MEMBER)

  0025b	81 ff c8 00 00
	00		 cmp	 edi, 200		; 000000c8H
  00261	7e 2b		 jle	 SHORT $LN1@LoadData

; 142  : 					{
; 143  : 						MsgBox("[Monster AI Group] Exceed Max GroupMember %d, %d ",
; 144  : 							iGroupNumber, iGuid);

  00263	57		 push	 edi
  00264	56		 push	 esi
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LFNOMCBG@?$FLMonster?5AI?5Group?$FN?5Exceed?5Max?5Gr@
  0026a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0026f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 145  : 						continue;

  00272	e9 8b fe ff ff	 jmp	 $LL6@LoadData
__catch$?LoadData@TMonsterAIGroup@@SAHPAD@Z$0:

; 173  : 	}
; 174  : 	catch(...)
; 175  : 	{
; 176  : 		MsgBox("[Monster AI Group] - Loading Exception Error (%s) File. ", lpszFileName);

  00277	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  0027a	51		 push	 ecx
  0027b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@HODFGLNJ@?$FLMonster?5AI?5Group?$FN?5?9?5Loading?5Exc@
  00280	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00285	83 c4 08	 add	 esp, 8

; 177  : 	}

  00288	b8 00 00 00 00	 mov	 eax, $LN39@LoadData
  0028d	c3		 ret	 0
$LN1@LoadData:

; 146  : 					}
; 147  : 
; 148  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iGroupNumber = iGroupNumber;

  0028e	8b 55 e8	 mov	 edx, DWORD PTR _iRank$209108[ebp]
  00291	8b ce		 mov	 ecx, esi
  00293	69 c9 c8 00 00
	00		 imul	 ecx, 200		; 000000c8H
  00299	03 cf		 add	 ecx, edi
  0029b	c1 e1 06	 shl	 ecx, 6

; 149  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iGuid = iGuid;
; 150  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iClass = iClass;
; 151  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iRank = iRank;

  0029e	89 91 10 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+16], edx

; 152  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iStartAI = iStartAI;

  002a4	8b 55 e4	 mov	 edx, DWORD PTR _iStartAI$209109[ebp]

; 153  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iAI01 = iAI01;
; 154  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iAI02 = iAI02;
; 155  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iAI03 = iAI03;
; 156  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iCreateType = iCreateType;
; 157  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iMapNumber = iMapNumber;
; 158  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iStartX = iStartX;
; 159  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iStartY = iStartY;
; 160  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iStartDir = iStartDir;
; 161  : 					TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iRegenType = iRegenType;
; 162  : 					
; 163  : 					TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber]++;

  002a7	ff 04 b5 00 00
	00 00		 inc	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[esi*4]
  002ae	89 91 14 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+20], edx
  002b4	8b 55 e0	 mov	 edx, DWORD PTR _iAI01$209110[ebp]
  002b7	89 91 18 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+24], edx
  002bd	8b 55 dc	 mov	 edx, DWORD PTR _iAI02$209111[ebp]
  002c0	89 91 1c 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+28], edx
  002c6	8b 55 d8	 mov	 edx, DWORD PTR _iAI03$209112[ebp]
  002c9	89 91 20 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+32], edx
  002cf	8b 55 d4	 mov	 edx, DWORD PTR _iCreateType$209113[ebp]
  002d2	89 91 24 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+36], edx
  002d8	8b 55 d0	 mov	 edx, DWORD PTR _iMapNumber$209114[ebp]
  002db	89 91 28 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+40], edx
  002e1	8b 55 cc	 mov	 edx, DWORD PTR _iStartX$209115[ebp]
  002e4	89 91 2c 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+44], edx
  002ea	8b 55 c8	 mov	 edx, DWORD PTR _iStartY$209116[ebp]
  002ed	89 91 30 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+48], edx
  002f3	8b 55 c4	 mov	 edx, DWORD PTR _iStartDir$209117[ebp]
  002f6	89 b1 04 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+4], esi
  002fc	89 b9 08 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+8], edi
  00302	89 99 0c 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+12], ebx
  00308	89 91 34 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+52], edx
  0030e	89 81 38 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[ecx+56], eax

; 164  : 				}
; 165  : 			}

  00314	e9 e9 fd ff ff	 jmp	 $LL6@LoadData
$LN37@LoadData:
  00319	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  0031c	e9 8f fd ff ff	 jmp	 $LL9@LoadData
$LN12@LoadData:

; 42   : 	{
; 43   : 		MsgBox("[Monster AI Group] - File load error : File Name Error");

  00321	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@EJJEEGKC@?$FLMonster?5AI?5Group?$FN?5?9?5File?5load?5e@
  00326	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0032b	83 c4 04	 add	 esp, 4
$LN39@LoadData:

; 44   : 		return FALSE;

  0032e	33 c0		 xor	 eax, eax

; 178  : 
; 179  : 	return FALSE;
; 180  : }

  00330	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00333	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0033a	59		 pop	 ecx
  0033b	5f		 pop	 edi
  0033c	5e		 pop	 esi
  0033d	5b		 pop	 ebx
  0033e	8b e5		 mov	 esp, ebp
  00340	5d		 pop	 ebp
  00341	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@TMonsterAIGroup@@SAHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@TMonsterAIGroup@@SAHPAD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@TMonsterAIGroup@@SAHPAD@Z ENDP		; TMonsterAIGroup::LoadData
PUBLIC	??_C@_0DM@BFBHLGFI@?$FLMonster?5AI?5Group?$FN?5ChangeAIOrder@ ; `string'
PUBLIC	?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z		; TMonsterAIGroup::ChangeAIOrder
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
;	COMDAT ??_C@_0DM@BFBHLGFI@?$FLMonster?5AI?5Group?$FN?5ChangeAIOrder@
CONST	SEGMENT
??_C@_0DM@BFBHLGFI@?$FLMonster?5AI?5Group?$FN?5ChangeAIOrder@ DB '[Monste'
	DB	'r AI Group] ChangeAIOrder() Error - (GroupNumber=%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z
_TEXT	SEGMENT
_iGroupNumber$ = 8					; size = 4
_iAIOrder$ = 12						; size = 4
?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z PROC		; TMonsterAIGroup::ChangeAIOrder, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iGroupNumber$[ebp]
  00006	83 f9 63	 cmp	 ecx, 99			; 00000063H
  00009	0f 87 e0 00 00
	00		 ja	 $LN12@ChangeAIOr

; 190  : 		return;
; 191  : 	}
; 192  : 
; 193  : 	TMonsterAIGroupMember * lpMemb = NULL;
; 194  : 
; 195  : 	for ( int j=0;j<TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];j++)

  0000f	33 d2		 xor	 edx, edx
  00011	39 14 8d 00 00
	00 00		 cmp	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[ecx*4], edx
  00018	0f 8e e0 00 00
	00		 jle	 $LN9@ChangeAIOr
  0001e	8b c1		 mov	 eax, ecx
  00020	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	05 14 00 00 00	 add	 eax, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A+20
  0002e	8b ff		 npad	 2
$LL18@ChangeAIOr:
  00030	8b 75 0c	 mov	 esi, DWORD PTR _iAIOrder$[ebp]

; 196  : 	{
; 197  : 		lpMemb = &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][j];
; 198  : 
; 199  : 		if ( lpMemb->m_iGroupNumber == iGroupNumber )

  00033	39 48 f0	 cmp	 DWORD PTR [eax-16], ecx
  00036	0f 85 9d 00 00
	00		 jne	 $LN10@ChangeAIOr

; 200  : 		{
; 201  : 			if ( iAIOrder == 0 )

  0003c	85 f6		 test	 esi, esi
  0003e	75 1c		 jne	 SHORT $LN7@ChangeAIOr

; 202  : 			{
; 203  : 				gObj[lpMemb->m_iObjIndex].m_iBasicAI = lpMemb->m_iStartAI;

  00040	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  00043	8b 38		 mov	 edi, DWORD PTR [eax]
  00045	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0004b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00051	89 bc 1e 74 1c
	00 00		 mov	 DWORD PTR [esi+ebx+7284], edi

; 204  : 				gObj[lpMemb->m_iObjIndex].m_iCurrentAI = lpMemb->m_iStartAI;

  00058	8b 38		 mov	 edi, DWORD PTR [eax]
  0005a	eb 67		 jmp	 SHORT $LN19@ChangeAIOr
$LN7@ChangeAIOr:

; 205  : 			}
; 206  : 			else if (iAIOrder == 1 )

  0005c	83 fe 01	 cmp	 esi, 1
  0005f	75 1e		 jne	 SHORT $LN5@ChangeAIOr

; 207  : 			{
; 208  : 				gObj[lpMemb->m_iObjIndex].m_iBasicAI = lpMemb->m_iAI01;

  00061	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  00064	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00067	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0006d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00073	89 bc 1e 74 1c
	00 00		 mov	 DWORD PTR [esi+ebx+7284], edi

; 209  : 				gObj[lpMemb->m_iObjIndex].m_iCurrentAI = lpMemb->m_iAI01;

  0007a	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  0007d	eb 44		 jmp	 SHORT $LN19@ChangeAIOr
$LN5@ChangeAIOr:

; 210  : 			}
; 211  : 			else if (iAIOrder == 2 )

  0007f	83 fe 02	 cmp	 esi, 2
  00082	75 1e		 jne	 SHORT $LN3@ChangeAIOr

; 212  : 			{
; 213  : 				gObj[lpMemb->m_iObjIndex].m_iBasicAI = lpMemb->m_iAI02;

  00084	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  00087	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  0008a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00090	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00096	89 bc 1e 74 1c
	00 00		 mov	 DWORD PTR [esi+ebx+7284], edi

; 214  : 				gObj[lpMemb->m_iObjIndex].m_iCurrentAI = lpMemb->m_iAI02;

  0009d	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  000a0	eb 21		 jmp	 SHORT $LN19@ChangeAIOr
$LN3@ChangeAIOr:

; 215  : 			}
; 216  : 			else if (iAIOrder == 3 )

  000a2	83 fe 03	 cmp	 esi, 3
  000a5	75 32		 jne	 SHORT $LN10@ChangeAIOr

; 217  : 			{
; 218  : 				gObj[lpMemb->m_iObjIndex].m_iBasicAI = lpMemb->m_iAI03;

  000a7	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  000aa	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  000ad	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000b3	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b9	89 bc 1e 74 1c
	00 00		 mov	 DWORD PTR [esi+ebx+7284], edi

; 219  : 				gObj[lpMemb->m_iObjIndex].m_iCurrentAI = lpMemb->m_iAI03;

  000c0	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
$LN19@ChangeAIOr:
  000c3	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  000c6	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000cc	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000d2	89 bc 1e 78 1c
	00 00		 mov	 DWORD PTR [esi+ebx+7288], edi
$LN10@ChangeAIOr:

; 190  : 		return;
; 191  : 	}
; 192  : 
; 193  : 	TMonsterAIGroupMember * lpMemb = NULL;
; 194  : 
; 195  : 	for ( int j=0;j<TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];j++)

  000d9	42		 inc	 edx
  000da	83 c0 40	 add	 eax, 64			; 00000040H
  000dd	3b 14 8d 00 00
	00 00		 cmp	 edx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[ecx*4]
  000e4	0f 8c 46 ff ff
	ff		 jl	 $LL18@ChangeAIOr
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx

; 220  : 			}
; 221  : 		}		
; 222  : 	}
; 223  : }

  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
$LN12@ChangeAIOr:

; 188  : 	{
; 189  : 		LogAddTD("[Monster AI Group] ChangeAIOrder() Error - (GroupNumber=%d)", iGroupNumber);

  000ef	51		 push	 ecx
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@BFBHLGFI@?$FLMonster?5AI?5Group?$FN?5ChangeAIOrder@
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000fb	83 c4 08	 add	 esp, 8
$LN9@ChangeAIOr:

; 220  : 			}
; 221  : 		}		
; 222  : 	}
; 223  : }

  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ENDP		; TMonsterAIGroup::ChangeAIOrder
_TEXT	ENDS
PUBLIC	??_C@_0DH@OJFKHKGJ@?$FLMonster?5AI?5Group?$FN?5DelGroup?$CI?$CJ?5Er@ ; `string'
PUBLIC	?DelGroupInstance@TMonsterAIGroup@@SAHH@Z	; TMonsterAIGroup::DelGroupInstance
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
;	COMDAT ??_C@_0DH@OJFKHKGJ@?$FLMonster?5AI?5Group?$FN?5DelGroup?$CI?$CJ?5Er@
CONST	SEGMENT
??_C@_0DH@OJFKHKGJ@?$FLMonster?5AI?5Group?$FN?5DelGroup?$CI?$CJ?5Er@ DB '['
	DB	'Monster AI Group] DelGroup() Error - (GroupNumber=%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z
_TEXT	SEGMENT
_iGroupNumber$ = 8					; size = 4
?DelGroupInstance@TMonsterAIGroup@@SAHH@Z PROC		; TMonsterAIGroup::DelGroupInstance, COMDAT

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 230  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _iGroupNumber$[ebp]
  00007	83 ff 63	 cmp	 edi, 99			; 00000063H
  0000a	77 44		 ja	 SHORT $LN6@DelGroupIn

; 234  : 	}
; 235  : 
; 236  : 	TMonsterAIGroupMember * lpMemb = NULL;
; 237  : 
; 238  : 	for ( int j=0;j<TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];j++)

  0000c	53		 push	 ebx
  0000d	33 db		 xor	 ebx, ebx
  0000f	39 1c bd 00 00
	00 00		 cmp	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[edi*4], ebx
  00016	7e 32		 jle	 SHORT $LN3@DelGroupIn
  00018	56		 push	 esi
  00019	8b f7		 mov	 esi, edi
  0001b	69 f6 00 32 00
	00		 imul	 esi, 12800		; 00003200H
  00021	81 c6 3c 00 00
	00		 add	 esi, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A+60
$LL5@DelGroupIn:

; 239  : 	{
; 240  : 		lpMemb = &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][j];
; 241  : 
; 242  : 		if ( lpMemb->m_iGroupNumber == iGroupNumber )

  00027	39 7e c8	 cmp	 DWORD PTR [esi-56], edi
  0002a	75 10		 jne	 SHORT $LN4@DelGroupIn

; 243  : 		{
; 244  : 			if ( lpMemb->m_iObjIndex != -1 )

  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	74 09		 je	 SHORT $LN4@DelGroupIn

; 245  : 			{
; 246  : 				gObjDel(lpMemb->m_iObjIndex);

  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00039	83 c4 04	 add	 esp, 4
$LN4@DelGroupIn:

; 234  : 	}
; 235  : 
; 236  : 	TMonsterAIGroupMember * lpMemb = NULL;
; 237  : 
; 238  : 	for ( int j=0;j<TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];j++)

  0003c	43		 inc	 ebx
  0003d	83 c6 40	 add	 esi, 64			; 00000040H
  00040	3b 1c bd 00 00
	00 00		 cmp	 ebx, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[edi*4]
  00047	7c de		 jl	 SHORT $LL5@DelGroupIn
  00049	5e		 pop	 esi
$LN3@DelGroupIn:
  0004a	5b		 pop	 ebx

; 233  : 		return FALSE;

  0004b	33 c0		 xor	 eax, eax
  0004d	5f		 pop	 edi

; 247  : 			}
; 248  : 		}
; 249  : 	}
; 250  : 
; 251  : 	return FALSE;
; 252  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN6@DelGroupIn:

; 231  : 	{
; 232  : 		LogAddTD("[Monster AI Group] DelGroup() Error - (GroupNumber=%d)", iGroupNumber);

  00050	57		 push	 edi
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OJFKHKGJ@?$FLMonster?5AI?5Group?$FN?5DelGroup?$CI?$CJ?5Er@
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0005c	83 c4 08	 add	 esp, 8

; 233  : 		return FALSE;

  0005f	33 c0		 xor	 eax, eax
  00061	5f		 pop	 edi

; 247  : 			}
; 248  : 		}
; 249  : 	}
; 250  : 
; 251  : 	return FALSE;
; 252  : }

  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ENDP		; TMonsterAIGroup::DelGroupInstance
_TEXT	ENDS
PUBLIC	?DelAllGroupInfo@TMonsterAIGroup@@SAHXZ		; TMonsterAIGroup::DelAllGroupInfo
EXTRN	?Reset@TMonsterAIGroupMember@@QAEXXZ:PROC	; TMonsterAIGroupMember::Reset
; Function compile flags: /Ogtp
;	COMDAT ?DelAllGroupInfo@TMonsterAIGroup@@SAHXZ
_TEXT	SEGMENT
?DelAllGroupInfo@TMonsterAIGroup@@SAHXZ PROC		; TMonsterAIGroup::DelAllGroupInfo, COMDAT

; 259  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 260  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP;i++)

  00003	bb 00 00 00 00	 mov	 ebx, OFFSET ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA ; TMonsterAIGroup::s_iMonsterAIGroupMemberCount
  00008	be 00 00 00 00	 mov	 esi, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
  0000d	8d 49 00	 npad	 3
$LL6@DelAllGrou:

; 261  : 	{
; 262  : 		for ( int j=0;j<MAX_MONSTER_AI_GROUP_MEMBER;j++)

  00010	bf c8 00 00 00	 mov	 edi, 200		; 000000c8H
$LL3@DelAllGrou:

; 263  : 		{
; 264  : 			TMonsterAIGroup::s_MonsterAIGroupMemberArray[i][j].Reset();

  00015	8b ce		 mov	 ecx, esi
  00017	e8 00 00 00 00	 call	 ?Reset@TMonsterAIGroupMember@@QAEXXZ ; TMonsterAIGroupMember::Reset
  0001c	83 c6 40	 add	 esi, 64			; 00000040H
  0001f	4f		 dec	 edi
  00020	75 f3		 jne	 SHORT $LL3@DelAllGrou

; 265  : 		}
; 266  : 
; 267  : 		TMonsterAIGroup::s_iMonsterAIGroupMemberCount[i] = 0;

  00022	89 3b		 mov	 DWORD PTR [ebx], edi
  00024	83 c3 04	 add	 ebx, 4
  00027	81 fe 00 88 13
	00		 cmp	 esi, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A+1280000
  0002d	7c e1		 jl	 SHORT $LL6@DelAllGrou

; 268  : 	}
; 269  : 
; 270  : 	TMonsterAIGroup::s_bDataLoad = FALSE;

  0002f	89 3d 00 00 00
	00		 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIGroup@@2HA, edi ; TMonsterAIGroup::s_bDataLoad
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 271  : 	return FALSE;

  00037	33 c0		 xor	 eax, eax
  00039	5b		 pop	 ebx

; 272  : }

  0003a	c3		 ret	 0
?DelAllGroupInfo@TMonsterAIGroup@@SAHXZ ENDP		; TMonsterAIGroup::DelAllGroupInfo
_TEXT	ENDS
PUBLIC	??_C@_0DO@JGGBMAIA@?$FLMonster?5AI?5Group?$FN?5FindGroupLead@ ; `string'
PUBLIC	?FindGroupLeader@TMonsterAIGroup@@SAHH@Z	; TMonsterAIGroup::FindGroupLeader
;	COMDAT ??_C@_0DO@JGGBMAIA@?$FLMonster?5AI?5Group?$FN?5FindGroupLead@
CONST	SEGMENT
??_C@_0DO@JGGBMAIA@?$FLMonster?5AI?5Group?$FN?5FindGroupLead@ DB '[Monste'
	DB	'r AI Group] FindGroupLeader() Error - (GroupNumber=%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?FindGroupLeader@TMonsterAIGroup@@SAHH@Z
_TEXT	SEGMENT
_iGroupNumber$ = 8					; size = 4
?FindGroupLeader@TMonsterAIGroup@@SAHH@Z PROC		; TMonsterAIGroup::FindGroupLeader, COMDAT

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iGroupNumber$[ebp]
  00006	83 fa 63	 cmp	 edx, 99			; 00000063H
  00009	77 3e		 ja	 SHORT $LN5@FindGroupL

; 281  : 	}
; 282  : 
; 283  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP_MEMBER;i++)

  0000b	8b c2		 mov	 eax, edx
  0000d	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00013	33 c9		 xor	 ecx, ecx
  00015	05 10 00 00 00	 add	 eax, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A+16
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL4@FindGroupL:

; 284  : 	{
; 285  : 		if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iRank == 0 )

  00020	83 38 00	 cmp	 DWORD PTR [eax], 0
  00023	74 11		 je	 SHORT $LN10@FindGroupL

; 281  : 	}
; 282  : 
; 283  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP_MEMBER;i++)

  00025	41		 inc	 ecx
  00026	83 c0 40	 add	 eax, 64			; 00000040H
  00029	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  0002f	7c ef		 jl	 SHORT $LL4@FindGroupL

; 288  : 		}
; 289  : 	}
; 290  : 
; 291  : 	return -1;

  00031	83 c8 ff	 or	 eax, -1

; 292  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN10@FindGroupL:

; 286  : 		{
; 287  : 			return TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iObjIndex;

  00036	69 d2 c8 00 00
	00		 imul	 edx, 200		; 000000c8H
  0003c	03 d1		 add	 edx, ecx
  0003e	c1 e2 06	 shl	 edx, 6
  00041	8b 82 3c 00 00
	00		 mov	 eax, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[edx+60]

; 292  : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN5@FindGroupL:

; 278  : 	{
; 279  : 		LogAddTD("[Monster AI Group] FindGroupLeader() Error - (GroupNumber=%d)", iGroupNumber);

  00049	52		 push	 edx
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@JGGBMAIA@?$FLMonster?5AI?5Group?$FN?5FindGroupLead@
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00055	83 c4 08	 add	 esp, 8

; 280  : 		return 0;

  00058	33 c0		 xor	 eax, eax

; 292  : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?FindGroupLeader@TMonsterAIGroup@@SAHH@Z ENDP		; TMonsterAIGroup::FindGroupLeader
_TEXT	ENDS
PUBLIC	??_C@_0FB@IIFMNKGF@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@ ; `string'
PUBLIC	?FindGroupMemberObjectIndex@TMonsterAIGroup@@SAHHH@Z ; TMonsterAIGroup::FindGroupMemberObjectIndex
;	COMDAT ??_C@_0FB@IIFMNKGF@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
CONST	SEGMENT
??_C@_0FB@IIFMNKGF@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@ DB '[Monste'
	DB	'r AI Group] FindGroupMemberObjectIndex() Error - (GroupNumber'
	DB	'=%d Guid=%d)', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?FindGroupMemberObjectIndex@TMonsterAIGroup@@SAHHH@Z
_TEXT	SEGMENT
_iGroupNumber$ = 8					; size = 4
_iGuid$ = 12						; size = 4
?FindGroupMemberObjectIndex@TMonsterAIGroup@@SAHHH@Z PROC ; TMonsterAIGroup::FindGroupMemberObjectIndex, COMDAT

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 299  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iGroupNumber$[ebp]
  00006	83 fa 63	 cmp	 edx, 99			; 00000063H
  00009	77 3f		 ja	 SHORT $LN5@FindGroupM

; 303  : 	}
; 304  : 
; 305  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP_MEMBER;i++)

  0000b	8b c2		 mov	 eax, edx
  0000d	69 c0 00 32 00
	00		 imul	 eax, 12800		; 00003200H
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _iGuid$[ebp]
  00017	33 c9		 xor	 ecx, ecx
  00019	05 08 00 00 00	 add	 eax, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A+8
  0001e	8b ff		 npad	 2
$LL4@FindGroupM:

; 306  : 	{
; 307  : 		if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iGuid == iGuid )

  00020	39 30		 cmp	 DWORD PTR [eax], esi
  00022	74 12		 je	 SHORT $LN10@FindGroupM

; 303  : 	}
; 304  : 
; 305  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP_MEMBER;i++)

  00024	41		 inc	 ecx
  00025	83 c0 40	 add	 eax, 64			; 00000040H
  00028	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  0002e	7c f0		 jl	 SHORT $LL4@FindGroupM

; 310  : 		}
; 311  : 	}
; 312  : 
; 313  : 	return -1;

  00030	83 c8 ff	 or	 eax, -1
  00033	5e		 pop	 esi

; 314  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN10@FindGroupM:

; 308  : 		{
; 309  : 			return TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iObjIndex;

  00036	69 d2 c8 00 00
	00		 imul	 edx, 200		; 000000c8H
  0003c	03 d1		 add	 edx, ecx
  0003e	c1 e2 06	 shl	 edx, 6
  00041	8b 82 3c 00 00
	00		 mov	 eax, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[edx+60]
  00047	5e		 pop	 esi

; 314  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN5@FindGroupM:

; 300  : 	{
; 301  : 		LogAddTD("[Monster AI Group] FindGroupMemberObjectIndex() Error - (GroupNumber=%d Guid=%d)", iGroupNumber, iGuid);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _iGuid$[ebp]
  0004d	50		 push	 eax
  0004e	52		 push	 edx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IIFMNKGF@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 302  : 		return 0;

  0005d	33 c0		 xor	 eax, eax

; 314  : }

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?FindGroupMemberObjectIndex@TMonsterAIGroup@@SAHHH@Z ENDP ; TMonsterAIGroup::FindGroupMemberObjectIndex
_TEXT	ENDS
PUBLIC	??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@ ; `string'
PUBLIC	?FindGroupMember@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HH@Z ; TMonsterAIGroup::FindGroupMember
;	COMDAT ??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
CONST	SEGMENT
??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@ DB '[Monste'
	DB	'r AI Group] FindGroupMember() Error - (GroupNumber=%d)(Guid=%'
	DB	'd) ', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?FindGroupMember@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HH@Z
_TEXT	SEGMENT
_iGroupNumber$ = 8					; size = 4
_iGuid$ = 12						; size = 4
?FindGroupMember@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HH@Z PROC ; TMonsterAIGroup::FindGroupMember, COMDAT

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  : 	if ( iGroupNumber < 0 || iGroupNumber >= MAX_MONSTER_AI_GROUP )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iGroupNumber$[ebp]
  00006	83 f9 63	 cmp	 ecx, 99			; 00000063H
  00009	77 3c		 ja	 SHORT $LN2@FindGroupM@2

; 325  : 	}
; 326  : 
; 327  : 	if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iGroupNumber == iGroupNumber &&
; 328  : 		 TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid].m_iGuid == iGuid )

  0000b	8b 55 0c	 mov	 edx, DWORD PTR _iGuid$[ebp]
  0000e	8b c1		 mov	 eax, ecx
  00010	69 c0 c8 00 00
	00		 imul	 eax, 200		; 000000c8H
  00016	03 c2		 add	 eax, edx
  00018	c1 e0 06	 shl	 eax, 6
  0001b	39 88 04 00 00
	00		 cmp	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+4], ecx
  00021	75 10		 jne	 SHORT $LN1@FindGroupM@2
  00023	39 90 08 00 00
	00		 cmp	 DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax+8], edx
  00029	75 08		 jne	 SHORT $LN1@FindGroupM@2

; 329  : 	{
; 330  : 		return &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iGuid];

  0002b	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A[eax]

; 334  : 
; 335  : 	return NULL;
; 336  : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN1@FindGroupM@2:

; 331  : 	}
; 332  : 
; 333  : 	LogAddTD("[Monster AI Group] FindGroupMember() Error - (GroupNumber=%d)(Guid=%d) ", iGroupNumber, iGuid);

  00033	52		 push	 edx
  00034	51		 push	 ecx
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	33 c0		 xor	 eax, eax

; 334  : 
; 335  : 	return NULL;
; 336  : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN2@FindGroupM@2:

; 322  : 	{
; 323  : 		LogAddTD("[Monster AI Group] FindGroupMember() Error - (GroupNumber=%d)(Guid=%d) ", iGroupNumber, iGuid);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _iGuid$[ebp]
  0004a	50		 push	 eax
  0004b	51		 push	 ecx
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@PEHGDPOI@?$FLMonster?5AI?5Group?$FN?5FindGroupMemb@
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 324  : 		return NULL;

  0005a	33 c0		 xor	 eax, eax

; 334  : 
; 335  : 	return NULL;
; 336  : }

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?FindGroupMember@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HH@Z ENDP ; TMonsterAIGroup::FindGroupMember
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4059000000000000
PUBLIC	?FindGroupMemberToHeal@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHHH@Z ; TMonsterAIGroup::FindGroupMemberToHeal
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?FindGroupMemberToHeal@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHHH@Z
_TEXT	SEGMENT
tv324 = -12						; size = 4
_iMinHPGuid$ = -8					; size = 4
tv176 = -4						; size = 4
_iObjIndex$ = 8						; size = 4
_iGroupNumber$ = 12					; size = 4
_iGuid$ = 16						; size = 4
_iDistance$ = 20					; size = 4
?FindGroupMemberToHeal@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHHH@Z PROC ; TMonsterAIGroup::FindGroupMemberToHeal, COMDAT

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 342  : 	if ( TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber] == 0 )

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _iGroupNumber$[ebp]
  00006	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[ecx*4]
  0000d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00010	85 c0		 test	 eax, eax
  00012	75 04		 jne	 SHORT $LN11@FindGroupM@3

; 382  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN11@FindGroupM@3:
  00018	53		 push	 ebx

; 343  : 		return NULL;
; 344  : 
; 345  : 	int iMinHPGuid = -1;

  00019	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _iMinHPGuid$[ebp], -1

; 346  : 	int iMinHP = 100000000;

  00020	bb 00 e1 f5 05	 mov	 ebx, 100000000		; 05f5e100H

; 347  : 	int iCount = TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];
; 348  : 
; 349  : 	for ( int i=0;i<iCount;i++)

  00025	85 c0		 test	 eax, eax
  00027	0f 8e be 00 00
	00		 jle	 $LN1@FindGroupM@3

; 343  : 		return NULL;
; 344  : 
; 345  : 	int iMinHPGuid = -1;

  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	8b f9		 mov	 edi, ecx
  00031	69 ff 00 32 00
	00		 imul	 edi, 12800		; 00003200H
  00037	81 c7 3c 00 00
	00		 add	 edi, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A+60
  0003d	89 45 fc	 mov	 DWORD PTR tv176[ebp], eax
  00040	eb 03		 jmp	 SHORT $LN10@FindGroupM@3
$LL20@FindGroupM@3:
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _iGroupNumber$[ebp]
$LN10@FindGroupM@3:

; 350  : 	{
; 351  : 		if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iGroupNumber == iGroupNumber )

  00045	39 4f c8	 cmp	 DWORD PTR [edi-56], ecx
  00048	75 73		 jne	 SHORT $LN9@FindGroupM@3

; 352  : 		{
; 353  : 			LPOBJ lpTargetObj = &gObj[TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iObjIndex];

  0004a	8b 37		 mov	 esi, DWORD PTR [edi]
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00051	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00057	03 f0		 add	 esi, eax

; 354  : 
; 355  : 			if ( lpTargetObj == NULL )

  00059	74 62		 je	 SHORT $LN9@FindGroupM@3

; 356  : 				continue;
; 357  : 
; 358  : 			if ( gObjCalDistance(&gObj[iObjIndex], lpTargetObj) > iDistance )

  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _iObjIndex$[ebp]
  0005e	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00064	03 c8		 add	 ecx, eax
  00066	56		 push	 esi
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0006d	83 c4 08	 add	 esp, 8
  00070	3b 45 14	 cmp	 eax, DWORD PTR _iDistance$[ebp]
  00073	7f 48		 jg	 SHORT $LN9@FindGroupM@3

; 359  : 				continue;
; 360  : 
; 361  : 			int iMaxLife = (int)(lpTargetObj->MaxLife + 1.0f);
; 362  : 			int iPercentHP = (int)(lpTargetObj->Life * 100.0f / iMaxLife);

  00075	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0007b	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00081	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00087	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000
  0008d	e8 00 00 00 00	 call	 __ftol2_sse
  00092	89 45 f4	 mov	 DWORD PTR tv324[ebp], eax
  00095	da 75 f4	 fidiv	 DWORD PTR tv324[ebp]
  00098	e8 00 00 00 00	 call	 __ftol2_sse

; 363  : 
; 364  : 			if ( iPercentHP < 60 )

  0009d	83 f8 3c	 cmp	 eax, 60			; 0000003cH
  000a0	7d 1b		 jge	 SHORT $LN9@FindGroupM@3

; 365  : 			{
; 366  : 				if ( lpTargetObj->m_Index == iObjIndex )

  000a2	8b 55 08	 mov	 edx, DWORD PTR _iObjIndex$[ebp]
  000a5	39 16		 cmp	 DWORD PTR [esi], edx
  000a7	75 05		 jne	 SHORT $LN17@FindGroupM@3

; 367  : 					iPercentHP = 1;

  000a9	b8 01 00 00 00	 mov	 eax, 1
$LN17@FindGroupM@3:

; 368  : 
; 369  : 				if ( iPercentHP < iMinHP )

  000ae	3b c3		 cmp	 eax, ebx
  000b0	7d 0b		 jge	 SHORT $LN9@FindGroupM@3

; 370  : 				{
; 371  : 					iMinHP = iPercentHP;

  000b2	8b d8		 mov	 ebx, eax

; 372  : 					iMinHPGuid = lpTargetObj->m_iGroupMemberGuid;

  000b4	8b 86 8c 1c 00
	00		 mov	 eax, DWORD PTR [esi+7308]
  000ba	89 45 f8	 mov	 DWORD PTR _iMinHPGuid$[ebp], eax
$LN9@FindGroupM@3:

; 347  : 	int iCount = TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];
; 348  : 
; 349  : 	for ( int i=0;i<iCount;i++)

  000bd	83 c7 40	 add	 edi, 64			; 00000040H
  000c0	ff 4d fc	 dec	 DWORD PTR tv176[ebp]
  000c3	0f 85 79 ff ff
	ff		 jne	 $LL20@FindGroupM@3

; 373  : 				}
; 374  : 			}
; 375  : 		}
; 376  : 	}
; 377  : 
; 378  : 	if ( iMinHPGuid != -1 )

  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _iMinHPGuid$[ebp]
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	83 f9 ff	 cmp	 ecx, -1
  000d1	74 18		 je	 SHORT $LN1@FindGroupM@3

; 379  : 		return &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][iMinHPGuid];

  000d3	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  000d6	69 c0 c8 00 00
	00		 imul	 eax, 200		; 000000c8H
  000dc	03 c1		 add	 eax, ecx
  000de	c1 e0 06	 shl	 eax, 6
  000e1	05 00 00 00 00	 add	 eax, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
  000e6	5b		 pop	 ebx

; 382  : }

  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
$LN1@FindGroupM@3:

; 380  : 	
; 381  : 	return NULL;

  000eb	33 c0		 xor	 eax, eax
  000ed	5b		 pop	 ebx

; 382  : }

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
?FindGroupMemberToHeal@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHHH@Z ENDP ; TMonsterAIGroup::FindGroupMemberToHeal
_TEXT	ENDS
PUBLIC	?FindGroupMemberToSommon@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHH@Z ; TMonsterAIGroup::FindGroupMemberToSommon
; Function compile flags: /Ogtp
;	COMDAT ?FindGroupMemberToSommon@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHH@Z
_TEXT	SEGMENT
_iObjIndex$ = 8						; size = 4
_iGroupNumber$ = 12					; size = 4
_iGuid$ = 16						; size = 4
?FindGroupMemberToSommon@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHH@Z PROC ; TMonsterAIGroup::FindGroupMemberToSommon, COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 388  : 	if ( TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber] == 0 )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iGroupNumber$[ebp]
  00006	57		 push	 edi
  00007	8b 3c 85 00 00
	00 00		 mov	 edi, DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[eax*4]
  0000e	85 ff		 test	 edi, edi
  00010	75 05		 jne	 SHORT $LN9@FindGroupM@4

; 389  : 		return NULL;

  00012	33 c0		 xor	 eax, eax
  00014	5f		 pop	 edi

; 416  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
$LN9@FindGroupM@4:
  00017	53		 push	 ebx
  00018	56		 push	 esi

; 392  : 
; 393  : 	for ( int i=0;i<iCount;i++)

  00019	33 f6		 xor	 esi, esi
  0001b	85 ff		 test	 edi, edi
  0001d	7e 3f		 jle	 SHORT $LN6@FindGroupM@4

; 390  : 
; 391  : 	int iCount = TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber];

  0001f	8b 5d 08	 mov	 ebx, DWORD PTR _iObjIndex$[ebp]
  00022	8b d0		 mov	 edx, eax
  00024	69 d2 00 32 00
	00		 imul	 edx, 12800		; 00003200H
  0002a	81 c2 3c 00 00
	00		 add	 edx, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A+60
$LL8@FindGroupM@4:

; 394  : 	{
; 395  : 		if ( TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iGroupNumber == iGroupNumber )

  00030	39 42 c8	 cmp	 DWORD PTR [edx-56], eax
  00033	75 21		 jne	 SHORT $LN7@FindGroupM@4

; 396  : 		{
; 397  : 			LPOBJ lpTargetObj = &gObj[TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i].m_iObjIndex];

  00035	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00037	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0003d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 398  : 
; 399  : 			if ( lpTargetObj->m_Index == iObjIndex )

  00043	39 19		 cmp	 DWORD PTR [ecx], ebx
  00045	74 0f		 je	 SHORT $LN7@FindGroupM@4

; 400  : 				continue;
; 401  : 
; 402  : 			if ( lpTargetObj == NULL )
; 403  : 				continue;
; 404  : 
; 405  : 			if ( lpTargetObj->m_iRegenType == -1 )

  00047	83 b9 90 1c 00
	00 ff		 cmp	 DWORD PTR [ecx+7312], -1
  0004e	74 06		 je	 SHORT $LN7@FindGroupM@4

; 406  : 				continue;
; 407  : 
; 408  : 			if ( lpTargetObj->Live == FALSE )

  00050	80 79 6a 00	 cmp	 BYTE PTR [ecx+106], 0
  00054	74 0f		 je	 SHORT $LN13@FindGroupM@4
$LN7@FindGroupM@4:

; 392  : 
; 393  : 	for ( int i=0;i<iCount;i++)

  00056	46		 inc	 esi
  00057	83 c2 40	 add	 edx, 64			; 00000040H
  0005a	3b f7		 cmp	 esi, edi
  0005c	7c d2		 jl	 SHORT $LL8@FindGroupM@4
$LN6@FindGroupM@4:
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 411  : 			}
; 412  : 		}
; 413  : 	}
; 414  : 
; 415  : 	return NULL;

  00060	33 c0		 xor	 eax, eax
  00062	5f		 pop	 edi

; 416  : }

  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
$LN13@FindGroupM@4:

; 409  : 			{
; 410  : 				return &TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][i];

  00065	69 c0 c8 00 00
	00		 imul	 eax, 200		; 000000c8H
  0006b	03 c6		 add	 eax, esi
  0006d	5e		 pop	 esi
  0006e	c1 e0 06	 shl	 eax, 6
  00071	5b		 pop	 ebx
  00072	05 00 00 00 00	 add	 eax, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
  00077	5f		 pop	 edi

; 416  : }

  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?FindGroupMemberToSommon@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHH@Z ENDP ; TMonsterAIGroup::FindGroupMemberToSommon
_TEXT	ENDS
PUBLIC	??_C@_0EF@IEKKIIGH@?$FL?5KANTURU?5?$FN?$FL?5SetAIMonster?5?$FN?5?$CFs?$CII@ ; `string'
PUBLIC	?Init@TMonsterAIGroup@@SAXH@Z			; TMonsterAIGroup::Init
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	_rand:PROC
EXTRN	?gObjViewportClose@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjViewportClose
EXTRN	?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolDestroy
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT ??_C@_0EF@IEKKIIGH@?$FL?5KANTURU?5?$FN?$FL?5SetAIMonster?5?$FN?5?$CFs?$CII@
CONST	SEGMENT
??_C@_0EF@IEKKIIGH@?$FL?5KANTURU?5?$FN?$FL?5SetAIMonster?5?$FN?5?$CFs?$CII@ DB '['
	DB	' KANTURU ][ SetAIMonster ] %s(Index:%d ObjIndex:%d) Map:%d-[%'
	DB	'd][%d]', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Init@TMonsterAIGroup@@SAXH@Z
_TEXT	SEGMENT
_j$209269 = -12						; size = 4
_iResult$209275 = -8					; size = 4
_iCount$209282 = -4					; size = 4
tv85 = 8						; size = 4
_iGroupNumber$ = 8					; size = 4
_cY$209278 = 11						; size = 1
_cX$209277 = 11						; size = 1
?Init@TMonsterAIGroup@@SAXH@Z PROC			; TMonsterAIGroup::Init, COMDAT

; 434  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	57		 push	 edi

; 435  : 	if ( TMonsterAIGroup::s_iMonsterAIGroupMemberCount[iGroupNumber] == 0 )

  00007	8b 7d 08	 mov	 edi, DWORD PTR _iGroupNumber$[ebp]
  0000a	83 3c bd 00 00
	00 00 00	 cmp	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[edi*4], 0
  00012	0f 84 82 01 00
	00		 je	 $LN11@Init

; 436  : 		return;
; 437  : 
; 438  : 	TMonsterAIGroup::DelGroupInstance(iGroupNumber);

  00018	53		 push	 ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  0001f	69 ff 00 32 00
	00		 imul	 edi, 12800		; 00003200H
  00025	8a 5d 0b	 mov	 bl, BYTE PTR _cX$209277[ebp]
  00028	83 c4 04	 add	 esp, 4

; 439  : 
; 440  : 	for ( int j=0;j<MAX_MONSTER_AI_GROUP_MEMBER;j++)

  0002b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$209269[ebp], 0
  00032	81 c7 28 00 00
	00		 add	 edi, OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A+40
  00038	56		 push	 esi
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL13@Init:

; 441  : 	{
; 442  : 		TMonsterAIGroupMember & Memb = TMonsterAIGroup::s_MonsterAIGroupMemberArray[iGroupNumber][j];
; 443  : 
; 444  : 		if ( Memb.m_iGuid == -1 )

  00040	83 7f e0 ff	 cmp	 DWORD PTR [edi-32], -1
  00044	0f 84 12 03 00
	00		 je	 $LN12@Init

; 445  : 			continue;
; 446  : 
; 447  : 		int iResult = gObjAddMonster(Memb.m_iMapNumber);

  0004a	8b 07		 mov	 eax, DWORD PTR [edi]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00052	0f bf f0	 movsx	 esi, ax
  00055	83 c4 04	 add	 esp, 4
  00058	89 75 f8	 mov	 DWORD PTR _iResult$209275[ebp], esi

; 448  : 
; 449  : 		if ( iResult >= 0 )

  0005b	85 f6		 test	 esi, esi
  0005d	0f 88 f9 02 00
	00		 js	 $LN12@Init

; 450  : 		{
; 451  : 			gObj[iResult].m_PosNum = -1;

  00063	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00069	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0006f	83 c9 ff	 or	 ecx, -1
  00072	66 89 8c 16 b0
	03 00 00	 mov	 WORD PTR [esi+edx+944], cx

; 452  : 			gObj[iResult].MapNumber = Memb.m_iMapNumber;

  0007a	8a 07		 mov	 al, BYTE PTR [edi]
  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00082	88 84 0e 49 01
	00 00		 mov	 BYTE PTR [esi+ecx+329], al

; 453  : 			gObj[iResult].Live = TRUE;

  00089	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008f	c6 44 16 6a 01	 mov	 BYTE PTR [esi+edx+106], 1

; 454  : 
; 455  : 			gObjViewportListProtocolDestroy(&gObj[iResult]);

  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00099	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 ?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolDestroy

; 456  : 			gObjViewportClose(&gObj[iResult]);

  000a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a8	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?gObjViewportClose@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportClose

; 457  : 
; 458  : 			BYTE cX;
; 459  : 			BYTE cY;
; 460  : 
; 461  : 			if ( Memb.m_iCreateType == 1 )

  000b1	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]
  000b4	83 c4 08	 add	 esp, 8
  000b7	83 f8 01	 cmp	 eax, 1
  000ba	0f 85 df 00 00
	00		 jne	 $LN8@Init

; 462  : 			{
; 463  : 				int iRadius = 10;
; 464  : 				BOOL bGetPosition = FALSE;
; 465  : 				int iCount = 100;

  000c0	c7 45 fc 64 00
	00 00		 mov	 DWORD PTR _iCount$209282[ebp], 100 ; 00000064H
$LL7@Init:

; 466  : 
; 467  : 				while ( iCount-- != 0 )

  000c7	ff 4d fc	 dec	 DWORD PTR _iCount$209282[ebp]

; 468  : 				{
; 469  : 					cX = ( rand() % (iRadius+1) ) * (((rand()%2==0)?-1:1)) + Memb.m_iStartX;

  000ca	e8 00 00 00 00	 call	 _rand
  000cf	99		 cdq
  000d0	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  000d5	f7 f9		 idiv	 ecx
  000d7	8b da		 mov	 ebx, edx
  000d9	e8 00 00 00 00	 call	 _rand
  000de	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000e3	79 05		 jns	 SHORT $LN30@Init
  000e5	48		 dec	 eax
  000e6	83 c8 fe	 or	 eax, -2			; fffffffeH
  000e9	40		 inc	 eax
$LN30@Init:
  000ea	f7 d8		 neg	 eax
  000ec	1a c0		 sbb	 al, al
  000ee	24 02		 and	 al, 2
  000f0	fe c8		 dec	 al
  000f2	f6 eb		 imul	 bl
  000f4	8a d8		 mov	 bl, al
  000f6	02 5f 04	 add	 bl, BYTE PTR [edi+4]

; 470  : 					cY = ( rand() % (iRadius+1) ) * (((rand()%2==0)?-1:1)) + Memb.m_iStartX;

  000f9	e8 00 00 00 00	 call	 _rand
  000fe	99		 cdq
  000ff	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00104	f7 f9		 idiv	 ecx
  00106	89 55 08	 mov	 DWORD PTR tv85[ebp], edx
  00109	e8 00 00 00 00	 call	 _rand
  0010e	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00113	79 05		 jns	 SHORT $LN31@Init
  00115	48		 dec	 eax
  00116	83 c8 fe	 or	 eax, -2			; fffffffeH
  00119	40		 inc	 eax
$LN31@Init:

; 471  : 
; 472  : 					BYTE btMapAttr = MapC[Memb.m_iMapNumber].GetAttr(cX, cY);

  0011a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0011c	f7 d8		 neg	 eax
  0011e	1a c0		 sbb	 al, al
  00120	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  00126	24 02		 and	 al, 2
  00128	fe c8		 dec	 al
  0012a	f6 6d 08	 imul	 BYTE PTR tv85[ebp]
  0012d	02 47 04	 add	 al, BYTE PTR [edi+4]
  00130	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC

; 473  : 
; 474  : 					if ( btMapAttr == 0 )

  00136	0f b6 d0	 movzx	 edx, al
  00139	88 45 0b	 mov	 BYTE PTR _cY$209278[ebp], al
  0013c	0f b6 c3	 movzx	 eax, bl
  0013f	52		 push	 edx
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00146	84 c0		 test	 al, al
  00148	74 62		 je	 SHORT $LN26@Init

; 466  : 
; 467  : 				while ( iCount-- != 0 )

  0014a	83 7d fc 00	 cmp	 DWORD PTR _iCount$209282[ebp], 0
  0014e	0f 85 73 ff ff
	ff		 jne	 $LL7@Init

; 475  : 					{
; 476  : 						bGetPosition = TRUE;
; 477  : 						break;
; 478  : 					}
; 479  : 				}
; 480  : 
; 481  : 				if ( bGetPosition == FALSE )
; 482  : 				{
; 483  : 					gObj[iResult].Live = FALSE;

  00154	8b 75 f8	 mov	 esi, DWORD PTR _iResult$209275[ebp]
  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00162	c6 44 06 6a 00	 mov	 BYTE PTR [esi+eax+106], 0

; 484  : 					gObj[iResult].m_State = 4;

  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016d	c7 84 0e 20 02
	00 00 04 00 00
	00		 mov	 DWORD PTR [esi+ecx+544], 4

; 485  : 					gObj[iResult].RegenTime = GetTickCount();

  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0017e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00184	89 84 16 a8 03
	00 00		 mov	 DWORD PTR [esi+edx+936], eax

; 486  : 					gObj[iResult].DieRegen = 1;

  0018b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00190	c6 84 06 a2 03
	00 00 01	 mov	 BYTE PTR [esi+eax+930], 1
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
$LN11@Init:
  0019a	5f		 pop	 edi

; 533  : //#endif
; 534  : 		}
; 535  : 	}
; 536  : }

  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
$LN8@Init:

; 487  : 
; 488  : 					return;
; 489  : 				}
; 490  : 			}
; 491  : 			else if ( Memb.m_iCreateType == 0 )

  0019f	85 c0		 test	 eax, eax
  001a1	75 09		 jne	 SHORT $LN26@Init

; 492  : 			{
; 493  : 				cX = Memb.m_iStartX;
; 494  : 				cY = Memb.m_iStartY;

  001a3	8a 4f 08	 mov	 cl, BYTE PTR [edi+8]
  001a6	8a 5f 04	 mov	 bl, BYTE PTR [edi+4]
  001a9	88 4d 0b	 mov	 BYTE PTR _cY$209278[ebp], cl
$LN26@Init:

; 495  : 			}
; 496  : 
; 497  : 			gObj[iResult].X = cX;

  001ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 498  : 			gObj[iResult].Y = cY;

  001b1	0f b6 4d 0b	 movzx	 ecx, BYTE PTR _cY$209278[ebp]
  001b5	0f b6 d3	 movzx	 edx, bl
  001b8	66 89 94 06 44
	01 00 00	 mov	 WORD PTR [esi+eax+324], dx
  001c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c6	66 89 8c 16 46
	01 00 00	 mov	 WORD PTR [esi+edx+326], cx

; 499  : 			gObj[iResult].MTX = gObj[iResult].X;

  001ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d3	0f b7 8c 06 44
	01 00 00	 movzx	 ecx, WORD PTR [esi+eax+324]
  001db	66 89 8c 06 80
	01 00 00	 mov	 WORD PTR [esi+eax+384], cx

; 500  : 			gObj[iResult].MTY = gObj[iResult].Y;

  001e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e8	0f b7 94 06 46
	01 00 00	 movzx	 edx, WORD PTR [esi+eax+326]
  001f0	66 89 94 06 82
	01 00 00	 mov	 WORD PTR [esi+eax+386], dx

; 501  : 			gObj[iResult].TX = gObj[iResult].X;

  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001fd	0f b7 8c 06 44
	01 00 00	 movzx	 ecx, WORD PTR [esi+eax+324]
  00205	66 89 8c 06 7c
	01 00 00	 mov	 WORD PTR [esi+eax+380], cx

; 502  : 			gObj[iResult].TY = gObj[iResult].Y;

  0020d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00212	0f b7 94 06 46
	01 00 00	 movzx	 edx, WORD PTR [esi+eax+326]
  0021a	66 89 94 06 7e
	01 00 00	 mov	 WORD PTR [esi+eax+382], dx

; 503  : 			gObj[iResult].StartX = gObj[iResult].X;

  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00227	8a 8c 06 44 01
	00 00		 mov	 cl, BYTE PTR [esi+eax+324]
  0022e	88 8c 06 76 01
	00 00		 mov	 BYTE PTR [esi+eax+374], cl

; 504  : 			gObj[iResult].StartY = gObj[iResult].Y;

  00235	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0023a	8a 94 06 46 01
	00 00		 mov	 dl, BYTE PTR [esi+eax+326]

; 505  : 
; 506  : 
; 507  : 			gObjSetMonster(iResult, Memb.m_iClass);

  00241	8b 4d f8	 mov	 ecx, DWORD PTR _iResult$209275[ebp]
  00244	88 94 06 77 01
	00 00		 mov	 BYTE PTR [esi+eax+375], dl
  0024b	8b 47 e4	 mov	 eax, DWORD PTR [edi-28]
  0024e	50		 push	 eax
  0024f	51		 push	 ecx
  00250	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 508  : 
; 509  : 			gObj[iResult].m_iGroupNumber = Memb.m_iGroupNumber;

  00255	8b 57 dc	 mov	 edx, DWORD PTR [edi-36]
  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0025d	89 94 06 84 1c
	00 00		 mov	 DWORD PTR [esi+eax+7300], edx

; 510  : 			gObj[iResult].m_iGroupMemberGuid = Memb.m_iGuid;

  00264	8b 4f e0	 mov	 ecx, DWORD PTR [edi-32]
  00267	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0026d	89 8c 16 8c 1c
	00 00		 mov	 DWORD PTR [esi+edx+7308], ecx

; 511  : 			gObj[iResult].m_iCurrentAI = Memb.m_iStartAI;

  00274	8b 47 ec	 mov	 eax, DWORD PTR [edi-20]
  00277	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0027d	89 84 0e 78 1c
	00 00		 mov	 DWORD PTR [esi+ecx+7288], eax

; 512  : 			gObj[iResult].m_iBasicAI = Memb.m_iStartAI;

  00284	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00289	8b 57 ec	 mov	 edx, DWORD PTR [edi-20]
  0028c	89 94 06 74 1c
	00 00		 mov	 DWORD PTR [esi+eax+7284], edx

; 513  : 			gObj[iResult].m_iRegenType = Memb.m_iRegenType;

  00293	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00296	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0029c	89 8c 16 90 1c
	00 00		 mov	 DWORD PTR [esi+edx+7312], ecx

; 514  : 			gObj[iResult].Dir = Memb.m_iStartDir;

  002a3	8a 47 0c	 mov	 al, BYTE PTR [edi+12]
  002a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002ac	88 84 0e 48 01
	00 00		 mov	 BYTE PTR [esi+ecx+328], al

; 515  : 			gObj[iResult].m_State = 1;

  002b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 516  : 			gObj[iResult].DieRegen = 0;
; 517  : 			Memb.m_iObjIndex = iResult;

  002b9	8b 4d f8	 mov	 ecx, DWORD PTR _iResult$209275[ebp]
  002bc	c7 84 16 20 02
	00 00 01 00 00
	00		 mov	 DWORD PTR [esi+edx+544], 1
  002c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002cc	c6 84 06 a2 03
	00 00 00	 mov	 BYTE PTR [esi+eax+930], 0
  002d4	83 c4 08	 add	 esp, 8

; 518  : 
; 519  : 			if ( Memb.m_iCreateType == -1 )

  002d7	83 7f fc ff	 cmp	 DWORD PTR [edi-4], -1
  002db	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  002de	75 3f		 jne	 SHORT $LN1@Init

; 520  : 			{
; 521  : 				gObj[iResult].Live = FALSE;

  002e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002e6	c6 44 0e 6a 00	 mov	 BYTE PTR [esi+ecx+106], 0

; 522  : 				gObj[iResult].m_State = 4;

  002eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002f1	c7 84 16 20 02
	00 00 04 00 00
	00		 mov	 DWORD PTR [esi+edx+544], 4

; 523  : 				gObj[iResult].RegenTime = GetTickCount();

  002fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00302	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00308	89 84 0e a8 03
	00 00		 mov	 DWORD PTR [esi+ecx+936], eax

; 524  : 				gObj[iResult].DieRegen = 1;

  0030f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00315	c6 84 16 a2 03
	00 00 01	 mov	 BYTE PTR [esi+edx+930], 1

; 525  : 
; 526  : 				continue;

  0031d	eb 3d		 jmp	 SHORT $LN12@Init
$LN1@Init:

; 527  : 			}
; 528  : 			
; 529  : //#if(GS_CASTLE==0)
; 530  : 			LogAddTD("[ KANTURU ][ SetAIMonster ] %s(Index:%d ObjIndex:%d) Map:%d-[%d][%d]",
; 531  : 				gObj[iResult].Name, gObj[iResult].Class, iResult, gObj[iResult].MapNumber,
; 532  : 				gObj[iResult].X, gObj[iResult].Y);

  0031f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00324	0f bf 94 06 46
	01 00 00	 movsx	 edx, WORD PTR [esi+eax+326]
  0032c	52		 push	 edx
  0032d	0f bf 94 06 44
	01 00 00	 movsx	 edx, WORD PTR [esi+eax+324]
  00335	52		 push	 edx
  00336	0f b6 94 06 49
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+329]
  0033e	52		 push	 edx
  0033f	51		 push	 ecx
  00340	0f b7 8c 06 b8
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+184]
  00348	51		 push	 ecx
  00349	8d 54 06 77	 lea	 edx, DWORD PTR [esi+eax+119]
  0034d	52		 push	 edx
  0034e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@IEKKIIGH@?$FL?5KANTURU?5?$FN?$FL?5SetAIMonster?5?$FN?5?$CFs?$CII@
  00353	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00359	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN12@Init:

; 439  : 
; 440  : 	for ( int j=0;j<MAX_MONSTER_AI_GROUP_MEMBER;j++)

  0035c	8b 45 f4	 mov	 eax, DWORD PTR _j$209269[ebp]
  0035f	40		 inc	 eax
  00360	83 c7 40	 add	 edi, 64			; 00000040H
  00363	89 45 f4	 mov	 DWORD PTR _j$209269[ebp], eax
  00366	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  0036b	0f 8c cf fc ff
	ff		 jl	 $LL13@Init
  00371	5e		 pop	 esi
  00372	5b		 pop	 ebx
  00373	5f		 pop	 edi

; 533  : //#endif
; 534  : 		}
; 535  : 	}
; 536  : }

  00374	8b e5		 mov	 esp, ebp
  00376	5d		 pop	 ebp
  00377	c3		 ret	 0
?Init@TMonsterAIGroup@@SAXH@Z ENDP			; TMonsterAIGroup::Init
_TEXT	ENDS
PUBLIC	??0TMonsterAIGroup@@QAE@XZ			; TMonsterAIGroup::TMonsterAIGroup
; Function compile flags: /Ogtp
;	COMDAT ??0TMonsterAIGroup@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIGroup@@QAE@XZ PROC				; TMonsterAIGroup::TMonsterAIGroup, COMDAT
; _this$ = ecx

; 26   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7TMonsterAIGroup@@6B@

; 27   : 	this->DelAllGroupInfo();

  00009	e8 00 00 00 00	 call	 ?DelAllGroupInfo@TMonsterAIGroup@@SAHXZ ; TMonsterAIGroup::DelAllGroupInfo

; 28   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0TMonsterAIGroup@@QAE@XZ ENDP				; TMonsterAIGroup::TMonsterAIGroup
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GTMonsterAIGroup@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTMonsterAIGroup@@UAEPAXI@Z PROC			; TMonsterAIGroup::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TMonsterAIGroup@@UAE@XZ ; TMonsterAIGroup::~TMonsterAIGroup
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GTMonsterAIGroup@@UAEPAXI@Z ENDP			; TMonsterAIGroup::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?InitAll@TMonsterAIGroup@@SAXXZ			; TMonsterAIGroup::InitAll
; Function compile flags: /Ogtp
;	COMDAT ?InitAll@TMonsterAIGroup@@SAXXZ
_TEXT	SEGMENT
?InitAll@TMonsterAIGroup@@SAXXZ PROC			; TMonsterAIGroup::InitAll, COMDAT

; 421  : {

  00000	56		 push	 esi

; 422  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP;i++)

  00001	33 f6		 xor	 esi, esi
$LL4@InitAll:

; 423  : 	{
; 424  : 		if ( TMonsterAIGroup::s_iMonsterAIGroupMemberCount[i] == 0 )

  00003	83 3c b5 00 00
	00 00 00	 cmp	 DWORD PTR ?s_iMonsterAIGroupMemberCount@TMonsterAIGroup@@2PAHA[esi*4], 0
  0000b	74 09		 je	 SHORT $LN3@InitAll

; 425  : 			continue;
; 426  : 
; 427  : 		TMonsterAIGroup::Init(i);

  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init
  00013	83 c4 04	 add	 esp, 4
$LN3@InitAll:

; 422  : 	for ( int i=0;i<MAX_MONSTER_AI_GROUP;i++)

  00016	46		 inc	 esi
  00017	83 fe 64	 cmp	 esi, 100		; 00000064H
  0001a	7c e7		 jl	 SHORT $LL4@InitAll
  0001c	5e		 pop	 esi

; 428  : 	}
; 429  : }

  0001d	c3		 ret	 0
?InitAll@TMonsterAIGroup@@SAXXZ ENDP			; TMonsterAIGroup::InitAll
_TEXT	ENDS
EXTRN	_atexit:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0TMonsterAIGroupMember@@QAE@XZ:PROC		; TMonsterAIGroupMember::TMonsterAIGroupMember
EXTRN	??1TMonsterAIGroupMember@@UAE@XZ:PROC		; TMonsterAIGroupMember::~TMonsterAIGroupMember
; Function compile flags: /Ogtp
;	COMDAT ??__E?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ
text$yc	SEGMENT
??__E?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ PROC ; `dynamic initializer for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray'', COMDAT

; 18   : TMonsterAIGroupMember TMonsterAIGroup::s_MonsterAIGroupMemberArray[MAX_MONSTER_AI_GROUP][MAX_MONSTER_AI_GROUP_MEMBER];

  00000	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIGroupMember@@UAE@XZ ; TMonsterAIGroupMember::~TMonsterAIGroupMember
  00005	68 00 00 00 00	 push	 OFFSET ??0TMonsterAIGroupMember@@QAE@XZ ; TMonsterAIGroupMember::TMonsterAIGroupMember
  0000a	68 20 4e 00 00	 push	 20000			; 00004e20H
  0000f	6a 40		 push	 64			; 00000040H
  00011	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
  00016	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0001b	68 00 00 00 00	 push	 OFFSET ??__F?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ ; `dynamic atexit destructor for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray''
  00020	e8 00 00 00 00	 call	 _atexit
  00025	59		 pop	 ecx
  00026	c3		 ret	 0
??__E?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ ENDP ; `dynamic initializer for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray''
text$yc	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??__F?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ
text$yd	SEGMENT
??__F?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIGroupMember@@UAE@XZ ; TMonsterAIGroupMember::~TMonsterAIGroupMember
  00005	68 20 4e 00 00	 push	 20000			; 00004e20H
  0000a	6a 40		 push	 64			; 00000040H
  0000c	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
  00011	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00016	c3		 ret	 0
??__F?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'TMonsterAIGroup::s_MonsterAIGroupMemberArray''
text$yd	ENDS
PUBLIC	?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
_BSS	SEGMENT
?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A DB 0138800H DUP (?) ; TMonsterAIGroup::s_MonsterAIGroupMemberArray
_BSS	ENDS
CRT$XCU	SEGMENT
?s_MonsterAIGroupMemberArray$initializer$@TMonsterAIGroup@@2P6AXXZA DD FLAT:??__E?s_MonsterAIGroupMemberArray@TMonsterAIGroup@@2PAY0MI@VTMonsterAIGroupMember@@A@@YAXXZ ; TMonsterAIGroup::s_MonsterAIGroupMemberArray$initializer$
CRT$XCU	ENDS
END
