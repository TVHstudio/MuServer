; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\TMonsterAIRule.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?s_iMonsterCurrentAIUnitTable@TMonsterAIRule@@2PAHA ; TMonsterAIRule::s_iMonsterCurrentAIUnitTable
PUBLIC	?s_iMonsterAIRuleInfoCount@TMonsterAIRule@@2HA	; TMonsterAIRule::s_iMonsterAIRuleInfoCount
PUBLIC	?s_bDataLoad@TMonsterAIRule@@2HA		; TMonsterAIRule::s_bDataLoad
_BSS	SEGMENT
?s_iMonsterCurrentAIUnitTable@TMonsterAIRule@@2PAHA DD 03e8H DUP (?) ; TMonsterAIRule::s_iMonsterCurrentAIUnitTable
?s_iMonsterAIRuleInfoCount@TMonsterAIRule@@2HA DD 01H DUP (?) ; TMonsterAIRule::s_iMonsterAIRuleInfoCount
?s_bDataLoad@TMonsterAIRule@@2HA DD 01H DUP (?)		; TMonsterAIRule::s_bDataLoad
_BSS	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7TMonsterAIRule@@6B@				; TMonsterAIRule::`vftable'
PUBLIC	??1TMonsterAIRule@@UAE@XZ			; TMonsterAIRule::~TMonsterAIRule
PUBLIC	??_R4TMonsterAIRule@@6B@			; TMonsterAIRule::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTMonsterAIRule@@@8			; TMonsterAIRule `RTTI Type Descriptor'
PUBLIC	??_R3TMonsterAIRule@@8				; TMonsterAIRule::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TMonsterAIRule@@8				; TMonsterAIRule::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TMonsterAIRule@@8			; TMonsterAIRule::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETMonsterAIRule@@UAEPAXI@Z:PROC		; TMonsterAIRule::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@TMonsterAIRule@@8
; File e:\work\tranet_version\gs\gameserver\tmonsterairule.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@TMonsterAIRule@@8 DD FLAT:??_R0?AVTMonsterAIRule@@@8 ; TMonsterAIRule::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TMonsterAIRule@@8
rdata$r	ENDS
;	COMDAT ??_R2TMonsterAIRule@@8
rdata$r	SEGMENT
??_R2TMonsterAIRule@@8 DD FLAT:??_R1A@?0A@EA@TMonsterAIRule@@8 ; TMonsterAIRule::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TMonsterAIRule@@8
rdata$r	SEGMENT
??_R3TMonsterAIRule@@8 DD 00H				; TMonsterAIRule::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TMonsterAIRule@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTMonsterAIRule@@@8
_DATA	SEGMENT
??_R0?AVTMonsterAIRule@@@8 DD FLAT:??_7type_info@@6B@	; TMonsterAIRule `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTMonsterAIRule@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TMonsterAIRule@@6B@
rdata$r	SEGMENT
??_R4TMonsterAIRule@@6B@ DD 00H				; TMonsterAIRule::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTMonsterAIRule@@@8
	DD	FLAT:??_R3TMonsterAIRule@@8
rdata$r	ENDS
;	COMDAT ??_7TMonsterAIRule@@6B@
CONST	SEGMENT
??_7TMonsterAIRule@@6B@ DD FLAT:??_R4TMonsterAIRule@@6B@ ; TMonsterAIRule::`vftable'
	DD	FLAT:??_ETMonsterAIRule@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1TMonsterAIRule@@UAE@XZ
_TEXT	SEGMENT
??1TMonsterAIRule@@UAE@XZ PROC				; TMonsterAIRule::~TMonsterAIRule, COMDAT
; _this$ = ecx

; 31   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TMonsterAIRule@@6B@

; 32   : 	return;
; 33   : }

  00006	c3		 ret	 0
??1TMonsterAIRule@@UAE@XZ ENDP				; TMonsterAIRule::~TMonsterAIRule
_TEXT	ENDS
PUBLIC	?DelAllAIRule@TMonsterAIRule@@SAHXZ		; TMonsterAIRule::DelAllAIRule
EXTRN	?Reset@TMonsterAIRuleInfo@@QAEXXZ:PROC		; TMonsterAIRuleInfo::Reset
; Function compile flags: /Ogtp
;	COMDAT ?DelAllAIRule@TMonsterAIRule@@SAHXZ
_TEXT	SEGMENT
?DelAllAIRule@TMonsterAIRule@@SAHXZ PROC		; TMonsterAIRule::DelAllAIRule, COMDAT

; 164  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 165  : 	for ( int i=0;i<MAX_MONSTER_AI_RULE_INFO;i++)

  00002	be 00 00 00 00	 mov	 esi, OFFSET ?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A ; TMonsterAIRule::s_MonsterAIRuleInfoArray
$LL6@DelAllAIRu:

; 166  : 	{
; 167  : 		TMonsterAIRule::s_MonsterAIRuleInfoArray[i].Reset();

  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Reset@TMonsterAIRuleInfo@@QAEXXZ ; TMonsterAIRuleInfo::Reset
  0000e	81 c6 98 00 00
	00		 add	 esi, 152		; 00000098H
  00014	81 fe c0 76 00
	00		 cmp	 esi, OFFSET ?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A+30400
  0001a	7c eb		 jl	 SHORT $LL6@DelAllAIRu

; 168  : 	}
; 169  : 
; 170  : 	for ( int j=0;j<MAX_MONSTER_AI_RULE_TABLE;j++)
; 171  : 	{
; 172  : 		TMonsterAIRule::s_iMonsterCurrentAIUnitTable[j] = 0;

  0001c	33 c0		 xor	 eax, eax
  0001e	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00023	bf 00 00 00 00	 mov	 edi, OFFSET ?s_iMonsterCurrentAIUnitTable@TMonsterAIRule@@2PAHA ; TMonsterAIRule::s_iMonsterCurrentAIUnitTable
  00028	f3 ab		 rep stosd
  0002a	5f		 pop	 edi

; 173  : 	}
; 174  : 
; 175  : 	TMonsterAIRule::s_iMonsterAIRuleInfoCount = 0;

  0002b	a3 00 00 00 00	 mov	 DWORD PTR ?s_iMonsterAIRuleInfoCount@TMonsterAIRule@@2HA, eax ; TMonsterAIRule::s_iMonsterAIRuleInfoCount
  00030	5e		 pop	 esi

; 176  : 
; 177  : 	return FALSE;
; 178  : }

  00031	c3		 ret	 0
?DelAllAIRule@TMonsterAIRule@@SAHXZ ENDP		; TMonsterAIRule::DelAllAIRule
_TEXT	ENDS
PUBLIC	??_C@_0EA@CHKKBCOM@?$FLMonster?5AI?5Rule?$FN?5GetCurrentAIUn@ ; `string'
PUBLIC	?GetCurrentAIUnit@TMonsterAIRule@@SAHH@Z	; TMonsterAIRule::GetCurrentAIUnit
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0EA@CHKKBCOM@?$FLMonster?5AI?5Rule?$FN?5GetCurrentAIUn@
CONST	SEGMENT
??_C@_0EA@CHKKBCOM@?$FLMonster?5AI?5Rule?$FN?5GetCurrentAIUn@ DB '[Monste'
	DB	'r AI Rule] GetCurrentAIUnit() Error - (MonsterClass=%d) ', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetCurrentAIUnit@TMonsterAIRule@@SAHH@Z
_TEXT	SEGMENT
_iMonsterClass$ = 8					; size = 4
?GetCurrentAIUnit@TMonsterAIRule@@SAHH@Z PROC		; TMonsterAIRule::GetCurrentAIUnit, COMDAT

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  : 	if ( iMonsterClass < 0 || iMonsterClass >= MAX_MONSTER_AI_RULE_TABLE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMonsterClass$[ebp]
  00006	3d e7 03 00 00	 cmp	 eax, 999		; 000003e7H
  0000b	77 09		 ja	 SHORT $LN1@GetCurrent

; 187  : 	}
; 188  : 
; 189  : 	return TMonsterAIRule::s_iMonsterCurrentAIUnitTable[iMonsterClass];

  0000d	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?s_iMonsterCurrentAIUnitTable@TMonsterAIRule@@2PAHA[eax*4]

; 190  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN1@GetCurrent:

; 184  : 	{
; 185  : 		LogAddTD("[Monster AI Rule] GetCurrentAIUnit() Error - (MonsterClass=%d) ", iMonsterClass);

  00016	50		 push	 eax
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@CHKKBCOM@?$FLMonster?5AI?5Rule?$FN?5GetCurrentAIUn@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00022	83 c4 08	 add	 esp, 8

; 186  : 		return 0;

  00025	33 c0		 xor	 eax, eax

; 190  : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?GetCurrentAIUnit@TMonsterAIRule@@SAHH@Z ENDP		; TMonsterAIRule::GetCurrentAIUnit
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MonsterAIRuleProc@TMonsterAIRule@@SAXXZ	; TMonsterAIRule::MonsterAIRuleProc
EXTRN	?IsValid@TMonsterAIRuleInfo@@QAEHXZ:PROC	; TMonsterAIRuleInfo::IsValid
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?MonsterAIRuleProc@TMonsterAIRule@@SAXXZ
_TEXT	SEGMENT
_iChangedAIUnitList$ = -1604				; size = 800
_iChangedMonsterClassList$ = -804			; size = 800
__$ArrayPad$ = -4					; size = 4
?MonsterAIRuleProc@TMonsterAIRule@@SAXXZ PROC		; TMonsterAIRule::MonsterAIRuleProc, COMDAT

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 06 00
	00		 sub	 esp, 1604		; 00000644H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 197  : 	int iChangedMonsterClassList[MAX_MONSTER_AI_RULE_INFO] = {-1};

  00016	68 1c 03 00 00	 push	 796			; 0000031cH
  0001b	33 db		 xor	 ebx, ebx
  0001d	8d 85 e0 fc ff
	ff		 lea	 eax, DWORD PTR _iChangedMonsterClassList$[ebp+4]
  00023	53		 push	 ebx
  00024	50		 push	 eax
  00025	c7 85 dc fc ff
	ff ff ff ff ff	 mov	 DWORD PTR _iChangedMonsterClassList$[ebp], -1
  0002f	e8 00 00 00 00	 call	 _memset

; 198  : 	int iChangedAIUnitList[MAX_MONSTER_AI_RULE_INFO] = {0};

  00034	68 1c 03 00 00	 push	 796			; 0000031cH
  00039	8d 8d c0 f9 ff
	ff		 lea	 ecx, DWORD PTR _iChangedAIUnitList$[ebp+4]
  0003f	53		 push	 ebx
  00040	51		 push	 ecx
  00041	89 9d bc f9 ff
	ff		 mov	 DWORD PTR _iChangedAIUnitList$[ebp], ebx
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 18	 add	 esp, 24			; 00000018H

; 199  : 	int iChangedListCount = 0;

  0004f	33 ff		 xor	 edi, edi

; 200  : 	
; 201  : 	for (int i=0;i<TMonsterAIRule::s_iMonsterAIRuleInfoCount;i++)

  00051	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?s_iMonsterAIRuleInfoCount@TMonsterAIRule@@2HA, ebx ; TMonsterAIRule::s_iMonsterAIRuleInfoCount
  00057	7e 52		 jle	 SHORT $LN8@MonsterAIR

; 197  : 	int iChangedMonsterClassList[MAX_MONSTER_AI_RULE_INFO] = {-1};

  00059	be 04 00 00 00	 mov	 esi, OFFSET ?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A+4
  0005e	8b ff		 npad	 2
$LL10@MonsterAIR:

; 202  : 	{
; 203  : 		TMonsterAIRuleInfo & RuleInfo = TMonsterAIRule::s_MonsterAIRuleInfoArray[i];
; 204  : 
; 205  : 		if ( RuleInfo.m_iMonsterClass < 0 || RuleInfo.m_iMonsterClass >= MAX_MONSTER_AI_RULE_TABLE )

  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	85 c0		 test	 eax, eax
  00064	78 65		 js	 SHORT $LN1@MonsterAIR
  00066	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0006b	7d 5e		 jge	 SHORT $LN1@MonsterAIR

; 206  : 			return;
; 207  : 
; 208  : 		if ( RuleInfo.IsValid() )

  0006d	8d 4e fc	 lea	 ecx, DWORD PTR [esi-4]
  00070	e8 00 00 00 00	 call	 ?IsValid@TMonsterAIRuleInfo@@QAEHXZ ; TMonsterAIRuleInfo::IsValid
  00075	85 c0		 test	 eax, eax
  00077	74 16		 je	 SHORT $LN5@MonsterAIR

; 209  : 		{
; 210  : 			iChangedMonsterClassList[iChangedListCount] = RuleInfo.m_iMonsterClass;

  00079	8b 16		 mov	 edx, DWORD PTR [esi]

; 211  : 			iChangedAIUnitList[iChangedListCount] = RuleInfo.m_iMonsterAIUnit;

  0007b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007e	89 94 bd dc fc
	ff ff		 mov	 DWORD PTR _iChangedMonsterClassList$[ebp+edi*4], edx
  00085	89 84 bd bc f9
	ff ff		 mov	 DWORD PTR _iChangedAIUnitList$[ebp+edi*4], eax

; 212  : 			iChangedListCount++;

  0008c	47		 inc	 edi

; 213  : 		}
; 214  : 		else

  0008d	eb 0d		 jmp	 SHORT $LN9@MonsterAIR
$LN5@MonsterAIR:

; 215  : 		{
; 216  : 			TMonsterAIRule::s_iMonsterCurrentAIUnitTable[RuleInfo.m_iMonsterClass] = 0;

  0008f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00091	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?s_iMonsterCurrentAIUnitTable@TMonsterAIRule@@2PAHA[ecx*4], 0
$LN9@MonsterAIR:

; 200  : 	
; 201  : 	for (int i=0;i<TMonsterAIRule::s_iMonsterAIRuleInfoCount;i++)

  0009c	43		 inc	 ebx
  0009d	81 c6 98 00 00
	00		 add	 esi, 152		; 00000098H
  000a3	3b 1d 00 00 00
	00		 cmp	 ebx, DWORD PTR ?s_iMonsterAIRuleInfoCount@TMonsterAIRule@@2HA ; TMonsterAIRule::s_iMonsterAIRuleInfoCount
  000a9	7c b5		 jl	 SHORT $LL10@MonsterAIR
$LN8@MonsterAIR:

; 217  : 		}
; 218  : 	}
; 219  : 
; 220  : 	for(int j=0;j<iChangedListCount;j++)

  000ab	33 c0		 xor	 eax, eax
  000ad	85 ff		 test	 edi, edi
  000af	7e 1a		 jle	 SHORT $LN1@MonsterAIR
$LL3@MonsterAIR:

; 221  : 	{
; 222  : 		TMonsterAIRule::s_iMonsterCurrentAIUnitTable[iChangedMonsterClassList[j]] = iChangedAIUnitList[j];

  000b1	8b 94 85 dc fc
	ff ff		 mov	 edx, DWORD PTR _iChangedMonsterClassList$[ebp+eax*4]
  000b8	8b 8c 85 bc f9
	ff ff		 mov	 ecx, DWORD PTR _iChangedAIUnitList$[ebp+eax*4]
  000bf	40		 inc	 eax
  000c0	89 0c 95 00 00
	00 00		 mov	 DWORD PTR ?s_iMonsterCurrentAIUnitTable@TMonsterAIRule@@2PAHA[edx*4], ecx
  000c7	3b c7		 cmp	 eax, edi
  000c9	7c e6		 jl	 SHORT $LL3@MonsterAIR
$LN1@MonsterAIR:

; 223  : 	}
; 224  : }

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	33 cd		 xor	 ecx, ebp
  000d2	5b		 pop	 ebx
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
?MonsterAIRuleProc@TMonsterAIRule@@SAXXZ ENDP		; TMonsterAIRule::MonsterAIRuleProc
_TEXT	ENDS
PUBLIC	??0TMonsterAIRule@@QAE@XZ			; TMonsterAIRule::TMonsterAIRule
; Function compile flags: /Ogtp
;	COMDAT ??0TMonsterAIRule@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIRule@@QAE@XZ PROC				; TMonsterAIRule::TMonsterAIRule, COMDAT
; _this$ = ecx

; 26   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7TMonsterAIRule@@6B@

; 27   : 	this->DelAllAIRule();

  00009	e8 00 00 00 00	 call	 ?DelAllAIRule@TMonsterAIRule@@SAHXZ ; TMonsterAIRule::DelAllAIRule

; 28   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0TMonsterAIRule@@QAE@XZ ENDP				; TMonsterAIRule::TMonsterAIRule
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GTMonsterAIRule@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTMonsterAIRule@@UAEPAXI@Z PROC			; TMonsterAIRule::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TMonsterAIRule@@UAE@XZ ; TMonsterAIRule::~TMonsterAIRule
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GTMonsterAIRule@@UAEPAXI@Z ENDP			; TMonsterAIRule::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DG@HPPFCDDL@?$FLMonster?5AI?5Rule?$FN?5?9?5File?5load?5er@ ; `string'
PUBLIC	??_C@_0DI@ODGOPJDM@?$FLMonster?5AI?5Rule?$FN?5?9?5Loading?5Exce@ ; `string'
PUBLIC	??_C@_0DH@NNPFAJJI@?$FLMonster?5AI?5Rule?$FN?5?9?5AIRuleNumber@ ; `string'
PUBLIC	??_C@_0DH@HGLCKALN@?$FLMonster?5AI?5Rule?$FN?5?9?5MonsterClass@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CH@BFNKLGPG@?$FLMonster?5AI?5Rule?5?$FN?5?9?5?$CFs?5file?5is?5@ ; `string'
PUBLIC	??_C@_0CD@PMAANPFL@?$FLMonster?5AI?5Rule?$FN?5?9?5Can?8t?5Open?5?$CF@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_lpszFileName$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LoadData@TMonsterAIRule@@SAHPAD@Z		; TMonsterAIRule::LoadData
EXTRN	??0TMonsterAIRuleInfo@@QAE@XZ:PROC		; TMonsterAIRuleInfo::TMonsterAIRuleInfo
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0DG@HPPFCDDL@?$FLMonster?5AI?5Rule?$FN?5?9?5File?5load?5er@
CONST	SEGMENT
??_C@_0DG@HPPFCDDL@?$FLMonster?5AI?5Rule?$FN?5?9?5File?5load?5er@ DB '[Mo'
	DB	'nster AI Rule] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@ODGOPJDM@?$FLMonster?5AI?5Rule?$FN?5?9?5Loading?5Exce@
CONST	SEGMENT
??_C@_0DI@ODGOPJDM@?$FLMonster?5AI?5Rule?$FN?5?9?5Loading?5Exce@ DB '[Mon'
	DB	'ster AI Rule] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@NNPFAJJI@?$FLMonster?5AI?5Rule?$FN?5?9?5AIRuleNumber@
CONST	SEGMENT
??_C@_0DH@NNPFAJJI@?$FLMonster?5AI?5Rule?$FN?5?9?5AIRuleNumber@ DB '[Mons'
	DB	'ter AI Rule] - AIRuleNumber(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HGLCKALN@?$FLMonster?5AI?5Rule?$FN?5?9?5MonsterClass@
CONST	SEGMENT
??_C@_0DH@HGLCKALN@?$FLMonster?5AI?5Rule?$FN?5?9?5MonsterClass@ DB '[Mons'
	DB	'ter AI Rule] - MonsterClass(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BFNKLGPG@?$FLMonster?5AI?5Rule?5?$FN?5?9?5?$CFs?5file?5is?5@
CONST	SEGMENT
??_C@_0CH@BFNKLGPG@?$FLMonster?5AI?5Rule?5?$FN?5?9?5?$CFs?5file?5is?5@ DB '['
	DB	'Monster AI Rule ] - %s file is Loaded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PMAANPFL@?$FLMonster?5AI?5Rule?$FN?5?9?5Can?8t?5Open?5?$CF@
CONST	SEGMENT
??_C@_0CD@PMAANPFL@?$FLMonster?5AI?5Rule?$FN?5?9?5Can?8t?5Open?5?$CF@ DB '['
	DB	'Monster AI Rule] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@TMonsterAIRule@@SAHPAD@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadData@TMonsterAIRule@@SAHPAD@Z$0
__unwindtable$?LoadData@TMonsterAIRule@@SAHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@TMonsterAIRule@@SAHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@TMonsterAIRule@@SAHPAD@Z$2
__ehfuncinfo$?LoadData@TMonsterAIRule@@SAHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@TMonsterAIRule@@SAHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@TMonsterAIRule@@SAHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadData@TMonsterAIRule@@SAHPAD@Z
_TEXT	SEGMENT
_iMonsterClass$187757 = -184				; size = 4
_iType$187746 = -180					; size = 4
_lpszFileName$GSCopy$ = -176				; size = 4
_MonsterAIRuleInfo$187758 = -172			; size = 152
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@TMonsterAIRule@@SAHPAD@Z PROC			; TMonsterAIRule::LoadData, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@TMonsterAIRule@@SAHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]

; 40   : 	TMonsterAIRule::s_bDataLoad = FALSE;

  00034	33 ff		 xor	 edi, edi
  00036	89 b5 50 ff ff
	ff		 mov	 DWORD PTR _lpszFileName$GSCopy$[ebp], esi
  0003c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIRule@@2HA, edi ; TMonsterAIRule::s_bDataLoad

; 41   : 
; 42   : 	if ( !lpszFileName || !strcmp(lpszFileName, ""))

  00042	3b f7		 cmp	 esi, edi
  00044	0f 84 a5 02 00
	00		 je	 $LN14@LoadData
  0004a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0004f	8b c6		 mov	 eax, esi
$LL26@LoadData:
  00051	8a 10		 mov	 dl, BYTE PTR [eax]
  00053	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00055	75 1a		 jne	 SHORT $LN27@LoadData
  00057	84 d2		 test	 dl, dl
  00059	74 12		 je	 SHORT $LN28@LoadData
  0005b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00061	75 0e		 jne	 SHORT $LN27@LoadData
  00063	83 c0 02	 add	 eax, 2
  00066	83 c1 02	 add	 ecx, 2
  00069	84 d2		 test	 dl, dl
  0006b	75 e4		 jne	 SHORT $LL26@LoadData
$LN28@LoadData:
  0006d	33 c0		 xor	 eax, eax
  0006f	eb 05		 jmp	 SHORT $LN29@LoadData
$LN27@LoadData:
  00071	1b c0		 sbb	 eax, eax
  00073	83 d8 ff	 sbb	 eax, -1
$LN29@LoadData:
  00076	3b c7		 cmp	 eax, edi
  00078	0f 84 71 02 00
	00		 je	 $LN14@LoadData

; 46   : 	}
; 47   : 
; 48   : 	try
; 49   : 	{
; 50   : 		SMDToken Token;
; 51   : 		SMDFile = fopen(lpszFileName, "r");

  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00083	56		 push	 esi
  00084	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00087	e8 00 00 00 00	 call	 _fopen
  0008c	83 c4 08	 add	 esp, 8
  0008f	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 52   : 
; 53   : 		if ( SMDFile == NULL )

  00094	3b c7		 cmp	 eax, edi
  00096	75 13		 jne	 SHORT $LN12@LoadData

; 54   : 		{
; 55   : 			MsgBox("[Monster AI Rule] - Can't Open %s ", lpszFileName);

  00098	56		 push	 esi
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@PMAANPFL@?$FLMonster?5AI?5Rule?$FN?5?9?5Can?8t?5Open?5?$CF@
  0009e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000a3	83 c4 08	 add	 esp, 8

; 56   : 			return FALSE;

  000a6	e9 51 02 00 00	 jmp	 $LN36@LoadData
$LN12@LoadData:

; 57   : 		}
; 58   : 
; 59   : 		TMonsterAIRule::DelAllAIRule();

  000ab	e8 00 00 00 00	 call	 ?DelAllAIRule@TMonsterAIRule@@SAHXZ ; TMonsterAIRule::DelAllAIRule
$LL11@LoadData:

; 60   : 		int iType = -1;
; 61   : 
; 62   : 		while ( true )
; 63   : 		{
; 64   : 			Token = GetToken();

  000b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 65   : 
; 66   : 			if ( Token == END )

  000b5	83 f8 02	 cmp	 eax, 2
  000b8	75 2b		 jne	 SHORT $LN9@LoadData

; 143  : 				}
; 144  : 			}
; 145  : 		}
; 146  : 
; 147  : 		fclose(SMDFile);

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _fclose

; 148  : 
; 149  : 		LogAddC(2, "[Monster AI Rule ] - %s file is Loaded", lpszFileName);

  000c5	56		 push	 esi
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BFNKLGPG@?$FLMonster?5AI?5Rule?5?$FN?5?9?5?$CFs?5file?5is?5@
  000cb	6a 02		 push	 2
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 150  : 
; 151  : 		TMonsterAIRule::s_bDataLoad = TRUE;

  000d6	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIRule@@2HA, 1 ; TMonsterAIRule::s_bDataLoad
  000e0	e9 17 02 00 00	 jmp	 $LN36@LoadData
$LN9@LoadData:

; 67   : 				break;
; 68   : 
; 69   : 			iType = (int)TokenNumber;

  000e5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000eb	e8 00 00 00 00	 call	 __ftol2_sse
  000f0	89 85 4c ff ff
	ff		 mov	 DWORD PTR _iType$187746[ebp], eax
$LL8@LoadData:

; 70   : 
; 71   : 			while ( true )
; 72   : 			{
; 73   : 				if ( iType == 0 )

  000f6	83 bd 4c ff ff
	ff 00		 cmp	 DWORD PTR _iType$187746[ebp], 0
  000fd	75 f7		 jne	 SHORT $LL8@LoadData

; 74   : 				{
; 75   : 					int iAIRuleNumber = -1;
; 76   : 					int iMonsterClass = -1;
; 77   : 					TMonsterAIRuleInfo MonsterAIRuleInfo;

  000ff	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _MonsterAIRuleInfo$187758[ebp]
  00105	e8 00 00 00 00	 call	 ??0TMonsterAIRuleInfo@@QAE@XZ ; TMonsterAIRuleInfo::TMonsterAIRuleInfo

; 78   : 
; 79   : 					Token = GetToken();

  0010a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 
; 81   : 					if ( !strcmp("end", TokenString))

  0010f	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00114	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00119	8d a4 24 00 00
	00 00		 npad	 7
$LL30@LoadData:
  00120	8a 10		 mov	 dl, BYTE PTR [eax]
  00122	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00124	75 1a		 jne	 SHORT $LN31@LoadData
  00126	84 d2		 test	 dl, dl
  00128	74 12		 je	 SHORT $LN32@LoadData
  0012a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0012d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00130	75 0e		 jne	 SHORT $LN31@LoadData
  00132	83 c0 02	 add	 eax, 2
  00135	83 c1 02	 add	 ecx, 2
  00138	84 d2		 test	 dl, dl
  0013a	75 e4		 jne	 SHORT $LL30@LoadData
$LN32@LoadData:
  0013c	33 c0		 xor	 eax, eax
  0013e	eb 05		 jmp	 SHORT $LN33@LoadData
$LN31@LoadData:
  00140	1b c0		 sbb	 eax, eax
  00142	83 d8 ff	 sbb	 eax, -1
$LN33@LoadData:
  00145	85 c0		 test	 eax, eax
  00147	0f 84 7d 01 00
	00		 je	 $LN34@LoadData

; 82   : 						break;
; 83   : 
; 84   : 					iAIRuleNumber = (int)TokenNumber;

  0014d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00153	e8 00 00 00 00	 call	 __ftol2_sse
  00158	8b d8		 mov	 ebx, eax

; 85   : 
; 86   : 					Token = GetToken();

  0015a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 87   : 					iMonsterClass = (int)TokenNumber;

  0015f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00165	e8 00 00 00 00	 call	 __ftol2_sse
  0016a	89 85 48 ff ff
	ff		 mov	 DWORD PTR _iMonsterClass$187757[ebp], eax

; 88   : 
; 89   : 					Token = GetToken();

  00170	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 					memcpy(MonsterAIRuleInfo.m_szRuleDesc, TokenString, sizeof(MonsterAIRuleInfo.m_szRuleDesc));

  00175	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0017a	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  0017f	8d 7d 88	 lea	 edi, DWORD PTR _MonsterAIRuleInfo$187758[ebp+52]
  00182	f3 a5		 rep movsd

; 91   : 
; 92   : 					Token = GetToken();

  00184	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 93   : 					MonsterAIRuleInfo.m_iMonsterAIUnit = (int)TokenNumber;

  00189	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018f	e8 00 00 00 00	 call	 __ftol2_sse
  00194	89 85 5c ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+8], eax

; 94   : 
; 95   : 					Token = GetToken();

  0019a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 96   : 					MonsterAIRuleInfo.m_iRuleCondition = (int)TokenNumber;

  0019f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a5	e8 00 00 00 00	 call	 __ftol2_sse
  001aa	89 85 60 ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+12], eax

; 97   : 
; 98   : 					Token = GetToken();

  001b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 99   : 					MonsterAIRuleInfo.m_iWaitTime = (int)TokenNumber;

  001b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001bb	e8 00 00 00 00	 call	 __ftol2_sse
  001c0	89 85 64 ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+16], eax

; 100  : 
; 101  : 					Token = GetToken();

  001c6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 102  : 					MonsterAIRuleInfo.m_iContinuanceTime = (int)TokenNumber;

  001cb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001d1	e8 00 00 00 00	 call	 __ftol2_sse
  001d6	89 85 68 ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+20], eax

; 103  : 
; 104  : 					Token = GetToken();

  001dc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 105  : 					MonsterAIRuleInfo.m_iMonth = (int)TokenNumber;

  001e1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e7	e8 00 00 00 00	 call	 __ftol2_sse
  001ec	89 85 6c ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+24], eax

; 106  : 
; 107  : 					Token = GetToken();

  001f2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 108  : 					MonsterAIRuleInfo.m_iDay = (int)TokenNumber;

  001f7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001fd	e8 00 00 00 00	 call	 __ftol2_sse
  00202	89 85 70 ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+28], eax

; 109  : 
; 110  : 					Token = GetToken();

  00208	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 111  : 					MonsterAIRuleInfo.m_iWeekDay = (int)TokenNumber;

  0020d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00213	e8 00 00 00 00	 call	 __ftol2_sse
  00218	89 85 74 ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+32], eax

; 112  : 
; 113  : 					Token = GetToken();

  0021e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 					MonsterAIRuleInfo.m_iHour = (int)TokenNumber;

  00223	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00229	e8 00 00 00 00	 call	 __ftol2_sse
  0022e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+36], eax

; 115  : 
; 116  : 					Token = GetToken();

  00234	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 					MonsterAIRuleInfo.m_iMinute = (int)TokenNumber;

  00239	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023f	e8 00 00 00 00	 call	 __ftol2_sse
  00244	89 85 7c ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+40], eax

; 118  : 
; 119  : 					if ( iAIRuleNumber  < 0 || iAIRuleNumber >= MAX_MONSTER_AI_RULE_INFO )

  0024a	81 fb c7 00 00
	00		 cmp	 ebx, 199		; 000000c7H
  00250	77 5e		 ja	 SHORT $LN3@LoadData

; 125  : 					}
; 126  : 
; 127  : 					if ( iMonsterClass  < 0 || iMonsterClass >= MAX_MONSTER_AI_RULE_TABLE )

  00252	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _iMonsterClass$187757[ebp]
  00258	3d e7 03 00 00	 cmp	 eax, 999		; 000003e7H
  0025d	77 37		 ja	 SHORT $LN1@LoadData

; 133  : 					}
; 134  : 
; 135  : 					MonsterAIRuleInfo.m_iRuleNumber = iAIRuleNumber;
; 136  : 					MonsterAIRuleInfo.m_iMonsterClass = iMonsterClass;

  0025f	89 85 58 ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp+4], eax

; 137  : 
; 138  : 					memcpy(&TMonsterAIRule::s_MonsterAIRuleInfoArray[TMonsterAIRule::s_iMonsterAIRuleInfoCount], 
; 139  : 						&MonsterAIRuleInfo,
; 140  : 						sizeof(MonsterAIRuleInfo));

  00265	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_iMonsterAIRuleInfoCount@TMonsterAIRule@@2HA ; TMonsterAIRule::s_iMonsterAIRuleInfoCount
  0026a	8b f8		 mov	 edi, eax
  0026c	69 ff 98 00 00
	00		 imul	 edi, 152		; 00000098H
  00272	81 c7 00 00 00
	00		 add	 edi, OFFSET ?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A ; TMonsterAIRule::s_MonsterAIRuleInfoArray
  00278	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  0027d	8d b5 54 ff ff
	ff		 lea	 esi, DWORD PTR _MonsterAIRuleInfo$187758[ebp]

; 141  : 
; 142  : 					TMonsterAIRule::s_iMonsterAIRuleInfoCount++;

  00283	40		 inc	 eax
  00284	89 9d 54 ff ff
	ff		 mov	 DWORD PTR _MonsterAIRuleInfo$187758[ebp], ebx
  0028a	f3 a5		 rep movsd
  0028c	a3 00 00 00 00	 mov	 DWORD PTR ?s_iMonsterAIRuleInfoCount@TMonsterAIRule@@2HA, eax ; TMonsterAIRule::s_iMonsterAIRuleInfoCount
  00291	e9 60 fe ff ff	 jmp	 $LL8@LoadData
$LN1@LoadData:

; 128  : 					{
; 129  : 						MsgBox("[Monster AI Rule] - MonsterClass(%d) Error (%s) File. ",
; 130  : 							iMonsterClass, lpszFileName);

  00296	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _lpszFileName$GSCopy$[ebp]
  0029c	51		 push	 ecx
  0029d	50		 push	 eax
  0029e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@HGLCKALN@?$FLMonster?5AI?5Rule?$FN?5?9?5MonsterClass@
  002a3	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 131  : 
; 132  : 						continue;

  002ab	e9 46 fe ff ff	 jmp	 $LL8@LoadData
$LN3@LoadData:

; 120  : 					{
; 121  : 						MsgBox("[Monster AI Rule] - AIRuleNumber(%d) Error (%s) File. ",
; 122  : 							iAIRuleNumber, lpszFileName);

  002b0	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _lpszFileName$GSCopy$[ebp]
  002b6	52		 push	 edx
  002b7	53		 push	 ebx
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@NNPFAJJI@?$FLMonster?5AI?5Rule?$FN?5?9?5AIRuleNumber@
  002bd	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 
; 124  : 						continue;

  002c5	e9 2c fe ff ff	 jmp	 $LL8@LoadData
$LN34@LoadData:
  002ca	8b b5 50 ff ff
	ff		 mov	 esi, DWORD PTR _lpszFileName$GSCopy$[ebp]
  002d0	e9 db fd ff ff	 jmp	 $LL11@LoadData
__catch$?LoadData@TMonsterAIRule@@SAHPAD@Z$0:

; 152  : 	}
; 153  : 	catch(...)
; 154  : 	{
; 155  : 		MsgBox("[Monster AI Rule] - Loading Exception Error (%s) File. ", lpszFileName);

  002d5	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _lpszFileName$GSCopy$[ebp]
  002db	50		 push	 eax
  002dc	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@ODGOPJDM@?$FLMonster?5AI?5Rule?$FN?5?9?5Loading?5Exce@
  002e1	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002e6	83 c4 08	 add	 esp, 8

; 156  : 	}

  002e9	b8 00 00 00 00	 mov	 eax, $LN36@LoadData
  002ee	c3		 ret	 0
$LN14@LoadData:

; 43   : 	{
; 44   : 		MsgBox("[Monster AI Rule] - File load error : File Name Error");

  002ef	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@HPPFCDDL@?$FLMonster?5AI?5Rule?$FN?5?9?5File?5load?5er@
  002f4	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002f9	83 c4 04	 add	 esp, 4
$LN36@LoadData:

; 45   : 		return FALSE;

  002fc	33 c0		 xor	 eax, eax

; 157  : 
; 158  : 	return FALSE;
; 159  : }

  002fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00301	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00308	59		 pop	 ecx
  00309	5f		 pop	 edi
  0030a	5e		 pop	 esi
  0030b	5b		 pop	 ebx
  0030c	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030f	33 cd		 xor	 ecx, ebp
  00311	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00316	8b e5		 mov	 esp, ebp
  00318	5d		 pop	 ebp
  00319	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@TMonsterAIRule@@SAHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 44 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-188]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@TMonsterAIRule@@SAHPAD@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@TMonsterAIRule@@SAHPAD@Z ENDP			; TMonsterAIRule::LoadData
; Function compile flags: /Ogtp
;	COMDAT ??__E?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A@@YAXXZ
text$yc	SEGMENT
??__E?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A@@YAXXZ PROC ; `dynamic initializer for 'TMonsterAIRule::s_MonsterAIRuleInfoArray'', COMDAT

; 17   : TMonsterAIRuleInfo TMonsterAIRule::s_MonsterAIRuleInfoArray[MAX_MONSTER_AI_RULE_INFO];

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	be 00 00 00 00	 mov	 esi, OFFSET ?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A ; TMonsterAIRule::s_MonsterAIRuleInfoArray
  00007	bf c7 00 00 00	 mov	 edi, 199		; 000000c7H
  0000c	8d 64 24 00	 npad	 4
$LL4@s_MonsterA:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??0TMonsterAIRuleInfo@@QAE@XZ ; TMonsterAIRuleInfo::TMonsterAIRuleInfo
  00017	81 c6 98 00 00
	00		 add	 esi, 152		; 00000098H
  0001d	4f		 dec	 edi
  0001e	79 f0		 jns	 SHORT $LL4@s_MonsterA
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??__E?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A@@YAXXZ ENDP ; `dynamic initializer for 'TMonsterAIRule::s_MonsterAIRuleInfoArray''
text$yc	ENDS
PUBLIC	?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A ; TMonsterAIRule::s_MonsterAIRuleInfoArray
_BSS	SEGMENT
?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A DB 076c0H DUP (?) ; TMonsterAIRule::s_MonsterAIRuleInfoArray
_BSS	ENDS
CRT$XCU	SEGMENT
?s_MonsterAIRuleInfoArray$initializer$@TMonsterAIRule@@2P6AXXZA DD FLAT:??__E?s_MonsterAIRuleInfoArray@TMonsterAIRule@@2PAVTMonsterAIRuleInfo@@A@@YAXXZ ; TMonsterAIRule::s_MonsterAIRuleInfoArray$initializer$
CRT$XCU	ENDS
END
