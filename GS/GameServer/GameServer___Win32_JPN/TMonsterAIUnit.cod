; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\TMonsterAIUnit.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?s_bDataLoad@TMonsterAIUnit@@2HA		; TMonsterAIUnit::s_bDataLoad
_BSS	SEGMENT
?s_bDataLoad@TMonsterAIUnit@@2HA DD 01H DUP (?)		; TMonsterAIUnit::s_bDataLoad
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7TMonsterAIUnit@@6B@				; TMonsterAIUnit::`vftable'
PUBLIC	??1TMonsterAIUnit@@UAE@XZ			; TMonsterAIUnit::~TMonsterAIUnit
PUBLIC	??_R4TMonsterAIUnit@@6B@			; TMonsterAIUnit::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTMonsterAIUnit@@@8			; TMonsterAIUnit `RTTI Type Descriptor'
PUBLIC	??_R3TMonsterAIUnit@@8				; TMonsterAIUnit::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TMonsterAIUnit@@8				; TMonsterAIUnit::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TMonsterAIUnit@@8			; TMonsterAIUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETMonsterAIUnit@@UAEPAXI@Z:PROC		; TMonsterAIUnit::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@TMonsterAIUnit@@8
; File e:\work\tranet_version\gs\gameserver\tmonsteraiunit.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@TMonsterAIUnit@@8 DD FLAT:??_R0?AVTMonsterAIUnit@@@8 ; TMonsterAIUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TMonsterAIUnit@@8
rdata$r	ENDS
;	COMDAT ??_R2TMonsterAIUnit@@8
rdata$r	SEGMENT
??_R2TMonsterAIUnit@@8 DD FLAT:??_R1A@?0A@EA@TMonsterAIUnit@@8 ; TMonsterAIUnit::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TMonsterAIUnit@@8
rdata$r	SEGMENT
??_R3TMonsterAIUnit@@8 DD 00H				; TMonsterAIUnit::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TMonsterAIUnit@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTMonsterAIUnit@@@8
_DATA	SEGMENT
??_R0?AVTMonsterAIUnit@@@8 DD FLAT:??_7type_info@@6B@	; TMonsterAIUnit `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTMonsterAIUnit@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TMonsterAIUnit@@6B@
rdata$r	SEGMENT
??_R4TMonsterAIUnit@@6B@ DD 00H				; TMonsterAIUnit::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTMonsterAIUnit@@@8
	DD	FLAT:??_R3TMonsterAIUnit@@8
rdata$r	ENDS
;	COMDAT ??_7TMonsterAIUnit@@6B@
CONST	SEGMENT
??_7TMonsterAIUnit@@6B@ DD FLAT:??_R4TMonsterAIUnit@@6B@ ; TMonsterAIUnit::`vftable'
	DD	FLAT:??_ETMonsterAIUnit@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1TMonsterAIUnit@@UAE@XZ
_TEXT	SEGMENT
??1TMonsterAIUnit@@UAE@XZ PROC				; TMonsterAIUnit::~TMonsterAIUnit, COMDAT
; _this$ = ecx

; 27   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TMonsterAIUnit@@6B@

; 28   : 	return;
; 29   : }

  00006	c3		 ret	 0
??1TMonsterAIUnit@@UAE@XZ ENDP				; TMonsterAIUnit::~TMonsterAIUnit
_TEXT	ENDS
PUBLIC	?Reset@TMonsterAIUnit@@QAEXXZ			; TMonsterAIUnit::Reset
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Reset@TMonsterAIUnit@@QAEXXZ
_TEXT	SEGMENT
?Reset@TMonsterAIUnit@@QAEXXZ PROC			; TMonsterAIUnit::Reset, COMDAT
; _this$ = ecx

; 34   : 	this->m_iUnitNumber = -1;
; 35   : 	this->m_iDelayTime = NULL;

  00000	33 c0		 xor	 eax, eax
  00002	53		 push	 ebx
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 36   : 	this->m_lpAutomata = NULL;
; 37   : 	this->m_lpAIClassNormal = NULL;
; 38   : 	this->m_lpAIClassMove = NULL;
; 39   : 	this->m_lpAIClassAttack = NULL;
; 40   : 	this->m_lpAIClassHeal = NULL;
; 41   : 	this->m_lpAIClassAvoid = NULL;
; 42   : 	this->m_lpAIClassHelp = NULL;
; 43   : 	this->m_lpAIClassSpecial = NULL;
; 44   : 	this->m_lpAIClassEvent = NULL;
; 45   : 	memset(this->m_szUnitName, 0, sizeof(this->m_szUnitName));

  00007	6a 32		 push	 50			; 00000032H
  00009	8d 7e 44	 lea	 edi, DWORD PTR [esi+68]
  0000c	8d 5e 48	 lea	 ebx, DWORD PTR [esi+72]
  0000f	50		 push	 eax
  00010	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	89 07		 mov	 DWORD PTR [edi], eax
  00018	89 03		 mov	 DWORD PTR [ebx], eax
  0001a	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  0001d	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00020	89 46 54	 mov	 DWORD PTR [esi+84], eax
  00023	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00026	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00029	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0002c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0002f	50		 push	 eax
  00030	c7 46 38 ff ff
	ff ff		 mov	 DWORD PTR [esi+56], -1
  00037	e8 00 00 00 00	 call	 _memset

; 46   : 	this->m_lppAIClassMap[0] = &this->m_lpAIClassNormal;
; 47   : 	this->m_lppAIClassMap[1] = &this->m_lpAIClassMove;
; 48   : 	this->m_lppAIClassMap[2] = &this->m_lpAIClassAttack;

  0003c	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]
  0003f	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 49   : 	this->m_lppAIClassMap[3] = &this->m_lpAIClassHeal;

  00042	8d 46 50	 lea	 eax, DWORD PTR [esi+80]
  00045	89 46 70	 mov	 DWORD PTR [esi+112], eax

; 50   : 	this->m_lppAIClassMap[4] = &this->m_lpAIClassAvoid;

  00048	8d 46 54	 lea	 eax, DWORD PTR [esi+84]
  0004b	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 51   : 	this->m_lppAIClassMap[5] = &this->m_lpAIClassHelp;

  0004e	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  00051	89 46 78	 mov	 DWORD PTR [esi+120], eax

; 52   : 	this->m_lppAIClassMap[6] = &this->m_lpAIClassSpecial;

  00054	8d 46 5c	 lea	 eax, DWORD PTR [esi+92]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  0005d	89 7e 64	 mov	 DWORD PTR [esi+100], edi

; 53   : 	this->m_lppAIClassMap[7] = &this->m_lpAIClassEvent;

  00060	8d 46 60	 lea	 eax, DWORD PTR [esi+96]
  00063	5f		 pop	 edi
  00064	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  00067	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 54   : }

  0006f	c3		 ret	 0
?Reset@TMonsterAIUnit@@QAEXXZ ENDP			; TMonsterAIUnit::Reset
_TEXT	ENDS
PUBLIC	?DelAllAIUnit@TMonsterAIUnit@@SAHXZ		; TMonsterAIUnit::DelAllAIUnit
; Function compile flags: /Ogtp
;	COMDAT ?DelAllAIUnit@TMonsterAIUnit@@SAHXZ
_TEXT	SEGMENT
?DelAllAIUnit@TMonsterAIUnit@@SAHXZ PROC		; TMonsterAIUnit::DelAllAIUnit, COMDAT

; 193  : {

  00000	56		 push	 esi

; 194  : 	for (int i=0;i<MAX_MONSTER_AI_UNIT;i++)

  00001	be 00 00 00 00	 mov	 esi, OFFSET ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A ; TMonsterAIUnit::s_MonsterAIUnitArray
$LL3@DelAllAIUn:

; 195  : 	{
; 196  : 		TMonsterAIUnit::s_MonsterAIUnitArray[i].Reset();

  00006	8b ce		 mov	 ecx, esi
  00008	e8 00 00 00 00	 call	 ?Reset@TMonsterAIUnit@@QAEXXZ ; TMonsterAIUnit::Reset
  0000d	81 c6 84 00 00
	00		 add	 esi, 132		; 00000084H
  00013	81 fe 90 33 00
	00		 cmp	 esi, OFFSET ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A+13200
  00019	7c eb		 jl	 SHORT $LL3@DelAllAIUn

; 197  : 	}
; 198  : 
; 199  : 	return FALSE;

  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi

; 200  : }

  0001e	c3		 ret	 0
?DelAllAIUnit@TMonsterAIUnit@@SAHXZ ENDP		; TMonsterAIUnit::DelAllAIUnit
_TEXT	ENDS
PUBLIC	??_C@_0DI@EJBAFJF@?$FLMonster?5AI?5Unit?$FN?5FindAIUnit?$CI?$CJ?5E@ ; `string'
PUBLIC	?FindAIUnit@TMonsterAIUnit@@SAPAV1@H@Z		; TMonsterAIUnit::FindAIUnit
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0DI@EJBAFJF@?$FLMonster?5AI?5Unit?$FN?5FindAIUnit?$CI?$CJ?5E@
CONST	SEGMENT
??_C@_0DI@EJBAFJF@?$FLMonster?5AI?5Unit?$FN?5FindAIUnit?$CI?$CJ?5E@ DB '['
	DB	'Monster AI Unit] FindAIUnit() Error - (UnitNumber=%d) ', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?FindAIUnit@TMonsterAIUnit@@SAPAV1@H@Z
_TEXT	SEGMENT
_iUnitNumber$ = 8					; size = 4
?FindAIUnit@TMonsterAIUnit@@SAPAV1@H@Z PROC		; TMonsterAIUnit::FindAIUnit, COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 	if ( iUnitNumber < 0 || iUnitNumber >= MAX_MONSTER_AI_UNIT )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iUnitNumber$[ebp]
  00006	83 f9 63	 cmp	 ecx, 99			; 00000063H
  00009	77 18		 ja	 SHORT $LN2@FindAIUnit

; 211  : 	}
; 212  : 
; 213  : 	if ( TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_iUnitNumber == iUnitNumber )

  0000b	8b c1		 mov	 eax, ecx
  0000d	69 c0 84 00 00
	00		 imul	 eax, 132		; 00000084H
  00013	39 88 38 00 00
	00		 cmp	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[eax+56], ecx
  00019	75 08		 jne	 SHORT $LN2@FindAIUnit

; 214  : 	{
; 215  : 		return &TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber];

  0001b	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[eax]

; 216  : 	}
; 217  : 
; 218  : 	LogAddTD("[Monster AI Unit] FindAIUnit() Error - (UnitNumber=%d) ",
; 219  : 		iUnitNumber);
; 220  : 
; 221  : 	return NULL;
; 222  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN2@FindAIUnit:

; 206  : 	{
; 207  : 		LogAddTD("[Monster AI Unit] FindAIUnit() Error - (UnitNumber=%d) ",
; 208  : 			iUnitNumber);

  00023	51		 push	 ecx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJBAFJF@?$FLMonster?5AI?5Unit?$FN?5FindAIUnit?$CI?$CJ?5E@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0002f	83 c4 08	 add	 esp, 8

; 209  : 
; 210  : 		return NULL;

  00032	33 c0		 xor	 eax, eax

; 216  : 	}
; 217  : 
; 218  : 	LogAddTD("[Monster AI Unit] FindAIUnit() Error - (UnitNumber=%d) ",
; 219  : 		iUnitNumber);
; 220  : 
; 221  : 	return NULL;
; 222  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?FindAIUnit@TMonsterAIUnit@@SAPAV1@H@Z ENDP		; TMonsterAIUnit::FindAIUnit
_TEXT	ENDS
PUBLIC	?RunAIUnit@TMonsterAIUnit@@QAEHH@Z		; TMonsterAIUnit::RunAIUnit
EXTRN	?ForceAIElement@TMonsterAIElement@@QAEHHHPAVTMonsterAIState@@@Z:PROC ; TMonsterAIElement::ForceAIElement
EXTRN	?RunAutomata@TMonsterAIAutomata@@QAEPAVTMonsterAIState@@H@Z:PROC ; TMonsterAIAutomata::RunAutomata
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?RunAIUnit@TMonsterAIUnit@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?RunAIUnit@TMonsterAIUnit@@QAEHH@Z PROC			; TMonsterAIUnit::RunAIUnit, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 228  : 	LPOBJ lpObj = &gObj[iIndex];

  00006	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00009	8b f7		 mov	 esi, edi
  0000b	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00011	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00017	8b d9		 mov	 ebx, ecx

; 229  : 
; 230  : 	if ( this->m_lpAutomata == NULL )

  00019	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  0001d	75 09		 jne	 SHORT $LN5@RunAIUnit
$LN8@RunAIUnit:
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 231  : 		return FALSE;

  00021	33 c0		 xor	 eax, eax
  00023	5b		 pop	 ebx

; 255  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN5@RunAIUnit:

; 232  : 
; 233  : 	if ( (GetTickCount() - lpObj->m_iLastAutomataRuntime) < lpObj->m_iLastAutomataDelay )

  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002e	2b 86 b8 1f 00
	00		 sub	 eax, DWORD PTR [esi+8120]
  00034	3b 86 bc 1f 00
	00		 cmp	 eax, DWORD PTR [esi+8124]

; 234  : 		return FALSE;

  0003a	72 e3		 jb	 SHORT $LN8@RunAIUnit

; 235  : 
; 236  : 	TMonsterAIState * pAIState = this->m_lpAutomata->RunAutomata(iIndex);

  0003c	8b 4b 40	 mov	 ecx, DWORD PTR [ebx+64]
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 ?RunAutomata@TMonsterAIAutomata@@QAEPAVTMonsterAIState@@H@Z ; TMonsterAIAutomata::RunAutomata
  00045	8b f8		 mov	 edi, eax

; 237  : 
; 238  : 	if ( pAIState == NULL )

  00047	85 ff		 test	 edi, edi

; 239  : 		return FALSE;

  00049	74 d4		 je	 SHORT $LN8@RunAIUnit

; 240  : 
; 241  : 	lpObj->m_iLastAutomataRuntime = GetTickCount();

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00051	89 86 b8 1f 00
	00		 mov	 DWORD PTR [esi+8120], eax

; 242  : 	TMonsterAIElement * pAIElement = *this->m_lppAIClassMap[pAIState->m_iNextState];

  00057	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0005a	8b 4c 83 64	 mov	 ecx, DWORD PTR [ebx+eax*4+100]
  0005e	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 243  : 
; 244  : 	if ( pAIElement == NULL )

  00060	85 c9		 test	 ecx, ecx

; 245  : 		return FALSE;

  00062	74 bb		 je	 SHORT $LN8@RunAIUnit

; 246  : 
; 247  : 	int iRetExec = pAIElement->ForceAIElement(iIndex, 0, pAIState);

  00064	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00067	57		 push	 edi
  00068	6a 00		 push	 0
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 ?ForceAIElement@TMonsterAIElement@@QAEHHHPAVTMonsterAIState@@@Z ; TMonsterAIElement::ForceAIElement

; 248  : 
; 249  : 	if ( iRetExec == 0 )

  00070	85 c0		 test	 eax, eax

; 250  : 		return FALSE;

  00072	74 ab		 je	 SHORT $LN8@RunAIUnit

; 251  : 
; 252  : 	lpObj->m_iCurrentAIState = pAIState->m_iNextState;

  00074	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00077	5f		 pop	 edi
  00078	89 86 7c 1c 00
	00		 mov	 DWORD PTR [esi+7292], eax
  0007e	5e		 pop	 esi

; 253  : 	
; 254  : 	return TRUE;

  0007f	b8 01 00 00 00	 mov	 eax, 1
  00084	5b		 pop	 ebx

; 255  : }

  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?RunAIUnit@TMonsterAIUnit@@QAEHH@Z ENDP			; TMonsterAIUnit::RunAIUnit
_TEXT	ENDS
PUBLIC	??0TMonsterAIUnit@@QAE@XZ			; TMonsterAIUnit::TMonsterAIUnit
; Function compile flags: /Ogtp
;	COMDAT ??0TMonsterAIUnit@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIUnit@@QAE@XZ PROC				; TMonsterAIUnit::TMonsterAIUnit, COMDAT
; _this$ = ecx

; 22   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7TMonsterAIUnit@@6B@

; 23   : 	this->Reset();

  00009	e8 00 00 00 00	 call	 ?Reset@TMonsterAIUnit@@QAEXXZ ; TMonsterAIUnit::Reset

; 24   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0TMonsterAIUnit@@QAE@XZ ENDP				; TMonsterAIUnit::TMonsterAIUnit
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GTMonsterAIUnit@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTMonsterAIUnit@@UAEPAXI@Z PROC			; TMonsterAIUnit::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TMonsterAIUnit@@UAE@XZ ; TMonsterAIUnit::~TMonsterAIUnit
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GTMonsterAIUnit@@UAEPAXI@Z ENDP			; TMonsterAIUnit::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DG@DIIBNHKC@?$FLMonster?5AI?5Unit?$FN?5?9?5File?5load?5er@ ; `string'
PUBLIC	??_C@_0DI@PJDNLJBO@?$FLMonster?5AI?5Unit?$FN?5?9?5Loading?5Exce@ ; `string'
PUBLIC	??_C@_0DF@MPAINNCG@?$FLMonster?5AI?5Unit?$FN?5?9?5UnitNumber?$CI?$CF@ ; `string'
PUBLIC	??_C@_0DI@CHPNDJKD@?$FLMonster?5AI?5Unit?$FN?5?9?5AutomatNumbe@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CG@BFGLJJPL@?$FLMonster?5AI?5Unit?$FN?5?9?5?$CFs?5file?5is?5L@ ; `string'
PUBLIC	??_C@_0CD@KLPHJBLC@?$FLMonster?5AI?5Unit?$FN?5?9?5Can?8t?5Open?5?$CF@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?LoadData@TMonsterAIUnit@@SAHPAD@Z		; TMonsterAIUnit::LoadData
EXTRN	?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z:PROC ; TMonsterAIElement::FindAIElement
EXTRN	?FindAutomata@TMonsterAIAutomata@@SAPAV1@H@Z:PROC ; TMonsterAIAutomata::FindAutomata
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0DG@DIIBNHKC@?$FLMonster?5AI?5Unit?$FN?5?9?5File?5load?5er@
CONST	SEGMENT
??_C@_0DG@DIIBNHKC@?$FLMonster?5AI?5Unit?$FN?5?9?5File?5load?5er@ DB '[Mo'
	DB	'nster AI Unit] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@PJDNLJBO@?$FLMonster?5AI?5Unit?$FN?5?9?5Loading?5Exce@
CONST	SEGMENT
??_C@_0DI@PJDNLJBO@?$FLMonster?5AI?5Unit?$FN?5?9?5Loading?5Exce@ DB '[Mon'
	DB	'ster AI Unit] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MPAINNCG@?$FLMonster?5AI?5Unit?$FN?5?9?5UnitNumber?$CI?$CF@
CONST	SEGMENT
??_C@_0DF@MPAINNCG@?$FLMonster?5AI?5Unit?$FN?5?9?5UnitNumber?$CI?$CF@ DB '['
	DB	'Monster AI Unit] - UnitNumber(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@CHPNDJKD@?$FLMonster?5AI?5Unit?$FN?5?9?5AutomatNumbe@
CONST	SEGMENT
??_C@_0DI@CHPNDJKD@?$FLMonster?5AI?5Unit?$FN?5?9?5AutomatNumbe@ DB '[Mons'
	DB	'ter AI Unit] - AutomatNumber(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BFGLJJPL@?$FLMonster?5AI?5Unit?$FN?5?9?5?$CFs?5file?5is?5L@
CONST	SEGMENT
??_C@_0CG@BFGLJJPL@?$FLMonster?5AI?5Unit?$FN?5?9?5?$CFs?5file?5is?5L@ DB '['
	DB	'Monster AI Unit] - %s file is Loaded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KLPHJBLC@?$FLMonster?5AI?5Unit?$FN?5?9?5Can?8t?5Open?5?$CF@
CONST	SEGMENT
??_C@_0CD@KLPHJBLC@?$FLMonster?5AI?5Unit?$FN?5?9?5Can?8t?5Open?5?$CF@ DB '['
	DB	'Monster AI Unit] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@TMonsterAIUnit@@SAHPAD@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadData@TMonsterAIUnit@@SAHPAD@Z$0
__unwindtable$?LoadData@TMonsterAIUnit@@SAHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@TMonsterAIUnit@@SAHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@TMonsterAIUnit@@SAHPAD@Z$2
__ehfuncinfo$?LoadData@TMonsterAIUnit@@SAHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@TMonsterAIUnit@@SAHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@TMonsterAIUnit@@SAHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadData@TMonsterAIUnit@@SAHPAD@Z
_TEXT	SEGMENT
_szUnitName$202492 = -108				; size = 50
_iAIClassEvent$202503 = -56				; size = 4
_iAIClassSpecial$202502 = -52				; size = 4
_iAIClassHelp$202501 = -48				; size = 4
_iAIClassAvoid$202500 = -44				; size = 4
_iAIClassHeal$202499 = -40				; size = 4
_iAIClassAttack$202498 = -36				; size = 4
_iAIClassMove$202497 = -32				; size = 4
_iAIClassNormal$202496 = -28				; size = 4
_iDelayTime$202494 = -24				; size = 4
_iType$202482 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@TMonsterAIUnit@@SAHPAD@Z PROC			; TMonsterAIUnit::LoadData, COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@TMonsterAIUnit@@SAHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 58   : 	TMonsterAIUnit::s_bDataLoad = FALSE;
; 59   : 
; 60   : 	if ( !lpszFileName || !strcmp(lpszFileName, ""))

  0002b	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  0002e	33 ff		 xor	 edi, edi
  00030	89 3d 00 00 00
	00		 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIUnit@@2HA, edi ; TMonsterAIUnit::s_bDataLoad
  00036	3b f7		 cmp	 esi, edi
  00038	0f 84 3d 03 00
	00		 je	 $LN14@LoadData
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00043	8b c6		 mov	 eax, esi
$LL26@LoadData:
  00045	8a 10		 mov	 dl, BYTE PTR [eax]
  00047	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00049	75 1a		 jne	 SHORT $LN27@LoadData
  0004b	84 d2		 test	 dl, dl
  0004d	74 12		 je	 SHORT $LN28@LoadData
  0004f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00052	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00055	75 0e		 jne	 SHORT $LN27@LoadData
  00057	83 c0 02	 add	 eax, 2
  0005a	83 c1 02	 add	 ecx, 2
  0005d	84 d2		 test	 dl, dl
  0005f	75 e4		 jne	 SHORT $LL26@LoadData
$LN28@LoadData:
  00061	33 c0		 xor	 eax, eax
  00063	eb 05		 jmp	 SHORT $LN29@LoadData
$LN27@LoadData:
  00065	1b c0		 sbb	 eax, eax
  00067	83 d8 ff	 sbb	 eax, -1
$LN29@LoadData:
  0006a	3b c7		 cmp	 eax, edi
  0006c	0f 84 09 03 00
	00		 je	 $LN14@LoadData

; 64   : 	}
; 65   : 
; 66   : 	try
; 67   : 	{
; 68   : 		SMDToken Token;
; 69   : 		SMDFile = fopen(lpszFileName, "r");

  00072	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00077	56		 push	 esi
  00078	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0007b	e8 00 00 00 00	 call	 _fopen
  00080	83 c4 08	 add	 esp, 8
  00083	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 70   : 
; 71   : 		if ( SMDFile == NULL )

  00088	3b c7		 cmp	 eax, edi
  0008a	75 22		 jne	 SHORT $LN12@LoadData

; 72   : 		{
; 73   : 			MsgBox("[Monster AI Unit] - Can't Open %s ", lpszFileName);

  0008c	56		 push	 esi
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KLPHJBLC@?$FLMonster?5AI?5Unit?$FN?5?9?5Can?8t?5Open?5?$CF@
  00092	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00097	83 c4 08	 add	 esp, 8
  0009a	33 c0		 xor	 eax, eax

; 187  : 
; 188  : 	return FALSE;
; 189  : }

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN12@LoadData:

; 74   : 			return FALSE;
; 75   : 		}
; 76   : 
; 77   : 		TMonsterAIUnit::DelAllAIUnit();

  000ae	e8 00 00 00 00	 call	 ?DelAllAIUnit@TMonsterAIUnit@@SAHXZ ; TMonsterAIUnit::DelAllAIUnit
$LL11@LoadData:

; 78   : 		int iType = -1;
; 79   : 
; 80   : 		while ( true )
; 81   : 		{
; 82   : 			Token = GetToken();

  000b3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 83   : 
; 84   : 			if ( Token == END )

  000b8	83 f8 02	 cmp	 eax, 2
  000bb	75 3a		 jne	 SHORT $LN9@LoadData

; 173  : 				}
; 174  : 			}
; 175  : 		}
; 176  : 
; 177  : 		fclose(SMDFile);

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _fclose

; 178  : 
; 179  : 		LogAddC(2, "[Monster AI Unit] - %s file is Loaded", lpszFileName);

  000c8	56		 push	 esi
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BFGLJJPL@?$FLMonster?5AI?5Unit?$FN?5?9?5?$CFs?5file?5is?5L@
  000ce	6a 02		 push	 2
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000d6	83 c4 10	 add	 esp, 16			; 00000010H

; 180  : 
; 181  : 		TMonsterAIUnit::s_bDataLoad = TRUE;

  000d9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIUnit@@2HA, 1 ; TMonsterAIUnit::s_bDataLoad
  000e3	33 c0		 xor	 eax, eax

; 187  : 
; 188  : 	return FALSE;
; 189  : }

  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
$LN9@LoadData:

; 85   : 				break;
; 86   : 
; 87   : 			iType = (int)TokenNumber;

  000f7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fd	e8 00 00 00 00	 call	 __ftol2_sse
  00102	89 45 ec	 mov	 DWORD PTR _iType$202482[ebp], eax
$LL8@LoadData:

; 88   : 
; 89   : 			while ( true )
; 90   : 			{
; 91   : 				if ( iType == 0 )

  00105	83 7d ec 00	 cmp	 DWORD PTR _iType$202482[ebp], 0
  00109	75 fa		 jne	 SHORT $LL8@LoadData

; 92   : 				{
; 93   : 					char szUnitName[50]={0};

  0010b	6a 31		 push	 49			; 00000031H
  0010d	8d 4d 95	 lea	 ecx, DWORD PTR _szUnitName$202492[ebp+1]
  00110	6a 00		 push	 0
  00112	51		 push	 ecx
  00113	c6 45 94 00	 mov	 BYTE PTR _szUnitName$202492[ebp], 0
  00117	e8 00 00 00 00	 call	 _memset
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 94   : 					int iUnitNumber = -1;
; 95   : 					int iDelayTime = 0;
; 96   : 					int iAutomata = -1;
; 97   : 					int iAIClassNormal = -1;
; 98   : 					int iAIClassMove = -1;
; 99   : 					int iAIClassAttack = -1;
; 100  : 					int iAIClassHeal = -1;
; 101  : 					int iAIClassAvoid = -1;
; 102  : 					int iAIClassHelp = -1;
; 103  : 					int iAIClassSpecial = -1;
; 104  : 					int iAIClassEvent = -1;
; 105  : 
; 106  : 					Token = GetToken();

  0011f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 107  : 
; 108  : 					if ( !strcmp("end", TokenString))

  00124	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00129	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0012e	8b ff		 npad	 2
$LL30@LoadData:
  00130	8a 10		 mov	 dl, BYTE PTR [eax]
  00132	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00134	75 1a		 jne	 SHORT $LN31@LoadData
  00136	84 d2		 test	 dl, dl
  00138	74 12		 je	 SHORT $LN32@LoadData
  0013a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0013d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00140	75 0e		 jne	 SHORT $LN31@LoadData
  00142	83 c0 02	 add	 eax, 2
  00145	83 c1 02	 add	 ecx, 2
  00148	84 d2		 test	 dl, dl
  0014a	75 e4		 jne	 SHORT $LL30@LoadData
$LN32@LoadData:
  0014c	33 c0		 xor	 eax, eax
  0014e	eb 05		 jmp	 SHORT $LN33@LoadData
$LN31@LoadData:
  00150	1b c0		 sbb	 eax, eax
  00152	83 d8 ff	 sbb	 eax, -1
$LN33@LoadData:
  00155	85 c0		 test	 eax, eax
  00157	0f 84 56 ff ff
	ff		 je	 $LL11@LoadData

; 109  : 						break;
; 110  : 
; 111  : 					iUnitNumber = (int)TokenNumber;

  0015d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00163	e8 00 00 00 00	 call	 __ftol2_sse
  00168	8b f8		 mov	 edi, eax

; 112  : 
; 113  : 					Token = GetToken();

  0016a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 					memcpy(szUnitName, TokenString, 20);

  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _TokenString
  00175	a1 04 00 00 00	 mov	 eax, DWORD PTR _TokenString+4
  0017a	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _TokenString+8
  00180	89 55 94	 mov	 DWORD PTR _szUnitName$202492[ebp], edx
  00183	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _TokenString+12
  00189	89 45 98	 mov	 DWORD PTR _szUnitName$202492[ebp+4], eax
  0018c	a1 10 00 00 00	 mov	 eax, DWORD PTR _TokenString+16
  00191	89 4d 9c	 mov	 DWORD PTR _szUnitName$202492[ebp+8], ecx
  00194	89 55 a0	 mov	 DWORD PTR _szUnitName$202492[ebp+12], edx
  00197	89 45 a4	 mov	 DWORD PTR _szUnitName$202492[ebp+16], eax

; 115  : 
; 116  : 					Token = GetToken();

  0019a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 					iDelayTime = (int)TokenNumber;

  0019f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a5	e8 00 00 00 00	 call	 __ftol2_sse
  001aa	89 45 e8	 mov	 DWORD PTR _iDelayTime$202494[ebp], eax

; 118  : 
; 119  : 					Token = GetToken();

  001ad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 120  : 					iAutomata = (int)TokenNumber;

  001b2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b8	e8 00 00 00 00	 call	 __ftol2_sse
  001bd	8b d8		 mov	 ebx, eax

; 121  : 
; 122  : 					Token = GetToken();

  001bf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 					iAIClassNormal = (int)TokenNumber;

  001c4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ca	e8 00 00 00 00	 call	 __ftol2_sse
  001cf	89 45 e4	 mov	 DWORD PTR _iAIClassNormal$202496[ebp], eax

; 124  : 
; 125  : 					Token = GetToken();

  001d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 126  : 					iAIClassMove = (int)TokenNumber;

  001d7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001dd	e8 00 00 00 00	 call	 __ftol2_sse
  001e2	89 45 e0	 mov	 DWORD PTR _iAIClassMove$202497[ebp], eax

; 127  : 
; 128  : 					Token = GetToken();

  001e5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 129  : 					iAIClassAttack = (int)TokenNumber;

  001ea	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001f0	e8 00 00 00 00	 call	 __ftol2_sse
  001f5	89 45 dc	 mov	 DWORD PTR _iAIClassAttack$202498[ebp], eax

; 130  : 
; 131  : 					Token = GetToken();

  001f8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 132  : 					iAIClassHeal = (int)TokenNumber;

  001fd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00203	e8 00 00 00 00	 call	 __ftol2_sse
  00208	89 45 d8	 mov	 DWORD PTR _iAIClassHeal$202499[ebp], eax

; 133  : 
; 134  : 					Token = GetToken();

  0020b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 135  : 					iAIClassAvoid = (int)TokenNumber;

  00210	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00216	e8 00 00 00 00	 call	 __ftol2_sse
  0021b	89 45 d4	 mov	 DWORD PTR _iAIClassAvoid$202500[ebp], eax

; 136  : 
; 137  : 					Token = GetToken();

  0021e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 138  : 					iAIClassHelp = (int)TokenNumber;

  00223	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00229	e8 00 00 00 00	 call	 __ftol2_sse
  0022e	89 45 d0	 mov	 DWORD PTR _iAIClassHelp$202501[ebp], eax

; 139  : 
; 140  : 					Token = GetToken();

  00231	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 141  : 					iAIClassSpecial = (int)TokenNumber;

  00236	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0023c	e8 00 00 00 00	 call	 __ftol2_sse
  00241	89 45 cc	 mov	 DWORD PTR _iAIClassSpecial$202502[ebp], eax

; 142  : 
; 143  : 					Token = GetToken();

  00244	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 144  : 					iAIClassEvent = (int)TokenNumber;

  00249	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0024f	e8 00 00 00 00	 call	 __ftol2_sse
  00254	89 45 c8	 mov	 DWORD PTR _iAIClassEvent$202503[ebp], eax

; 145  : 
; 146  : 					if ( iUnitNumber < 0 || iUnitNumber >= MAX_MONSTER_AI_UNIT )

  00257	83 ff 63	 cmp	 edi, 99			; 00000063H
  0025a	0f 87 f0 00 00
	00		 ja	 $LN3@LoadData

; 151  : 					}
; 152  : 
; 153  : 					if ( iAutomata < 0 || iAutomata >= MAX_MONSTER_AI_AUTOMATA )

  00260	81 fb 2b 01 00
	00		 cmp	 ebx, 299		; 0000012bH
  00266	0f 87 d0 00 00
	00		 ja	 $LN1@LoadData

; 158  : 					}
; 159  : 
; 160  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_iUnitNumber = iUnitNumber;
; 161  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_iDelayTime = iDelayTime;

  0026c	8b 4d e8	 mov	 ecx, DWORD PTR _iDelayTime$202494[ebp]
  0026f	8b f7		 mov	 esi, edi
  00271	69 f6 84 00 00
	00		 imul	 esi, 132		; 00000084H

; 162  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAutomata = TMonsterAIAutomata::FindAutomata(iAutomata);

  00277	53		 push	 ebx
  00278	89 be 38 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+56], edi
  0027e	89 8e 3c 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+60], ecx
  00284	e8 00 00 00 00	 call	 ?FindAutomata@TMonsterAIAutomata@@SAPAV1@H@Z ; TMonsterAIAutomata::FindAutomata

; 163  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassNormal = TMonsterAIElement::FindAIElement(iAIClassNormal);

  00289	8b 55 e4	 mov	 edx, DWORD PTR _iAIClassNormal$202496[ebp]
  0028c	83 c4 04	 add	 esp, 4
  0028f	52		 push	 edx
  00290	89 86 40 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+64], eax
  00296	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  0029b	89 86 44 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+68], eax

; 164  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassMove = TMonsterAIElement::FindAIElement(iAIClassMove);

  002a1	8b 45 e0	 mov	 eax, DWORD PTR _iAIClassMove$202497[ebp]
  002a4	83 c4 04	 add	 esp, 4
  002a7	50		 push	 eax
  002a8	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement

; 165  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassAttack = TMonsterAIElement::FindAIElement(iAIClassAttack);

  002ad	8b 4d dc	 mov	 ecx, DWORD PTR _iAIClassAttack$202498[ebp]
  002b0	83 c4 04	 add	 esp, 4
  002b3	51		 push	 ecx
  002b4	89 86 48 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+72], eax
  002ba	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement

; 166  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassHeal = TMonsterAIElement::FindAIElement(iAIClassHeal);

  002bf	8b 55 d8	 mov	 edx, DWORD PTR _iAIClassHeal$202499[ebp]
  002c2	83 c4 04	 add	 esp, 4
  002c5	52		 push	 edx
  002c6	89 86 4c 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+76], eax
  002cc	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  002d1	89 86 50 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+80], eax

; 167  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassAvoid = TMonsterAIElement::FindAIElement(iAIClassAvoid);

  002d7	8b 45 d4	 mov	 eax, DWORD PTR _iAIClassAvoid$202500[ebp]
  002da	83 c4 04	 add	 esp, 4
  002dd	50		 push	 eax
  002de	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement

; 168  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassHelp = TMonsterAIElement::FindAIElement(iAIClassHelp);

  002e3	8b 4d d0	 mov	 ecx, DWORD PTR _iAIClassHelp$202501[ebp]
  002e6	83 c4 04	 add	 esp, 4
  002e9	51		 push	 ecx
  002ea	89 86 54 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+84], eax
  002f0	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement

; 169  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassSpecial = TMonsterAIElement::FindAIElement(iAIClassSpecial);

  002f5	8b 55 cc	 mov	 edx, DWORD PTR _iAIClassSpecial$202502[ebp]
  002f8	83 c4 04	 add	 esp, 4
  002fb	52		 push	 edx
  002fc	89 86 58 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+88], eax
  00302	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  00307	89 86 5c 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+92], eax

; 170  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassEvent = TMonsterAIElement::FindAIElement(iAIClassEvent);

  0030d	8b 45 c8	 mov	 eax, DWORD PTR _iAIClassEvent$202503[ebp]
  00310	83 c4 04	 add	 esp, 4
  00313	50		 push	 eax
  00314	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  00319	89 86 60 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+96], eax

; 171  : 					memcpy(TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_szUnitName,
; 172  : 						szUnitName, sizeof(TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_szUnitName));

  0031f	8d be 04 00 00
	00		 lea	 edi, DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+4]
  00325	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0032a	8d 75 94	 lea	 esi, DWORD PTR _szUnitName$202492[ebp]
  0032d	f3 a5		 rep movsd
  0032f	66 a5		 movsw
  00331	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  00334	83 c4 04	 add	 esp, 4
  00337	e9 c9 fd ff ff	 jmp	 $LL8@LoadData
$LN1@LoadData:

; 154  : 					{
; 155  : 						MsgBox("[Monster AI Unit] - AutomatNumber(%d) Error (%s) File. ", 
; 156  : 							iAutomata, lpszFileName);

  0033c	56		 push	 esi
  0033d	53		 push	 ebx
  0033e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@CHPNDJKD@?$FLMonster?5AI?5Unit?$FN?5?9?5AutomatNumbe@
  00343	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00348	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 						continue;

  0034b	e9 b5 fd ff ff	 jmp	 $LL8@LoadData
$LN3@LoadData:

; 147  : 					{
; 148  : 						MsgBox("[Monster AI Unit] - UnitNumber(%d) Error (%s) File. ", 
; 149  : 							iUnitNumber, lpszFileName);

  00350	56		 push	 esi
  00351	57		 push	 edi
  00352	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@MPAINNCG@?$FLMonster?5AI?5Unit?$FN?5?9?5UnitNumber?$CI?$CF@
  00357	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0035c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 150  : 						continue;

  0035f	e9 a1 fd ff ff	 jmp	 $LL8@LoadData
__catch$?LoadData@TMonsterAIUnit@@SAHPAD@Z$0:

; 182  : 	}
; 183  : 	catch(...)
; 184  : 	{
; 185  : 		MsgBox("[Monster AI Unit] - Loading Exception Error (%s) File. ", lpszFileName);

  00364	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00367	51		 push	 ecx
  00368	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@PJDNLJBO@?$FLMonster?5AI?5Unit?$FN?5?9?5Loading?5Exce@
  0036d	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00372	83 c4 08	 add	 esp, 8

; 186  : 	}

  00375	b8 00 00 00 00	 mov	 eax, $LN36@LoadData
  0037a	c3		 ret	 0
$LN14@LoadData:

; 61   : 	{
; 62   : 		MsgBox("[Monster AI Unit] - File load error : File Name Error");

  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@DIIBNHKC@?$FLMonster?5AI?5Unit?$FN?5?9?5File?5load?5er@
  00380	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00385	83 c4 04	 add	 esp, 4
$LN36@LoadData:

; 63   : 		return FALSE;

  00388	33 c0		 xor	 eax, eax

; 187  : 
; 188  : 	return FALSE;
; 189  : }

  0038a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0038d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00394	59		 pop	 ecx
  00395	5f		 pop	 edi
  00396	5e		 pop	 esi
  00397	5b		 pop	 ebx
  00398	8b e5		 mov	 esp, ebp
  0039a	5d		 pop	 ebp
  0039b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@TMonsterAIUnit@@SAHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@TMonsterAIUnit@@SAHPAD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@TMonsterAIUnit@@SAHPAD@Z ENDP			; TMonsterAIUnit::LoadData
EXTRN	_atexit:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??__E?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ
text$yc	SEGMENT
??__E?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ PROC ; `dynamic initializer for 'TMonsterAIUnit::s_MonsterAIUnitArray'', COMDAT

; 15   : TMonsterAIUnit TMonsterAIUnit::s_MonsterAIUnitArray[MAX_MONSTER_AI_UNIT];

  00000	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIUnit@@UAE@XZ ; TMonsterAIUnit::~TMonsterAIUnit
  00005	68 00 00 00 00	 push	 OFFSET ??0TMonsterAIUnit@@QAE@XZ ; TMonsterAIUnit::TMonsterAIUnit
  0000a	6a 64		 push	 100			; 00000064H
  0000c	68 84 00 00 00	 push	 132			; 00000084H
  00011	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A ; TMonsterAIUnit::s_MonsterAIUnitArray
  00016	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0001b	68 00 00 00 00	 push	 OFFSET ??__F?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ ; `dynamic atexit destructor for 'TMonsterAIUnit::s_MonsterAIUnitArray''
  00020	e8 00 00 00 00	 call	 _atexit
  00025	59		 pop	 ecx
  00026	c3		 ret	 0
??__E?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ ENDP ; `dynamic initializer for 'TMonsterAIUnit::s_MonsterAIUnitArray''
text$yc	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??__F?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ
text$yd	SEGMENT
??__F?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ PROC ; `dynamic atexit destructor for 'TMonsterAIUnit::s_MonsterAIUnitArray'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIUnit@@UAE@XZ ; TMonsterAIUnit::~TMonsterAIUnit
  00005	6a 64		 push	 100			; 00000064H
  00007	68 84 00 00 00	 push	 132			; 00000084H
  0000c	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A ; TMonsterAIUnit::s_MonsterAIUnitArray
  00011	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00016	c3		 ret	 0
??__F?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'TMonsterAIUnit::s_MonsterAIUnitArray''
text$yd	ENDS
PUBLIC	?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A	; TMonsterAIUnit::s_MonsterAIUnitArray
_BSS	SEGMENT
?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A DB 03390H DUP (?) ; TMonsterAIUnit::s_MonsterAIUnitArray
_BSS	ENDS
CRT$XCU	SEGMENT
?s_MonsterAIUnitArray$initializer$@TMonsterAIUnit@@2P6AXXZA DD FLAT:??__E?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ ; TMonsterAIUnit::s_MonsterAIUnitArray$initializer$
CRT$XCU	ENDS
END
