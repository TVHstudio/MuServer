; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\TMonsterSkillElementInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?SetSkillElement@TMonsterSkillElementInfo@@QAEXH@Z ; TMonsterSkillElementInfo::SetSkillElement
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\tmonsterskillelementinfo.cpp
;	COMDAT ?SetSkillElement@TMonsterSkillElementInfo@@QAEXH@Z
_TEXT	SEGMENT
_iSkillElement$ = 8					; size = 4
?SetSkillElement@TMonsterSkillElementInfo@@QAEXH@Z PROC	; TMonsterSkillElementInfo::SetSkillElement, COMDAT
; _this$ = ecx

; 16   : 	//
; 17   : }

  00000	c2 04 00	 ret	 4
?SetSkillElement@TMonsterSkillElementInfo@@QAEXH@Z ENDP	; TMonsterSkillElementInfo::SetSkillElement
_TEXT	ENDS
PUBLIC	?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetDefense
; Function compile flags: /Ogtp
;	COMDAT ?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetDefense, COMDAT
; _this$ = ecx

; 133  : 	this->m_iSkillElementDefense = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 134  : 	this->m_iSkillElementDefenseTime = 0;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 135  : }

  0000d	c3		 ret	 0
?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetDefense
_TEXT	ENDS
PUBLIC	?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAttack
; Function compile flags: /Ogtp
;	COMDAT ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAttack, COMDAT
; _this$ = ecx

; 139  : 	this->m_iSkillElementAttack = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 140  : 	this->m_iSkillElementAttackTime = 0;

  00005	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 141  : }

  00008	c3		 ret	 0
?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAttack
_TEXT	ENDS
PUBLIC	?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAutoHP
; Function compile flags: /Ogtp
;	COMDAT ?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAutoHP, COMDAT
; _this$ = ecx

; 145  : 	this->m_iSkillElementAutoHP = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 146  : 	this->m_iSkillElementAutoHPCycle = 0;

  00005	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 147  : 	this->m_iSkillElementAutoHPTime = 0;

  00008	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 148  : }

  0000b	c3		 ret	 0
?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAutoHP
_TEXT	ENDS
PUBLIC	?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAutoMP
; Function compile flags: /Ogtp
;	COMDAT ?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAutoMP, COMDAT
; _this$ = ecx

; 152  : 	this->m_iSkillElementAutoMP = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 153  : 	this->m_iSkillElementAutoMPCycle = 0;

  00005	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 154  : 	this->m_iSkillElementAutoMPTime = 0;

  00008	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 155  : }

  0000b	c3		 ret	 0
?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAutoMP
_TEXT	ENDS
PUBLIC	?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAutoAG
; Function compile flags: /Ogtp
;	COMDAT ?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAutoAG, COMDAT
; _this$ = ecx

; 159  : 	this->m_iSkillElementAutoAG = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 160  : 	this->m_iSkillElementAutoAGCycle = 0;

  00005	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 161  : 	this->m_iSkillElementAutoAGTime = 0;

  00008	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 162  : }

  0000b	c3		 ret	 0
?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAutoAG
_TEXT	ENDS
PUBLIC	?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetImmune
; Function compile flags: /Ogtp
;	COMDAT ?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetImmune, COMDAT
; _this$ = ecx

; 166  : 	this->m_iSkillElementImmuneNumber = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 167  : 	this->m_iSkillElementImmuneTime = 0;

  00005	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 168  : }

  00008	c3		 ret	 0
?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetImmune
_TEXT	ENDS
PUBLIC	?ResetResist@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetResist
; Function compile flags: /Ogtp
;	COMDAT ?ResetResist@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetResist@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetResist, COMDAT
; _this$ = ecx

; 172  : 	this->m_iSkillElementResistNumber = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 173  : 	this->m_iSkillElementResistTime = 0;

  00005	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 174  : }

  00008	c3		 ret	 0
?ResetResist@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetResist
_TEXT	ENDS
PUBLIC	?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetModifyStat
; Function compile flags: /Ogtp
;	COMDAT ?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetModifyStat, COMDAT
; _this$ = ecx

; 178  : 	this->m_iSkillElementModifyStat = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 179  : 	this->m_iSkillElementModifyStatType = 0;

  00005	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 180  : 	this->m_iSkillElementModifyStatTime = 0;

  00008	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 181  : }

  0000b	c3		 ret	 0
?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetModifyStat
_TEXT	ENDS
PUBLIC	?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetBerserkTime
; Function compile flags: /Ogtp
;	COMDAT ?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetBerserkTime, COMDAT
; _this$ = ecx

; 186  : 	this->m_iSkillElementBerserkTime = 0;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 187  : }

  00007	c3		 ret	 0
?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetBerserkTime
_TEXT	ENDS
PUBLIC	?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckDefenseTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckDefenseTime, COMDAT
; _this$ = ecx

; 192  : 	return (this->m_iSkillElementDefense <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 9f c0	 setg	 al

; 193  : }

  00007	c3		 ret	 0
?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckDefenseTime
_TEXT	ENDS
PUBLIC	?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAttackTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAttackTime, COMDAT
; _this$ = ecx

; 197  : 	return (this->m_iSkillElementAttack <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 9f c0	 setg	 al

; 198  : }

  00008	c3		 ret	 0
?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAttackTime
_TEXT	ENDS
PUBLIC	?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoHPTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAutoHPTime, COMDAT
; _this$ = ecx

; 202  : 	return (this->m_iSkillElementAutoHPTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00005	0f 9f c0	 setg	 al

; 203  : }

  00008	c3		 ret	 0
?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAutoHPTime
_TEXT	ENDS
PUBLIC	?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoMPTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAutoMPTime, COMDAT
; _this$ = ecx

; 207  : 	return (this->m_iSkillElementAutoMPTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 24	 cmp	 DWORD PTR [ecx+36], eax
  00005	0f 9f c0	 setg	 al

; 208  : }

  00008	c3		 ret	 0
?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAutoMPTime
_TEXT	ENDS
PUBLIC	?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoAGTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAutoAGTime, COMDAT
; _this$ = ecx

; 212  : 	return (this->m_iSkillElementAutoAGTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 30	 cmp	 DWORD PTR [ecx+48], eax
  00005	0f 9f c0	 setg	 al

; 213  : }

  00008	c3		 ret	 0
?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAutoAGTime
_TEXT	ENDS
PUBLIC	?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckResistTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckResistTime, COMDAT
; _this$ = ecx

; 217  : 	return (this->m_iSkillElementResistTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 40	 cmp	 DWORD PTR [ecx+64], eax
  00005	0f 9f c0	 setg	 al

; 218  : }

  00008	c3		 ret	 0
?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckResistTime
_TEXT	ENDS
PUBLIC	?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckModifyStatTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ PROC ; TMonsterSkillElementInfo::CheckModifyStatTime, COMDAT
; _this$ = ecx

; 222  : 	return (this->m_iSkillElementModifyStatTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 4c	 cmp	 DWORD PTR [ecx+76], eax
  00005	0f 9f c0	 setg	 al

; 223  : }

  00008	c3		 ret	 0
?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ENDP ; TMonsterSkillElementInfo::CheckModifyStatTime
_TEXT	ENDS
PUBLIC	?CheckBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckBerserkTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckBerserkTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckBerserkTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckBerserkTime, COMDAT
; _this$ = ecx

; 229  : 	return (this->m_iSkillElementBerserkTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 50	 cmp	 DWORD PTR [ecx+80], eax
  00005	0f 9f c0	 setg	 al

; 230  : }

  00008	c3		 ret	 0
?CheckBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckBerserkTime
_TEXT	ENDS
PUBLIC	?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecDefenseTime
; Function compile flags: /Ogtp
;	COMDAT ?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecDefenseTime, COMDAT
; _this$ = ecx

; 235  : 	this->m_iSkillElementDefense--;

  00000	ff 09		 dec	 DWORD PTR [ecx]
  00002	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 236  : 	return (this->m_iSkillElementDefense > 0)?FALSE:TRUE;

  00004	33 c0		 xor	 eax, eax
  00006	85 c9		 test	 ecx, ecx
  00008	0f 9e c0	 setle	 al

; 237  : }

  0000b	c3		 ret	 0
?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecDefenseTime
_TEXT	ENDS
PUBLIC	?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAttackTime
; Function compile flags: /Ogtp
;	COMDAT ?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAttackTime, COMDAT
; _this$ = ecx

; 241  : 	this->m_iSkillElementAttack--;

  00000	ff 49 08	 dec	 DWORD PTR [ecx+8]
  00003	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 242  : 	return (this->m_iSkillElementAttack > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 243  : }

  0000d	c3		 ret	 0
?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAttackTime
_TEXT	ENDS
PUBLIC	?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAutoHPTime
; Function compile flags: /Ogtp
;	COMDAT ?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAutoHPTime, COMDAT
; _this$ = ecx

; 247  : 	this->m_iSkillElementAutoHPTime--;

  00000	ff 49 18	 dec	 DWORD PTR [ecx+24]
  00003	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]

; 248  : 	return (this->m_iSkillElementAutoHPTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 249  : }

  0000d	c3		 ret	 0
?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAutoHPTime
_TEXT	ENDS
PUBLIC	?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAutoMPTime
; Function compile flags: /Ogtp
;	COMDAT ?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAutoMPTime, COMDAT
; _this$ = ecx

; 253  : 	this->m_iSkillElementAutoMPTime--;

  00000	ff 49 24	 dec	 DWORD PTR [ecx+36]
  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]

; 254  : 	return (this->m_iSkillElementAutoMPTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 255  : }

  0000d	c3		 ret	 0
?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAutoMPTime
_TEXT	ENDS
PUBLIC	?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAutoAGTime
; Function compile flags: /Ogtp
;	COMDAT ?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAutoAGTime, COMDAT
; _this$ = ecx

; 259  : 	this->m_iSkillElementAutoAGTime--;

  00000	ff 49 30	 dec	 DWORD PTR [ecx+48]
  00003	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]

; 260  : 	return (this->m_iSkillElementAutoAGTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 261  : }

  0000d	c3		 ret	 0
?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAutoAGTime
_TEXT	ENDS
PUBLIC	?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecResistTime
; Function compile flags: /Ogtp
;	COMDAT ?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecResistTime, COMDAT
; _this$ = ecx

; 265  : 	this->m_iSkillElementResistTime--;

  00000	ff 49 40	 dec	 DWORD PTR [ecx+64]
  00003	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]

; 266  : 	return (this->m_iSkillElementResistTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 267  : }

  0000d	c3		 ret	 0
?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecResistTime
_TEXT	ENDS
PUBLIC	?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecModifyStatTime
; Function compile flags: /Ogtp
;	COMDAT ?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ PROC ; TMonsterSkillElementInfo::DecModifyStatTime, COMDAT
; _this$ = ecx

; 271  : 	this->m_iSkillElementModifyStatTime--;

  00000	ff 49 4c	 dec	 DWORD PTR [ecx+76]
  00003	8b 49 4c	 mov	 ecx, DWORD PTR [ecx+76]

; 272  : 	return (this->m_iSkillElementModifyStatTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 273  : }

  0000d	c3		 ret	 0
?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ENDP ; TMonsterSkillElementInfo::DecModifyStatTime
_TEXT	ENDS
PUBLIC	?DecBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecBerserkTime
; Function compile flags: /Ogtp
;	COMDAT ?DecBerserkTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecBerserkTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecBerserkTime, COMDAT
; _this$ = ecx

; 278  : 	this->m_iSkillElementBerserkTime--;

  00000	ff 49 50	 dec	 DWORD PTR [ecx+80]
  00003	8b 49 50	 mov	 ecx, DWORD PTR [ecx+80]

; 279  : 	return (this->m_iSkillElementBerserkTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 280  : }

  0000d	c3		 ret	 0
?DecBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecBerserkTime
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@4059000000000000
PUBLIC	?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z ; TMonsterSkillElementInfo::CheckSkillElementInfoProc
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv337 = 8						; size = 4
_lpObj$ = 8						; size = 4
?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z PROC ; TMonsterSkillElementInfo::CheckSkillElementInfoProc, COMDAT

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 21   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAttackTime() )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  0000e	e8 00 00 00 00	 call	 ?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAttackTime
  00013	85 c0		 test	 eax, eax
  00015	74 1a		 je	 SHORT $LN24@CheckSkill

; 22   : 	{
; 23   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAttackTime() )

  00017	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  0001d	e8 00 00 00 00	 call	 ?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAttackTime
  00022	85 c0		 test	 eax, eax
  00024	74 0b		 je	 SHORT $LN24@CheckSkill

; 24   : 		{
; 25   : 			lpObj->m_MonsterSkillElementInfo.ResetAttack();

  00026	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  0002c	e8 00 00 00 00	 call	 ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAttack
$LN24@CheckSkill:

; 26   : 		}
; 27   : 	}
; 28   : 
; 29   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckDefenseTime() )

  00031	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00037	e8 00 00 00 00	 call	 ?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckDefenseTime
  0003c	85 c0		 test	 eax, eax
  0003e	74 1a		 je	 SHORT $LN22@CheckSkill

; 30   : 	{
; 31   : 		if ( lpObj->m_MonsterSkillElementInfo.DecDefenseTime() )

  00040	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00046	e8 00 00 00 00	 call	 ?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecDefenseTime
  0004b	85 c0		 test	 eax, eax
  0004d	74 0b		 je	 SHORT $LN22@CheckSkill

; 32   : 		{
; 33   : 			lpObj->m_MonsterSkillElementInfo.ResetDefense();

  0004f	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00055	e8 00 00 00 00	 call	 ?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetDefense
$LN22@CheckSkill:

; 34   : 		}
; 35   : 	}
; 36   : 	
; 37   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAutoAGTime() )

  0005a	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00060	e8 00 00 00 00	 call	 ?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoAGTime
  00065	85 c0		 test	 eax, eax
  00067	74 1a		 je	 SHORT $LN20@CheckSkill

; 38   : 	{
; 39   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAutoAGTime() )

  00069	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  0006f	e8 00 00 00 00	 call	 ?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAutoAGTime
  00074	85 c0		 test	 eax, eax
  00076	74 0b		 je	 SHORT $LN20@CheckSkill

; 40   : 		{
; 41   : 			lpObj->m_MonsterSkillElementInfo.ResetAutoAG();

  00078	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  0007e	e8 00 00 00 00	 call	 ?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoAG
$LN20@CheckSkill:

; 42   : 		}
; 43   : 	}
; 44   : 
; 45   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAutoHPTime() )

  00083	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00089	e8 00 00 00 00	 call	 ?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoHPTime
  0008e	85 c0		 test	 eax, eax
  00090	0f 84 d9 00 00
	00		 je	 $LN11@CheckSkill

; 46   : 	{
; 47   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAutoHPTime() )

  00096	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  0009c	e8 00 00 00 00	 call	 ?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAutoHPTime
  000a1	85 c0		 test	 eax, eax
  000a3	74 10		 je	 SHORT $LN18@CheckSkill

; 48   : 		{
; 49   : 			lpObj->m_MonsterSkillElementInfo.ResetAutoHP();

  000a5	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  000ab	e8 00 00 00 00	 call	 ?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoHP

; 50   : 		}
; 51   : 		else 

  000b0	e9 ba 00 00 00	 jmp	 $LN11@CheckSkill
$LN18@CheckSkill:

; 52   : 		{
; 53   : 			if ( lpObj->m_MonsterSkillElementInfo.m_iSkillElementAutoHPCycle == 110 )

  000b5	83 be 34 1c 00
	00 6e		 cmp	 DWORD PTR [esi+7220], 110 ; 0000006eH

; 54   : 				lpObj->Life += lpObj->m_MonsterSkillElementInfo.m_iSkillElementAutoHP;

  000bc	db 86 30 1c 00
	00		 fild	 DWORD PTR [esi+7216]

; 55   : 			else

  000c2	74 0c		 je	 SHORT $LN36@CheckSkill

; 56   : 	
; 57   : 			lpObj->Life += (((float)(lpObj->Life) * (float)(lpObj->m_MonsterSkillElementInfo.m_iSkillElementAutoHP)))/100.0f;

  000c4	d8 8e fc 00 00
	00		 fmul	 DWORD PTR [esi+252]
  000ca	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
$LN36@CheckSkill:
  000d0	d8 86 fc 00 00
	00		 fadd	 DWORD PTR [esi+252]
  000d6	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 58   : 
; 59   : 			if ( lpObj->Life <0 )

  000dc	d9 ee		 fldz
  000de	d8 96 fc 00 00
	00		 fcom	 DWORD PTR [esi+252]
  000e4	df e0		 fnstsw	 ax
  000e6	f6 c4 41	 test	 ah, 65			; 00000041H
  000e9	75 1b		 jne	 SHORT $LN29@CheckSkill

; 60   : 			{
; 61   : 				lpObj->Life = 0;
; 62   : 				GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  000eb	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  000f1	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  000f7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f9	50		 push	 eax
  000fa	6a 00		 push	 0
  000fc	68 ff 00 00 00	 push	 255			; 000000ffH
  00101	6a 00		 push	 0
  00103	51		 push	 ecx
  00104	eb 61		 jmp	 SHORT $LN37@CheckSkill
$LN29@CheckSkill:

; 58   : 
; 59   : 			if ( lpObj->Life <0 )

  00106	dd d8		 fstp	 ST(0)

; 63   : 			}
; 64   : 			else if ( (lpObj->MaxLife + lpObj->AddLife) < lpObj->Life )

  00108	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  0010e	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00114	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0011a	d8 d9		 fcomp	 ST(1)
  0011c	df e0		 fnstsw	 ax
  0011e	f6 c4 41	 test	 ah, 65			; 00000041H
  00121	75 25		 jne	 SHORT $LN32@CheckSkill

; 65   : 			{
; 66   : 				lpObj->Life = lpObj->MaxLife + lpObj->AddLife;
; 67   : 				GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  00123	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  00129	d9 5d 08	 fstp	 DWORD PTR tv337[ebp]
  0012c	d9 45 08	 fld	 DWORD PTR tv337[ebp]
  0012f	52		 push	 edx
  00130	6a 00		 push	 0
  00132	d9 96 fc 00 00
	00		 fst	 DWORD PTR [esi+252]
  00138	68 ff 00 00 00	 push	 255			; 000000ffH
  0013d	e8 00 00 00 00	 call	 __ftol2_sse
  00142	50		 push	 eax
  00143	8b 06		 mov	 eax, DWORD PTR [esi]
  00145	50		 push	 eax

; 68   : 			}
; 69   : 			else

  00146	eb 1f		 jmp	 SHORT $LN37@CheckSkill
$LN32@CheckSkill:

; 70   : 			{
; 71   : 				GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0, lpObj->iShield);

  00148	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  0014e	dd d8		 fstp	 ST(0)
  00150	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00156	51		 push	 ecx
  00157	6a 00		 push	 0
  00159	68 ff 00 00 00	 push	 255			; 000000ffH
  0015e	e8 00 00 00 00	 call	 __ftol2_sse
  00163	8b 16		 mov	 edx, DWORD PTR [esi]
  00165	50		 push	 eax
  00166	52		 push	 edx
$LN37@CheckSkill:
  00167	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0016c	83 c4 14	 add	 esp, 20			; 00000014H
$LN11@CheckSkill:

; 72   : 			}
; 73   : 		}
; 74   : 	}
; 75   : 
; 76   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAutoMPTime() )

  0016f	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00175	e8 00 00 00 00	 call	 ?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoMPTime
  0017a	85 c0		 test	 eax, eax
  0017c	74 1a		 je	 SHORT $LN9@CheckSkill

; 77   : 	{
; 78   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAutoMPTime() )

  0017e	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00184	e8 00 00 00 00	 call	 ?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAutoMPTime
  00189	85 c0		 test	 eax, eax
  0018b	74 0b		 je	 SHORT $LN9@CheckSkill

; 79   : 		{
; 80   : 			lpObj->m_MonsterSkillElementInfo.ResetAutoMP();

  0018d	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00193	e8 00 00 00 00	 call	 ?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoMP
$LN9@CheckSkill:

; 81   : 		}
; 82   : 	}
; 83   : 
; 84   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAttackTime() )

  00198	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  0019e	e8 00 00 00 00	 call	 ?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAttackTime
  001a3	85 c0		 test	 eax, eax
  001a5	74 1a		 je	 SHORT $LN7@CheckSkill

; 85   : 	{
; 86   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAttackTime() )

  001a7	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  001ad	e8 00 00 00 00	 call	 ?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAttackTime
  001b2	85 c0		 test	 eax, eax
  001b4	74 0b		 je	 SHORT $LN7@CheckSkill

; 87   : 		{
; 88   : 			lpObj->m_MonsterSkillElementInfo.ResetAttack();

  001b6	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  001bc	e8 00 00 00 00	 call	 ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAttack
$LN7@CheckSkill:

; 89   : 		}
; 90   : 	}
; 91   : 
; 92   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckResistTime() )

  001c1	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  001c7	e8 00 00 00 00	 call	 ?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckResistTime
  001cc	85 c0		 test	 eax, eax
  001ce	74 1a		 je	 SHORT $LN5@CheckSkill

; 93   : 	{
; 94   : 		if ( lpObj->m_MonsterSkillElementInfo.DecResistTime() )

  001d0	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  001d6	e8 00 00 00 00	 call	 ?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecResistTime
  001db	85 c0		 test	 eax, eax
  001dd	74 0b		 je	 SHORT $LN5@CheckSkill

; 95   : 		{
; 96   : 			lpObj->m_MonsterSkillElementInfo.ResetResist();

  001df	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  001e5	e8 00 00 00 00	 call	 ?ResetResist@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetResist
$LN5@CheckSkill:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	if ( lpObj->m_MonsterSkillElementInfo.CheckModifyStatTime() )

  001ea	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  001f0	e8 00 00 00 00	 call	 ?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckModifyStatTime
  001f5	85 c0		 test	 eax, eax
  001f7	74 1a		 je	 SHORT $LN3@CheckSkill

; 101  : 	{
; 102  : 		if ( lpObj->m_MonsterSkillElementInfo.DecModifyStatTime() )

  001f9	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  001ff	e8 00 00 00 00	 call	 ?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecModifyStatTime
  00204	85 c0		 test	 eax, eax
  00206	74 0b		 je	 SHORT $LN3@CheckSkill

; 103  : 		{
; 104  : 			lpObj->m_MonsterSkillElementInfo.ResetModifyStat();

  00208	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  0020e	e8 00 00 00 00	 call	 ?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetModifyStat
$LN3@CheckSkill:

; 105  : 		}
; 106  : 	}
; 107  : 
; 108  : 	if ( lpObj->m_MonsterSkillElementInfo.CheckBerserkTime() )

  00213	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00219	e8 00 00 00 00	 call	 ?CheckBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckBerserkTime
  0021e	85 c0		 test	 eax, eax
  00220	74 1d		 je	 SHORT $LN1@CheckSkill

; 109  : 	{
; 110  : 		if ( lpObj->m_MonsterSkillElementInfo.DecBerserkTime() )

  00222	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00228	e8 00 00 00 00	 call	 ?DecBerserkTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecBerserkTime
  0022d	85 c0		 test	 eax, eax
  0022f	74 0e		 je	 SHORT $LN1@CheckSkill

; 111  : 		{
; 112  : 			lpObj->m_MonsterSkillElementInfo.ResetBerserkTime();

  00231	5f		 pop	 edi
  00232	8d 8e 20 1c 00
	00		 lea	 ecx, DWORD PTR [esi+7200]
  00238	5e		 pop	 esi

; 113  : 		}
; 114  : 	}
; 115  : }

  00239	5d		 pop	 ebp

; 111  : 		{
; 112  : 			lpObj->m_MonsterSkillElementInfo.ResetBerserkTime();

  0023a	e9 00 00 00 00	 jmp	 ?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetBerserkTime
$LN1@CheckSkill:
  0023f	5f		 pop	 edi
  00240	5e		 pop	 esi

; 113  : 		}
; 114  : 	}
; 115  : }

  00241	5d		 pop	 ebp
  00242	c3		 ret	 0
?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z ENDP ; TMonsterSkillElementInfo::CheckSkillElementInfoProc
_TEXT	ENDS
PUBLIC	?Reset@TMonsterSkillElementInfo@@QAEXXZ		; TMonsterSkillElementInfo::Reset
; Function compile flags: /Ogtp
;	COMDAT ?Reset@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@TMonsterSkillElementInfo@@QAEXXZ PROC		; TMonsterSkillElementInfo::Reset, COMDAT
; _this$ = ecx

; 120  : 	this->ResetDefense();

  00000	e8 00 00 00 00	 call	 ?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetDefense

; 121  : 	this->ResetAttack();

  00005	e8 00 00 00 00	 call	 ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAttack

; 122  : 	this->ResetAutoHP();

  0000a	e8 00 00 00 00	 call	 ?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoHP

; 123  : 	this->ResetAutoMP();

  0000f	e8 00 00 00 00	 call	 ?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoMP

; 124  : 	this->ResetAutoAG();

  00014	e8 00 00 00 00	 call	 ?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoAG

; 125  : 	this->ResetImmune();

  00019	e8 00 00 00 00	 call	 ?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetImmune

; 126  : 	this->ResetResist();

  0001e	e8 00 00 00 00	 call	 ?ResetResist@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetResist

; 127  : 	this->ResetModifyStat();

  00023	e8 00 00 00 00	 call	 ?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetModifyStat

; 128  : 	this->ResetBerserkTime();

  00028	e9 00 00 00 00	 jmp	 ?ResetBerserkTime@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetBerserkTime
?Reset@TMonsterSkillElementInfo@@QAEXXZ ENDP		; TMonsterSkillElementInfo::Reset
_TEXT	ENDS
END
