; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\TServerInfoDisplayer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07BMIEDOEC@Offline?$AA@			; `string'
PUBLIC	??_C@_06KCABBADG@Online?$AA@			; `string'
PUBLIC	??_C@_0BB@GGLBGCNG@CashShop?5Server?3?$AA@	; `string'
PUBLIC	??_C@_0BA@EDOMEFEL@Ranking?5Server?3?$AA@	; `string'
PUBLIC	??_C@_0O@HCDEPGCO@Event?5Server?3?$AA@		; `string'
PUBLIC	??_C@_0N@NGEGCGEG@ZtDB?5Server?3?$AA@		; `string'
PUBLIC	??_C@_0N@IABMOFAP@Data?5Server?3?$AA@		; `string'
PUBLIC	??_C@_0N@HKCOIOA@Join?5Server?3?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0CA@BLGEHOPE@5?$CJ?5RankingServer?5?9?5Disconnected?$AA@ ; `string'
PUBLIC	??_C@_0BO@EEEBINBE@4?$CJ?5EventServer?5?9?5Disconnected?$AA@ ; `string'
PUBLIC	??_C@_0BN@DKGHECHI@3?$CJ?5ExDBServer?5?9?5Disconnected?$AA@ ; `string'
PUBLIC	??_C@_0BN@JKFHKNPO@2?$CJ?5DataServer?5?9?5Disconnected?$AA@ ; `string'
PUBLIC	??_C@_0BP@FFDIJJDL@1?$CJ?5FsGateServer?5?9?5Disconnected?$AA@ ; `string'
PUBLIC	??_C@_0BN@ECDKHDNJ@0?$CJ?5JoinServer?5?9?5Disconnected?$AA@ ; `string'
PUBLIC	??_C@_0BN@KBADDKA@?5?5?$FL?9?5?5ZtTeam?5Game?5Server?5?5?9?$FN?$AA@ ; `string'
;	COMDAT ??_C@_07BMIEDOEC@Offline?$AA@
CONST	SEGMENT
??_C@_07BMIEDOEC@Offline?$AA@ DB 'Offline', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCABBADG@Online?$AA@
CONST	SEGMENT
??_C@_06KCABBADG@Online?$AA@ DB 'Online', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGLBGCNG@CashShop?5Server?3?$AA@
CONST	SEGMENT
??_C@_0BB@GGLBGCNG@CashShop?5Server?3?$AA@ DB 'CashShop Server:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EDOMEFEL@Ranking?5Server?3?$AA@
CONST	SEGMENT
??_C@_0BA@EDOMEFEL@Ranking?5Server?3?$AA@ DB 'Ranking Server:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HCDEPGCO@Event?5Server?3?$AA@
CONST	SEGMENT
??_C@_0O@HCDEPGCO@Event?5Server?3?$AA@ DB 'Event Server:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NGEGCGEG@ZtDB?5Server?3?$AA@
CONST	SEGMENT
??_C@_0N@NGEGCGEG@ZtDB?5Server?3?$AA@ DB 'ZtDB Server:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IABMOFAP@Data?5Server?3?$AA@
CONST	SEGMENT
??_C@_0N@IABMOFAP@Data?5Server?3?$AA@ DB 'Data Server:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HKCOIOA@Join?5Server?3?$AA@
CONST	SEGMENT
??_C@_0N@HKCOIOA@Join?5Server?3?$AA@ DB 'Join Server:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BLGEHOPE@5?$CJ?5RankingServer?5?9?5Disconnected?$AA@
CONST	SEGMENT
??_C@_0CA@BLGEHOPE@5?$CJ?5RankingServer?5?9?5Disconnected?$AA@ DB '5) Ran'
	DB	'kingServer - Disconnected', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EEEBINBE@4?$CJ?5EventServer?5?9?5Disconnected?$AA@
CONST	SEGMENT
??_C@_0BO@EEEBINBE@4?$CJ?5EventServer?5?9?5Disconnected?$AA@ DB '4) Event'
	DB	'Server - Disconnected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DKGHECHI@3?$CJ?5ExDBServer?5?9?5Disconnected?$AA@
CONST	SEGMENT
??_C@_0BN@DKGHECHI@3?$CJ?5ExDBServer?5?9?5Disconnected?$AA@ DB '3) ExDBSe'
	DB	'rver - Disconnected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JKFHKNPO@2?$CJ?5DataServer?5?9?5Disconnected?$AA@
CONST	SEGMENT
??_C@_0BN@JKFHKNPO@2?$CJ?5DataServer?5?9?5Disconnected?$AA@ DB '2) DataSe'
	DB	'rver - Disconnected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FFDIJJDL@1?$CJ?5FsGateServer?5?9?5Disconnected?$AA@
CONST	SEGMENT
??_C@_0BP@FFDIJJDL@1?$CJ?5FsGateServer?5?9?5Disconnected?$AA@ DB '1) FsGa'
	DB	'teServer - Disconnected', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ECDKHDNJ@0?$CJ?5JoinServer?5?9?5Disconnected?$AA@
CONST	SEGMENT
??_C@_0BN@ECDKHDNJ@0?$CJ?5JoinServer?5?9?5Disconnected?$AA@ DB '0) JoinSe'
	DB	'rver - Disconnected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KBADDKA@?5?5?$FL?9?5?5ZtTeam?5Game?5Server?5?5?9?$FN?$AA@
CONST	SEGMENT
??_C@_0BN@KBADDKA@?5?5?$FL?9?5?5ZtTeam?5Game?5Server?5?5?9?$FN?$AA@ DB ' '
	DB	' [-  ZtTeam Game Server  -]', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_ServerTypeText DD FLAT:??_C@_0BN@KBADDKA@?5?5?$FL?9?5?5ZtTeam?5Game?5Server?5?5?9?$FN?$AA@
_ErrorMessge DD	FLAT:??_C@_0BN@ECDKHDNJ@0?$CJ?5JoinServer?5?9?5Disconnected?$AA@
	DD	FLAT:??_C@_0BP@FFDIJJDL@1?$CJ?5FsGateServer?5?9?5Disconnected?$AA@
	DD	FLAT:??_C@_0BN@JKFHKNPO@2?$CJ?5DataServer?5?9?5Disconnected?$AA@
	DD	FLAT:??_C@_0BN@DKGHECHI@3?$CJ?5ExDBServer?5?9?5Disconnected?$AA@
	DD	FLAT:??_C@_0BO@EEEBINBE@4?$CJ?5EventServer?5?9?5Disconnected?$AA@
	DD	FLAT:??_C@_0CA@BLGEHOPE@5?$CJ?5RankingServer?5?9?5Disconnected?$AA@
	ORG $+8
_DeveloperMessage DD FLAT:??_C@_00CNPNBAHC@?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
_StatusMsg DD	FLAT:??_C@_0N@HKCOIOA@Join?5Server?3?$AA@
	DD	FLAT:??_C@_0N@IABMOFAP@Data?5Server?3?$AA@
	DD	FLAT:??_C@_0N@NGEGCGEG@ZtDB?5Server?3?$AA@
	DD	FLAT:??_C@_0O@HCDEPGCO@Event?5Server?3?$AA@
	DD	FLAT:??_C@_0BA@EDOMEFEL@Ranking?5Server?3?$AA@
	DD	FLAT:??_C@_0BB@GGLBGCNG@CashShop?5Server?3?$AA@
	DD	FLAT:??_C@_06KCABBADG@Online?$AA@
	DD	FLAT:??_C@_07BMIEDOEC@Offline?$AA@
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_05MOECANKB@Times?$AA@			; `string'
PUBLIC	?InitGDIObject@TServerInfoDisplayer@@QAEXXZ	; TServerInfoDisplayer::InitGDIObject
EXTRN	__imp__CreateSolidBrush@4:PROC
EXTRN	__imp__CreateFontA@56:PROC
;	COMDAT ??_C@_05MOECANKB@Times?$AA@
; File e:\work\tranet_version\gs\gameserver\tserverinfodisplayer.cpp
CONST	SEGMENT
??_C@_05MOECANKB@Times?$AA@ DB 'Times', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?InitGDIObject@TServerInfoDisplayer@@QAEXXZ
_TEXT	SEGMENT
?InitGDIObject@TServerInfoDisplayer@@QAEXXZ PROC	; TServerInfoDisplayer::InitGDIObject, COMDAT
; _this$ = ecx

; 79   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 80   : 
; 81   : 
; 82   : 	this->m_hFont = CreateFontA(60, 0, 0, 0, FW_REGULAR, FALSE, FALSE, FALSE, 
; 83   : 		1, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY,
; 84   : 		DEFAULT_PITCH|FF_DONTCARE, "Times");

  00002	68 00 00 00 00	 push	 OFFSET ??_C@_05MOECANKB@Times?$AA@
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 01		 push	 1
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	68 90 01 00 00	 push	 400			; 00000190H
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	6a 3c		 push	 60			; 0000003cH
  00024	8b f1		 mov	 esi, ecx
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontA@56

; 85   : 
; 86   : 
; 87   : 
; 88   : 	//this->m_hFont = CreateFont(80, 0, 0, 0, FW_THIN, FALSE, TRUE, FALSE, 
; 89   : 	//	ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY,
; 90   : 	//	DEFAULT_PITCH|FF_DONTCARE, "Times");
; 91   : 
; 92   : 	//this->m_hNormalBrush = CreateSolidBrush(RGB(110, 240, 120));
; 93   : 	this->m_hNormalBrush = CreateSolidBrush(RGB(33, 200, 219));

  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__CreateSolidBrush@4
  00032	68 21 c8 db 00	 push	 14403617		; 00dbc821H
  00037	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0003a	ff d7		 call	 edi

; 94   : 	this->m_hAbnormalBrush = CreateSolidBrush(RGB(250, 110, 110));

  0003c	68 fa 6e 6e 00	 push	 7237370			; 006e6efaH
  00041	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00044	ff d7		 call	 edi
  00046	5f		 pop	 edi
  00047	89 46 24	 mov	 DWORD PTR [esi+36], eax
  0004a	5e		 pop	 esi

; 95   : }

  0004b	c3		 ret	 0
?InitGDIObject@TServerInfoDisplayer@@QAEXXZ ENDP	; TServerInfoDisplayer::InitGDIObject
_TEXT	ENDS
PUBLIC	?DelGDIObject@TServerInfoDisplayer@@QAEXXZ	; TServerInfoDisplayer::DelGDIObject
EXTRN	__imp__DeleteObject@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?DelGDIObject@TServerInfoDisplayer@@QAEXXZ
_TEXT	SEGMENT
?DelGDIObject@TServerInfoDisplayer@@QAEXXZ PROC		; TServerInfoDisplayer::DelGDIObject, COMDAT
; _this$ = ecx

; 98   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 99   : 	DeleteObject(this->m_hFont);

  00003	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00006	57		 push	 edi
  00007	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DeleteObject@4
  0000d	50		 push	 eax
  0000e	ff d7		 call	 edi

; 100  : 	DeleteObject(this->m_hNormalBrush);

  00010	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00013	51		 push	 ecx
  00014	ff d7		 call	 edi

; 101  : 	DeleteObject(this->m_hAbnormalBrush);

  00016	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00019	52		 push	 edx
  0001a	ff d7		 call	 edi
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 102  : }

  0001e	c3		 ret	 0
?DelGDIObject@TServerInfoDisplayer@@QAEXXZ ENDP		; TServerInfoDisplayer::DelGDIObject
_TEXT	ENDS
PUBLIC	?CheckLogFileSize@TServerInfoDisplayer@@QAEXXZ	; TServerInfoDisplayer::CheckLogFileSize
; Function compile flags: /Ogtp
;	COMDAT ?CheckLogFileSize@TServerInfoDisplayer@@QAEXXZ
_TEXT	SEGMENT
?CheckLogFileSize@TServerInfoDisplayer@@QAEXXZ PROC	; TServerInfoDisplayer::CheckLogFileSize, COMDAT
; _this$ = ecx

; 120  : 
; 121  : }

  00000	c3		 ret	 0
?CheckLogFileSize@TServerInfoDisplayer@@QAEXXZ ENDP	; TServerInfoDisplayer::CheckLogFileSize
_TEXT	ENDS
PUBLIC	?CheckJSConnection@TServerInfoDisplayer@@QAEXXZ	; TServerInfoDisplayer::CheckJSConnection
EXTRN	?GetSocket@MyWinsockBase@@QAEIXZ:PROC		; MyWinsockBase::GetSocket
EXTRN	?wsJServerCli@@3VwsJoinServerCli@@A:BYTE	; wsJServerCli
; Function compile flags: /Ogtp
;	COMDAT ?CheckJSConnection@TServerInfoDisplayer@@QAEXXZ
_TEXT	SEGMENT
?CheckJSConnection@TServerInfoDisplayer@@QAEXXZ PROC	; TServerInfoDisplayer::CheckJSConnection, COMDAT
; _this$ = ecx

; 124  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 125  : 	if ( wsJServerCli.GetSocket() == INVALID_SOCKET )

  00003	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A+4
  00008	e8 00 00 00 00	 call	 ?GetSocket@MyWinsockBase@@QAEIXZ ; MyWinsockBase::GetSocket
  0000d	33 c9		 xor	 ecx, ecx
  0000f	83 f8 ff	 cmp	 eax, -1
  00012	0f 95 c1	 setne	 cl
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	5e		 pop	 esi

; 126  : 		this->m_bValidJSConnection = FALSE;
; 127  : 	else
; 128  : 		this->m_bValidJSConnection = TRUE;
; 129  : }

  00019	c3		 ret	 0
?CheckJSConnection@TServerInfoDisplayer@@QAEXXZ ENDP	; TServerInfoDisplayer::CheckJSConnection
_TEXT	ENDS
PUBLIC	?CheckDSConnection@TServerInfoDisplayer@@QAEXXZ	; TServerInfoDisplayer::CheckDSConnection
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
; Function compile flags: /Ogtp
;	COMDAT ?CheckDSConnection@TServerInfoDisplayer@@QAEXXZ
_TEXT	SEGMENT
?CheckDSConnection@TServerInfoDisplayer@@QAEXXZ PROC	; TServerInfoDisplayer::CheckDSConnection, COMDAT
; _this$ = ecx

; 132  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 133  : 	if ( cDBSMng.wsCDBS[0].GetSocket() == INVALID_SOCKET )

  00003	b9 08 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A+8
  00008	e8 00 00 00 00	 call	 ?GetSocket@MyWinsockBase@@QAEIXZ ; MyWinsockBase::GetSocket
  0000d	33 c9		 xor	 ecx, ecx
  0000f	83 f8 ff	 cmp	 eax, -1
  00012	0f 95 c1	 setne	 cl
  00015	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00018	5e		 pop	 esi

; 134  : 		this->m_bValidDSConnection = FALSE;
; 135  : 	else
; 136  : 		this->m_bValidDSConnection = TRUE;
; 137  : }

  00019	c3		 ret	 0
?CheckDSConnection@TServerInfoDisplayer@@QAEXXZ ENDP	; TServerInfoDisplayer::CheckDSConnection
_TEXT	ENDS
PUBLIC	?CheckFSConnection@TServerInfoDisplayer@@QAEXXZ	; TServerInfoDisplayer::CheckFSConnection
; Function compile flags: /Ogtp
;	COMDAT ?CheckFSConnection@TServerInfoDisplayer@@QAEXXZ
_TEXT	SEGMENT
?CheckFSConnection@TServerInfoDisplayer@@QAEXXZ PROC	; TServerInfoDisplayer::CheckFSConnection, COMDAT
; _this$ = ecx

; 141  : 	this->m_bValidFSConnection = TRUE;

  00000	c7 41 08 01 00
	00 00		 mov	 DWORD PTR [ecx+8], 1

; 142  : }

  00007	c3		 ret	 0
?CheckFSConnection@TServerInfoDisplayer@@QAEXXZ ENDP	; TServerInfoDisplayer::CheckFSConnection
_TEXT	ENDS
PUBLIC	?CheckZTDSConnection@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::CheckZTDSConnection
EXTRN	?wsZtDbCli@@3VwsJoinServerCli@@A:BYTE		; wsZtDbCli
; Function compile flags: /Ogtp
;	COMDAT ?CheckZTDSConnection@TServerInfoDisplayer@@QAEXXZ
_TEXT	SEGMENT
?CheckZTDSConnection@TServerInfoDisplayer@@QAEXXZ PROC	; TServerInfoDisplayer::CheckZTDSConnection, COMDAT
; _this$ = ecx

; 145  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 146  : 	if ( wsZtDbCli.GetSocket() == INVALID_SOCKET )

  00003	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsZtDbCli@@3VwsJoinServerCli@@A+4
  00008	e8 00 00 00 00	 call	 ?GetSocket@MyWinsockBase@@QAEIXZ ; MyWinsockBase::GetSocket
  0000d	33 c9		 xor	 ecx, ecx
  0000f	83 f8 ff	 cmp	 eax, -1
  00012	0f 95 c1	 setne	 cl
  00015	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00018	5e		 pop	 esi

; 147  : 		this->m_bValidZTDSConnection = FALSE;
; 148  : 	else
; 149  : 		this->m_bValidZTDSConnection = TRUE;
; 150  : }

  00019	c3		 ret	 0
?CheckZTDSConnection@TServerInfoDisplayer@@QAEXXZ ENDP	; TServerInfoDisplayer::CheckZTDSConnection
_TEXT	ENDS
PUBLIC	?CheckEVDSConnection@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::CheckEVDSConnection
EXTRN	?IsEventChipServerConnected@@3HA:DWORD		; IsEventChipServerConnected
; Function compile flags: /Ogtp
;	COMDAT ?CheckEVDSConnection@TServerInfoDisplayer@@QAEXXZ
_TEXT	SEGMENT
?CheckEVDSConnection@TServerInfoDisplayer@@QAEXXZ PROC	; TServerInfoDisplayer::CheckEVDSConnection, COMDAT
; _this$ = ecx

; 154  : 	if ( IsEventChipServerConnected == FALSE )

  00000	33 c0		 xor	 eax, eax
  00002	39 05 00 00 00
	00		 cmp	 DWORD PTR ?IsEventChipServerConnected@@3HA, eax ; IsEventChipServerConnected
  00008	0f 95 c0	 setne	 al
  0000b	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 155  : 		this->m_bValidEVDSConnection = FALSE;
; 156  : 	else
; 157  : 		this->m_bValidEVDSConnection = TRUE;
; 158  : }

  0000e	c3		 ret	 0
?CheckEVDSConnection@TServerInfoDisplayer@@QAEXXZ ENDP	; TServerInfoDisplayer::CheckEVDSConnection
_TEXT	ENDS
PUBLIC	?CheckRKDSConnection@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::CheckRKDSConnection
EXTRN	?IsDevilSquareEventConnected@@3HA:DWORD		; IsDevilSquareEventConnected
; Function compile flags: /Ogtp
;	COMDAT ?CheckRKDSConnection@TServerInfoDisplayer@@QAEXXZ
_TEXT	SEGMENT
?CheckRKDSConnection@TServerInfoDisplayer@@QAEXXZ PROC	; TServerInfoDisplayer::CheckRKDSConnection, COMDAT
; _this$ = ecx

; 162  : 	if ( IsDevilSquareEventConnected == FALSE )

  00000	33 c0		 xor	 eax, eax
  00002	39 05 00 00 00
	00		 cmp	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, eax ; IsDevilSquareEventConnected
  00008	0f 95 c0	 setne	 al
  0000b	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 163  : 		this->m_bValidRKDSConnection = FALSE;
; 164  : 	else
; 165  : 		this->m_bValidRKDSConnection = TRUE;
; 166  : }

  0000e	c3		 ret	 0
?CheckRKDSConnection@TServerInfoDisplayer@@QAEXXZ ENDP	; TServerInfoDisplayer::CheckRKDSConnection
_TEXT	ENDS
PUBLIC	??_C@_0EH@MLPCFHN@Server?5Interconnection?5Check?5?9?5?$FL@ ; `string'
PUBLIC	??_C@_08LHOANCIJ@Date?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0M@LMOOBOCC@Version?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0M@KDOOKFAH@New?5Update?3?$AA@		; `string'
PUBLIC	??_C@_0M@IHBBFHDF@License?3?5?$CFs?$AA@		; `string'
PUBLIC	_hWnd$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?PaintAllInfo@TServerInfoDisplayer@@QAEXPAUHWND__@@HH@Z ; TServerInfoDisplayer::PaintAllInfo
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	?Output@CLogToFile@@QAAXPADZZ:PROC		; CLogToFile::Output
EXTRN	_sprintf:PROC
EXTRN	?GetLicenseName@CZtLicense@@QAEPADXZ:PROC	; CZtLicense::GetLicenseName
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__FillRect@12:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0EH@MLPCFHN@Server?5Interconnection?5Check?5?9?5?$FL@
CONST	SEGMENT
??_C@_0EH@MLPCFHN@Server?5Interconnection?5Check?5?9?5?$FL@ DB 'Server In'
	DB	'terconnection Check - [FS/%d] [DS/%d] [ZT/%d] [ES/%d] [RS/%d]'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHOANCIJ@Date?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_08LHOANCIJ@Date?3?5?$CFs?$AA@ DB 'Date: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LMOOBOCC@Version?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@LMOOBOCC@Version?3?5?$CFs?$AA@ DB 'Version: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDOOKFAH@New?5Update?3?$AA@
CONST	SEGMENT
??_C@_0M@KDOOKFAH@New?5Update?3?$AA@ DB 'New Update:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IHBBFHDF@License?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@IHBBFHDF@License?3?5?$CFs?$AA@ DB 'License: %s', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?PaintAllInfo@TServerInfoDisplayer@@QAEXPAUHWND__@@HH@Z
_TEXT	SEGMENT
_iOldBkMode$ = -140					; size = 4
_pOldFont$ = -136					; size = 4
_hWnd$GSCopy$ = -132					; size = 4
tv697 = -128						; size = 4
_this$GSCopy$ = -128					; size = 4
_rect$ = -124						; size = 16
_InfoServer2$209420 = -108				; size = 50
_InfoServer$209418 = -56				; size = 50
_szLicense$209407 = -56					; size = 50
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_iTopLeftX$ = 12					; size = 4
_iTopLeftY$ = 16					; size = 4
?PaintAllInfo@TServerInfoDisplayer@@QAEXPAUHWND__@@HH@Z PROC ; TServerInfoDisplayer::PaintAllInfo, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _hWnd$[ebp]

; 170  : 	HDC hDC = GetDC(hWnd);

  00019	57		 push	 edi
  0001a	89 4d 80	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 171  : 	RECT rect;
; 172  : 	GetClientRect(hWnd, &rect);
; 173  : 
; 174  : 	int iLineCount = 0;
; 175  : 	int iOldBkMode = SetBkMode(hDC, TRANSPARENT);

  0001d	89 bd 7c ff ff
	ff		 mov	 DWORD PTR _hWnd$GSCopy$[ebp], edi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00029	8b f0		 mov	 esi, eax
  0002b	8d 45 84	 lea	 eax, DWORD PTR _rect$[ebp]
  0002e	50		 push	 eax
  0002f	57		 push	 edi
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00036	6a 01		 push	 1
  00038	56		 push	 esi
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 176  : 	rect.bottom = 100;
; 177  : 	FillRect(hDC, &rect, CreateSolidBrush(RGB(107, 243, 125)));

  0003f	68 6b f3 7d 00	 push	 8254315			; 007df36bH
  00044	89 85 74 ff ff
	ff		 mov	 DWORD PTR _iOldBkMode$[ebp], eax
  0004a	c7 45 90 64 00
	00 00		 mov	 DWORD PTR _rect$[ebp+12], 100 ; 00000064H
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  00057	50		 push	 eax
  00058	8d 4d 84	 lea	 ecx, DWORD PTR _rect$[ebp]
  0005b	51		 push	 ecx
  0005c	56		 push	 esi
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 178  : 	//rect.top = 20;
; 179  : #if(NEW_WINDOW==1)
; 180  : 
; 181  : 	SetTextColor(hDC, RGB(210, 105, 30));

  00063	68 d2 69 1e 00	 push	 1993170			; 001e69d2H
  00068	56		 push	 esi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 182  : 	TextOut(hDC, 10, 80, StatusMsg[0], strlen(StatusMsg[0]));

  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _StatusMsg
  00075	8b c1		 mov	 eax, ecx
  00077	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL22@PaintAllIn:
  00080	8a 10		 mov	 dl, BYTE PTR [eax]
  00082	40		 inc	 eax
  00083	84 d2		 test	 dl, dl
  00085	75 f9		 jne	 SHORT $LL22@PaintAllIn
  00087	2b c7		 sub	 eax, edi
  00089	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__TextOutA@20
  0008f	50		 push	 eax
  00090	51		 push	 ecx
  00091	6a 50		 push	 80			; 00000050H
  00093	6a 0a		 push	 10			; 0000000aH
  00095	56		 push	 esi
  00096	ff d7		 call	 edi

; 183  : 
; 184  : 	TextOut(hDC, 150, 80, StatusMsg[1], strlen(StatusMsg[1]));

  00098	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _StatusMsg+4
  0009e	8b c1		 mov	 eax, ecx
  000a0	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL23@PaintAllIn:
  000a3	8a 18		 mov	 bl, BYTE PTR [eax]
  000a5	40		 inc	 eax
  000a6	84 db		 test	 bl, bl
  000a8	75 f9		 jne	 SHORT $LL23@PaintAllIn
  000aa	2b c2		 sub	 eax, edx
  000ac	50		 push	 eax
  000ad	51		 push	 ecx
  000ae	6a 50		 push	 80			; 00000050H
  000b0	68 96 00 00 00	 push	 150			; 00000096H
  000b5	56		 push	 esi
  000b6	ff d7		 call	 edi

; 185  : 
; 186  : 	TextOut(hDC, 300, 80, StatusMsg[2], strlen(StatusMsg[2]));

  000b8	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _StatusMsg+8
  000be	8b c1		 mov	 eax, ecx
  000c0	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL24@PaintAllIn:
  000c3	8a 18		 mov	 bl, BYTE PTR [eax]
  000c5	40		 inc	 eax
  000c6	84 db		 test	 bl, bl
  000c8	75 f9		 jne	 SHORT $LL24@PaintAllIn
  000ca	2b c2		 sub	 eax, edx
  000cc	50		 push	 eax
  000cd	51		 push	 ecx
  000ce	6a 50		 push	 80			; 00000050H
  000d0	68 2c 01 00 00	 push	 300			; 0000012cH
  000d5	56		 push	 esi
  000d6	ff d7		 call	 edi

; 187  : 
; 188  : 	TextOut(hDC, 450, 80, StatusMsg[3], strlen(StatusMsg[3]));

  000d8	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _StatusMsg+12
  000de	8b c1		 mov	 eax, ecx
  000e0	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL25@PaintAllIn:
  000e3	8a 18		 mov	 bl, BYTE PTR [eax]
  000e5	40		 inc	 eax
  000e6	84 db		 test	 bl, bl
  000e8	75 f9		 jne	 SHORT $LL25@PaintAllIn
  000ea	2b c2		 sub	 eax, edx
  000ec	50		 push	 eax
  000ed	51		 push	 ecx
  000ee	6a 50		 push	 80			; 00000050H
  000f0	68 c2 01 00 00	 push	 450			; 000001c2H
  000f5	56		 push	 esi
  000f6	ff d7		 call	 edi

; 189  : 
; 190  : 	TextOut(hDC, 600, 80, StatusMsg[4], strlen(StatusMsg[4]));

  000f8	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _StatusMsg+16
  000fe	8b c1		 mov	 eax, ecx
  00100	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL26@PaintAllIn:
  00103	8a 18		 mov	 bl, BYTE PTR [eax]
  00105	40		 inc	 eax
  00106	84 db		 test	 bl, bl
  00108	75 f9		 jne	 SHORT $LL26@PaintAllIn
  0010a	2b c2		 sub	 eax, edx
  0010c	50		 push	 eax
  0010d	51		 push	 ecx
  0010e	6a 50		 push	 80			; 00000050H
  00110	68 58 02 00 00	 push	 600			; 00000258H
  00115	56		 push	 esi
  00116	ff d7		 call	 edi

; 191  : 
; 192  : 	TextOut(hDC, 770, 80, StatusMsg[5], strlen(StatusMsg[5]));

  00118	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _StatusMsg+20
  0011e	8b c1		 mov	 eax, ecx
  00120	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL27@PaintAllIn:
  00123	8a 18		 mov	 bl, BYTE PTR [eax]
  00125	40		 inc	 eax
  00126	84 db		 test	 bl, bl
  00128	75 f9		 jne	 SHORT $LL27@PaintAllIn
  0012a	2b c2		 sub	 eax, edx
  0012c	50		 push	 eax
  0012d	51		 push	 ecx
  0012e	6a 50		 push	 80			; 00000050H
  00130	68 02 03 00 00	 push	 770			; 00000302H
  00135	56		 push	 esi
  00136	ff d7		 call	 edi

; 193  : 
; 194  : 	if ( this->m_bValidJSConnection == FALSE )

  00138	8b 55 80	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  0013b	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0013f	75 20		 jne	 SHORT $LN19@PaintAllIn

; 195  : 	{
; 196  : 		SetTextColor(hDC, RGB(255, 0, 0));

  00141	68 ff 00 00 00	 push	 255			; 000000ffH
  00146	56		 push	 esi
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 197  : 		TextOut(hDC, 95, 80, StatusMsg[7], strlen(StatusMsg[7]));

  0014d	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+28
  00153	8b c2		 mov	 eax, edx
  00155	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL28@PaintAllIn:
  00158	8a 08		 mov	 cl, BYTE PTR [eax]
  0015a	40		 inc	 eax
  0015b	84 c9		 test	 cl, cl
  0015d	75 f9		 jne	 SHORT $LL28@PaintAllIn

; 198  : 	}
; 199  : 	else

  0015f	eb 1e		 jmp	 SHORT $LN50@PaintAllIn
$LN19@PaintAllIn:

; 200  : 	{
; 201  : 		SetTextColor(hDC, RGB(30, 30, 30));

  00161	68 1e 1e 1e 00	 push	 1973790			; 001e1e1eH
  00166	56		 push	 esi
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 202  : 		TextOut(hDC, 95, 80, StatusMsg[6], strlen(StatusMsg[6]));

  0016d	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+24
  00173	8b c2		 mov	 eax, edx
  00175	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL29@PaintAllIn:
  00178	8a 08		 mov	 cl, BYTE PTR [eax]
  0017a	40		 inc	 eax
  0017b	84 c9		 test	 cl, cl
  0017d	75 f9		 jne	 SHORT $LL29@PaintAllIn
$LN50@PaintAllIn:
  0017f	2b c3		 sub	 eax, ebx
  00181	50		 push	 eax
  00182	52		 push	 edx
  00183	6a 50		 push	 80			; 00000050H
  00185	6a 5f		 push	 95			; 0000005fH
  00187	56		 push	 esi
  00188	ff d7		 call	 edi

; 203  : 	}
; 204  : 	// ----
; 205  : 	if ( this->m_bValidFSConnection == FALSE || m_bValidDSConnection == FALSE)

  0018a	8b 45 80	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0018d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00191	74 26		 je	 SHORT $LN16@PaintAllIn
  00193	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00197	74 20		 je	 SHORT $LN16@PaintAllIn

; 209  : 	}
; 210  : 	else
; 211  : 	{
; 212  : 		SetTextColor(hDC, RGB(30, 30, 30));

  00199	68 1e 1e 1e 00	 push	 1973790			; 001e1e1eH
  0019e	56		 push	 esi
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 213  : 		TextOut(hDC, 150+86, 80, StatusMsg[6], strlen(StatusMsg[6]));

  001a5	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+24
  001ab	8b c2		 mov	 eax, edx
  001ad	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL30@PaintAllIn:
  001b0	8a 08		 mov	 cl, BYTE PTR [eax]
  001b2	40		 inc	 eax
  001b3	84 c9		 test	 cl, cl
  001b5	75 f9		 jne	 SHORT $LL30@PaintAllIn
  001b7	eb 1e		 jmp	 SHORT $LN51@PaintAllIn
$LN16@PaintAllIn:

; 206  : 	{
; 207  : 		SetTextColor(hDC, RGB(255, 0, 0));

  001b9	68 ff 00 00 00	 push	 255			; 000000ffH
  001be	56		 push	 esi
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 208  : 		TextOut(hDC, 150+86, 80, StatusMsg[7], strlen(StatusMsg[7]));

  001c5	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+28
  001cb	8b c2		 mov	 eax, edx
  001cd	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL31@PaintAllIn:
  001d0	8a 08		 mov	 cl, BYTE PTR [eax]
  001d2	40		 inc	 eax
  001d3	84 c9		 test	 cl, cl
  001d5	75 f9		 jne	 SHORT $LL31@PaintAllIn
$LN51@PaintAllIn:
  001d7	2b c3		 sub	 eax, ebx
  001d9	50		 push	 eax
  001da	52		 push	 edx
  001db	6a 50		 push	 80			; 00000050H
  001dd	68 ec 00 00 00	 push	 236			; 000000ecH
  001e2	56		 push	 esi
  001e3	ff d7		 call	 edi

; 214  : 	}
; 215  : 
; 216  : 	// ----
; 217  : 
; 218  : 	if ( this->m_bValidZTDSConnection == FALSE )

  001e5	8b 45 80	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  001e8	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001ec	75 20		 jne	 SHORT $LN14@PaintAllIn

; 219  : 	{
; 220  : 		SetTextColor(hDC, RGB(255, 0, 0));

  001ee	68 ff 00 00 00	 push	 255			; 000000ffH
  001f3	56		 push	 esi
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 221  : 		TextOut(hDC, 300+92, 80, StatusMsg[7], strlen(StatusMsg[7]));

  001fa	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+28
  00200	8b c2		 mov	 eax, edx
  00202	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL32@PaintAllIn:
  00205	8a 08		 mov	 cl, BYTE PTR [eax]
  00207	40		 inc	 eax
  00208	84 c9		 test	 cl, cl
  0020a	75 f9		 jne	 SHORT $LL32@PaintAllIn

; 222  : 	}
; 223  : 	else

  0020c	eb 1e		 jmp	 SHORT $LN52@PaintAllIn
$LN14@PaintAllIn:

; 224  : 	{
; 225  : 		SetTextColor(hDC, RGB(30, 30, 30));

  0020e	68 1e 1e 1e 00	 push	 1973790			; 001e1e1eH
  00213	56		 push	 esi
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 226  : 		TextOut(hDC, 300+92, 80, StatusMsg[6], strlen(StatusMsg[6]));

  0021a	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+24
  00220	8b c2		 mov	 eax, edx
  00222	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL33@PaintAllIn:
  00225	8a 08		 mov	 cl, BYTE PTR [eax]
  00227	40		 inc	 eax
  00228	84 c9		 test	 cl, cl
  0022a	75 f9		 jne	 SHORT $LL33@PaintAllIn
$LN52@PaintAllIn:
  0022c	2b c3		 sub	 eax, ebx
  0022e	50		 push	 eax
  0022f	52		 push	 edx
  00230	6a 50		 push	 80			; 00000050H
  00232	68 88 01 00 00	 push	 392			; 00000188H
  00237	56		 push	 esi
  00238	ff d7		 call	 edi

; 227  : 	}
; 228  : 
; 229  : 	// ----
; 230  : 
; 231  : 	if ( this->m_bValidEVDSConnection == FALSE )

  0023a	8b 4d 80	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0023d	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00241	75 26		 jne	 SHORT $LN12@PaintAllIn

; 232  : 	{
; 233  : 		SetTextColor(hDC, RGB(255, 0, 0));

  00243	68 ff 00 00 00	 push	 255			; 000000ffH
  00248	56		 push	 esi
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 234  : 		TextOut(hDC, 450+92, 80, StatusMsg[7], strlen(StatusMsg[7]));

  0024f	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+28
  00255	8b c2		 mov	 eax, edx
  00257	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  0025a	8d 9b 00 00 00
	00		 npad	 6
$LL34@PaintAllIn:
  00260	8a 08		 mov	 cl, BYTE PTR [eax]
  00262	40		 inc	 eax
  00263	84 c9		 test	 cl, cl
  00265	75 f9		 jne	 SHORT $LL34@PaintAllIn

; 235  : 	}
; 236  : 	else

  00267	eb 1e		 jmp	 SHORT $LN53@PaintAllIn
$LN12@PaintAllIn:

; 237  : 	{
; 238  : 		SetTextColor(hDC, RGB(30, 30, 30));

  00269	68 1e 1e 1e 00	 push	 1973790			; 001e1e1eH
  0026e	56		 push	 esi
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 239  : 		TextOut(hDC, 450+92, 80, StatusMsg[6], strlen(StatusMsg[6]));

  00275	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+24
  0027b	8b c2		 mov	 eax, edx
  0027d	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL35@PaintAllIn:
  00280	8a 08		 mov	 cl, BYTE PTR [eax]
  00282	40		 inc	 eax
  00283	84 c9		 test	 cl, cl
  00285	75 f9		 jne	 SHORT $LL35@PaintAllIn
$LN53@PaintAllIn:
  00287	2b c3		 sub	 eax, ebx
  00289	50		 push	 eax
  0028a	52		 push	 edx
  0028b	6a 50		 push	 80			; 00000050H
  0028d	68 1e 02 00 00	 push	 542			; 0000021eH
  00292	56		 push	 esi
  00293	ff d7		 call	 edi

; 240  : 	}
; 241  : 
; 242  : 	// ----
; 243  : 
; 244  : 	if ( this->m_bValidRKDSConnection == FALSE )

  00295	8b 55 80	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00298	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  0029c	75 20		 jne	 SHORT $LN10@PaintAllIn

; 245  : 	{
; 246  : 		SetTextColor(hDC, RGB(255, 0, 0));

  0029e	68 ff 00 00 00	 push	 255			; 000000ffH
  002a3	56		 push	 esi
  002a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 247  : 		TextOut(hDC, 600+108, 80, StatusMsg[7], strlen(StatusMsg[7]));

  002aa	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+28
  002b0	8b c2		 mov	 eax, edx
  002b2	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL36@PaintAllIn:
  002b5	8a 08		 mov	 cl, BYTE PTR [eax]
  002b7	40		 inc	 eax
  002b8	84 c9		 test	 cl, cl
  002ba	75 f9		 jne	 SHORT $LL36@PaintAllIn

; 248  : 	}
; 249  : 	else

  002bc	eb 1e		 jmp	 SHORT $LN54@PaintAllIn
$LN10@PaintAllIn:

; 250  : 	{
; 251  : 		SetTextColor(hDC, RGB(30, 30, 30));

  002be	68 1e 1e 1e 00	 push	 1973790			; 001e1e1eH
  002c3	56		 push	 esi
  002c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 252  : 		TextOut(hDC, 600+108, 80, StatusMsg[6], strlen(StatusMsg[6]));

  002ca	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+24
  002d0	8b c2		 mov	 eax, edx
  002d2	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL37@PaintAllIn:
  002d5	8a 08		 mov	 cl, BYTE PTR [eax]
  002d7	40		 inc	 eax
  002d8	84 c9		 test	 cl, cl
  002da	75 f9		 jne	 SHORT $LL37@PaintAllIn
$LN54@PaintAllIn:
  002dc	2b c3		 sub	 eax, ebx
  002de	50		 push	 eax
  002df	52		 push	 edx
  002e0	6a 50		 push	 80			; 00000050H
  002e2	68 c4 02 00 00	 push	 708			; 000002c4H
  002e7	56		 push	 esi
  002e8	ff d7		 call	 edi

; 253  : 	}
; 254  : 
; 255  : 	// ----
; 256  : 
; 257  : 	if ( m_bValidFSConnection == FALSE )	//New Game Shop

  002ea	8b 45 80	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  002ed	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  002f1	75 26		 jne	 SHORT $LN8@PaintAllIn

; 258  : 	{
; 259  : 		SetTextColor(hDC, RGB(255, 0, 0));

  002f3	68 ff 00 00 00	 push	 255			; 000000ffH
  002f8	56		 push	 esi
  002f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 260  : 		TextOut(hDC, 770+123, 80, StatusMsg[7], strlen(StatusMsg[7]));

  002ff	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+28
  00305	8b c2		 mov	 eax, edx
  00307	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  0030a	8d 9b 00 00 00
	00		 npad	 6
$LL38@PaintAllIn:
  00310	8a 08		 mov	 cl, BYTE PTR [eax]
  00312	40		 inc	 eax
  00313	84 c9		 test	 cl, cl
  00315	75 f9		 jne	 SHORT $LL38@PaintAllIn

; 261  : 	}
; 262  : 	else

  00317	eb 1e		 jmp	 SHORT $LN55@PaintAllIn
$LN8@PaintAllIn:

; 263  : 	{
; 264  : 		SetTextColor(hDC, RGB(30, 30, 30));

  00319	68 1e 1e 1e 00	 push	 1973790			; 001e1e1eH
  0031e	56		 push	 esi
  0031f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 265  : 		TextOut(hDC, 770+123, 80, StatusMsg[6], strlen(StatusMsg[6]));

  00325	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _StatusMsg+24
  0032b	8b c2		 mov	 eax, edx
  0032d	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL39@PaintAllIn:
  00330	8a 08		 mov	 cl, BYTE PTR [eax]
  00332	40		 inc	 eax
  00333	84 c9		 test	 cl, cl
  00335	75 f9		 jne	 SHORT $LL39@PaintAllIn
$LN55@PaintAllIn:
  00337	2b c3		 sub	 eax, ebx
  00339	50		 push	 eax
  0033a	52		 push	 edx
  0033b	6a 50		 push	 80			; 00000050H
  0033d	68 7d 03 00 00	 push	 893			; 0000037dH
  00342	56		 push	 esi
  00343	ff d7		 call	 edi

; 266  : 	}
; 267  : 
; 268  : 	SetTextColor(hDC, RGB(255, 255, 255));

  00345	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  0034a	56		 push	 esi
  0034b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 269  : 	TextOutA(hDC, GAMESERVER_WIDTH - 160, 5, DeveloperMessage[0], strlen(DeveloperMessage[0]));

  00351	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _DeveloperMessage
  00357	8b c1		 mov	 eax, ecx
  00359	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0035c	8d 64 24 00	 npad	 4
$LL40@PaintAllIn:
  00360	8a 18		 mov	 bl, BYTE PTR [eax]
  00362	40		 inc	 eax
  00363	84 db		 test	 bl, bl
  00365	75 f9		 jne	 SHORT $LL40@PaintAllIn
  00367	2b c2		 sub	 eax, edx
  00369	50		 push	 eax
  0036a	51		 push	 ecx
  0036b	6a 05		 push	 5
  0036d	68 16 03 00 00	 push	 790			; 00000316H
  00372	56		 push	 esi
  00373	ff d7		 call	 edi

; 270  : 	TextOutA(hDC, GAMESERVER_WIDTH - 160, 20, DeveloperMessage[1], strlen(DeveloperMessage[1]));

  00375	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _DeveloperMessage+4
  0037b	8b c1		 mov	 eax, ecx
  0037d	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL41@PaintAllIn:
  00380	8a 18		 mov	 bl, BYTE PTR [eax]
  00382	40		 inc	 eax
  00383	84 db		 test	 bl, bl
  00385	75 f9		 jne	 SHORT $LL41@PaintAllIn
  00387	2b c2		 sub	 eax, edx
  00389	50		 push	 eax
  0038a	51		 push	 ecx
  0038b	6a 14		 push	 20			; 00000014H
  0038d	68 16 03 00 00	 push	 790			; 00000316H
  00392	56		 push	 esi
  00393	ff d7		 call	 edi

; 271  : 	TextOutA(hDC, GAMESERVER_WIDTH - 160, 35, DeveloperMessage[2], strlen(DeveloperMessage[2]));	//Added Season

  00395	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _DeveloperMessage+8
  0039b	8b c1		 mov	 eax, ecx
  0039d	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL42@PaintAllIn:
  003a0	8a 18		 mov	 bl, BYTE PTR [eax]
  003a2	40		 inc	 eax
  003a3	84 db		 test	 bl, bl
  003a5	75 f9		 jne	 SHORT $LL42@PaintAllIn
  003a7	2b c2		 sub	 eax, edx
  003a9	50		 push	 eax
  003aa	51		 push	 ecx
  003ab	6a 23		 push	 35			; 00000023H
  003ad	68 16 03 00 00	 push	 790			; 00000316H
  003b2	56		 push	 esi
  003b3	ff d7		 call	 edi

; 272  : 
; 273  : 	if(g_ZtLicense.m_Enable)

  003b5	38 1d 01 00 00
	00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+1, bl
  003bb	74 4d		 je	 SHORT $LN49@PaintAllIn

; 274  : 	{
; 275  : 		char szLicense[50] = { 0 };

  003bd	6a 31		 push	 49			; 00000031H
  003bf	8d 4d c9	 lea	 ecx, DWORD PTR _szLicense$209407[ebp+1]
  003c2	6a 00		 push	 0
  003c4	51		 push	 ecx
  003c5	88 5d c8	 mov	 BYTE PTR _szLicense$209407[ebp], bl
  003c8	e8 00 00 00 00	 call	 _memset
  003cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 276  : 		sprintf(szLicense, "License: %s", g_ZtLicense.GetLicenseName());

  003d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  003d5	e8 00 00 00 00	 call	 ?GetLicenseName@CZtLicense@@QAEPADXZ ; CZtLicense::GetLicenseName
  003da	50		 push	 eax
  003db	8d 55 c8	 lea	 edx, DWORD PTR _szLicense$209407[ebp]
  003de	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IHBBFHDF@License?3?5?$CFs?$AA@
  003e3	52		 push	 edx
  003e4	e8 00 00 00 00	 call	 _sprintf

; 277  : 		TextOutA(hDC, GAMESERVER_WIDTH - 160, 50, szLicense, strlen(szLicense));

  003e9	8d 45 c8	 lea	 eax, DWORD PTR _szLicense$209407[ebp]
  003ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ef	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL43@PaintAllIn:
  003f2	8a 08		 mov	 cl, BYTE PTR [eax]
  003f4	40		 inc	 eax
  003f5	84 c9		 test	 cl, cl
  003f7	75 f9		 jne	 SHORT $LL43@PaintAllIn
  003f9	2b c2		 sub	 eax, edx
  003fb	50		 push	 eax
  003fc	8d 45 c8	 lea	 eax, DWORD PTR _szLicense$209407[ebp]
  003ff	50		 push	 eax
  00400	6a 32		 push	 50			; 00000032H
  00402	68 16 03 00 00	 push	 790			; 00000316H
  00407	56		 push	 esi
  00408	ff d7		 call	 edi
$LN49@PaintAllIn:

; 278  : 	}
; 279  : 
; 280  : 	TextOutA(hDC, GAMESERVER_WIDTH - 940, 5, DeveloperMessage[3], strlen(DeveloperMessage[3]));

  0040a	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _DeveloperMessage+12
  00410	8b c2		 mov	 eax, edx
  00412	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL44@PaintAllIn:
  00415	8a 08		 mov	 cl, BYTE PTR [eax]
  00417	40		 inc	 eax
  00418	84 c9		 test	 cl, cl
  0041a	75 f9		 jne	 SHORT $LL44@PaintAllIn
  0041c	2b c3		 sub	 eax, ebx
  0041e	50		 push	 eax
  0041f	52		 push	 edx
  00420	6a 05		 push	 5
  00422	6a 0a		 push	 10			; 0000000aH
  00424	56		 push	 esi
  00425	ff d7		 call	 edi

; 281  : 
; 282  : 
; 283  : 	if (g_ZtLicense.m_Enable && g_ZtLicense.NewVersion)

  00427	80 3d 01 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+1, 0
  0042e	0f 84 c3 00 00
	00		 je	 $LN48@PaintAllIn
  00434	80 3d 10 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+16, 0
  0043b	0f 84 b6 00 00
	00		 je	 $LN48@PaintAllIn

; 284  : 	{
; 285  : 		g_ZtLicense.DrawVersion = !g_ZtLicense.DrawVersion;

  00441	80 3d 11 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+17, 0
  00448	0f 94 c0	 sete	 al
  0044b	a2 11 00 00 00	 mov	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+17, al

; 286  : 
; 287  : 		if(g_ZtLicense.DrawVersion)

  00450	84 c0		 test	 al, al
  00452	0f 84 9f 00 00
	00		 je	 $LN48@PaintAllIn

; 288  : 		{
; 289  : 			SetTextColor(hDC, RGB(255, 0, 0));

  00458	68 ff 00 00 00	 push	 255			; 000000ffH
  0045d	56		 push	 esi
  0045e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 290  : 			TextOutA(hDC, GAMESERVER_WIDTH - 940, 17+10, ZTNEW_VERISON, strlen(ZTNEW_VERISON));

  00464	6a 0b		 push	 11			; 0000000bH
  00466	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KDOOKFAH@New?5Update?3?$AA@
  0046b	6a 1b		 push	 27			; 0000001bH
  0046d	6a 0a		 push	 10			; 0000000aH
  0046f	56		 push	 esi
  00470	ff d7		 call	 edi

; 291  : 
; 292  : 			char InfoServer[50] = { 0 };

  00472	6a 31		 push	 49			; 00000031H
  00474	8d 4d c9	 lea	 ecx, DWORD PTR _InfoServer$209418[ebp+1]
  00477	6a 00		 push	 0
  00479	51		 push	 ecx
  0047a	c6 45 c8 00	 mov	 BYTE PTR _InfoServer$209418[ebp], 0
  0047e	e8 00 00 00 00	 call	 _memset

; 293  : 			sprintf(InfoServer,"Version: %s",g_ZtLicense.VersionNum);

  00483	68 12 00 00 00	 push	 OFFSET ?g_ZtLicense@@3VCZtLicense@@A+18
  00488	8d 55 c8	 lea	 edx, DWORD PTR _InfoServer$209418[ebp]
  0048b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LMOOBOCC@Version?3?5?$CFs?$AA@
  00490	52		 push	 edx
  00491	e8 00 00 00 00	 call	 _sprintf

; 294  : 			TextOutA(hDC, GAMESERVER_WIDTH - 940, 31+10, InfoServer, strlen(InfoServer));

  00496	8d 45 c8	 lea	 eax, DWORD PTR _InfoServer$209418[ebp]
  00499	83 c4 18	 add	 esp, 24			; 00000018H
  0049c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0049f	90		 npad	 1
$LL45@PaintAllIn:
  004a0	8a 10		 mov	 dl, BYTE PTR [eax]
  004a2	40		 inc	 eax
  004a3	84 d2		 test	 dl, dl
  004a5	75 f9		 jne	 SHORT $LL45@PaintAllIn
  004a7	2b c1		 sub	 eax, ecx
  004a9	50		 push	 eax
  004aa	8d 45 c8	 lea	 eax, DWORD PTR _InfoServer$209418[ebp]
  004ad	50		 push	 eax
  004ae	6a 29		 push	 41			; 00000029H
  004b0	6a 0a		 push	 10			; 0000000aH
  004b2	56		 push	 esi
  004b3	ff d7		 call	 edi

; 295  : 
; 296  : 			char InfoServer2[50] = { 0 };

  004b5	6a 31		 push	 49			; 00000031H
  004b7	8d 4d 95	 lea	 ecx, DWORD PTR _InfoServer2$209420[ebp+1]
  004ba	6a 00		 push	 0
  004bc	51		 push	 ecx
  004bd	c6 45 94 00	 mov	 BYTE PTR _InfoServer2$209420[ebp], 0
  004c1	e8 00 00 00 00	 call	 _memset

; 297  : 			sprintf(InfoServer2,"Date: %s",g_ZtLicense.VersionDate);

  004c6	68 44 00 00 00	 push	 OFFSET ?g_ZtLicense@@3VCZtLicense@@A+68
  004cb	8d 55 94	 lea	 edx, DWORD PTR _InfoServer2$209420[ebp]
  004ce	68 00 00 00 00	 push	 OFFSET ??_C@_08LHOANCIJ@Date?3?5?$CFs?$AA@
  004d3	52		 push	 edx
  004d4	e8 00 00 00 00	 call	 _sprintf

; 298  : 			TextOutA(hDC, GAMESERVER_WIDTH - 940, 45+10, InfoServer2, strlen(InfoServer2));

  004d9	8d 45 94	 lea	 eax, DWORD PTR _InfoServer2$209420[ebp]
  004dc	83 c4 18	 add	 esp, 24			; 00000018H
  004df	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL46@PaintAllIn:
  004e2	8a 10		 mov	 dl, BYTE PTR [eax]
  004e4	40		 inc	 eax
  004e5	84 d2		 test	 dl, dl
  004e7	75 f9		 jne	 SHORT $LL46@PaintAllIn
  004e9	2b c1		 sub	 eax, ecx
  004eb	50		 push	 eax
  004ec	8d 45 94	 lea	 eax, DWORD PTR _InfoServer2$209420[ebp]
  004ef	50		 push	 eax
  004f0	6a 37		 push	 55			; 00000037H
  004f2	6a 0a		 push	 10			; 0000000aH
  004f4	56		 push	 esi
  004f5	ff d7		 call	 edi
$LN48@PaintAllIn:

; 299  : 		}
; 300  : 	}
; 301  : 
; 302  : 	if (g_ZtLicense.m_Enable)
; 303  : 	{
; 304  : 
; 305  : 	}
; 306  : #else
; 307  : 
; 308  : 	if ( this->m_bValidJSConnection != FALSE && this->m_bValidDSConnection != FALSE && this->m_bValidFSConnection != FALSE )
; 309  : 		FillRect(hDC, &rect, this->m_hNormalBrush);
; 310  : 	else
; 311  : 		FillRect(hDC, &rect, this->m_hAbnormalBrush);
; 312  : 
; 313  : 	if ( this->m_bValidJSConnection == FALSE )
; 314  : 	{
; 315  : 		SetTextColor(hDC, RGB(255, 0, 0));
; 316  : 		TextOut(hDC, iTopLeftX, iTopLeftY+iLineCount*15, ErrorMessge[0], strlen(ErrorMessge[0]));
; 317  : 		iLineCount++;
; 318  : 	}
; 319  : 
; 320  : 	if ( this->m_bValidFSConnection == FALSE )
; 321  : 	{
; 322  : 		SetTextColor(hDC, RGB(255, 0, 0));
; 323  : 		TextOut(hDC, iTopLeftX,  iTopLeftY+iLineCount*15, ErrorMessge[1], strlen(ErrorMessge[1]));
; 324  : 		iLineCount++;
; 325  : 	}
; 326  : 
; 327  : 	if ( this->m_bValidDSConnection == FALSE )
; 328  : 	{
; 329  : 		SetTextColor(hDC, RGB(255, 0, 0));
; 330  : 		TextOut(hDC, iTopLeftX, iTopLeftY+iLineCount*15, ErrorMessge[2], strlen(ErrorMessge[2]));
; 331  : 		iLineCount++;
; 332  : 	}
; 333  : 
; 334  : 	if ( this->m_bValidZTDSConnection == FALSE )
; 335  : 	{
; 336  : 		SetTextColor(hDC, RGB(255, 0, 0));
; 337  : 		TextOut(hDC, iTopLeftX, iTopLeftY+iLineCount*15, ErrorMessge[3], strlen(ErrorMessge[3]));
; 338  : 		iLineCount++;
; 339  : 	}
; 340  : 
; 341  : 	if ( this->m_bValidEVDSConnection == FALSE )
; 342  : 	{
; 343  : 		SetTextColor(hDC, RGB(255, 0, 0));
; 344  : 		TextOut(hDC, iTopLeftX,  iTopLeftY+iLineCount*15, ErrorMessge[4], strlen(ErrorMessge[4]));
; 345  : 		iLineCount++;
; 346  : 	}
; 347  : 
; 348  : 	if ( this->m_bValidRKDSConnection == FALSE )
; 349  : 	{
; 350  : 		SetTextColor(hDC, RGB(255, 0, 0));
; 351  : 		TextOut(hDC, iTopLeftX, iTopLeftY+iLineCount*15, ErrorMessge[5], strlen(ErrorMessge[5]));
; 352  : 		iLineCount++;
; 353  : 	}
; 354  : 
; 355  : #endif
; 356  : 
; 357  : 	if ( this->m_bValidJSConnection == FALSE || this->m_bValidDSConnection == FALSE || this->m_bValidFSConnection == FALSE || this->m_bValidZTDSConnection == FALSE || this->m_bValidEVDSConnection == FALSE || this->m_bValidRKDSConnection == FALSE )

  004f7	8b 5d 80	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  004fa	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  004fe	74 1e		 je	 SHORT $LN1@PaintAllIn
  00500	83 7b 0c 00	 cmp	 DWORD PTR [ebx+12], 0
  00504	74 18		 je	 SHORT $LN1@PaintAllIn
  00506	83 7b 08 00	 cmp	 DWORD PTR [ebx+8], 0
  0050a	74 12		 je	 SHORT $LN1@PaintAllIn
  0050c	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  00510	74 0c		 je	 SHORT $LN1@PaintAllIn
  00512	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
  00516	74 06		 je	 SHORT $LN1@PaintAllIn
  00518	83 7b 18 00	 cmp	 DWORD PTR [ebx+24], 0
  0051c	75 26		 jne	 SHORT $LN2@PaintAllIn
$LN1@PaintAllIn:

; 358  : 	{
; 359  : 		SERVER_CONN_STATE_LOG.Output("Server Interconnection Check - [FS/%d] [DS/%d] [ZT/%d] [ES/%d] [RS/%d]", this->m_bValidFSConnection, this->m_bValidDSConnection, this->m_bValidZTDSConnection, this->m_bValidEVDSConnection,	this->m_bValidRKDSConnection);

  0051e	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00521	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00524	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00527	51		 push	 ecx
  00528	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0052b	52		 push	 edx
  0052c	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  0052f	50		 push	 eax
  00530	51		 push	 ecx
  00531	52		 push	 edx
  00532	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@MLPCFHN@Server?5Interconnection?5Check?5?9?5?$FL@
  00537	68 00 00 00 00	 push	 OFFSET ?SERVER_CONN_STATE_LOG@@3VCLogToFile@@A ; SERVER_CONN_STATE_LOG
  0053c	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  00541	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@PaintAllIn:

; 360  : 	}
; 361  : 
; 362  : 	HFONT pOldFont = (HFONT)SelectObject(hDC, this->m_hFont);

  00544	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00547	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SelectObject@8
  0054d	50		 push	 eax
  0054e	56		 push	 esi
  0054f	ff d3		 call	 ebx

; 363  : 
; 364  : #if(NEW_WINDOW==1)	//GAMESERVER_WIDTH / 2 - 100
; 365  : 	//SetTextColor(hDC, RGB(123, 123, 250));
; 366  : 	//SetTextColor(hDC, RGB(130, 170, 190));
; 367  : 	SetTextColor(hDC, RGB(255, 255, 255));

  00551	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  00556	56		 push	 esi
  00557	89 85 78 ff ff
	ff		 mov	 DWORD PTR _pOldFont$[ebp], eax
  0055d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 368  : 	TextOutA(hDC, GAMESERVER_WIDTH / 2 - 320, 15, ServerTypeText[0], strlen(ServerTypeText[0]));

  00563	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ServerTypeText
  00569	8b c1		 mov	 eax, ecx
  0056b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0056e	89 55 80	 mov	 DWORD PTR tv697[ebp], edx
$LL47@PaintAllIn:
  00571	8a 10		 mov	 dl, BYTE PTR [eax]
  00573	40		 inc	 eax
  00574	84 d2		 test	 dl, dl
  00576	75 f9		 jne	 SHORT $LL47@PaintAllIn
  00578	2b 45 80	 sub	 eax, DWORD PTR tv697[ebp]
  0057b	50		 push	 eax
  0057c	51		 push	 ecx
  0057d	6a 0f		 push	 15			; 0000000fH
  0057f	68 9b 00 00 00	 push	 155			; 0000009bH
  00584	56		 push	 esi
  00585	ff d7		 call	 edi

; 369  : #else
; 370  : 	SetTextColor(hDC, RGB(250, 250, 250));
; 371  : 	TextOut(hDC, 250, 20, ServerTypeText[0], strlen(ServerTypeText[0]));
; 372  : #endif
; 373  : 	
; 374  : 	SelectObject(hDC, pOldFont);

  00587	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pOldFont$[ebp]
  0058d	50		 push	 eax
  0058e	56		 push	 esi
  0058f	ff d3		 call	 ebx

; 375  : 	SetBkMode(hDC, iOldBkMode);

  00591	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _iOldBkMode$[ebp]
  00597	51		 push	 ecx
  00598	56		 push	 esi
  00599	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 376  : 	ReleaseDC(hWnd, hDC);

  0059f	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _hWnd$GSCopy$[ebp]
  005a5	56		 push	 esi
  005a6	52		 push	 edx
  005a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 377  : }

  005ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005b0	5f		 pop	 edi
  005b1	5e		 pop	 esi
  005b2	33 cd		 xor	 ecx, ebp
  005b4	5b		 pop	 ebx
  005b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005ba	8b e5		 mov	 esp, ebp
  005bc	5d		 pop	 ebp
  005bd	c2 0c 00	 ret	 12			; 0000000cH
?PaintAllInfo@TServerInfoDisplayer@@QAEXPAUHWND__@@HH@Z ENDP ; TServerInfoDisplayer::PaintAllInfo
_TEXT	ENDS
PUBLIC	??_7TServerInfoDisplayer@@6B@			; TServerInfoDisplayer::`vftable'
PUBLIC	??0TServerInfoDisplayer@@QAE@XZ			; TServerInfoDisplayer::TServerInfoDisplayer
PUBLIC	??_R4TServerInfoDisplayer@@6B@			; TServerInfoDisplayer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTServerInfoDisplayer@@@8		; TServerInfoDisplayer `RTTI Type Descriptor'
PUBLIC	??_R3TServerInfoDisplayer@@8			; TServerInfoDisplayer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TServerInfoDisplayer@@8			; TServerInfoDisplayer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TServerInfoDisplayer@@8		; TServerInfoDisplayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETServerInfoDisplayer@@UAEPAXI@Z:PROC	; TServerInfoDisplayer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@TServerInfoDisplayer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TServerInfoDisplayer@@8 DD FLAT:??_R0?AVTServerInfoDisplayer@@@8 ; TServerInfoDisplayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TServerInfoDisplayer@@8
rdata$r	ENDS
;	COMDAT ??_R2TServerInfoDisplayer@@8
rdata$r	SEGMENT
??_R2TServerInfoDisplayer@@8 DD FLAT:??_R1A@?0A@EA@TServerInfoDisplayer@@8 ; TServerInfoDisplayer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TServerInfoDisplayer@@8
rdata$r	SEGMENT
??_R3TServerInfoDisplayer@@8 DD 00H			; TServerInfoDisplayer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TServerInfoDisplayer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTServerInfoDisplayer@@@8
_DATA	SEGMENT
??_R0?AVTServerInfoDisplayer@@@8 DD FLAT:??_7type_info@@6B@ ; TServerInfoDisplayer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTServerInfoDisplayer@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TServerInfoDisplayer@@6B@
rdata$r	SEGMENT
??_R4TServerInfoDisplayer@@6B@ DD 00H			; TServerInfoDisplayer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTServerInfoDisplayer@@@8
	DD	FLAT:??_R3TServerInfoDisplayer@@8
rdata$r	ENDS
;	COMDAT ??_7TServerInfoDisplayer@@6B@
CONST	SEGMENT
??_7TServerInfoDisplayer@@6B@ DD FLAT:??_R4TServerInfoDisplayer@@6B@ ; TServerInfoDisplayer::`vftable'
	DD	FLAT:??_ETServerInfoDisplayer@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0TServerInfoDisplayer@@QAE@XZ
_TEXT	SEGMENT
??0TServerInfoDisplayer@@QAE@XZ PROC			; TServerInfoDisplayer::TServerInfoDisplayer, COMDAT
; _this$ = ecx

; 63   : 	this->m_bValidJSConnection = FALSE;

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7TServerInfoDisplayer@@6B@
  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 64   : 	this->m_bValidFSConnection = FALSE;

  0000e	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 65   : 	this->m_bValidDSConnection = FALSE;

  00011	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 66   : 	this->m_bValidZTDSConnection = FALSE;

  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 67   : 	this->m_bValidEVDSConnection = FALSE;

  00017	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 68   : 	this->m_bValidRKDSConnection = FALSE;

  0001a	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 69   : 
; 70   : 	this->InitGDIObject();

  0001d	e8 00 00 00 00	 call	 ?InitGDIObject@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::InitGDIObject

; 71   : }

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c3		 ret	 0
??0TServerInfoDisplayer@@QAE@XZ ENDP			; TServerInfoDisplayer::TServerInfoDisplayer
_TEXT	ENDS
PUBLIC	??1TServerInfoDisplayer@@UAE@XZ			; TServerInfoDisplayer::~TServerInfoDisplayer
; Function compile flags: /Ogtp
;	COMDAT ??1TServerInfoDisplayer@@UAE@XZ
_TEXT	SEGMENT
??1TServerInfoDisplayer@@UAE@XZ PROC			; TServerInfoDisplayer::~TServerInfoDisplayer, COMDAT
; _this$ = ecx

; 74   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TServerInfoDisplayer@@6B@

; 75   : 	this->DelGDIObject();

  00006	e9 00 00 00 00	 jmp	 ?DelGDIObject@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::DelGDIObject
??1TServerInfoDisplayer@@UAE@XZ ENDP			; TServerInfoDisplayer::~TServerInfoDisplayer
_TEXT	ENDS
PUBLIC	?Run@TServerInfoDisplayer@@QAEXPAUHWND__@@@Z	; TServerInfoDisplayer::Run
; Function compile flags: /Ogtp
;	COMDAT ?Run@TServerInfoDisplayer@@QAEXPAUHWND__@@@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
?Run@TServerInfoDisplayer@@QAEXPAUHWND__@@@Z PROC	; TServerInfoDisplayer::Run, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 106  : 	this->CheckDSConnection();

  00006	e8 00 00 00 00	 call	 ?CheckDSConnection@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::CheckDSConnection

; 107  : 	this->CheckJSConnection();

  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?CheckJSConnection@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::CheckJSConnection

; 108  : 	this->CheckFSConnection();

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?CheckFSConnection@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::CheckFSConnection

; 109  : 	this->CheckZTDSConnection();

  00019	e8 00 00 00 00	 call	 ?CheckZTDSConnection@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::CheckZTDSConnection

; 110  : 	this->CheckEVDSConnection();

  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?CheckEVDSConnection@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::CheckEVDSConnection

; 111  : 	this->CheckRKDSConnection();

  00025	e8 00 00 00 00	 call	 ?CheckRKDSConnection@TServerInfoDisplayer@@QAEXXZ ; TServerInfoDisplayer::CheckRKDSConnection

; 112  : 
; 113  : 
; 114  : 	this->CheckLogFileSize();
; 115  : 	this->PaintAllInfo(hWnd, 0, 20);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0002d	6a 14		 push	 20			; 00000014H
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?PaintAllInfo@TServerInfoDisplayer@@QAEXPAUHWND__@@HH@Z ; TServerInfoDisplayer::PaintAllInfo
  00037	5e		 pop	 esi

; 116  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?Run@TServerInfoDisplayer@@QAEXPAUHWND__@@@Z ENDP	; TServerInfoDisplayer::Run
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GTServerInfoDisplayer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTServerInfoDisplayer@@UAEPAXI@Z PROC		; TServerInfoDisplayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TServerInfoDisplayer@@UAE@XZ ; TServerInfoDisplayer::~TServerInfoDisplayer
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GTServerInfoDisplayer@@UAEPAXI@Z ENDP		; TServerInfoDisplayer::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ServerInfoDisplayer@@YAXXZ
text$yc	SEGMENT
??__Eg_ServerInfoDisplayer@@YAXXZ PROC			; `dynamic initializer for 'g_ServerInfoDisplayer'', COMDAT

; 13   : TServerInfoDisplayer g_ServerInfoDisplayer;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ServerInfoDisplayer@@3VTServerInfoDisplayer@@A ; g_ServerInfoDisplayer
  00005	e8 00 00 00 00	 call	 ??0TServerInfoDisplayer@@QAE@XZ ; TServerInfoDisplayer::TServerInfoDisplayer
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ServerInfoDisplayer@@YAXXZ ; `dynamic atexit destructor for 'g_ServerInfoDisplayer''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ServerInfoDisplayer@@YAXXZ ENDP			; `dynamic initializer for 'g_ServerInfoDisplayer''
text$yc	ENDS
PUBLIC	??_C@_0BG@CIFCKEJJ@SERVER_CONN_STATE_LOG?$AA@	; `string'
PUBLIC	??_C@_0BI@LLABDCAE@?4?2SERVER_CONN_STATE_LOG?$AA@ ; `string'
EXTRN	??0CLogToFile@@QAE@QAD0H@Z:PROC			; CLogToFile::CLogToFile
;	COMDAT ??_C@_0BG@CIFCKEJJ@SERVER_CONN_STATE_LOG?$AA@
CONST	SEGMENT
??_C@_0BG@CIFCKEJJ@SERVER_CONN_STATE_LOG?$AA@ DB 'SERVER_CONN_STATE_LOG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LLABDCAE@?4?2SERVER_CONN_STATE_LOG?$AA@
CONST	SEGMENT
??_C@_0BI@LLABDCAE@?4?2SERVER_CONN_STATE_LOG?$AA@ DB '.\SERVER_CONN_STATE'
	DB	'_LOG', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??__ESERVER_CONN_STATE_LOG@@YAXXZ
text$yc	SEGMENT
??__ESERVER_CONN_STATE_LOG@@YAXXZ PROC			; `dynamic initializer for 'SERVER_CONN_STATE_LOG'', COMDAT

; 14   : CLogToFile SERVER_CONN_STATE_LOG("SERVER_CONN_STATE_LOG", ".\\SERVER_CONN_STATE_LOG", 1);

  00000	6a 01		 push	 1
  00002	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LLABDCAE@?4?2SERVER_CONN_STATE_LOG?$AA@
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CIFCKEJJ@SERVER_CONN_STATE_LOG?$AA@
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?SERVER_CONN_STATE_LOG@@3VCLogToFile@@A ; SERVER_CONN_STATE_LOG
  00011	e8 00 00 00 00	 call	 ??0CLogToFile@@QAE@QAD0H@Z ; CLogToFile::CLogToFile
  00016	68 00 00 00 00	 push	 OFFSET ??__FSERVER_CONN_STATE_LOG@@YAXXZ ; `dynamic atexit destructor for 'SERVER_CONN_STATE_LOG''
  0001b	e8 00 00 00 00	 call	 _atexit
  00020	59		 pop	 ecx
  00021	c3		 ret	 0
??__ESERVER_CONN_STATE_LOG@@YAXXZ ENDP			; `dynamic initializer for 'SERVER_CONN_STATE_LOG''
text$yc	ENDS
EXTRN	??1CLogToFile@@QAE@XZ:PROC			; CLogToFile::~CLogToFile
; Function compile flags: /Ogtp
;	COMDAT ??__FSERVER_CONN_STATE_LOG@@YAXXZ
text$yd	SEGMENT
??__FSERVER_CONN_STATE_LOG@@YAXXZ PROC			; `dynamic atexit destructor for 'SERVER_CONN_STATE_LOG'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SERVER_CONN_STATE_LOG@@3VCLogToFile@@A ; SERVER_CONN_STATE_LOG
  00005	e9 00 00 00 00	 jmp	 ??1CLogToFile@@QAE@XZ	; CLogToFile::~CLogToFile
??__FSERVER_CONN_STATE_LOG@@YAXXZ ENDP			; `dynamic atexit destructor for 'SERVER_CONN_STATE_LOG''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__Fg_ServerInfoDisplayer@@YAXXZ
text$yd	SEGMENT
??__Fg_ServerInfoDisplayer@@YAXXZ PROC			; `dynamic atexit destructor for 'g_ServerInfoDisplayer'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ServerInfoDisplayer@@3VTServerInfoDisplayer@@A ; g_ServerInfoDisplayer
  00005	e9 00 00 00 00	 jmp	 ??1TServerInfoDisplayer@@UAE@XZ ; TServerInfoDisplayer::~TServerInfoDisplayer
??__Fg_ServerInfoDisplayer@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_ServerInfoDisplayer''
text$yd	ENDS
PUBLIC	?SERVER_CONN_STATE_LOG@@3VCLogToFile@@A		; SERVER_CONN_STATE_LOG
PUBLIC	?g_ServerInfoDisplayer@@3VTServerInfoDisplayer@@A ; g_ServerInfoDisplayer
_BSS	SEGMENT
?SERVER_CONN_STATE_LOG@@3VCLogToFile@@A DB 010228H DUP (?) ; SERVER_CONN_STATE_LOG
?g_ServerInfoDisplayer@@3VTServerInfoDisplayer@@A DB 028H DUP (?) ; g_ServerInfoDisplayer
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ServerInfoDisplayer$initializer$ DD FLAT:??__Eg_ServerInfoDisplayer@@YAXXZ
_SERVER_CONN_STATE_LOG$initializer$ DD FLAT:??__ESERVER_CONN_STATE_LOG@@YAXXZ
CRT$XCU	ENDS
END
