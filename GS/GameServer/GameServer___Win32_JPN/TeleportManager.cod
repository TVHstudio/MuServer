; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\TeleportManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?NPCClick@cTeleportManager@@QAEXPAUOBJECTSTRUCT@@0@Z ; cTeleportManager::NPCClick
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?GDSaveUserInfo@GameShop@@QAEXH@Z:PROC		; GameShop::GDSaveUserInfo
EXTRN	?gGameShop@@3VGameShop@@A:BYTE			; gGameShop
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?MsgNormal@@YAXHPADZZ:PROC			; MsgNormal
EXTRN	?GetText@CZtText@@QAEPADH@Z:PROC		; CZtText::GetText
EXTRN	?g_ZtText@@3VCZtText@@A:BYTE			; g_ZtText
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\teleportmanager.cpp
;	COMDAT ?NPCClick@cTeleportManager@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv690 = 8						; size = 4
tv685 = 8						; size = 4
_lpNpc$ = 8						; size = 4
_lpObj$ = 12						; size = 4
?NPCClick@cTeleportManager@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; cTeleportManager::NPCClick, COMDAT
; _this$ = ecx

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx

; 190  : 	if(!this->Enable) return;

  00006	80 38 00	 cmp	 BYTE PTR [eax], 0
  00009	89 45 fc	 mov	 DWORD PTR _this$[ebp], eax
  0000c	0f 84 cc 03 00
	00		 je	 $LN31@NPCClick

; 191  : 
; 192  : 	for(int a=0;a<this->CountNPC;a++)

  00012	53		 push	 ebx
  00013	8b 98 c4 2b 00
	00		 mov	 ebx, DWORD PTR [eax+11204]
  00019	33 d2		 xor	 edx, edx
  0001b	85 db		 test	 ebx, ebx
  0001d	0f 8e ba 03 00
	00		 jle	 $LN39@NPCClick
  00023	57		 push	 edi
  00024	8b 7d 08	 mov	 edi, DWORD PTR _lpNpc$[ebp]
  00027	0f b7 8f b8 00
	00 00		 movzx	 ecx, WORD PTR [edi+184]
  0002e	83 c0 04	 add	 eax, 4
  00031	56		 push	 esi
$LL33@NPCClick:

; 193  : 	{
; 194  : 		if(this->NpcBase[a].NPC == lpNpc->Class && 
; 195  : 			this->NpcBase[a].MAP == lpNpc->MapNumber &&
; 196  : 			this->NpcBase[a].X == lpNpc->X &&
; 197  : 			this->NpcBase[a].Y == lpNpc->Y ||
; 198  : 			this->NpcBase[a].NPC == lpNpc->Class &&
; 199  : 			this->NpcBase[a].MAP == -1)

  00032	0f bf 30	 movsx	 esi, WORD PTR [eax]
  00035	3b f1		 cmp	 esi, ecx
  00037	75 27		 jne	 SHORT $LN28@NPCClick
  00039	0f b6 8f 49 01
	00 00		 movzx	 ecx, BYTE PTR [edi+329]
  00040	66 39 48 02	 cmp	 WORD PTR [eax+2], cx
  00044	75 1a		 jne	 SHORT $LN28@NPCClick
  00046	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  0004a	66 3b 8f 44 01
	00 00		 cmp	 cx, WORD PTR [edi+324]
  00051	75 0d		 jne	 SHORT $LN28@NPCClick
  00053	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  00057	66 3b 8f 46 01
	00 00		 cmp	 cx, WORD PTR [edi+326]
  0005e	74 23		 je	 SHORT $LN29@NPCClick
$LN28@NPCClick:
  00060	0f b7 8f b8 00
	00 00		 movzx	 ecx, WORD PTR [edi+184]
  00067	3b f1		 cmp	 esi, ecx
  00069	75 07		 jne	 SHORT $LN32@NPCClick
  0006b	66 83 78 02 ff	 cmp	 WORD PTR [eax+2], -1
  00070	74 11		 je	 SHORT $LN29@NPCClick
$LN32@NPCClick:

; 191  : 
; 192  : 	for(int a=0;a<this->CountNPC;a++)

  00072	42		 inc	 edx
  00073	83 c0 24	 add	 eax, 36			; 00000024H
  00076	3b d3		 cmp	 edx, ebx
  00078	7c b8		 jl	 SHORT $LL33@NPCClick
  0007a	5e		 pop	 esi
  0007b	5f		 pop	 edi
  0007c	5b		 pop	 ebx

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
$LN29@NPCClick:

; 200  : 		{
; 201  : 			// ----
; 202  : 
; 203  : 			if(this->NpcBase[a].Level > lpObj->Level)

  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 75 0c	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00089	8d 14 d2	 lea	 edx, DWORD PTR [edx+edx*8]
  0008c	8d 3c 90	 lea	 edi, DWORD PTR [eax+edx*4]
  0008f	0f b7 47 12	 movzx	 eax, WORD PTR [edi+18]
  00093	66 3b 86 be 00
	00 00		 cmp	 ax, WORD PTR [esi+190]
  0009a	7e 0e		 jle	 SHORT $LN27@NPCClick

; 204  : 			{
; 205  : 				MsgNormal(lpObj->m_Index,g_ZtText.GetText(255),this->NpcBase[a].Level);

  0009c	0f bf c8	 movsx	 ecx, ax
  0009f	51		 push	 ecx
  000a0	68 ff 00 00 00	 push	 255			; 000000ffH

; 206  : 				return;

  000a5	e9 df 02 00 00	 jmp	 $LN55@NPCClick
$LN27@NPCClick:

; 207  : 			}
; 208  : 
; 209  : 			if(this->NpcBase[a].Reset > lpObj->Reset)

  000aa	0f bf 47 14	 movsx	 eax, WORD PTR [edi+20]
  000ae	3b 86 90 22 00
	00		 cmp	 eax, DWORD PTR [esi+8848]
  000b4	7e 25		 jle	 SHORT $LN26@NPCClick

; 210  : 			{
; 211  : 				MsgNormal(lpObj->m_Index,g_ZtText.GetText(256),this->NpcBase[a].Reset);

  000b6	50		 push	 eax
  000b7	68 00 01 00 00	 push	 256			; 00000100H
  000bc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000c1	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  000c6	50		 push	 eax
  000c7	8b 06		 mov	 eax, DWORD PTR [esi]
  000c9	50		 push	 eax

; 310  : 					{
; 311  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->NpcBase[a].Value);

  000ca	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d2	5e		 pop	 esi
  000d3	5f		 pop	 edi
  000d4	5b		 pop	 ebx

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN26@NPCClick:

; 212  : 				return;
; 213  : 			}
; 214  : 
; 215  : 			if(this->NpcBase[a].GReset > lpObj->GReset)

  000db	0f bf 47 16	 movsx	 eax, WORD PTR [edi+22]
  000df	3b 86 94 22 00
	00		 cmp	 eax, DWORD PTR [esi+8852]
  000e5	7e 25		 jle	 SHORT $LN25@NPCClick

; 216  : 			{
; 217  : 				MsgNormal(lpObj->m_Index,g_ZtText.GetText(257),this->NpcBase[a].GReset);

  000e7	50		 push	 eax
  000e8	68 01 01 00 00	 push	 257			; 00000101H
  000ed	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000f2	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  000f7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f9	50		 push	 eax
  000fa	51		 push	 ecx

; 310  : 					{
; 311  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->NpcBase[a].Value);

  000fb	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	5e		 pop	 esi
  00104	5f		 pop	 edi
  00105	5b		 pop	 ebx

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN25@NPCClick:

; 218  : 				return;
; 219  : 			}
; 220  : 
; 221  : 			if( g_ZtLicense.CheckUser(eZtUB::Local)		 || 
; 222  : 				g_ZtLicense.CheckUser(eZtUB::SILVER1)	 || 
; 223  : 				g_ZtLicense.CheckUser(eZtUB::SILVER2)	 ||
; 224  : 				g_ZtLicense.CheckUser(eZtUB::Gredy)		 || 
; 225  : 				g_ZtLicense.CheckUser(eZtUB::GredyLocal) || 
; 226  : 				g_ZtLicense.CheckUser(eZtUB::Gredy2) )

  0010c	6a 00		 push	 0
  0010e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00113	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00118	84 c0		 test	 al, al
  0011a	75 50		 jne	 SHORT $LN23@NPCClick
  0011c	6a 07		 push	 7
  0011e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00123	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00128	84 c0		 test	 al, al
  0012a	75 40		 jne	 SHORT $LN23@NPCClick
  0012c	6a 08		 push	 8
  0012e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00133	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00138	84 c0		 test	 al, al
  0013a	75 30		 jne	 SHORT $LN23@NPCClick
  0013c	6a 20		 push	 32			; 00000020H
  0013e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00143	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00148	84 c0		 test	 al, al
  0014a	75 20		 jne	 SHORT $LN23@NPCClick
  0014c	6a 21		 push	 33			; 00000021H
  0014e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00153	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00158	84 c0		 test	 al, al
  0015a	75 10		 jne	 SHORT $LN23@NPCClick
  0015c	6a 22		 push	 34			; 00000022H
  0015e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00163	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00168	84 c0		 test	 al, al
  0016a	74 48		 je	 SHORT $LN21@NPCClick
$LN23@NPCClick:

; 227  : 			{
; 228  : 				if(this->NpcBase[a].MaxReset < lpObj->Reset)

  0016c	0f bf 47 18	 movsx	 eax, WORD PTR [edi+24]
  00170	3b 86 90 22 00
	00		 cmp	 eax, DWORD PTR [esi+8848]
  00176	7d 0b		 jge	 SHORT $LN22@NPCClick

; 229  : 				{
; 230  : 					MsgNormal(lpObj->m_Index,g_ZtText.GetText(256),this->NpcBase[a].MaxReset);

  00178	50		 push	 eax
  00179	68 00 01 00 00	 push	 256			; 00000100H

; 231  : 					return;

  0017e	e9 06 02 00 00	 jmp	 $LN55@NPCClick
$LN22@NPCClick:

; 232  : 				}
; 233  : 
; 234  : 				if(this->NpcBase[a].MaxGReset < lpObj->GReset)

  00183	0f bf 47 1a	 movsx	 eax, WORD PTR [edi+26]
  00187	3b 86 94 22 00
	00		 cmp	 eax, DWORD PTR [esi+8852]
  0018d	7d 25		 jge	 SHORT $LN21@NPCClick

; 235  : 				{
; 236  : 					MsgNormal(lpObj->m_Index,g_ZtText.GetText(257),this->NpcBase[a].MaxGReset);

  0018f	50		 push	 eax
  00190	68 01 01 00 00	 push	 257			; 00000101H
  00195	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0019a	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0019f	50		 push	 eax
  001a0	8b 06		 mov	 eax, DWORD PTR [esi]
  001a2	50		 push	 eax

; 310  : 					{
; 311  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->NpcBase[a].Value);

  001a3	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ab	5e		 pop	 esi
  001ac	5f		 pop	 edi
  001ad	5b		 pop	 ebx

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 08 00	 ret	 8
$LN21@NPCClick:

; 237  : 					return;
; 238  : 				}
; 239  : 			}
; 240  : 
; 241  : 			if(this->NpcBase[a].Premium)

  001b4	66 83 7f 1c 00	 cmp	 WORD PTR [edi+28], 0
  001b9	74 6d		 je	 SHORT $LN14@NPCClick

; 242  : 			{
; 243  : 				if(g_ZtLicense.CheckUser(eZtUB::SILVER1) || g_ZtLicense.CheckUser(eZtUB::SILVER2))

  001bb	6a 07		 push	 7
  001bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001c2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001c7	84 c0		 test	 al, al
  001c9	75 3d		 jne	 SHORT $LN18@NPCClick
  001cb	6a 08		 push	 8
  001cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001d2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001d7	84 c0		 test	 al, al
  001d9	75 2d		 jne	 SHORT $LN18@NPCClick

; 249  : 					}
; 250  : 				}
; 251  : 				else
; 252  : 				{
; 253  : 					if(lpObj->PremiumTime == 0)

  001db	83 be b8 22 00
	00 00		 cmp	 DWORD PTR [esi+8888], 0
  001e2	75 44		 jne	 SHORT $LN14@NPCClick

; 254  : 					{
; 255  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(259));

  001e4	68 03 01 00 00	 push	 259			; 00000103H
  001e9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  001ee	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001f3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001f5	50		 push	 eax
  001f6	51		 push	 ecx
  001f7	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  001fc	83 c4 08	 add	 esp, 8
  001ff	5e		 pop	 esi
  00200	5f		 pop	 edi
  00201	5b		 pop	 ebx

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  00202	8b e5		 mov	 esp, ebp
  00204	5d		 pop	 ebp
  00205	c2 08 00	 ret	 8
$LN18@NPCClick:

; 244  : 				{
; 245  : 					if(this->NpcBase[a].Premium != lpObj->PremiumTimeType || lpObj->PremiumTime == 0)

  00208	0f bf 47 1c	 movsx	 eax, WORD PTR [edi+28]
  0020c	3b 86 bc 22 00
	00		 cmp	 eax, DWORD PTR [esi+8892]
  00212	75 09		 jne	 SHORT $LN16@NPCClick
  00214	83 be b8 22 00
	00 00		 cmp	 DWORD PTR [esi+8888], 0
  0021b	75 0b		 jne	 SHORT $LN14@NPCClick
$LN16@NPCClick:

; 246  : 					{
; 247  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(258), this->NpcBase[a].Premium);

  0021d	50		 push	 eax
  0021e	68 02 01 00 00	 push	 258			; 00000102H

; 248  : 						return;

  00223	e9 61 01 00 00	 jmp	 $LN55@NPCClick
$LN14@NPCClick:

; 256  : 						return;
; 257  : 					}
; 258  : 				}
; 259  : 			}
; 260  : 
; 261  : 			switch(this->NpcBase[a].Price)

  00228	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0022b	48		 dec	 eax
  0022c	83 f8 04	 cmp	 eax, 4
  0022f	0f 87 8c 01 00
	00		 ja	 $LN1@NPCClick
  00235	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN58@NPCClick[eax*4]
$LN11@NPCClick:

; 262  : 			{
; 263  : 			case 1:
; 264  : 				{
; 265  : 					if(this->NpcBase[a].Value > lpObj->Money )

  0023c	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  0023f	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  00245	3b c8		 cmp	 ecx, eax
  00247	7e 25		 jle	 SHORT $LN10@NPCClick

; 266  : 					{
; 267  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(260),this->NpcBase[a].Value);

  00249	51		 push	 ecx
  0024a	68 04 01 00 00	 push	 260			; 00000104H
  0024f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00254	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00259	50		 push	 eax
  0025a	8b 06		 mov	 eax, DWORD PTR [esi]
  0025c	50		 push	 eax

; 310  : 					{
; 311  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->NpcBase[a].Value);

  0025d	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00262	83 c4 0c	 add	 esp, 12			; 0000000cH
  00265	5e		 pop	 esi
  00266	5f		 pop	 edi
  00267	5b		 pop	 ebx

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  00268	8b e5		 mov	 esp, ebp
  0026a	5d		 pop	 ebp
  0026b	c2 08 00	 ret	 8
$LN10@NPCClick:

; 268  : 						return;
; 269  : 					}
; 270  : 					lpObj->Money -= this->NpcBase[a].Value;

  0026e	2b c1		 sub	 eax, ecx

; 271  : 					GCMoneySend(lpObj->m_Index,lpObj->Money);

  00270	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00272	50		 push	 eax
  00273	51		 push	 ecx
  00274	89 86 f0 00 00
	00		 mov	 DWORD PTR [esi+240], eax
  0027a	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0027f	83 c4 08	 add	 esp, 8

; 272  : 				}
; 273  : 				break;

  00282	e9 3a 01 00 00	 jmp	 $LN1@NPCClick
$LN9@NPCClick:

; 274  : 			case 2:
; 275  : 				{
; 276  : 					if(this->NpcBase[a].Value > lpObj->ZtCred )

  00287	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  0028a	89 4d 08	 mov	 DWORD PTR tv685[ebp], ecx
  0028d	db 45 08	 fild	 DWORD PTR tv685[ebp]
  00290	d9 5d 08	 fstp	 DWORD PTR tv690[ebp]
  00293	d9 45 08	 fld	 DWORD PTR tv690[ebp]
  00296	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  0029c	d8 d9		 fcomp	 ST(1)
  0029e	df e0		 fnstsw	 ax
  002a0	f6 c4 05	 test	 ah, 5
  002a3	7a 0b		 jp	 SHORT $LN8@NPCClick

; 277  : 					{
; 278  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(261),this->NpcBase[a].Value);

  002a5	51		 push	 ecx
  002a6	68 05 01 00 00	 push	 261			; 00000105H

; 279  : 						return;

  002ab	e9 d7 00 00 00	 jmp	 $LN57@NPCClick
$LN8@NPCClick:

; 280  : 					}
; 281  : 					lpObj->ZtCred -= this->NpcBase[a].Value;

  002b0	d8 ae a8 22 00
	00		 fsubr	 DWORD PTR [esi+8872]

; 282  : 					ZtUserDataSend(lpObj->m_Index);

  002b6	8b 06		 mov	 eax, DWORD PTR [esi]
  002b8	50		 push	 eax
  002b9	d9 9e a8 22 00
	00		 fstp	 DWORD PTR [esi+8872]
  002bf	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  002c4	83 c4 04	 add	 esp, 4

; 283  : 				}
; 284  : 				break;

  002c7	e9 f5 00 00 00	 jmp	 $LN1@NPCClick
$LN7@NPCClick:

; 285  : 			case 3:
; 286  : 				{
; 287  : 					if(this->NpcBase[a].Value > lpObj->GameShop.WCoinC )

  002cc	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  002cf	89 4d 08	 mov	 DWORD PTR tv685[ebp], ecx
  002d2	db 45 08	 fild	 DWORD PTR tv685[ebp]
  002d5	dc 96 00 23 00
	00		 fcom	 QWORD PTR [esi+8960]
  002db	df e0		 fnstsw	 ax
  002dd	f6 c4 41	 test	 ah, 65			; 00000041H
  002e0	75 27		 jne	 SHORT $LN6@NPCClick

; 288  : 					{
; 289  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(262),this->NpcBase[a].Value);

  002e2	51		 push	 ecx
  002e3	dd d8		 fstp	 ST(0)
  002e5	68 06 01 00 00	 push	 262			; 00000106H
  002ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  002ef	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  002f4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002f6	50		 push	 eax
  002f7	51		 push	 ecx
  002f8	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  002fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00300	5e		 pop	 esi
  00301	5f		 pop	 edi
  00302	5b		 pop	 ebx

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  00303	8b e5		 mov	 esp, ebp
  00305	5d		 pop	 ebp
  00306	c2 08 00	 ret	 8
$LN6@NPCClick:

; 290  : 						return;
; 291  : 					}
; 292  : 					lpObj->GameShop.WCoinC -= this->NpcBase[a].Value;

  00309	dc ae 00 23 00
	00		 fsubr	 QWORD PTR [esi+8960]

; 293  : 					gGameShop.GDSaveUserInfo(lpObj->m_Index);

  0030f	8b 16		 mov	 edx, DWORD PTR [esi]
  00311	52		 push	 edx
  00312	dd 9e 00 23 00
	00		 fstp	 QWORD PTR [esi+8960]

; 294  : 				}
; 295  : 				break;

  00318	e9 9a 00 00 00	 jmp	 $LN54@NPCClick
$LN5@NPCClick:

; 296  : 			case 4:
; 297  : 				{
; 298  : 					if(this->NpcBase[a].Value > lpObj->GameShop.WCoinP )

  0031d	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00320	89 4d 08	 mov	 DWORD PTR tv685[ebp], ecx
  00323	db 45 08	 fild	 DWORD PTR tv685[ebp]
  00326	dc 96 f8 22 00
	00		 fcom	 QWORD PTR [esi+8952]
  0032c	df e0		 fnstsw	 ax
  0032e	f6 c4 41	 test	 ah, 65			; 00000041H
  00331	75 27		 jne	 SHORT $LN4@NPCClick

; 299  : 					{
; 300  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(263),this->NpcBase[a].Value);

  00333	51		 push	 ecx
  00334	dd d8		 fstp	 ST(0)
  00336	68 07 01 00 00	 push	 263			; 00000107H
  0033b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00340	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00345	50		 push	 eax
  00346	8b 06		 mov	 eax, DWORD PTR [esi]
  00348	50		 push	 eax
  00349	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  0034e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00351	5e		 pop	 esi
  00352	5f		 pop	 edi
  00353	5b		 pop	 ebx

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  00354	8b e5		 mov	 esp, ebp
  00356	5d		 pop	 ebp
  00357	c2 08 00	 ret	 8
$LN4@NPCClick:

; 301  : 						return;
; 302  : 					}
; 303  : 					lpObj->GameShop.WCoinP -= this->NpcBase[a].Value;

  0035a	dc ae f8 22 00
	00		 fsubr	 QWORD PTR [esi+8952]

; 304  : 					gGameShop.GDSaveUserInfo(lpObj->m_Index);

  00360	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00362	51		 push	 ecx
  00363	dd 9e f8 22 00
	00		 fstp	 QWORD PTR [esi+8952]

; 305  : 				}
; 306  : 				break;

  00369	eb 4c		 jmp	 SHORT $LN54@NPCClick
$LN3@NPCClick:

; 307  : 			case 5:
; 308  : 				{
; 309  : 					if(this->NpcBase[a].Value > lpObj->GameShop.GoblinPoint )

  0036b	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  0036e	89 4d 08	 mov	 DWORD PTR tv685[ebp], ecx
  00371	db 45 08	 fild	 DWORD PTR tv685[ebp]
  00374	dc 96 08 23 00
	00		 fcom	 QWORD PTR [esi+8968]
  0037a	df e0		 fnstsw	 ax
  0037c	f6 c4 41	 test	 ah, 65			; 00000041H
  0037f	75 27		 jne	 SHORT $LN2@NPCClick

; 310  : 					{
; 311  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->NpcBase[a].Value);

  00381	51		 push	 ecx
  00382	68 08 01 00 00	 push	 264			; 00000108H
$LN57@NPCClick:

; 307  : 			case 5:
; 308  : 				{
; 309  : 					if(this->NpcBase[a].Value > lpObj->GameShop.GoblinPoint )

  00387	dd d8		 fstp	 ST(0)
$LN55@NPCClick:

; 310  : 					{
; 311  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->NpcBase[a].Value);

  00389	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0038e	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00393	8b 16		 mov	 edx, DWORD PTR [esi]
  00395	50		 push	 eax
  00396	52		 push	 edx
  00397	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  0039c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0039f	5e		 pop	 esi
  003a0	5f		 pop	 edi
  003a1	5b		 pop	 ebx

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  003a2	8b e5		 mov	 esp, ebp
  003a4	5d		 pop	 ebp
  003a5	c2 08 00	 ret	 8
$LN2@NPCClick:

; 312  : 						return;
; 313  : 					}
; 314  : 					lpObj->GameShop.GoblinPoint -= this->NpcBase[a].Value;

  003a8	dc ae 08 23 00
	00		 fsubr	 QWORD PTR [esi+8968]

; 315  : 					gGameShop.GDSaveUserInfo(lpObj->m_Index);

  003ae	8b 06		 mov	 eax, DWORD PTR [esi]
  003b0	50		 push	 eax
  003b1	dd 9e 08 23 00
	00		 fstp	 QWORD PTR [esi+8968]
$LN54@NPCClick:
  003b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  003bc	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
$LN1@NPCClick:

; 316  : 				}
; 317  : 				break;
; 318  : 			default:
; 319  : 
; 320  : 				break;
; 321  : 			}
; 322  : 
; 323  : 			gObjTeleport(lpObj->m_Index,this->NpcBase[a].TeleportMap,this->NpcBase[a].TeleportX,this->NpcBase[a].TeleportY);

  003c1	0f bf 4f 10	 movsx	 ecx, WORD PTR [edi+16]
  003c5	0f bf 57 0e	 movsx	 edx, WORD PTR [edi+14]
  003c9	0f bf 47 0c	 movsx	 eax, WORD PTR [edi+12]
  003cd	51		 push	 ecx
  003ce	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003d0	52		 push	 edx
  003d1	50		 push	 eax
  003d2	51		 push	 ecx
  003d3	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  003d8	83 c4 10	 add	 esp, 16			; 00000010H
  003db	5e		 pop	 esi
  003dc	5f		 pop	 edi
$LN39@NPCClick:
  003dd	5b		 pop	 ebx
$LN31@NPCClick:

; 324  : 			return;
; 325  : 		}
; 326  : 	}
; 327  : }

  003de	8b e5		 mov	 esp, ebp
  003e0	5d		 pop	 ebp
  003e1	c2 08 00	 ret	 8
$LN58@NPCClick:
  003e4	00 00 00 00	 DD	 $LN11@NPCClick
  003e8	00 00 00 00	 DD	 $LN9@NPCClick
  003ec	00 00 00 00	 DD	 $LN7@NPCClick
  003f0	00 00 00 00	 DD	 $LN5@NPCClick
  003f4	00 00 00 00	 DD	 $LN3@NPCClick
?NPCClick@cTeleportManager@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; cTeleportManager::NPCClick
_TEXT	ENDS
PUBLIC	?ChatDataSend@cTeleportManager@@QAEXHPAE@Z	; cTeleportManager::ChatDataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?ChatDataSend@cTeleportManager@@QAEXHPAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T205200 = -4						; size = 4
tv661 = 8						; size = 4
tv656 = 8						; size = 4
_a$204122 = 8						; size = 4
_aIndex$ = 8						; size = 4
tv556 = 12						; size = 4
_Protocol$ = 12						; size = 4
?ChatDataSend@cTeleportManager@@QAEXHPAE@Z PROC		; cTeleportManager::ChatDataSend, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 331  : 	if(!this->Enable) return;

  00006	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00009	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	0f 84 2e 04 00
	00		 je	 $LN29@ChatDataSe

; 332  : 
; 333  : 	LPOBJ lpObj = &gObj[aIndex];

  00012	8b 81 c8 2b 00
	00		 mov	 eax, DWORD PTR [ecx+11208]
  00018	56		 push	 esi
  00019	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0001c	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00022	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 334  : 
; 335  : 	for(int a=0;a<this->CountCMD;a++)

  00028	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _a$204122[ebp], 0
  0002f	89 45 fc	 mov	 DWORD PTR $T205200[ebp], eax
  00032	85 c0		 test	 eax, eax
  00034	0f 8e 05 04 00
	00		 jle	 $LN49@ChatDataSe

; 338  : 		{
; 339  : 			// ----
; 340  : 
; 341  : 			if(this->CmdBase[a].Level > lpObj->Level)

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _Protocol$[ebp]
  0003d	53		 push	 ebx
  0003e	83 c0 0d	 add	 eax, 13			; 0000000dH
  00041	89 45 0c	 mov	 DWORD PTR tv556[ebp], eax
  00044	8d 99 14 0e 00
	00		 lea	 ebx, DWORD PTR [ecx+3604]
  0004a	57		 push	 edi
  0004b	eb 03 8d 49 00	 npad	 5
$LL47@ChatDataSe:

; 336  : 	{
; 337  : 		if(!memcmp(&Protocol[13],this->CmdBase[a].Command,strlen(this->CmdBase[a].Command)))

  00050	8b c3		 mov	 eax, ebx
  00052	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL46@ChatDataSe:
  00055	8a 10		 mov	 dl, BYTE PTR [eax]
  00057	40		 inc	 eax
  00058	84 d2		 test	 dl, dl
  0005a	75 f9		 jne	 SHORT $LL46@ChatDataSe
  0005c	2b c7		 sub	 eax, edi
  0005e	8b 7d 0c	 mov	 edi, DWORD PTR tv556[ebp]
  00061	8b d3		 mov	 edx, ebx
  00063	83 f8 04	 cmp	 eax, 4
  00066	72 14		 jb	 SHORT $LN42@ChatDataSe
$LL36@ChatDataSe:
  00068	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0006a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0006c	75 32		 jne	 SHORT $LN30@ChatDataSe
  0006e	83 e8 04	 sub	 eax, 4
  00071	83 c2 04	 add	 edx, 4
  00074	83 c7 04	 add	 edi, 4
  00077	83 f8 04	 cmp	 eax, 4
  0007a	73 ec		 jae	 SHORT $LL36@ChatDataSe
$LN42@ChatDataSe:
  0007c	85 c0		 test	 eax, eax
  0007e	74 38		 je	 SHORT $LN48@ChatDataSe
  00080	8a 0a		 mov	 cl, BYTE PTR [edx]
  00082	3a 0f		 cmp	 cl, BYTE PTR [edi]
  00084	75 1a		 jne	 SHORT $LN30@ChatDataSe
  00086	83 f8 01	 cmp	 eax, 1
  00089	76 2d		 jbe	 SHORT $LN48@ChatDataSe
  0008b	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  0008e	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  00091	75 0d		 jne	 SHORT $LN30@ChatDataSe
  00093	83 f8 02	 cmp	 eax, 2
  00096	76 20		 jbe	 SHORT $LN48@ChatDataSe
  00098	8a 52 02	 mov	 dl, BYTE PTR [edx+2]
  0009b	3a 57 02	 cmp	 dl, BYTE PTR [edi+2]
  0009e	74 18		 je	 SHORT $LN48@ChatDataSe
$LN30@ChatDataSe:

; 334  : 
; 335  : 	for(int a=0;a<this->CountCMD;a++)

  000a0	8b 45 08	 mov	 eax, DWORD PTR _a$204122[ebp]
  000a3	40		 inc	 eax
  000a4	83 c3 4c	 add	 ebx, 76			; 0000004cH
  000a7	89 45 08	 mov	 DWORD PTR _a$204122[ebp], eax
  000aa	3b 45 fc	 cmp	 eax, DWORD PTR $T205200[ebp]
  000ad	7c a1		 jl	 SHORT $LL47@ChatDataSe
  000af	5f		 pop	 edi
  000b0	5b		 pop	 ebx
  000b1	5e		 pop	 esi

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 08 00	 ret	 8
$LN48@ChatDataSe:

; 338  : 		{
; 339  : 			// ----
; 340  : 
; 341  : 			if(this->CmdBase[a].Level > lpObj->Level)

  000b8	8b 7d 08	 mov	 edi, DWORD PTR _a$204122[ebp]
  000bb	6b ff 4c	 imul	 edi, 76			; 0000004cH
  000be	03 7d f8	 add	 edi, DWORD PTR _this$[ebp]
  000c1	0f b7 87 4c 0e
	00 00		 movzx	 eax, WORD PTR [edi+3660]
  000c8	66 3b 86 be 00
	00 00		 cmp	 ax, WORD PTR [esi+190]
  000cf	7e 0e		 jle	 SHORT $LN27@ChatDataSe

; 342  : 			{
; 343  : 				MsgNormal(lpObj->m_Index,g_ZtText.GetText(255),this->CmdBase[a].Level);

  000d1	0f bf c8	 movsx	 ecx, ax
  000d4	51		 push	 ecx
  000d5	68 ff 00 00 00	 push	 255			; 000000ffH

; 344  : 				return;

  000da	e9 03 03 00 00	 jmp	 $LN65@ChatDataSe
$LN27@ChatDataSe:

; 345  : 			}
; 346  : 
; 347  : 			if(this->CmdBase[a].Reset > lpObj->Reset)

  000df	0f bf 87 4e 0e
	00 00		 movsx	 eax, WORD PTR [edi+3662]
  000e6	3b 86 90 22 00
	00		 cmp	 eax, DWORD PTR [esi+8848]
  000ec	7e 25		 jle	 SHORT $LN26@ChatDataSe

; 348  : 			{
; 349  : 				MsgNormal(lpObj->m_Index,g_ZtText.GetText(256),this->CmdBase[a].Reset);

  000ee	50		 push	 eax
  000ef	68 00 01 00 00	 push	 256			; 00000100H
  000f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000f9	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  000fe	50		 push	 eax
  000ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00101	50		 push	 eax

; 448  : 					{
; 449  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->CmdBase[a].Value);

  00102	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010a	5f		 pop	 edi
  0010b	5b		 pop	 ebx
  0010c	5e		 pop	 esi

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 08 00	 ret	 8
$LN26@ChatDataSe:

; 350  : 				return;
; 351  : 			}
; 352  : 
; 353  : 			if(this->CmdBase[a].GReset > lpObj->GReset)

  00113	0f bf 87 50 0e
	00 00		 movsx	 eax, WORD PTR [edi+3664]
  0011a	3b 86 94 22 00
	00		 cmp	 eax, DWORD PTR [esi+8852]
  00120	7e 25		 jle	 SHORT $LN25@ChatDataSe

; 354  : 			{
; 355  : 				MsgNormal(lpObj->m_Index,g_ZtText.GetText(257),this->CmdBase[a].GReset);

  00122	50		 push	 eax
  00123	68 01 01 00 00	 push	 257			; 00000101H
  00128	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0012d	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00132	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00134	50		 push	 eax
  00135	51		 push	 ecx

; 448  : 					{
; 449  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->CmdBase[a].Value);

  00136	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013e	5f		 pop	 edi
  0013f	5b		 pop	 ebx
  00140	5e		 pop	 esi

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 08 00	 ret	 8
$LN25@ChatDataSe:

; 356  : 				return;
; 357  : 			}
; 358  : 
; 359  : 			if( g_ZtLicense.CheckUser(eZtUB::Local)		 || 
; 360  : 				g_ZtLicense.CheckUser(eZtUB::SILVER1)	 || 
; 361  : 				g_ZtLicense.CheckUser(eZtUB::SILVER2)	 ||
; 362  : 				g_ZtLicense.CheckUser(eZtUB::Gredy)		 || 
; 363  : 				g_ZtLicense.CheckUser(eZtUB::GredyLocal) || 
; 364  : 				g_ZtLicense.CheckUser(eZtUB::Gredy2) )

  00147	6a 00		 push	 0
  00149	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0014e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00153	84 c0		 test	 al, al
  00155	75 50		 jne	 SHORT $LN23@ChatDataSe
  00157	6a 07		 push	 7
  00159	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0015e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00163	84 c0		 test	 al, al
  00165	75 40		 jne	 SHORT $LN23@ChatDataSe
  00167	6a 08		 push	 8
  00169	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0016e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00173	84 c0		 test	 al, al
  00175	75 30		 jne	 SHORT $LN23@ChatDataSe
  00177	6a 20		 push	 32			; 00000020H
  00179	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0017e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00183	84 c0		 test	 al, al
  00185	75 20		 jne	 SHORT $LN23@ChatDataSe
  00187	6a 21		 push	 33			; 00000021H
  00189	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0018e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00193	84 c0		 test	 al, al
  00195	75 10		 jne	 SHORT $LN23@ChatDataSe
  00197	6a 22		 push	 34			; 00000022H
  00199	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0019e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001a3	84 c0		 test	 al, al
  001a5	74 4e		 je	 SHORT $LN21@ChatDataSe
$LN23@ChatDataSe:

; 365  : 			{
; 366  : 				if(this->CmdBase[a].MaxReset < lpObj->Reset)

  001a7	0f bf 87 52 0e
	00 00		 movsx	 eax, WORD PTR [edi+3666]
  001ae	3b 86 90 22 00
	00		 cmp	 eax, DWORD PTR [esi+8848]
  001b4	7d 0b		 jge	 SHORT $LN22@ChatDataSe

; 367  : 				{
; 368  : 					MsgNormal(lpObj->m_Index,g_ZtText.GetText(265),this->CmdBase[a].MaxReset);

  001b6	50		 push	 eax
  001b7	68 09 01 00 00	 push	 265			; 00000109H

; 369  : 					return;

  001bc	e9 21 02 00 00	 jmp	 $LN65@ChatDataSe
$LN22@ChatDataSe:

; 370  : 				}
; 371  : 
; 372  : 				if(this->CmdBase[a].MaxGReset < lpObj->GReset)

  001c1	0f bf 87 54 0e
	00 00		 movsx	 eax, WORD PTR [edi+3668]
  001c8	3b 86 94 22 00
	00		 cmp	 eax, DWORD PTR [esi+8852]
  001ce	7d 25		 jge	 SHORT $LN21@ChatDataSe

; 373  : 				{
; 374  : 					MsgNormal(lpObj->m_Index,g_ZtText.GetText(266),this->CmdBase[a].MaxGReset);

  001d0	50		 push	 eax
  001d1	68 0a 01 00 00	 push	 266			; 0000010aH
  001d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  001db	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001e0	50		 push	 eax
  001e1	8b 06		 mov	 eax, DWORD PTR [esi]
  001e3	50		 push	 eax

; 448  : 					{
; 449  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->CmdBase[a].Value);

  001e4	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  001e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ec	5f		 pop	 edi
  001ed	5b		 pop	 ebx
  001ee	5e		 pop	 esi

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c2 08 00	 ret	 8
$LN21@ChatDataSe:

; 375  : 					return;
; 376  : 				}
; 377  : 			}
; 378  : 
; 379  : 			if(this->CmdBase[a].Premium)

  001f5	66 83 bf 56 0e
	00 00 00	 cmp	 WORD PTR [edi+3670], 0
  001fd	74 70		 je	 SHORT $LN14@ChatDataSe

; 380  : 			{
; 381  : 				if(g_ZtLicense.CheckUser(eZtUB::SILVER1) || g_ZtLicense.CheckUser(eZtUB::SILVER2))

  001ff	6a 07		 push	 7
  00201	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00206	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0020b	84 c0		 test	 al, al
  0020d	75 3d		 jne	 SHORT $LN18@ChatDataSe
  0020f	6a 08		 push	 8
  00211	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00216	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0021b	84 c0		 test	 al, al
  0021d	75 2d		 jne	 SHORT $LN18@ChatDataSe

; 387  : 					}
; 388  : 				}
; 389  : 				else
; 390  : 				{
; 391  : 					if(lpObj->PremiumTime == 0)

  0021f	83 be b8 22 00
	00 00		 cmp	 DWORD PTR [esi+8888], 0
  00226	75 47		 jne	 SHORT $LN14@ChatDataSe

; 392  : 					{
; 393  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(259));

  00228	68 03 01 00 00	 push	 259			; 00000103H
  0022d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00232	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00237	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00239	50		 push	 eax
  0023a	51		 push	 ecx
  0023b	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00240	83 c4 08	 add	 esp, 8
  00243	5f		 pop	 edi
  00244	5b		 pop	 ebx
  00245	5e		 pop	 esi

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c2 08 00	 ret	 8
$LN18@ChatDataSe:

; 382  : 				{
; 383  : 					if(this->CmdBase[a].Premium != lpObj->PremiumTimeType || lpObj->PremiumTime == 0)

  0024c	0f bf 87 56 0e
	00 00		 movsx	 eax, WORD PTR [edi+3670]
  00253	3b 86 bc 22 00
	00		 cmp	 eax, DWORD PTR [esi+8892]
  00259	75 09		 jne	 SHORT $LN16@ChatDataSe
  0025b	83 be b8 22 00
	00 00		 cmp	 DWORD PTR [esi+8888], 0
  00262	75 0b		 jne	 SHORT $LN14@ChatDataSe
$LN16@ChatDataSe:

; 384  : 					{
; 385  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(258), this->CmdBase[a].Premium);

  00264	50		 push	 eax
  00265	68 02 01 00 00	 push	 258			; 00000102H

; 386  : 						return;

  0026a	e9 73 01 00 00	 jmp	 $LN65@ChatDataSe
$LN14@ChatDataSe:

; 394  : 						return;
; 395  : 					}
; 396  : 				}
; 397  : 			}
; 398  : 
; 399  : 			switch(this->CmdBase[a].Price)

  0026f	8b 87 58 0e 00
	00		 mov	 eax, DWORD PTR [edi+3672]
  00275	48		 dec	 eax
  00276	83 f8 04	 cmp	 eax, 4
  00279	0f 87 9b 01 00
	00		 ja	 $LN1@ChatDataSe
  0027f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN68@ChatDataSe[eax*4]
$LN11@ChatDataSe:

; 400  : 			{
; 401  : 			case 1:
; 402  : 				{
; 403  : 					if(this->CmdBase[a].Value > lpObj->Money )

  00286	8b 8f 5c 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3676]
  0028c	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  00292	3b c8		 cmp	 ecx, eax
  00294	7e 25		 jle	 SHORT $LN10@ChatDataSe

; 404  : 					{
; 405  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(260),this->CmdBase[a].Value);

  00296	51		 push	 ecx
  00297	68 04 01 00 00	 push	 260			; 00000104H
  0029c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  002a1	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  002a6	50		 push	 eax
  002a7	8b 06		 mov	 eax, DWORD PTR [esi]
  002a9	50		 push	 eax

; 448  : 					{
; 449  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->CmdBase[a].Value);

  002aa	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b2	5f		 pop	 edi
  002b3	5b		 pop	 ebx
  002b4	5e		 pop	 esi

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  002b5	8b e5		 mov	 esp, ebp
  002b7	5d		 pop	 ebp
  002b8	c2 08 00	 ret	 8
$LN10@ChatDataSe:

; 406  : 						return;
; 407  : 					}
; 408  : 					lpObj->Money -= this->CmdBase[a].Value;

  002bb	2b c1		 sub	 eax, ecx

; 409  : 					GCMoneySend(lpObj->m_Index,lpObj->Money);

  002bd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002bf	50		 push	 eax
  002c0	51		 push	 ecx
  002c1	89 86 f0 00 00
	00		 mov	 DWORD PTR [esi+240], eax
  002c7	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  002cc	83 c4 08	 add	 esp, 8

; 410  : 				}
; 411  : 				break;

  002cf	e9 46 01 00 00	 jmp	 $LN1@ChatDataSe
$LN9@ChatDataSe:

; 412  : 			case 2:
; 413  : 				{
; 414  : 					if(this->CmdBase[a].Value > lpObj->ZtCred )

  002d4	8b 8f 5c 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3676]
  002da	89 4d 08	 mov	 DWORD PTR tv656[ebp], ecx
  002dd	db 45 08	 fild	 DWORD PTR tv656[ebp]
  002e0	d9 5d 08	 fstp	 DWORD PTR tv661[ebp]
  002e3	d9 45 08	 fld	 DWORD PTR tv661[ebp]
  002e6	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  002ec	d8 d9		 fcomp	 ST(1)
  002ee	df e0		 fnstsw	 ax
  002f0	f6 c4 05	 test	 ah, 5
  002f3	7a 0b		 jp	 SHORT $LN8@ChatDataSe

; 415  : 					{
; 416  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(261),this->CmdBase[a].Value);

  002f5	51		 push	 ecx
  002f6	68 05 01 00 00	 push	 261			; 00000105H

; 417  : 						return;

  002fb	e9 e0 00 00 00	 jmp	 $LN67@ChatDataSe
$LN8@ChatDataSe:

; 418  : 					}
; 419  : 					lpObj->ZtCred -= this->CmdBase[a].Value;

  00300	d8 ae a8 22 00
	00		 fsubr	 DWORD PTR [esi+8872]

; 420  : 					ZtUserDataSend(lpObj->m_Index);

  00306	8b 06		 mov	 eax, DWORD PTR [esi]
  00308	50		 push	 eax
  00309	d9 9e a8 22 00
	00		 fstp	 DWORD PTR [esi+8872]
  0030f	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  00314	83 c4 04	 add	 esp, 4

; 421  : 				}
; 422  : 				break;

  00317	e9 fe 00 00 00	 jmp	 $LN1@ChatDataSe
$LN7@ChatDataSe:

; 423  : 			case 3:
; 424  : 				{
; 425  : 					if(this->CmdBase[a].Value > lpObj->GameShop.WCoinC )

  0031c	8b 8f 5c 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3676]
  00322	89 4d 08	 mov	 DWORD PTR tv656[ebp], ecx
  00325	db 45 08	 fild	 DWORD PTR tv656[ebp]
  00328	dc 96 00 23 00
	00		 fcom	 QWORD PTR [esi+8960]
  0032e	df e0		 fnstsw	 ax
  00330	f6 c4 41	 test	 ah, 65			; 00000041H
  00333	75 27		 jne	 SHORT $LN6@ChatDataSe

; 426  : 					{
; 427  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(262),this->CmdBase[a].Value);

  00335	51		 push	 ecx
  00336	dd d8		 fstp	 ST(0)
  00338	68 06 01 00 00	 push	 262			; 00000106H
  0033d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00342	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00347	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00349	50		 push	 eax
  0034a	51		 push	 ecx
  0034b	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00350	83 c4 0c	 add	 esp, 12			; 0000000cH
  00353	5f		 pop	 edi
  00354	5b		 pop	 ebx
  00355	5e		 pop	 esi

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  00356	8b e5		 mov	 esp, ebp
  00358	5d		 pop	 ebp
  00359	c2 08 00	 ret	 8
$LN6@ChatDataSe:

; 428  : 						return;
; 429  : 					}
; 430  : 					lpObj->GameShop.WCoinC -= this->CmdBase[a].Value;

  0035c	dc ae 00 23 00
	00		 fsubr	 QWORD PTR [esi+8960]

; 431  : 					gGameShop.GDSaveUserInfo(lpObj->m_Index);

  00362	8b 16		 mov	 edx, DWORD PTR [esi]
  00364	52		 push	 edx
  00365	dd 9e 00 23 00
	00		 fstp	 QWORD PTR [esi+8960]

; 432  : 				}
; 433  : 				break;

  0036b	e9 a0 00 00 00	 jmp	 $LN64@ChatDataSe
$LN5@ChatDataSe:

; 434  : 			case 4:
; 435  : 				{
; 436  : 					if(this->CmdBase[a].Value > lpObj->GameShop.WCoinP )

  00370	8b 8f 5c 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3676]
  00376	89 4d 08	 mov	 DWORD PTR tv656[ebp], ecx
  00379	db 45 08	 fild	 DWORD PTR tv656[ebp]
  0037c	dc 96 f8 22 00
	00		 fcom	 QWORD PTR [esi+8952]
  00382	df e0		 fnstsw	 ax
  00384	f6 c4 41	 test	 ah, 65			; 00000041H
  00387	75 27		 jne	 SHORT $LN4@ChatDataSe

; 437  : 					{
; 438  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(263),this->CmdBase[a].Value);

  00389	51		 push	 ecx
  0038a	dd d8		 fstp	 ST(0)
  0038c	68 07 01 00 00	 push	 263			; 00000107H
  00391	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00396	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0039b	50		 push	 eax
  0039c	8b 06		 mov	 eax, DWORD PTR [esi]
  0039e	50		 push	 eax
  0039f	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  003a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a7	5f		 pop	 edi
  003a8	5b		 pop	 ebx
  003a9	5e		 pop	 esi

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  003aa	8b e5		 mov	 esp, ebp
  003ac	5d		 pop	 ebp
  003ad	c2 08 00	 ret	 8
$LN4@ChatDataSe:

; 439  : 						return;
; 440  : 					}
; 441  : 					lpObj->GameShop.WCoinP -= this->CmdBase[a].Value;

  003b0	dc ae f8 22 00
	00		 fsubr	 QWORD PTR [esi+8952]

; 442  : 					gGameShop.GDSaveUserInfo(lpObj->m_Index);

  003b6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003b8	51		 push	 ecx
  003b9	dd 9e f8 22 00
	00		 fstp	 QWORD PTR [esi+8952]

; 443  : 				}
; 444  : 				break;

  003bf	eb 4f		 jmp	 SHORT $LN64@ChatDataSe
$LN3@ChatDataSe:

; 445  : 			case 5:
; 446  : 				{
; 447  : 					if(this->CmdBase[a].Value > lpObj->GameShop.GoblinPoint )

  003c1	8b 8f 5c 0e 00
	00		 mov	 ecx, DWORD PTR [edi+3676]
  003c7	89 4d 08	 mov	 DWORD PTR tv656[ebp], ecx
  003ca	db 45 08	 fild	 DWORD PTR tv656[ebp]
  003cd	dc 96 08 23 00
	00		 fcom	 QWORD PTR [esi+8968]
  003d3	df e0		 fnstsw	 ax
  003d5	f6 c4 41	 test	 ah, 65			; 00000041H
  003d8	75 27		 jne	 SHORT $LN2@ChatDataSe

; 448  : 					{
; 449  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->CmdBase[a].Value);

  003da	51		 push	 ecx
  003db	68 08 01 00 00	 push	 264			; 00000108H
$LN67@ChatDataSe:

; 445  : 			case 5:
; 446  : 				{
; 447  : 					if(this->CmdBase[a].Value > lpObj->GameShop.GoblinPoint )

  003e0	dd d8		 fstp	 ST(0)
$LN65@ChatDataSe:

; 448  : 					{
; 449  : 						MsgNormal(lpObj->m_Index,g_ZtText.GetText(264),this->CmdBase[a].Value);

  003e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  003e7	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  003ec	8b 16		 mov	 edx, DWORD PTR [esi]
  003ee	50		 push	 eax
  003ef	52		 push	 edx
  003f0	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  003f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f8	5f		 pop	 edi
  003f9	5b		 pop	 ebx
  003fa	5e		 pop	 esi

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  003fb	8b e5		 mov	 esp, ebp
  003fd	5d		 pop	 ebp
  003fe	c2 08 00	 ret	 8
$LN2@ChatDataSe:

; 450  : 						return;
; 451  : 					}
; 452  : 					lpObj->GameShop.GoblinPoint -= this->CmdBase[a].Value;

  00401	dc ae 08 23 00
	00		 fsubr	 QWORD PTR [esi+8968]

; 453  : 					gGameShop.GDSaveUserInfo(lpObj->m_Index);

  00407	8b 06		 mov	 eax, DWORD PTR [esi]
  00409	50		 push	 eax
  0040a	dd 9e 08 23 00
	00		 fstp	 QWORD PTR [esi+8968]
$LN64@ChatDataSe:
  00410	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00415	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
$LN1@ChatDataSe:

; 454  : 				}
; 455  : 				break;
; 456  : 			default:
; 457  : 
; 458  : 				break;
; 459  : 			}
; 460  : 
; 461  : 			gObjTeleport(lpObj->m_Index,this->CmdBase[a].TeleportMap,this->CmdBase[a].TeleportX,this->CmdBase[a].TeleportY);

  0041a	0f bf 8f 4a 0e
	00 00		 movsx	 ecx, WORD PTR [edi+3658]
  00421	0f bf 97 48 0e
	00 00		 movsx	 edx, WORD PTR [edi+3656]
  00428	0f bf 87 46 0e
	00 00		 movsx	 eax, WORD PTR [edi+3654]
  0042f	51		 push	 ecx
  00430	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00432	52		 push	 edx
  00433	50		 push	 eax
  00434	51		 push	 ecx
  00435	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  0043a	83 c4 10	 add	 esp, 16			; 00000010H
  0043d	5f		 pop	 edi
  0043e	5b		 pop	 ebx
$LN49@ChatDataSe:
  0043f	5e		 pop	 esi
$LN29@ChatDataSe:

; 462  : 			return;
; 463  : 		}
; 464  : 	}
; 465  : }

  00440	8b e5		 mov	 esp, ebp
  00442	5d		 pop	 ebp
  00443	c2 08 00	 ret	 8
  00446	8b ff		 npad	 2
$LN68@ChatDataSe:
  00448	00 00 00 00	 DD	 $LN11@ChatDataSe
  0044c	00 00 00 00	 DD	 $LN9@ChatDataSe
  00450	00 00 00 00	 DD	 $LN7@ChatDataSe
  00454	00 00 00 00	 DD	 $LN5@ChatDataSe
  00458	00 00 00 00	 DD	 $LN3@ChatDataSe
?ChatDataSend@cTeleportManager@@QAEXHPAE@Z ENDP		; cTeleportManager::ChatDataSend
_TEXT	ENDS
PUBLIC	??_C@_0BH@KHMLGCFI@?$FLNeed?5Premium?$FN?3?5Status?$AA@ ; `string'
PUBLIC	??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BE@CIFMCNBN@TeleportManager?4cpp?$AA@	; `string'
PUBLIC	?CheckTeleoprtMap@cTeleportManager@@QAE_NHH@Z	; cTeleportManager::CheckTeleoprtMap
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
;	COMDAT ??_C@_0BH@KHMLGCFI@?$FLNeed?5Premium?$FN?3?5Status?$AA@
CONST	SEGMENT
??_C@_0BH@KHMLGCFI@?$FLNeed?5Premium?$FN?3?5Status?$AA@ DB '[Need Premium'
	DB	']: Status', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@ DB 'error : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CIFMCNBN@TeleportManager?4cpp?$AA@
CONST	SEGMENT
??_C@_0BE@CIFMCNBN@TeleportManager?4cpp?$AA@ DB 'TeleportManager.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckTeleoprtMap@cTeleportManager@@QAE_NHH@Z
_TEXT	SEGMENT
_lpTarget$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
?CheckTeleoprtMap@cTeleportManager@@QAE_NHH@Z PROC	; cTeleportManager::CheckTeleoprtMap, COMDAT
; _this$ = ecx

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 469  : 	if(!this->Enable)

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	75 06		 jne	 SHORT $LN15@CheckTeleo

; 470  : 	{
; 471  : 		return true;

  00008	b0 01		 mov	 al, 1

; 524  : 
; 525  : }

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
$LN15@CheckTeleo:

; 472  : 	}
; 473  : 
; 474  : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  0000e	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00011	85 d2		 test	 edx, edx
  00013	78 0f		 js	 SHORT $LN28@CheckTeleo
  00015	33 c0		 xor	 eax, eax
  00017	81 fa 97 3a 00
	00		 cmp	 edx, 14999		; 00003a97H
  0001d	0f 9e c0	 setle	 al
  00020	85 c0		 test	 eax, eax
  00022	75 1e		 jne	 SHORT $LN14@CheckTeleo
$LN28@CheckTeleo:

; 475  : 	{
; 476  : 		LogAdd("error : %s %d", __FILE__, __LINE__ );

  00024	68 dc 01 00 00	 push	 476			; 000001dcH
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CIFMCNBN@TeleportManager?4cpp?$AA@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 477  : 		return false;

  0003c	32 c0		 xor	 al, al

; 524  : 
; 525  : }

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
$LN14@CheckTeleo:

; 478  : 	}
; 479  : 
; 480  : 	if ( OBJMAX_RANGE(aTargetIndex) == FALSE )

  00042	8b 45 0c	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  00045	53		 push	 ebx
  00046	56		 push	 esi
  00047	85 c0		 test	 eax, eax
  00049	78 10		 js	 SHORT $LN29@CheckTeleo
  0004b	33 db		 xor	 ebx, ebx
  0004d	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00052	0f 9e c3	 setle	 bl
  00055	8b f3		 mov	 esi, ebx
  00057	85 f6		 test	 esi, esi
  00059	75 20		 jne	 SHORT $LN13@CheckTeleo
$LN29@CheckTeleo:

; 481  : 	{
; 482  : 		LogAdd("error : %s %d", __FILE__, __LINE__ );

  0005b	68 e2 01 00 00	 push	 482			; 000001e2H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CIFMCNBN@TeleportManager?4cpp?$AA@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN35@CheckTeleo:

; 483  : 		return false;

  00073	5e		 pop	 esi
  00074	32 c0		 xor	 al, al
  00076	5b		 pop	 ebx

; 524  : 
; 525  : }

  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
$LN13@CheckTeleo:

; 484  : 	}
; 485  : 
; 486  : 	LPOBJ lpUser = &gObj[aIndex];

  0007b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00081	69 d2 50 2b 00
	00		 imul	 edx, 11088		; 00002b50H

; 487  : 	LPOBJ lpTarget = &gObj[aTargetIndex];

  00087	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0008d	03 c6		 add	 eax, esi
  0008f	03 d6		 add	 edx, esi

; 488  : 
; 489  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00091	be 03 00 00 00	 mov	 esi, 3
  00096	89 45 08	 mov	 DWORD PTR _lpTarget$[ebp], eax
  00099	39 72 04	 cmp	 DWORD PTR [edx+4], esi

; 490  : 	{
; 491  : 		return false;

  0009c	7c d5		 jl	 SHORT $LN35@CheckTeleo

; 492  : 	}
; 493  : 
; 494  : 	if(lpTarget->Connected < PLAYER_PLAYING)

  0009e	39 70 04	 cmp	 DWORD PTR [eax+4], esi

; 495  : 	{
; 496  : 		return false;

  000a1	7c d0		 jl	 SHORT $LN35@CheckTeleo

; 497  : 	}
; 498  : 
; 499  : 	for(int a=0;a<this->CountNPC;a++)

  000a3	8b 99 c4 2b 00
	00		 mov	 ebx, DWORD PTR [ecx+11204]
  000a9	33 f6		 xor	 esi, esi
  000ab	57		 push	 edi
  000ac	85 db		 test	 ebx, ebx
  000ae	7e 2a		 jle	 SHORT $LN8@CheckTeleo
  000b0	8d 79 0c	 lea	 edi, DWORD PTR [ecx+12]
$LL10@CheckTeleo:

; 500  : 	{
; 501  : 		if(this->NpcBase[a].Premium)

  000b3	66 83 7f 10 00	 cmp	 WORD PTR [edi+16], 0
  000b8	74 18		 je	 SHORT $LN9@CheckTeleo

; 502  : 		{
; 503  : 			if(lpTarget->PremiumTime == 0 && this->NpcBase[a].TeleportMap == lpUser->MapNumber)

  000ba	83 b8 b8 22 00
	00 00		 cmp	 DWORD PTR [eax+8888], 0
  000c1	75 0f		 jne	 SHORT $LN9@CheckTeleo
  000c3	0f b6 82 49 01
	00 00		 movzx	 eax, BYTE PTR [edx+329]
  000ca	66 39 07	 cmp	 WORD PTR [edi], ax
  000cd	74 4e		 je	 SHORT $LN24@CheckTeleo
  000cf	8b 45 08	 mov	 eax, DWORD PTR _lpTarget$[ebp]
$LN9@CheckTeleo:

; 497  : 	}
; 498  : 
; 499  : 	for(int a=0;a<this->CountNPC;a++)

  000d2	46		 inc	 esi
  000d3	83 c7 24	 add	 edi, 36			; 00000024H
  000d6	3b f3		 cmp	 esi, ebx
  000d8	7c d9		 jl	 SHORT $LL10@CheckTeleo
$LN8@CheckTeleo:
  000da	8b b9 c8 2b 00
	00		 mov	 edi, DWORD PTR [ecx+11208]

; 507  : 			}
; 508  : 		}
; 509  : 	}
; 510  : 
; 511  : 	for(int a=0;a<this->CountCMD;a++)

  000e0	33 f6		 xor	 esi, esi
  000e2	85 ff		 test	 edi, edi
  000e4	7e 2e		 jle	 SHORT $LN3@CheckTeleo
  000e6	81 c1 46 0e 00
	00		 add	 ecx, 3654		; 00000e46H
  000ec	8d 64 24 00	 npad	 4
$LL5@CheckTeleo:

; 512  : 	{
; 513  : 		if(this->CmdBase[a].Premium)

  000f0	66 83 79 10 00	 cmp	 WORD PTR [ecx+16], 0
  000f5	74 15		 je	 SHORT $LN4@CheckTeleo

; 514  : 		{
; 515  : 			if(lpTarget->PremiumTime == 0 && this->CmdBase[a].TeleportMap == lpUser->MapNumber)

  000f7	83 b8 b8 22 00
	00 00		 cmp	 DWORD PTR [eax+8888], 0
  000fe	75 0c		 jne	 SHORT $LN4@CheckTeleo
  00100	0f b6 9a 49 01
	00 00		 movzx	 ebx, BYTE PTR [edx+329]
  00107	66 39 19	 cmp	 WORD PTR [ecx], bx
  0010a	74 2d		 je	 SHORT $LN25@CheckTeleo
$LN4@CheckTeleo:

; 507  : 			}
; 508  : 		}
; 509  : 	}
; 510  : 
; 511  : 	for(int a=0;a<this->CountCMD;a++)

  0010c	46		 inc	 esi
  0010d	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00110	3b f7		 cmp	 esi, edi
  00112	7c dc		 jl	 SHORT $LL5@CheckTeleo
$LN3@CheckTeleo:
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi

; 519  : 			}
; 520  : 		}
; 521  : 	}
; 522  : 
; 523  : 	return true;

  00116	b0 01		 mov	 al, 1
  00118	5b		 pop	 ebx

; 524  : 
; 525  : }

  00119	5d		 pop	 ebp
  0011a	c2 08 00	 ret	 8
$LN24@CheckTeleo:

; 504  : 			{
; 505  : 				MsgNormal(lpTarget->m_Index,"[Need Premium]: Status");

  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _lpTarget$[ebp]
  00120	8b 11		 mov	 edx, DWORD PTR [ecx]
  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KHMLGCFI@?$FLNeed?5Premium?$FN?3?5Status?$AA@
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  0012d	83 c4 08	 add	 esp, 8
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi

; 506  : 				return false;

  00132	32 c0		 xor	 al, al
  00134	5b		 pop	 ebx

; 524  : 
; 525  : }

  00135	5d		 pop	 ebp
  00136	c2 08 00	 ret	 8
$LN25@CheckTeleo:

; 516  : 			{
; 517  : 				MsgNormal(lpTarget->m_Index,"[Need Premium]: Status");

  00139	8b 00		 mov	 eax, DWORD PTR [eax]
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KHMLGCFI@?$FLNeed?5Premium?$FN?3?5Status?$AA@
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?MsgNormal@@YAXHPADZZ	; MsgNormal
  00146	83 c4 08	 add	 esp, 8
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi

; 518  : 				return false;

  0014b	32 c0		 xor	 al, al
  0014d	5b		 pop	 ebx

; 524  : 
; 525  : }

  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
?CheckTeleoprtMap@cTeleportManager@@QAE_NHH@Z ENDP	; cTeleportManager::CheckTeleoprtMap
_TEXT	ENDS
PUBLIC	?size@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::size
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEAAUDLTP_BLOCK_DATA@@I@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEAAUDLTP_BLOCK_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEAAUDLTP_BLOCK_DATA@@I@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEAAUDLTP_BLOCK_DATA@@I@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBE_NPBUDLTP_BLOCK_DATA@@@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBE_NPBUDLTP_BLOCK_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBE_NPBUDLTP_BLOCK_DATA@@@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBE_NPBUDLTP_BLOCK_DATA@@@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEXPAUDLTP_BLOCK_DATA@@0@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEXPAUDLTP_BLOCK_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEXPAUDLTP_BLOCK_DATA@@0@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEXPAUDLTP_BLOCK_DATA@@0@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::~_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::~_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::~_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UDLTP_BLOCK_DATA@@@std@@QAE@XZ	; std::allocator<DLTP_BLOCK_DATA>::allocator<DLTP_BLOCK_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UDLTP_BLOCK_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UDLTP_BLOCK_DATA@@@std@@QAE@XZ PROC	; std::allocator<DLTP_BLOCK_DATA>::allocator<DLTP_BLOCK_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UDLTP_BLOCK_DATA@@@std@@QAE@XZ ENDP	; std::allocator<DLTP_BLOCK_DATA>::allocator<DLTP_BLOCK_DATA>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::capacity
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEXXZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UDLTP_BLOCK_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<DLTP_BLOCK_DATA>::allocator<DLTP_BLOCK_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UDLTP_BLOCK_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UDLTP_BLOCK_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<DLTP_BLOCK_DATA>::allocator<DLTP_BLOCK_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UDLTP_BLOCK_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<DLTP_BLOCK_DATA>::allocator<DLTP_BLOCK_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@I@Z ; std::allocator<DLTP_BLOCK_DATA>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@I@Z PROC ; std::allocator<DLTP_BLOCK_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@I@Z ENDP ; std::allocator<DLTP_BLOCK_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UDLTP_BLOCK_DATA@@@std@@QBEIXZ ; std::allocator<DLTP_BLOCK_DATA>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UDLTP_BLOCK_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UDLTP_BLOCK_DATA@@@std@@QBEIXZ PROC ; std::allocator<DLTP_BLOCK_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UDLTP_BLOCK_DATA@@@std@@QBEIXZ ENDP ; std::allocator<DLTP_BLOCK_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUDLTP_BLOCK_DATA@@@std@@YAPBUDLTP_BLOCK_DATA@@ABU1@@Z ; std::addressof<DLTP_BLOCK_DATA const >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBUDLTP_BLOCK_DATA@@@std@@YAPBUDLTP_BLOCK_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUDLTP_BLOCK_DATA@@@std@@YAPBUDLTP_BLOCK_DATA@@ABU1@@Z PROC ; std::addressof<DLTP_BLOCK_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUDLTP_BLOCK_DATA@@@std@@YAPBUDLTP_BLOCK_DATA@@ABU1@@Z ENDP ; std::addressof<DLTP_BLOCK_DATA const >
_TEXT	ENDS
PUBLIC	??$forward@AAUDLTP_BLOCK_DATA@@@std@@YAAAUDLTP_BLOCK_DATA@@AAU1@@Z ; std::forward<DLTP_BLOCK_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUDLTP_BLOCK_DATA@@@std@@YAAAUDLTP_BLOCK_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUDLTP_BLOCK_DATA@@@std@@YAAAUDLTP_BLOCK_DATA@@AAU1@@Z PROC ; std::forward<DLTP_BLOCK_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUDLTP_BLOCK_DATA@@@std@@YAAAUDLTP_BLOCK_DATA@@AAU1@@Z ENDP ; std::forward<DLTP_BLOCK_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAUDLTP_BLOCK_DATA@@@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@AAU2@@Z ; std::allocator<DLTP_BLOCK_DATA>::construct<DLTP_BLOCK_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUDLTP_BLOCK_DATA@@@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUDLTP_BLOCK_DATA@@@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@AAU2@@Z PROC ; std::allocator<DLTP_BLOCK_DATA>::construct<DLTP_BLOCK_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAUDLTP_BLOCK_DATA@@@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@AAU2@@Z ENDP ; std::allocator<DLTP_BLOCK_DATA>::construct<DLTP_BLOCK_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABUDLTP_BLOCK_DATA@@@std@@YAABUDLTP_BLOCK_DATA@@ABU1@@Z ; std::forward<DLTP_BLOCK_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUDLTP_BLOCK_DATA@@@std@@YAABUDLTP_BLOCK_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUDLTP_BLOCK_DATA@@@std@@YAABUDLTP_BLOCK_DATA@@ABU1@@Z PROC ; std::forward<DLTP_BLOCK_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUDLTP_BLOCK_DATA@@@std@@YAABUDLTP_BLOCK_DATA@@ABU1@@Z ENDP ; std::forward<DLTP_BLOCK_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UDLTP_BLOCK_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDLTP_BLOCK_DATA@@0@Z ; std::_Ptr_cat<DLTP_BLOCK_DATA,DLTP_BLOCK_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UDLTP_BLOCK_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDLTP_BLOCK_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UDLTP_BLOCK_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDLTP_BLOCK_DATA@@0@Z PROC ; std::_Ptr_cat<DLTP_BLOCK_DATA,DLTP_BLOCK_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UDLTP_BLOCK_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUDLTP_BLOCK_DATA@@0@Z ENDP ; std::_Ptr_cat<DLTP_BLOCK_DATA,DLTP_BLOCK_DATA>
_TEXT	ENDS
PUBLIC	??$_Construct@UDLTP_BLOCK_DATA@@ABU1@@std@@YAXPAUDLTP_BLOCK_DATA@@ABU1@@Z ; std::_Construct<DLTP_BLOCK_DATA,DLTP_BLOCK_DATA const &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UDLTP_BLOCK_DATA@@ABU1@@std@@YAXPAUDLTP_BLOCK_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UDLTP_BLOCK_DATA@@ABU1@@std@@YAXPAUDLTP_BLOCK_DATA@@ABU1@@Z PROC ; std::_Construct<DLTP_BLOCK_DATA,DLTP_BLOCK_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@UDLTP_BLOCK_DATA@@ABU1@@std@@YAXPAUDLTP_BLOCK_DATA@@ABU1@@Z ENDP ; std::_Construct<DLTP_BLOCK_DATA,DLTP_BLOCK_DATA const &>
_TEXT	ENDS
PUBLIC	??$move@AAUDLTP_BLOCK_DATA@@@std@@YA$$QAUDLTP_BLOCK_DATA@@AAU1@@Z ; std::move<DLTP_BLOCK_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUDLTP_BLOCK_DATA@@@std@@YA$$QAUDLTP_BLOCK_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUDLTP_BLOCK_DATA@@@std@@YA$$QAUDLTP_BLOCK_DATA@@AAU1@@Z PROC ; std::move<DLTP_BLOCK_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUDLTP_BLOCK_DATA@@@std@@YA$$QAUDLTP_BLOCK_DATA@@AAU1@@Z ENDP ; std::move<DLTP_BLOCK_DATA &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUDLTP_BLOCK_DATA@@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@@Z ; std::_Val_type<DLTP_BLOCK_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUDLTP_BLOCK_DATA@@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUDLTP_BLOCK_DATA@@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@@Z PROC ; std::_Val_type<DLTP_BLOCK_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUDLTP_BLOCK_DATA@@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@@Z ENDP ; std::_Val_type<DLTP_BLOCK_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UDLTP_BLOCK_DATA@@@std@@YAXPAUDLTP_BLOCK_DATA@@@Z ; std::_Destroy<DLTP_BLOCK_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UDLTP_BLOCK_DATA@@@std@@YAXPAUDLTP_BLOCK_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UDLTP_BLOCK_DATA@@@std@@YAXPAUDLTP_BLOCK_DATA@@@Z PROC ; std::_Destroy<DLTP_BLOCK_DATA>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UDLTP_BLOCK_DATA@@@std@@YAXPAUDLTP_BLOCK_DATA@@@Z ENDP ; std::_Destroy<DLTP_BLOCK_DATA>
_TEXT	ENDS
PUBLIC	??$forward@UDLTP_BLOCK_DATA@@@std@@YA$$QAUDLTP_BLOCK_DATA@@AAU1@@Z ; std::forward<DLTP_BLOCK_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@UDLTP_BLOCK_DATA@@@std@@YA$$QAUDLTP_BLOCK_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UDLTP_BLOCK_DATA@@@std@@YA$$QAUDLTP_BLOCK_DATA@@AAU1@@Z PROC ; std::forward<DLTP_BLOCK_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UDLTP_BLOCK_DATA@@@std@@YA$$QAUDLTP_BLOCK_DATA@@AAU1@@Z ENDP ; std::forward<DLTP_BLOCK_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?CheckTeleportDL@cTeleportManager@@QAE_NH@Z	; cTeleportManager::CheckTeleportDL
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\teleportmanager.cpp
;	COMDAT ?CheckTeleportDL@cTeleportManager@@QAE_NH@Z
_TEXT	SEGMENT
_map$ = 8						; size = 4
?CheckTeleportDL@cTeleportManager@@QAE_NH@Z PROC	; cTeleportManager::CheckTeleportDL, COMDAT
; _this$ = ecx

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 530  : 	if( g_ZtLicense.CheckUser(eZtUB::SILVER1)	 || 
; 531  : 		g_ZtLicense.CheckUser(eZtUB::SILVER2)	 ||
; 532  : 		g_ZtLicense.CheckUser(eZtUB::ulasevich)	 ||
; 533  : 		g_ZtLicense.CheckUser(eZtUB::ulasevich2) )

  00006	6a 07		 push	 7
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00012	84 c0		 test	 al, al
  00014	75 30		 jne	 SHORT $LN5@CheckTelep
  00016	6a 08		 push	 8
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00022	84 c0		 test	 al, al
  00024	75 20		 jne	 SHORT $LN5@CheckTelep
  00026	6a 17		 push	 23			; 00000017H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00032	84 c0		 test	 al, al
  00034	75 10		 jne	 SHORT $LN5@CheckTelep
  00036	6a 24		 push	 36			; 00000024H
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00042	84 c0		 test	 al, al
  00044	74 2a		 je	 SHORT $LN2@CheckTelep
$LN5@CheckTelep:

; 534  : 	{
; 535  : 		for(int i = 0; i < this->m_dlblock.size(); i++)

  00046	8b 86 d0 2b 00
	00		 mov	 eax, DWORD PTR [esi+11216]
  0004c	2b 86 cc 2b 00
	00		 sub	 eax, DWORD PTR [esi+11212]
  00052	33 c9		 xor	 ecx, ecx
  00054	c1 f8 02	 sar	 eax, 2
  00057	85 c0		 test	 eax, eax
  00059	74 15		 je	 SHORT $LN2@CheckTelep
  0005b	8b 96 cc 2b 00
	00		 mov	 edx, DWORD PTR [esi+11212]
  00061	8b 75 08	 mov	 esi, DWORD PTR _map$[ebp]
$LL4@CheckTelep:

; 536  : 		{
; 537  : 			if(this->m_dlblock[i].MapNumber == map)

  00064	39 32		 cmp	 DWORD PTR [edx], esi
  00066	74 0f		 je	 SHORT $LN14@CheckTelep

; 534  : 	{
; 535  : 		for(int i = 0; i < this->m_dlblock.size(); i++)

  00068	41		 inc	 ecx
  00069	83 c2 04	 add	 edx, 4
  0006c	3b c8		 cmp	 ecx, eax
  0006e	72 f4		 jb	 SHORT $LL4@CheckTelep
$LN2@CheckTelep:

; 540  : 			}
; 541  : 		}
; 542  : 	}
; 543  : 
; 544  : 	return true;

  00070	b0 01		 mov	 al, 1
  00072	5e		 pop	 esi

; 545  : }

  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
$LN14@CheckTelep:

; 538  : 			{
; 539  : 				return false;

  00077	32 c0		 xor	 al, al
  00079	5e		 pop	 esi

; 545  : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?CheckTeleportDL@cTeleportManager@@QAE_NH@Z ENDP	; cTeleportManager::CheckTeleportDL
_TEXT	ENDS
PUBLIC	?CheckDLMasterTeleport@cTeleportManager@@QAE_NH@Z ; cTeleportManager::CheckDLMasterTeleport
; Function compile flags: /Ogtp
;	COMDAT ?CheckDLMasterTeleport@cTeleportManager@@QAE_NH@Z
_TEXT	SEGMENT
_Map$ = 8						; size = 4
?CheckDLMasterTeleport@cTeleportManager@@QAE_NH@Z PROC	; cTeleportManager::CheckDLMasterTeleport, COMDAT
; _this$ = ecx

; 549  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 550  : 	if( g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2) )

  00006	6a 20		 push	 32			; 00000020H
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00012	84 c0		 test	 al, al
  00014	75 20		 jne	 SHORT $LN5@CheckDLMas
  00016	6a 21		 push	 33			; 00000021H
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00022	84 c0		 test	 al, al
  00024	75 10		 jne	 SHORT $LN5@CheckDLMas
  00026	6a 22		 push	 34			; 00000022H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00032	84 c0		 test	 al, al
  00034	74 2a		 je	 SHORT $LN2@CheckDLMas
$LN5@CheckDLMas:

; 551  : 	{
; 552  : 		for(int i = 0; i < this->m_DLMasterBlock.size(); i++)

  00036	8b 86 e0 2b 00
	00		 mov	 eax, DWORD PTR [esi+11232]
  0003c	2b 86 dc 2b 00
	00		 sub	 eax, DWORD PTR [esi+11228]
  00042	33 c9		 xor	 ecx, ecx
  00044	c1 f8 02	 sar	 eax, 2
  00047	85 c0		 test	 eax, eax
  00049	74 15		 je	 SHORT $LN2@CheckDLMas
  0004b	8b 96 dc 2b 00
	00		 mov	 edx, DWORD PTR [esi+11228]
  00051	8b 75 08	 mov	 esi, DWORD PTR _Map$[ebp]
$LL4@CheckDLMas:

; 553  : 		{
; 554  : 			if(this->m_DLMasterBlock[i].MapNumber == Map)

  00054	39 32		 cmp	 DWORD PTR [edx], esi
  00056	74 0f		 je	 SHORT $LN14@CheckDLMas

; 551  : 	{
; 552  : 		for(int i = 0; i < this->m_DLMasterBlock.size(); i++)

  00058	41		 inc	 ecx
  00059	83 c2 04	 add	 edx, 4
  0005c	3b c8		 cmp	 ecx, eax
  0005e	72 f4		 jb	 SHORT $LL4@CheckDLMas
$LN2@CheckDLMas:

; 557  : 			}
; 558  : 		}
; 559  : 	}
; 560  : 
; 561  : 	return true;

  00060	b0 01		 mov	 al, 1
  00062	5e		 pop	 esi

; 562  : }

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
$LN14@CheckDLMas:

; 555  : 			{
; 556  : 				return false;

  00067	32 c0		 xor	 al, al
  00069	5e		 pop	 esi

; 562  : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?CheckDLMasterTeleport@cTeleportManager@@QAE_NH@Z ENDP	; cTeleportManager::CheckDLMasterTeleport
_TEXT	ENDS
PUBLIC	?CheckDLMemberTeleport@cTeleportManager@@QAE_NH@Z ; cTeleportManager::CheckDLMemberTeleport
; Function compile flags: /Ogtp
;	COMDAT ?CheckDLMemberTeleport@cTeleportManager@@QAE_NH@Z
_TEXT	SEGMENT
_Map$ = 8						; size = 4
?CheckDLMemberTeleport@cTeleportManager@@QAE_NH@Z PROC	; cTeleportManager::CheckDLMemberTeleport, COMDAT
; _this$ = ecx

; 565  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 566  : 	if( g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2) )

  00006	6a 20		 push	 32			; 00000020H
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00012	84 c0		 test	 al, al
  00014	75 20		 jne	 SHORT $LN5@CheckDLMem
  00016	6a 21		 push	 33			; 00000021H
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00022	84 c0		 test	 al, al
  00024	75 10		 jne	 SHORT $LN5@CheckDLMem
  00026	6a 22		 push	 34			; 00000022H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00032	84 c0		 test	 al, al
  00034	74 2a		 je	 SHORT $LN2@CheckDLMem
$LN5@CheckDLMem:

; 567  : 	{
; 568  : 		for(int i = 0; i < this->m_DLMemberBlock.size(); i++)

  00036	8b 86 f0 2b 00
	00		 mov	 eax, DWORD PTR [esi+11248]
  0003c	2b 86 ec 2b 00
	00		 sub	 eax, DWORD PTR [esi+11244]
  00042	33 c9		 xor	 ecx, ecx
  00044	c1 f8 02	 sar	 eax, 2
  00047	85 c0		 test	 eax, eax
  00049	74 15		 je	 SHORT $LN2@CheckDLMem
  0004b	8b 96 ec 2b 00
	00		 mov	 edx, DWORD PTR [esi+11244]
  00051	8b 75 08	 mov	 esi, DWORD PTR _Map$[ebp]
$LL4@CheckDLMem:

; 569  : 		{
; 570  : 			if(this->m_DLMemberBlock[i].MapNumber == Map)

  00054	39 32		 cmp	 DWORD PTR [edx], esi
  00056	74 0f		 je	 SHORT $LN14@CheckDLMem

; 567  : 	{
; 568  : 		for(int i = 0; i < this->m_DLMemberBlock.size(); i++)

  00058	41		 inc	 ecx
  00059	83 c2 04	 add	 edx, 4
  0005c	3b c8		 cmp	 ecx, eax
  0005e	72 f4		 jb	 SHORT $LL4@CheckDLMem
$LN2@CheckDLMem:

; 573  : 			}
; 574  : 		}
; 575  : 	}
; 576  : 
; 577  : 
; 578  : 
; 579  : 	return true;

  00060	b0 01		 mov	 al, 1
  00062	5e		 pop	 esi

; 580  : }

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
$LN14@CheckDLMem:

; 571  : 			{
; 572  : 				return false;

  00067	32 c0		 xor	 al, al
  00069	5e		 pop	 esi

; 580  : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?CheckDLMemberTeleport@cTeleportManager@@QAE_NH@Z ENDP	; cTeleportManager::CheckDLMemberTeleport
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@V?$allocator@UDLTP_BLOCK_DATA@@@1@@Z ; std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@V?$allocator@UDLTP_BLOCK_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@V?$allocator@UDLTP_BLOCK_DATA@@@1@@Z PROC ; std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@V?$allocator@UDLTP_BLOCK_DATA@@@1@@Z ENDP ; std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEII@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QAE@PAUDLTP_BLOCK_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QAE@PAUDLTP_BLOCK_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QAE@PAUDLTP_BLOCK_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QAE@PAUDLTP_BLOCK_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@AAU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA &>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@AAU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@AAU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@AAU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UDLTP_BLOCK_DATA@@@std@@YAPAUDLTP_BLOCK_DATA@@IPAU1@@Z ; std::_Allocate<DLTP_BLOCK_DATA>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UDLTP_BLOCK_DATA@@@std@@YAPAUDLTP_BLOCK_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T205462 = -12						; size = 12
$T205467 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UDLTP_BLOCK_DATA@@@std@@YAPAUDLTP_BLOCK_DATA@@IPAU1@@Z PROC ; std::_Allocate<DLTP_BLOCK_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate
  00017	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T205467[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T205462[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T205467[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T205462[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T205462[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@UDLTP_BLOCK_DATA@@@std@@YAPAUDLTP_BLOCK_DATA@@IPAU1@@Z ENDP ; std::_Allocate<DLTP_BLOCK_DATA>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@ABU3@@Z ; std::allocator<DLTP_BLOCK_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@ABU3@@Z PROC ; std::allocator<DLTP_BLOCK_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@2:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@ABU3@@Z ENDP ; std::allocator<DLTP_BLOCK_DATA>::construct
_TEXT	ENDS
PUBLIC	??$_Move@PAUDLTP_BLOCK_DATA@@PAU1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUDLTP_BLOCK_DATA@@PAU1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUDLTP_BLOCK_DATA@@PAU1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 10		 je	 SHORT $LN1@Move
  00010	56		 push	 esi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c1 04	 add	 ecx, 4
  00018	83 c0 04	 add	 eax, 4
  0001b	3b ca		 cmp	 ecx, edx
  0001d	75 f2		 jne	 SHORT $LL3@Move
  0001f	5e		 pop	 esi
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Move@PAUDLTP_BLOCK_DATA@@PAU1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@@Z ; std::allocator<DLTP_BLOCK_DATA>::destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@@Z PROC ; std::allocator<DLTP_BLOCK_DATA>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@@Z ENDP ; std::allocator<DLTP_BLOCK_DATA>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@$$QAU3@@Z ; std::allocator<DLTP_BLOCK_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@$$QAU3@@Z PROC ; std::allocator<DLTP_BLOCK_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@construct@3:

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEXPAUDLTP_BLOCK_DATA@@$$QAU3@@Z ENDP ; std::allocator<DLTP_BLOCK_DATA>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QAE@PAUDLTP_BLOCK_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::_Vector_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QAE@PAUDLTP_BLOCK_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QAE@PAUDLTP_BLOCK_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::_Vector_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QAE@PAUDLTP_BLOCK_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::_Vector_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEPAUDLTP_BLOCK_DATA@@I@Z ; std::allocator<DLTP_BLOCK_DATA>::allocate
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEPAUDLTP_BLOCK_DATA@@I@Z
_TEXT	SEGMENT
$T205576 = -12						; size = 12
$T205568 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEPAUDLTP_BLOCK_DATA@@I@Z PROC ; std::allocator<DLTP_BLOCK_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate
  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate
  00017	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T205568[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T205576[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T205568[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T205576[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T205576[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEPAUDLTP_BLOCK_DATA@@I@Z ENDP ; std::allocator<DLTP_BLOCK_DATA>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@ABU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@ABU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@ABU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN9@Cons_val@2:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@ABU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAUDLTP_BLOCK_DATA@@PAU1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00@Z ; std::_Move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUDLTP_BLOCK_DATA@@PAU1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUDLTP_BLOCK_DATA@@PAU1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00@Z PROC ; std::_Move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 10		 je	 SHORT $LN5@Move@2
  00010	56		 push	 esi
$LL7@Move@2:
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c1 04	 add	 ecx, 4
  00018	83 c0 04	 add	 eax, 4
  0001b	3b ca		 cmp	 ecx, edx
  0001d	75 f2		 jne	 SHORT $LL7@Move@2
  0001f	5e		 pop	 esi
$LN5@Move@2:

; 2536 : 	}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Move@PAUDLTP_BLOCK_DATA@@PAU1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00@Z ENDP ; std::_Move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@@Z ; std::_Dest_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@@Z PROC ; std::_Dest_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@U3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@U3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@U3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN7@Cons_val@3:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@U3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA>
_TEXT	ENDS
PUBLIC	?begin@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@XZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::begin
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@XZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAXPAUDLTP_BLOCK_DATA@@0AAV?$allocator@UDLTP_BLOCK_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<DLTP_BLOCK_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAXPAUDLTP_BLOCK_DATA@@0AAV?$allocator@UDLTP_BLOCK_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAXPAUDLTP_BLOCK_DATA@@0AAV?$allocator@UDLTP_BLOCK_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<DLTP_BLOCK_DATA> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAXPAUDLTP_BLOCK_DATA@@0AAV?$allocator@UDLTP_BLOCK_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<DLTP_BLOCK_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@U1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *,std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA>
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@U1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@U1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *,std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@U3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA>
  0001e	83 c6 04	 add	 esi, 4
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 04	 add	 edi, 4
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@U1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *,std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAXPAUDLTP_BLOCK_DATA@@0AAV?$allocator@UDLTP_BLOCK_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<DLTP_BLOCK_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAXPAUDLTP_BLOCK_DATA@@0AAV?$allocator@UDLTP_BLOCK_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAXPAUDLTP_BLOCK_DATA@@0AAV?$allocator@UDLTP_BLOCK_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<DLTP_BLOCK_DATA> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAXPAUDLTP_BLOCK_DATA@@0AAV?$allocator@UDLTP_BLOCK_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<DLTP_BLOCK_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@@Z ; std::_Uninitialized_move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *,std::allocator<DLTP_BLOCK_DATA> >
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$205762 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@@Z PROC ; std::_Uninitialized_move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *,std::allocator<DLTP_BLOCK_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$205762[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@U1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *,std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *,std::allocator<DLTP_BLOCK_DATA> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXPAUDLTP_BLOCK_DATA@@0@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Destroy
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXPAUDLTP_BLOCK_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXPAUDLTP_BLOCK_DATA@@0@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXPAUDLTP_BLOCK_DATA@@0@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUDLTP_BLOCK_DATA@@@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEPAUDLTP_BLOCK_DATA@@PAU2@00@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Umove<DLTP_BLOCK_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUDLTP_BLOCK_DATA@@@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEPAUDLTP_BLOCK_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$205785 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUDLTP_BLOCK_DATA@@@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEPAUDLTP_BLOCK_DATA@@PAU2@00@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Umove<DLTP_BLOCK_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$205785[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@U1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *,std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUDLTP_BLOCK_DATA@@@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEPAUDLTP_BLOCK_DATA@@PAU2@00@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Umove<DLTP_BLOCK_DATA *>
_TEXT	ENDS
PUBLIC	?erase@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@0@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __First_arg$[ebp]
  0000d	89 30		 mov	 DWORD PTR [eax], esi
  0000f	3b f2		 cmp	 esi, edx
  00011	74 20		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00013	57		 push	 edi
  00014	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00017	3b d7		 cmp	 edx, edi
  00019	74 14		 je	 SHORT $LN30@erase
  0001b	53		 push	 ebx
  0001c	8d 64 24 00	 npad	 4
$LL32@erase:
  00020	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00022	89 1e		 mov	 DWORD PTR [esi], ebx
  00024	83 c2 04	 add	 edx, 4
  00027	83 c6 04	 add	 esi, 4
  0002a	3b d7		 cmp	 edx, edi
  0002c	75 f2		 jne	 SHORT $LL32@erase
  0002e	5b		 pop	 ebx
$LN30@erase:

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  0002f	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00032	5f		 pop	 edi
$LN1@erase:
  00033	5e		 pop	 esi

; 1212 : 			}
; 1213 : 		return (_First);
; 1214 : 		}

  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXXZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::reserve
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$204457 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$205956 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 02	 sar	 ecx, 2
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 56		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@UDLTP_BLOCK_DATA@@@std@@QAEPAUDLTP_BLOCK_DATA@@I@Z ; std::allocator<DLTP_BLOCK_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$205956[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$204457[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUDLTP_BLOCK_DATA@@PAU1@V?$allocator@UDLTP_BLOCK_DATA@@@std@@U1@@std@@YAPAUDLTP_BLOCK_DATA@@PAU1@00AAV?$allocator@UDLTP_BLOCK_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<DLTP_BLOCK_DATA *,DLTP_BLOCK_DATA *,std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0007d	2b f8		 sub	 edi, eax
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00085	85 c0		 test	 eax, eax
  00087	74 09		 je	 SHORT $LN35@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008f	83 c4 04	 add	 esp, 4
$LN35@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00095	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00098	8d 14 bb	 lea	 edx, DWORD PTR [ebx+edi*4]
  0009b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0009e	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 771  : 			this->_Myfirst = _Ptr;

  000a1	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b7	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$204457[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve:
$LN41@reserve:
  000cc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::reserve
PUBLIC	??1?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::~vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::~vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::~vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXXZ ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::clear, COMDAT
; _this$ = ecx

; 1218 : 		erase(begin(), end());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	56		 push	 esi
  00004	8b 31		 mov	 esi, DWORD PTR [ecx]
  00006	3b f2		 cmp	 esi, edx
  00008	74 19		 je	 SHORT $LN19@clear
  0000a	8b c2		 mov	 eax, edx
  0000c	3b d2		 cmp	 edx, edx
  0000e	74 10		 je	 SHORT $LN48@clear
  00010	57		 push	 edi
$LL50@clear:
  00011	8b 38		 mov	 edi, DWORD PTR [eax]
  00013	89 3e		 mov	 DWORD PTR [esi], edi
  00015	83 c0 04	 add	 eax, 4
  00018	83 c6 04	 add	 esi, 4
  0001b	3b c2		 cmp	 eax, edx
  0001d	75 f2		 jne	 SHORT $LL50@clear
  0001f	5f		 pop	 edi
$LN48@clear:
  00020	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN19@clear:
  00023	5e		 pop	 esi

; 1219 : 		}

  00024	c3		 ret	 0
?clear@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXI@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  00014	c1 f8 02	 sar	 eax, 2
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 02	 sar	 edx, 2
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXI@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::reserve
$LN1@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	??0cTeleportManager@@QAE@XZ			; cTeleportManager::cTeleportManager
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\teleportmanager.cpp
;	COMDAT ??0cTeleportManager@@QAE@XZ
_TEXT	SEGMENT
??0cTeleportManager@@QAE@XZ PROC			; cTeleportManager::cTeleportManager, COMDAT
; _this$ = ecx

; 15   : {

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 88 cc 2b 00
	00		 mov	 DWORD PTR [eax+11212], ecx
  0000a	89 88 d0 2b 00
	00		 mov	 DWORD PTR [eax+11216], ecx
  00010	89 88 d4 2b 00
	00		 mov	 DWORD PTR [eax+11220], ecx
  00016	89 88 dc 2b 00
	00		 mov	 DWORD PTR [eax+11228], ecx
  0001c	89 88 e0 2b 00
	00		 mov	 DWORD PTR [eax+11232], ecx
  00022	89 88 e4 2b 00
	00		 mov	 DWORD PTR [eax+11236], ecx
  00028	89 88 ec 2b 00
	00		 mov	 DWORD PTR [eax+11244], ecx
  0002e	89 88 f0 2b 00
	00		 mov	 DWORD PTR [eax+11248], ecx
  00034	89 88 f4 2b 00
	00		 mov	 DWORD PTR [eax+11252], ecx

; 16   : 
; 17   : }

  0003a	c3		 ret	 0
??0cTeleportManager@@QAE@XZ ENDP			; cTeleportManager::cTeleportManager
_TEXT	ENDS
PUBLIC	??1cTeleportManager@@QAE@XZ			; cTeleportManager::~cTeleportManager
; Function compile flags: /Ogtp
;	COMDAT ??1cTeleportManager@@QAE@XZ
_TEXT	SEGMENT
??1cTeleportManager@@QAE@XZ PROC			; cTeleportManager::~cTeleportManager, COMDAT
; _this$ = ecx

; 20   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 21   : 
; 22   : }

  00003	8b 86 ec 2b 00
	00		 mov	 eax, DWORD PTR [esi+11244]
  00009	57		 push	 edi
  0000a	33 ff		 xor	 edi, edi
  0000c	3b c7		 cmp	 eax, edi
  0000e	74 09		 je	 SHORT $LN13@cTeleportM
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN13@cTeleportM:
  00019	89 be ec 2b 00
	00		 mov	 DWORD PTR [esi+11244], edi
  0001f	89 be f0 2b 00
	00		 mov	 DWORD PTR [esi+11248], edi
  00025	89 be f4 2b 00
	00		 mov	 DWORD PTR [esi+11252], edi
  0002b	8b 86 dc 2b 00
	00		 mov	 eax, DWORD PTR [esi+11228]
  00031	3b c7		 cmp	 eax, edi
  00033	74 09		 je	 SHORT $LN24@cTeleportM
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
$LN24@cTeleportM:
  0003e	89 be dc 2b 00
	00		 mov	 DWORD PTR [esi+11228], edi
  00044	89 be e0 2b 00
	00		 mov	 DWORD PTR [esi+11232], edi
  0004a	89 be e4 2b 00
	00		 mov	 DWORD PTR [esi+11236], edi
  00050	8b 86 cc 2b 00
	00		 mov	 eax, DWORD PTR [esi+11212]
  00056	3b c7		 cmp	 eax, edi
  00058	74 09		 je	 SHORT $LN35@cTeleportM
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00060	83 c4 04	 add	 esp, 4
$LN35@cTeleportM:
  00063	89 be cc 2b 00
	00		 mov	 DWORD PTR [esi+11212], edi
  00069	89 be d0 2b 00
	00		 mov	 DWORD PTR [esi+11216], edi
  0006f	89 be d4 2b 00
	00		 mov	 DWORD PTR [esi+11220], edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	c3		 ret	 0
??1cTeleportManager@@QAE@XZ ENDP			; cTeleportManager::~cTeleportManager
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXABUDLTP_BLOCK_DATA@@@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::push_back
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXABUDLTP_BLOCK_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXABUDLTP_BLOCK_DATA@@@Z PROC ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXI@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@AAU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@IAEXI@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UDLTP_BLOCK_DATA@@@std@@UDLTP_BLOCK_DATA@@ABU3@@std@@YAXAAV?$allocator@UDLTP_BLOCK_DATA@@@0@PAUDLTP_BLOCK_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<DLTP_BLOCK_DATA>,DLTP_BLOCK_DATA,DLTP_BLOCK_DATA const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXABUDLTP_BLOCK_DATA@@@Z ENDP ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0CJ@OKAPPHKC@?$CC?$CF?$FL?$FO?$CC?$FN?$CC?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@ ; `string'
PUBLIC	??_C@_0CN@OBHGOHPF@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0CD@MBABJFMK@?$CC?$CF?$FL?$FO?$CC?$FN?$CC?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@ ; `string'
PUBLIC	??_C@_0CH@DDKHOEJN@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ ; `string'
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0CD@KLBDDBHN@?4?4?2Data?2ZtData?2TeleportManager?4i@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cTeleportManager@@QAEXXZ			; cTeleportManager::Load
EXTRN	_fclose:PROC
EXTRN	_sprintf:PROC
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OKAPPHKC@?$CC?$CF?$FL?$FO?$CC?$FN?$CC?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@
CONST	SEGMENT
??_C@_0CJ@OKAPPHKC@?$CC?$CF?$FL?$FO?$CC?$FN?$CC?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@ DB '"'
	DB	'%[^"]" %d %d %d %d %d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@OBHGOHPF@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
CONST	SEGMENT
??_C@_0CN@OBHGOHPF@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ DB '%'
	DB	'd %d %d %d %d %d %d %d %d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MBABJFMK@?$CC?$CF?$FL?$FO?$CC?$FN?$CC?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@
CONST	SEGMENT
??_C@_0CD@MBABJFMK@?$CC?$CF?$FL?$FO?$CC?$FN?$CC?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@ DB '"'
	DB	'%[^"]" %d %d %d %d %d %d %d %d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DDKHOEJN@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
CONST	SEGMENT
??_C@_0CH@DDKHOEJN@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@ DB '%'
	DB	'd %d %d %d %d %d %d %d %d %d %d %d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KLBDDBHN@?4?4?2Data?2ZtData?2TeleportManager?4i@
CONST	SEGMENT
??_C@_0CD@KLBDDBHN@?4?4?2Data?2ZtData?2TeleportManager?4i@ DB '..\Data\Zt'
	DB	'Data\TeleportManager.ini', 00H		; `string'
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\teleportmanager.cpp
CONST	ENDS
;	COMDAT ?Load@cTeleportManager@@QAEXXZ
_TEXT	SEGMENT
_n$204063 = -388					; size = 4
_n$204071 = -384					; size = 4
_n$204068 = -380					; size = 4
_file$ = -376						; size = 4
_List$204072 = -372					; size = 4
_List$204069 = -372					; size = 4
_List$204064 = -372					; size = 4
_Flag$ = -368						; size = 4
_n$204049 = -364					; size = 44
_n$204058 = -356					; size = 36
_n$204045 = -320					; size = 60
_mes$204057 = -312					; size = 50
_n$204054 = -312					; size = 52
_mes$204048 = -312					; size = 50
_Buff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?Load@cTeleportManager@@QAEXXZ PROC			; cTeleportManager::Load, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 01 00
	00		 sub	 esp, 388		; 00000184H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 26   : 	this->Enable = GetPrivateProfileInt("ZtTeam","Enable",0,TeleportManager_DIR);

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KLBDDBHN@?4?4?2Data?2ZtData?2TeleportManager?4i@
  0001b	33 db		 xor	 ebx, ebx
  0001d	53		 push	 ebx
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00028	8b f1		 mov	 esi, ecx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 27   : 
; 28   : 	ZeroMemory(this->NpcBase,sizeof(NpcBase));

  00030	68 10 0e 00 00	 push	 3600			; 00000e10H
  00035	85 c0		 test	 eax, eax
  00037	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0003a	0f 95 c0	 setne	 al
  0003d	53		 push	 ebx
  0003e	51		 push	 ecx
  0003f	88 06		 mov	 BYTE PTR [esi], al
  00041	e8 00 00 00 00	 call	 _memset

; 29   : 	ZeroMemory(this->CmdBase,sizeof(CmdBase));

  00046	68 b0 1d 00 00	 push	 7600			; 00001db0H
  0004b	8d 96 14 0e 00
	00		 lea	 edx, DWORD PTR [esi+3604]
  00051	53		 push	 ebx
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 _memset

; 30   : 
; 31   : 	FILE * file = fopen(TeleportManager_DIR,"r");

  00058	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KLBDDBHN@?4?4?2Data?2ZtData?2TeleportManager?4i@
  00062	e8 00 00 00 00	 call	 _fopen
  00067	8b f8		 mov	 edi, eax
  00069	83 c4 20	 add	 esp, 32			; 00000020H
  0006c	89 bd 88 fe ff
	ff		 mov	 DWORD PTR _file$[ebp], edi

; 32   : 
; 33   : 	if(file == NULL)

  00072	3b fb		 cmp	 edi, ebx
  00074	75 25		 jne	 SHORT $LN19@Load

; 34   : 	{
; 35   : 		MessageBoxA(0,TeleportManager_DIR,"LOAD FILE ERROR",0);

  00076	53		 push	 ebx
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KLBDDBHN@?4?4?2Data?2ZtData?2TeleportManager?4i@
  00081	53		 push	 ebx
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00088	5f		 pop	 edi

; 36   : 		this->Enable = false;

  00089	88 1e		 mov	 BYTE PTR [esi], bl
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 186  : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN19@Load:

; 37   : 	}
; 38   : 
; 39   : 	if(!this->Enable) return;

  0009b	38 1e		 cmp	 BYTE PTR [esi], bl
  0009d	0f 84 c0 08 00
	00		 je	 $LN20@Load

; 40   : 
; 41   : 	char Buff[256];
; 42   : 	int Flag = 0;
; 43   : 
; 44   : 	this->CountNPC = 0;

  000a3	89 9e c4 2b 00
	00		 mov	 DWORD PTR [esi+11204], ebx

; 45   : 	this->CountCMD = 0;

  000a9	89 9e c8 2b 00
	00		 mov	 DWORD PTR [esi+11208], ebx

; 46   : 
; 47   : 	this->m_DLMasterBlock.clear();

  000af	8b 96 dc 2b 00
	00		 mov	 edx, DWORD PTR [esi+11228]
  000b5	8b 86 e0 2b 00
	00		 mov	 eax, DWORD PTR [esi+11232]
  000bb	89 9d 90 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], ebx
  000c1	3b d0		 cmp	 edx, eax
  000c3	74 1f		 je	 SHORT $LN40@Load
  000c5	8b c8		 mov	 ecx, eax
  000c7	3b c0		 cmp	 eax, eax
  000c9	74 13		 je	 SHORT $LN69@Load
  000cb	eb 03 8d 49 00	 npad	 5
$LL71@Load:
  000d0	8b 19		 mov	 ebx, DWORD PTR [ecx]
  000d2	89 1a		 mov	 DWORD PTR [edx], ebx
  000d4	83 c1 04	 add	 ecx, 4
  000d7	83 c2 04	 add	 edx, 4
  000da	3b c8		 cmp	 ecx, eax
  000dc	75 f2		 jne	 SHORT $LL71@Load
$LN69@Load:
  000de	89 96 e0 2b 00
	00		 mov	 DWORD PTR [esi+11232], edx
$LN40@Load:

; 48   : 	this->m_DLMemberBlock.clear();

  000e4	8b 96 ec 2b 00
	00		 mov	 edx, DWORD PTR [esi+11244]
  000ea	8b 8e f0 2b 00
	00		 mov	 ecx, DWORD PTR [esi+11248]
  000f0	3b d1		 cmp	 edx, ecx
  000f2	74 26		 je	 SHORT $LN133@Load
  000f4	8b c1		 mov	 eax, ecx
  000f6	3b c9		 cmp	 ecx, ecx
  000f8	74 1a		 je	 SHORT $LN123@Load
  000fa	8d 9b 00 00 00
	00		 npad	 6
$LL125@Load:
  00100	8b 38		 mov	 edi, DWORD PTR [eax]
  00102	89 3a		 mov	 DWORD PTR [edx], edi
  00104	83 c0 04	 add	 eax, 4
  00107	83 c2 04	 add	 edx, 4
  0010a	3b c1		 cmp	 eax, ecx
  0010c	75 f2		 jne	 SHORT $LL125@Load
  0010e	8b bd 88 fe ff
	ff		 mov	 edi, DWORD PTR _file$[ebp]
$LN123@Load:
  00114	89 96 f0 2b 00
	00		 mov	 DWORD PTR [esi+11248], edx
$LN133@Load:

; 49   : 
; 50   : 	while(!feof(file))

  0011a	57		 push	 edi
  0011b	e8 00 00 00 00	 call	 _feof
  00120	83 c4 04	 add	 esp, 4
  00123	85 c0		 test	 eax, eax
  00125	0f 85 2f 08 00
	00		 jne	 $LN16@Load
  0012b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0012e	8b ff		 npad	 2
$LL17@Load:

; 51   : 	{
; 52   : 		fgets(Buff,256,file);

  00130	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  00136	50		 push	 eax
  00137	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0013d	68 00 01 00 00	 push	 256			; 00000100H
  00142	51		 push	 ecx
  00143	e8 00 00 00 00	 call	 _fgets

; 53   : 		if(Zt_IsBadFileLine(Buff, Flag))

  00148	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR _Flag$[ebp]
  0014e	52		 push	 edx
  0014f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  0015b	83 c4 14	 add	 esp, 20			; 00000014H
  0015e	84 c0		 test	 al, al
  00160	0f 85 d7 07 00
	00		 jne	 $LN1@Load

; 54   : 			continue;
; 55   : 
; 56   : 		if( g_ZtLicense.CheckUser(eZtUB::Local)		 || 
; 57   : 			g_ZtLicense.CheckUser(eZtUB::SILVER1)	 || 
; 58   : 			g_ZtLicense.CheckUser(eZtUB::SILVER2)	 ||
; 59   : 			g_ZtLicense.CheckUser(eZtUB::Gredy)		 || 
; 60   : 			g_ZtLicense.CheckUser(eZtUB::GredyLocal) || 
; 61   : 			g_ZtLicense.CheckUser(eZtUB::Gredy2) )

  00166	6a 00		 push	 0
  00168	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0016d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00172	84 c0		 test	 al, al
  00174	0f 85 11 03 00
	00		 jne	 $LN13@Load
  0017a	6a 07		 push	 7
  0017c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00181	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00186	84 c0		 test	 al, al
  00188	0f 85 fd 02 00
	00		 jne	 $LN13@Load
  0018e	6a 08		 push	 8
  00190	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00195	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0019a	84 c0		 test	 al, al
  0019c	0f 85 e9 02 00
	00		 jne	 $LN13@Load
  001a2	6a 20		 push	 32			; 00000020H
  001a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001a9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001ae	84 c0		 test	 al, al
  001b0	0f 85 d5 02 00
	00		 jne	 $LN13@Load
  001b6	6a 21		 push	 33			; 00000021H
  001b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001bd	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001c2	84 c0		 test	 al, al
  001c4	0f 85 c1 02 00
	00		 jne	 $LN13@Load
  001ca	6a 22		 push	 34			; 00000022H
  001cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001d1	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001d6	84 c0		 test	 al, al
  001d8	0f 85 ad 02 00
	00		 jne	 $LN13@Load

; 103  : 			}
; 104  : 
; 105  : 		}
; 106  : 		else
; 107  : 		{
; 108  : 			if(Flag == 1)

  001de	39 bd 90 fe ff
	ff		 cmp	 DWORD PTR _Flag$[ebp], edi
  001e4	0f 85 83 01 00
	00		 jne	 $LN9@Load

; 109  : 			{
; 110  : 				int n[13];
; 111  : 				sscanf(Buff, "%d %d %d %d %d %d %d %d %d %d %d %d %d", &n[0], &n[1], &n[2], &n[3], &n[4], &n[5], &n[6], &n[7], &n[8], &n[9], &n[10], &n[11], &n[12]);

  001ea	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204054[ebp+48]
  001f0	51		 push	 ecx
  001f1	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _n$204054[ebp+44]
  001f7	52		 push	 edx
  001f8	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _n$204054[ebp+40]
  001fe	50		 push	 eax
  001ff	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _n$204054[ebp+36]
  00205	51		 push	 ecx
  00206	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _n$204054[ebp+32]
  0020c	52		 push	 edx
  0020d	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _n$204054[ebp+28]
  00213	50		 push	 eax
  00214	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204054[ebp+24]
  0021a	51		 push	 ecx
  0021b	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _n$204054[ebp+20]
  00221	52		 push	 edx
  00222	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _n$204054[ebp+16]
  00228	50		 push	 eax
  00229	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204054[ebp+12]
  0022f	51		 push	 ecx
  00230	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR _n$204054[ebp+8]
  00236	52		 push	 edx
  00237	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _n$204054[ebp+4]
  0023d	50		 push	 eax
  0023e	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204054[ebp]
  00244	51		 push	 ecx
  00245	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKHOEJN@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 _sscanf

; 112  : 				this->NpcBase[this->CountNPC].NPC			= n[0];

  00256	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  0025c	0f b7 8d c8 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204054[ebp]
  00263	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00266	66 89 4c 86 04	 mov	 WORD PTR [esi+eax*4+4], cx

; 113  : 				this->NpcBase[this->CountNPC].MAP			= n[1];

  0026b	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00271	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  00274	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _n$204054[ebp+4]
  0027b	66 89 44 96 06	 mov	 WORD PTR [esi+edx*4+6], ax

; 114  : 				this->NpcBase[this->CountNPC].X				= n[2];

  00280	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00286	0f b7 95 d0 fe
	ff ff		 movzx	 edx, WORD PTR _n$204054[ebp+8]
  0028d	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00290	66 89 54 8e 08	 mov	 WORD PTR [esi+ecx*4+8], dx

; 115  : 				this->NpcBase[this->CountNPC].Y				= n[3];

  00295	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  0029b	0f b7 8d d4 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204054[ebp+12]
  002a2	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  002a5	66 89 4c 86 0a	 mov	 WORD PTR [esi+eax*4+10], cx

; 116  : 				this->NpcBase[this->CountNPC].TeleportMap	= n[4];

  002aa	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  002b0	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  002b3	0f b7 85 d8 fe
	ff ff		 movzx	 eax, WORD PTR _n$204054[ebp+16]
  002ba	66 89 44 96 0c	 mov	 WORD PTR [esi+edx*4+12], ax

; 117  : 				this->NpcBase[this->CountNPC].TeleportX		= n[5];

  002bf	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  002c5	0f b7 95 dc fe
	ff ff		 movzx	 edx, WORD PTR _n$204054[ebp+20]
  002cc	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  002cf	66 89 54 8e 0e	 mov	 WORD PTR [esi+ecx*4+14], dx

; 118  : 				this->NpcBase[this->CountNPC].TeleportY		= n[6];

  002d4	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  002da	0f b7 8d e0 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204054[ebp+24]
  002e1	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  002e4	66 89 4c 86 10	 mov	 WORD PTR [esi+eax*4+16], cx

; 119  : 				this->NpcBase[this->CountNPC].Level			= n[7];

  002e9	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  002ef	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  002f2	0f b7 85 e4 fe
	ff ff		 movzx	 eax, WORD PTR _n$204054[ebp+28]
  002f9	66 89 44 96 12	 mov	 WORD PTR [esi+edx*4+18], ax

; 120  : 				this->NpcBase[this->CountNPC].Reset			= n[8];

  002fe	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00304	0f b7 95 e8 fe
	ff ff		 movzx	 edx, WORD PTR _n$204054[ebp+32]
  0030b	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0030e	66 89 54 8e 14	 mov	 WORD PTR [esi+ecx*4+20], dx

; 121  : 				this->NpcBase[this->CountNPC].GReset		= n[9];

  00313	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00319	0f b7 8d ec fe
	ff ff		 movzx	 ecx, WORD PTR _n$204054[ebp+36]
  00320	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00323	66 89 4c 86 16	 mov	 WORD PTR [esi+eax*4+22], cx

; 122  : 				this->NpcBase[this->CountNPC].Premium		= n[10];

  00328	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  0032e	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  00331	0f b7 85 f0 fe
	ff ff		 movzx	 eax, WORD PTR _n$204054[ebp+40]
  00338	66 89 44 96 1c	 mov	 WORD PTR [esi+edx*4+28], ax

; 123  : 				this->NpcBase[this->CountNPC].Price			= n[11];

  0033d	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00343	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _n$204054[ebp+44]
  00349	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0034c	89 54 8e 20	 mov	 DWORD PTR [esi+ecx*4+32], edx

; 124  : 				this->NpcBase[this->CountNPC].Value			= n[12];

  00350	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00356	83 c4 3c	 add	 esp, 60			; 0000003cH
  00359	03 c7		 add	 eax, edi
  0035b	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _n$204054[ebp+48]
  00361	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00364	89 0c 86	 mov	 DWORD PTR [esi+eax*4], ecx

; 125  : 				this->CountNPC++;

  00367	01 be c4 2b 00
	00		 add	 DWORD PTR [esi+11204], edi
$LN9@Load:

; 126  : 			}
; 127  : 
; 128  : 			if(Flag == 2)

  0036d	83 bd 90 fe ff
	ff 02		 cmp	 DWORD PTR _Flag$[ebp], 2
  00374	0f 85 79 04 00
	00		 jne	 $LN11@Load

; 129  : 			{
; 130  : 				char mes[50];
; 131  : 				int n[9];
; 132  : 				sscanf(Buff, "\"%[^\"]\" %d %d %d %d %d %d %d %d %d", &mes, &n[0], &n[1], &n[2], &n[3], &n[4], &n[5], &n[6], &n[7], &n[8]);

  0037a	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR _n$204058[ebp+32]
  00380	52		 push	 edx
  00381	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _n$204058[ebp+28]
  00387	50		 push	 eax
  00388	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204058[ebp+24]
  0038e	51		 push	 ecx
  0038f	8d 95 b0 fe ff
	ff		 lea	 edx, DWORD PTR _n$204058[ebp+20]
  00395	52		 push	 edx
  00396	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _n$204058[ebp+16]
  0039c	50		 push	 eax
  0039d	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204058[ebp+12]
  003a3	51		 push	 ecx
  003a4	8d 95 a4 fe ff
	ff		 lea	 edx, DWORD PTR _n$204058[ebp+8]
  003aa	52		 push	 edx
  003ab	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR _n$204058[ebp+4]
  003b1	50		 push	 eax
  003b2	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _n$204058[ebp]
  003b8	51		 push	 ecx
  003b9	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _mes$204057[ebp]
  003bf	52		 push	 edx
  003c0	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  003c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@MBABJFMK@?$CC?$CF?$FL?$FO?$CC?$FN?$CC?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@
  003cb	50		 push	 eax
  003cc	e8 00 00 00 00	 call	 _sscanf

; 133  : 				sprintf(this->CmdBase[this->CountCMD].Command,"%s",mes);

  003d1	8b 96 c8 2b 00
	00		 mov	 edx, DWORD PTR [esi+11208]
  003d7	6b d2 4c	 imul	 edx, 76			; 0000004cH
  003da	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _mes$204057[ebp]
  003e0	51		 push	 ecx
  003e1	8d 84 32 14 0e
	00 00		 lea	 eax, DWORD PTR [edx+esi+3604]
  003e8	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 _sprintf

; 134  : 				this->CmdBase[this->CountCMD].TeleportMap	= n[0];

  003f3	8b 8e c8 2b 00
	00		 mov	 ecx, DWORD PTR [esi+11208]
  003f9	0f b7 95 9c fe
	ff ff		 movzx	 edx, WORD PTR _n$204058[ebp]
  00400	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00403	66 89 94 31 46
	0e 00 00	 mov	 WORD PTR [ecx+esi+3654], dx

; 135  : 				this->CmdBase[this->CountCMD].TeleportX		= n[1];

  0040b	8b 86 c8 2b 00
	00		 mov	 eax, DWORD PTR [esi+11208]
  00411	0f b7 8d a0 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204058[ebp+4]
  00418	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0041b	66 89 8c 30 48
	0e 00 00	 mov	 WORD PTR [eax+esi+3656], cx

; 136  : 				this->CmdBase[this->CountCMD].TeleportY		= n[2];

  00423	8b 96 c8 2b 00
	00		 mov	 edx, DWORD PTR [esi+11208]
  00429	0f b7 85 a4 fe
	ff ff		 movzx	 eax, WORD PTR _n$204058[ebp+8]
  00430	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00433	66 89 84 32 4a
	0e 00 00	 mov	 WORD PTR [edx+esi+3658], ax

; 137  : 				this->CmdBase[this->CountCMD].Level			= n[3];

  0043b	8b 8e c8 2b 00
	00		 mov	 ecx, DWORD PTR [esi+11208]
  00441	0f b7 95 a8 fe
	ff ff		 movzx	 edx, WORD PTR _n$204058[ebp+12]
  00448	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0044b	66 89 94 31 4c
	0e 00 00	 mov	 WORD PTR [ecx+esi+3660], dx

; 138  : 				this->CmdBase[this->CountCMD].Reset			= n[4];

  00453	8b 86 c8 2b 00
	00		 mov	 eax, DWORD PTR [esi+11208]
  00459	0f b7 8d ac fe
	ff ff		 movzx	 ecx, WORD PTR _n$204058[ebp+16]
  00460	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00463	66 89 8c 30 4e
	0e 00 00	 mov	 WORD PTR [eax+esi+3662], cx

; 139  : 				this->CmdBase[this->CountCMD].GReset		= n[5];

  0046b	8b 96 c8 2b 00
	00		 mov	 edx, DWORD PTR [esi+11208]
  00471	0f b7 85 b0 fe
	ff ff		 movzx	 eax, WORD PTR _n$204058[ebp+20]
  00478	83 c4 3c	 add	 esp, 60			; 0000003cH
  0047b	6b d2 4c	 imul	 edx, 76			; 0000004cH
  0047e	66 89 84 32 50
	0e 00 00	 mov	 WORD PTR [edx+esi+3664], ax

; 140  : 				this->CmdBase[this->CountCMD].Premium		= n[6];
; 141  : 				this->CmdBase[this->CountCMD].Price			= n[7];
; 142  : 				this->CmdBase[this->CountCMD].Value			= n[8];
; 143  : 				this->CountCMD++;

  00486	e9 1e 03 00 00	 jmp	 $LN136@Load
$LN13@Load:

; 62   : 		{
; 63   : 			if(Flag == 1)

  0048b	39 bd 90 fe ff
	ff		 cmp	 DWORD PTR _Flag$[ebp], edi
  00491	0f 85 bb 01 00
	00		 jne	 $LN12@Load

; 64   : 			{
; 65   : 				int n[15];
; 66   : 				sscanf(Buff, "%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", &n[0], &n[1], &n[2], &n[3], &n[4], &n[5], &n[6], &n[7], &n[8], &n[9], &n[10], &n[11], &n[12], &n[13], &n[14]);

  00497	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204045[ebp+56]
  0049d	51		 push	 ecx
  0049e	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _n$204045[ebp+52]
  004a4	52		 push	 edx
  004a5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _n$204045[ebp+48]
  004ab	50		 push	 eax
  004ac	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _n$204045[ebp+44]
  004b2	51		 push	 ecx
  004b3	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _n$204045[ebp+40]
  004b9	52		 push	 edx
  004ba	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _n$204045[ebp+36]
  004c0	50		 push	 eax
  004c1	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204045[ebp+32]
  004c7	51		 push	 ecx
  004c8	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _n$204045[ebp+28]
  004ce	52		 push	 edx
  004cf	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _n$204045[ebp+24]
  004d5	50		 push	 eax
  004d6	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204045[ebp+20]
  004dc	51		 push	 ecx
  004dd	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR _n$204045[ebp+16]
  004e3	52		 push	 edx
  004e4	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _n$204045[ebp+12]
  004ea	50		 push	 eax
  004eb	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204045[ebp+8]
  004f1	51		 push	 ecx
  004f2	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR _n$204045[ebp+4]
  004f8	52		 push	 edx
  004f9	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _n$204045[ebp]
  004ff	50		 push	 eax
  00500	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00506	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@OBHGOHPF@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd@
  0050b	51		 push	 ecx
  0050c	e8 00 00 00 00	 call	 _sscanf

; 67   : 				this->NpcBase[this->CountNPC].NPC			= n[0];

  00511	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00517	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  0051a	0f b7 85 c0 fe
	ff ff		 movzx	 eax, WORD PTR _n$204045[ebp]
  00521	66 89 44 96 04	 mov	 WORD PTR [esi+edx*4+4], ax

; 68   : 				this->NpcBase[this->CountNPC].MAP			= n[1];

  00526	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  0052c	0f b7 95 c4 fe
	ff ff		 movzx	 edx, WORD PTR _n$204045[ebp+4]
  00533	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00536	66 89 54 8e 06	 mov	 WORD PTR [esi+ecx*4+6], dx

; 69   : 				this->NpcBase[this->CountNPC].X				= n[2];

  0053b	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00541	0f b7 8d c8 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204045[ebp+8]
  00548	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  0054b	66 89 4c 86 08	 mov	 WORD PTR [esi+eax*4+8], cx

; 70   : 				this->NpcBase[this->CountNPC].Y				= n[3];

  00550	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00556	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  00559	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _n$204045[ebp+12]
  00560	66 89 44 96 0a	 mov	 WORD PTR [esi+edx*4+10], ax

; 71   : 				this->NpcBase[this->CountNPC].TeleportMap	= n[4];

  00565	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  0056b	0f b7 95 d0 fe
	ff ff		 movzx	 edx, WORD PTR _n$204045[ebp+16]
  00572	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00575	66 89 54 8e 0c	 mov	 WORD PTR [esi+ecx*4+12], dx

; 72   : 				this->NpcBase[this->CountNPC].TeleportX		= n[5];

  0057a	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00580	0f b7 8d d4 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204045[ebp+20]
  00587	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  0058a	66 89 4c 86 0e	 mov	 WORD PTR [esi+eax*4+14], cx

; 73   : 				this->NpcBase[this->CountNPC].TeleportY		= n[6];

  0058f	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00595	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  00598	0f b7 85 d8 fe
	ff ff		 movzx	 eax, WORD PTR _n$204045[ebp+24]
  0059f	66 89 44 96 10	 mov	 WORD PTR [esi+edx*4+16], ax

; 74   : 				this->NpcBase[this->CountNPC].Level			= n[7];

  005a4	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  005aa	0f b7 95 dc fe
	ff ff		 movzx	 edx, WORD PTR _n$204045[ebp+28]
  005b1	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  005b4	66 89 54 8e 12	 mov	 WORD PTR [esi+ecx*4+18], dx

; 75   : 				this->NpcBase[this->CountNPC].Reset			= n[8];

  005b9	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  005bf	0f b7 8d e0 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204045[ebp+32]
  005c6	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  005c9	66 89 4c 86 14	 mov	 WORD PTR [esi+eax*4+20], cx

; 76   : 				this->NpcBase[this->CountNPC].GReset		= n[9];

  005ce	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  005d4	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  005d7	0f b7 85 e4 fe
	ff ff		 movzx	 eax, WORD PTR _n$204045[ebp+36]
  005de	66 89 44 96 16	 mov	 WORD PTR [esi+edx*4+22], ax

; 77   : 				this->NpcBase[this->CountNPC].MaxReset		= n[10];

  005e3	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  005e9	0f b7 95 e8 fe
	ff ff		 movzx	 edx, WORD PTR _n$204045[ebp+40]
  005f0	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  005f3	66 89 54 8e 18	 mov	 WORD PTR [esi+ecx*4+24], dx

; 78   : 				this->NpcBase[this->CountNPC].MaxGReset		= n[11];

  005f8	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  005fe	83 c4 44	 add	 esp, 68			; 00000044H
  00601	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00604	0f b7 8d ec fe
	ff ff		 movzx	 ecx, WORD PTR _n$204045[ebp+44]
  0060b	66 89 4c 86 1a	 mov	 WORD PTR [esi+eax*4+26], cx

; 79   : 				this->NpcBase[this->CountNPC].Premium		= n[12];

  00610	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  00616	8d 14 c0	 lea	 edx, DWORD PTR [eax+eax*8]
  00619	0f b7 85 f0 fe
	ff ff		 movzx	 eax, WORD PTR _n$204045[ebp+48]
  00620	66 89 44 96 1c	 mov	 WORD PTR [esi+edx*4+28], ax

; 80   : 				this->NpcBase[this->CountNPC].Price			= n[13];

  00625	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  0062b	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _n$204045[ebp+52]
  00631	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00634	89 54 8e 20	 mov	 DWORD PTR [esi+ecx*4+32], edx

; 81   : 				this->NpcBase[this->CountNPC].Value			= n[14];

  00638	8b 86 c4 2b 00
	00		 mov	 eax, DWORD PTR [esi+11204]
  0063e	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _n$204045[ebp+56]
  00644	03 c7		 add	 eax, edi
  00646	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00649	89 0c 86	 mov	 DWORD PTR [esi+eax*4], ecx

; 82   : 				this->CountNPC++;

  0064c	01 be c4 2b 00
	00		 add	 DWORD PTR [esi+11204], edi
$LN12@Load:

; 83   : 			}
; 84   : 
; 85   : 			if(Flag == 2)

  00652	83 bd 90 fe ff
	ff 02		 cmp	 DWORD PTR _Flag$[ebp], 2
  00659	0f 85 94 01 00
	00		 jne	 $LN11@Load

; 86   : 			{
; 87   : 				char mes[50];
; 88   : 				int n[11];
; 89   : 				sscanf(Buff, "\"%[^\"]\" %d %d %d %d %d %d %d %d %d %d %d", &mes, &n[0], &n[1], &n[2], &n[3], &n[4], &n[5], &n[6], &n[7], &n[8], &n[9], &n[10]);

  0065f	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR _n$204049[ebp+40]
  00665	52		 push	 edx
  00666	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _n$204049[ebp+36]
  0066c	50		 push	 eax
  0066d	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204049[ebp+32]
  00673	51		 push	 ecx
  00674	8d 95 b0 fe ff
	ff		 lea	 edx, DWORD PTR _n$204049[ebp+28]
  0067a	52		 push	 edx
  0067b	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _n$204049[ebp+24]
  00681	50		 push	 eax
  00682	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$204049[ebp+20]
  00688	51		 push	 ecx
  00689	8d 95 a4 fe ff
	ff		 lea	 edx, DWORD PTR _n$204049[ebp+16]
  0068f	52		 push	 edx
  00690	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR _n$204049[ebp+12]
  00696	50		 push	 eax
  00697	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _n$204049[ebp+8]
  0069d	51		 push	 ecx
  0069e	8d 95 98 fe ff
	ff		 lea	 edx, DWORD PTR _n$204049[ebp+4]
  006a4	52		 push	 edx
  006a5	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _n$204049[ebp]
  006ab	50		 push	 eax
  006ac	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _mes$204048[ebp]
  006b2	51		 push	 ecx
  006b3	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  006b9	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OKAPPHKC@?$CC?$CF?$FL?$FO?$CC?$FN?$CC?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5@
  006be	52		 push	 edx
  006bf	e8 00 00 00 00	 call	 _sscanf

; 90   : 				sprintf(this->CmdBase[this->CountCMD].Command,"%s",mes);

  006c4	8b 8e c8 2b 00
	00		 mov	 ecx, DWORD PTR [esi+11208]
  006ca	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  006cd	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _mes$204048[ebp]
  006d3	50		 push	 eax
  006d4	8d 94 31 14 0e
	00 00		 lea	 edx, DWORD PTR [ecx+esi+3604]
  006db	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  006e0	52		 push	 edx
  006e1	e8 00 00 00 00	 call	 _sprintf

; 91   : 				this->CmdBase[this->CountCMD].TeleportMap	= n[0];

  006e6	8b 86 c8 2b 00
	00		 mov	 eax, DWORD PTR [esi+11208]
  006ec	0f b7 8d 94 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204049[ebp]
  006f3	6b c0 4c	 imul	 eax, 76			; 0000004cH
  006f6	66 89 8c 30 46
	0e 00 00	 mov	 WORD PTR [eax+esi+3654], cx

; 92   : 				this->CmdBase[this->CountCMD].TeleportX		= n[1];

  006fe	8b 96 c8 2b 00
	00		 mov	 edx, DWORD PTR [esi+11208]
  00704	0f b7 85 98 fe
	ff ff		 movzx	 eax, WORD PTR _n$204049[ebp+4]
  0070b	6b d2 4c	 imul	 edx, 76			; 0000004cH
  0070e	66 89 84 32 48
	0e 00 00	 mov	 WORD PTR [edx+esi+3656], ax

; 93   : 				this->CmdBase[this->CountCMD].TeleportY		= n[2];

  00716	8b 8e c8 2b 00
	00		 mov	 ecx, DWORD PTR [esi+11208]
  0071c	0f b7 95 9c fe
	ff ff		 movzx	 edx, WORD PTR _n$204049[ebp+8]
  00723	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  00726	66 89 94 31 4a
	0e 00 00	 mov	 WORD PTR [ecx+esi+3658], dx

; 94   : 				this->CmdBase[this->CountCMD].Level			= n[3];

  0072e	8b 86 c8 2b 00
	00		 mov	 eax, DWORD PTR [esi+11208]
  00734	0f b7 8d a0 fe
	ff ff		 movzx	 ecx, WORD PTR _n$204049[ebp+12]
  0073b	6b c0 4c	 imul	 eax, 76			; 0000004cH
  0073e	66 89 8c 30 4c
	0e 00 00	 mov	 WORD PTR [eax+esi+3660], cx

; 95   : 				this->CmdBase[this->CountCMD].Reset			= n[4];

  00746	8b 96 c8 2b 00
	00		 mov	 edx, DWORD PTR [esi+11208]
  0074c	0f b7 85 a4 fe
	ff ff		 movzx	 eax, WORD PTR _n$204049[ebp+16]
  00753	6b d2 4c	 imul	 edx, 76			; 0000004cH
  00756	66 89 84 32 4e
	0e 00 00	 mov	 WORD PTR [edx+esi+3662], ax

; 96   : 				this->CmdBase[this->CountCMD].GReset		= n[5];

  0075e	8b 8e c8 2b 00
	00		 mov	 ecx, DWORD PTR [esi+11208]
  00764	0f b7 95 a8 fe
	ff ff		 movzx	 edx, WORD PTR _n$204049[ebp+20]
  0076b	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  0076e	66 89 94 31 50
	0e 00 00	 mov	 WORD PTR [ecx+esi+3664], dx

; 97   : 				this->CmdBase[this->CountCMD].MaxReset		= n[6];

  00776	8b 86 c8 2b 00
	00		 mov	 eax, DWORD PTR [esi+11208]
  0077c	0f b7 8d ac fe
	ff ff		 movzx	 ecx, WORD PTR _n$204049[ebp+24]
  00783	6b c0 4c	 imul	 eax, 76			; 0000004cH
  00786	66 89 8c 30 52
	0e 00 00	 mov	 WORD PTR [eax+esi+3666], cx

; 98   : 				this->CmdBase[this->CountCMD].MaxGReset		= n[7];

  0078e	8b 96 c8 2b 00
	00		 mov	 edx, DWORD PTR [esi+11208]
  00794	0f b7 85 b0 fe
	ff ff		 movzx	 eax, WORD PTR _n$204049[ebp+28]
  0079b	83 c4 44	 add	 esp, 68			; 00000044H
  0079e	6b d2 4c	 imul	 edx, 76			; 0000004cH
  007a1	66 89 84 32 54
	0e 00 00	 mov	 WORD PTR [edx+esi+3668], ax
$LN136@Load:

; 99   : 				this->CmdBase[this->CountCMD].Premium		= n[8];

  007a9	8b 8e c8 2b 00
	00		 mov	 ecx, DWORD PTR [esi+11208]
  007af	0f b7 95 b4 fe
	ff ff		 movzx	 edx, WORD PTR _n$204049[ebp+32]
  007b6	6b c9 4c	 imul	 ecx, 76			; 0000004cH
  007b9	66 89 94 31 56
	0e 00 00	 mov	 WORD PTR [ecx+esi+3670], dx

; 100  : 				this->CmdBase[this->CountCMD].Price			= n[9];

  007c1	8b 86 c8 2b 00
	00		 mov	 eax, DWORD PTR [esi+11208]
  007c7	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _n$204049[ebp+36]
  007cd	6b c0 4c	 imul	 eax, 76			; 0000004cH
  007d0	89 8c 30 58 0e
	00 00		 mov	 DWORD PTR [eax+esi+3672], ecx

; 101  : 				this->CmdBase[this->CountCMD].Value			= n[10];

  007d7	8b 96 c8 2b 00
	00		 mov	 edx, DWORD PTR [esi+11208]
  007dd	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _n$204049[ebp+40]
  007e3	6b d2 4c	 imul	 edx, 76			; 0000004cH
  007e6	89 84 32 5c 0e
	00 00		 mov	 DWORD PTR [edx+esi+3676], eax

; 102  : 				this->CountCMD++;

  007ed	01 be c8 2b 00
	00		 add	 DWORD PTR [esi+11208], edi
$LN11@Load:

; 144  : 			}
; 145  : 		}
; 146  : 
; 147  : 		if( g_ZtLicense.CheckUser(eZtUB::Local)		 || 
; 148  : 			g_ZtLicense.CheckUser(eZtUB::SILVER1)	 || 
; 149  : 			g_ZtLicense.CheckUser(eZtUB::SILVER2)	 ||
; 150  : 			LICENSE_ARCMU							 ||
; 151  : 			g_ZtLicense.CheckUser(eZtUB::ulasevich)	 ||
; 152  : 			g_ZtLicense.CheckUser(eZtUB::ulasevich2) )

  007f3	6a 00		 push	 0
  007f5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  007fa	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  007ff	84 c0		 test	 al, al
  00801	75 40		 jne	 SHORT $LN6@Load
  00803	6a 07		 push	 7
  00805	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0080a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0080f	84 c0		 test	 al, al
  00811	75 30		 jne	 SHORT $LN6@Load
  00813	6a 08		 push	 8
  00815	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0081a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0081f	84 c0		 test	 al, al
  00821	75 20		 jne	 SHORT $LN6@Load
  00823	6a 17		 push	 23			; 00000017H
  00825	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0082a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0082f	84 c0		 test	 al, al
  00831	75 10		 jne	 SHORT $LN6@Load
  00833	6a 24		 push	 36			; 00000024H
  00835	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0083a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0083f	84 c0		 test	 al, al
  00841	74 42		 je	 SHORT $LN5@Load
$LN6@Load:

; 153  : 		{
; 154  : 			if(Flag == 3)

  00843	83 bd 90 fe ff
	ff 03		 cmp	 DWORD PTR _Flag$[ebp], 3
  0084a	75 39		 jne	 SHORT $LN5@Load

; 155  : 			{
; 156  : 				int n;
; 157  : 				sscanf(Buff, "%d", &n);

  0084c	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _n$204063[ebp]
  00852	51		 push	 ecx
  00853	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  00859	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0085e	52		 push	 edx
  0085f	e8 00 00 00 00	 call	 _sscanf

; 158  : 				DLTP_BLOCK_DATA List;			
; 159  : 				List.MapNumber = n;

  00864	8b 85 7c fe ff
	ff		 mov	 eax, DWORD PTR _n$204063[ebp]
  0086a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 160  : 				this->m_dlblock.push_back(List);

  0086d	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _List$204064[ebp]
  00873	51		 push	 ecx
  00874	8d 8e cc 2b 00
	00		 lea	 ecx, DWORD PTR [esi+11212]
  0087a	89 85 8c fe ff
	ff		 mov	 DWORD PTR _List$204064[ebp], eax
  00880	e8 00 00 00 00	 call	 ?push_back@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXABUDLTP_BLOCK_DATA@@@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::push_back
$LN5@Load:

; 161  : 			}
; 162  : 		}
; 163  : 
; 164  : 		if( g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2) )

  00885	6a 20		 push	 32			; 00000020H
  00887	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0088c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00891	84 c0		 test	 al, al
  00893	75 24		 jne	 SHORT $LN3@Load
  00895	6a 21		 push	 33			; 00000021H
  00897	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0089c	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  008a1	84 c0		 test	 al, al
  008a3	75 14		 jne	 SHORT $LN3@Load
  008a5	6a 22		 push	 34			; 00000022H
  008a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  008ac	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  008b1	84 c0		 test	 al, al
  008b3	0f 84 84 00 00
	00		 je	 $LN1@Load
$LN3@Load:

; 165  : 		{
; 166  : 			if(Flag == 4)

  008b9	83 bd 90 fe ff
	ff 04		 cmp	 DWORD PTR _Flag$[ebp], 4
  008c0	75 39		 jne	 SHORT $LN2@Load

; 167  : 			{
; 168  : 				int n;
; 169  : 				sscanf(Buff, "%d", &n);

  008c2	8d 95 84 fe ff
	ff		 lea	 edx, DWORD PTR _n$204068[ebp]
  008c8	52		 push	 edx
  008c9	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  008cf	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  008d4	50		 push	 eax
  008d5	e8 00 00 00 00	 call	 _sscanf

; 170  : 				DLTP_BLOCK_DATA List;			
; 171  : 				List.MapNumber = n;

  008da	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _n$204068[ebp]
  008e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 172  : 				this->m_DLMasterBlock.push_back(List);

  008e3	8d 95 8c fe ff
	ff		 lea	 edx, DWORD PTR _List$204069[ebp]
  008e9	89 8d 8c fe ff
	ff		 mov	 DWORD PTR _List$204069[ebp], ecx
  008ef	52		 push	 edx
  008f0	8d 8e dc 2b 00
	00		 lea	 ecx, DWORD PTR [esi+11228]
  008f6	e8 00 00 00 00	 call	 ?push_back@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXABUDLTP_BLOCK_DATA@@@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::push_back
$LN2@Load:

; 173  : 			}
; 174  : 
; 175  : 			if(Flag == 5)

  008fb	83 bd 90 fe ff
	ff 05		 cmp	 DWORD PTR _Flag$[ebp], 5
  00902	75 39		 jne	 SHORT $LN1@Load

; 176  : 			{
; 177  : 				int n;
; 178  : 				sscanf(Buff, "%d", &n);

  00904	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _n$204071[ebp]
  0090a	50		 push	 eax
  0090b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  00911	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00916	51		 push	 ecx
  00917	e8 00 00 00 00	 call	 _sscanf

; 179  : 				DLTP_BLOCK_DATA List;			
; 180  : 				List.MapNumber = n;

  0091c	8b 95 80 fe ff
	ff		 mov	 edx, DWORD PTR _n$204071[ebp]
  00922	83 c4 0c	 add	 esp, 12			; 0000000cH

; 181  : 				this->m_DLMemberBlock.push_back(List);

  00925	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _List$204072[ebp]
  0092b	50		 push	 eax
  0092c	8d 8e ec 2b 00
	00		 lea	 ecx, DWORD PTR [esi+11244]
  00932	89 95 8c fe ff
	ff		 mov	 DWORD PTR _List$204072[ebp], edx
  00938	e8 00 00 00 00	 call	 ?push_back@?$vector@UDLTP_BLOCK_DATA@@V?$allocator@UDLTP_BLOCK_DATA@@@std@@@std@@QAEXABUDLTP_BLOCK_DATA@@@Z ; std::vector<DLTP_BLOCK_DATA,std::allocator<DLTP_BLOCK_DATA> >::push_back
$LN1@Load:

; 49   : 
; 50   : 	while(!feof(file))

  0093d	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR _file$[ebp]
  00943	51		 push	 ecx
  00944	e8 00 00 00 00	 call	 _feof
  00949	83 c4 04	 add	 esp, 4
  0094c	85 c0		 test	 eax, eax
  0094e	0f 84 dc f7 ff
	ff		 je	 $LL17@Load
  00954	8b bd 88 fe ff
	ff		 mov	 edi, DWORD PTR _file$[ebp]
$LN16@Load:

; 182  : 			}
; 183  : 		}
; 184  : 	}
; 185  : 	fclose(file);

  0095a	57		 push	 edi
  0095b	e8 00 00 00 00	 call	 _fclose
  00960	83 c4 04	 add	 esp, 4
$LN20@Load:

; 186  : }

  00963	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00966	5f		 pop	 edi
  00967	5e		 pop	 esi
  00968	33 cd		 xor	 ecx, ebp
  0096a	5b		 pop	 ebx
  0096b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00970	8b e5		 mov	 esp, ebp
  00972	5d		 pop	 ebp
  00973	c3		 ret	 0
?Load@cTeleportManager@@QAEXXZ ENDP			; cTeleportManager::Load
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgTeleportManager@@YAXXZ
text$yc	SEGMENT
??__EgTeleportManager@@YAXXZ PROC			; `dynamic initializer for 'gTeleportManager'', COMDAT

; 12   : cTeleportManager gTeleportManager;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gTeleportManager@@3VcTeleportManager@@A ; gTeleportManager
  00005	e8 00 00 00 00	 call	 ??0cTeleportManager@@QAE@XZ ; cTeleportManager::cTeleportManager
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgTeleportManager@@YAXXZ ; `dynamic atexit destructor for 'gTeleportManager''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgTeleportManager@@YAXXZ ENDP			; `dynamic initializer for 'gTeleportManager''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgTeleportManager@@YAXXZ
text$yd	SEGMENT
??__FgTeleportManager@@YAXXZ PROC			; `dynamic atexit destructor for 'gTeleportManager'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gTeleportManager@@3VcTeleportManager@@A ; gTeleportManager
  00005	e9 00 00 00 00	 jmp	 ??1cTeleportManager@@QAE@XZ ; cTeleportManager::~cTeleportManager
??__FgTeleportManager@@YAXXZ ENDP			; `dynamic atexit destructor for 'gTeleportManager''
text$yd	ENDS
PUBLIC	?gTeleportManager@@3VcTeleportManager@@A	; gTeleportManager
_BSS	SEGMENT
?gTeleportManager@@3VcTeleportManager@@A DB 02bfcH DUP (?) ; gTeleportManager
_BSS	ENDS
CRT$XCU	SEGMENT
_gTeleportManager$initializer$ DD FLAT:??__EgTeleportManager@@YAXXZ
CRT$XCU	ENDS
END
