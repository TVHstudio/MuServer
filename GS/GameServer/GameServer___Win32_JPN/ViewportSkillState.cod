; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ViewportSkillState.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CViewportSkillState@@6B@			; CViewportSkillState::`vftable'
PUBLIC	??0CViewportSkillState@@QAE@XZ			; CViewportSkillState::CViewportSkillState
PUBLIC	??_R4CViewportSkillState@@6B@			; CViewportSkillState::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCViewportSkillState@@@8			; CViewportSkillState `RTTI Type Descriptor'
PUBLIC	??_R3CViewportSkillState@@8			; CViewportSkillState::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CViewportSkillState@@8			; CViewportSkillState::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CViewportSkillState@@8		; CViewportSkillState::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECViewportSkillState@@UAEPAXI@Z:PROC		; CViewportSkillState::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CViewportSkillState@@8
; File e:\work\tranet_version\gs\gameserver\viewportskillstate.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CViewportSkillState@@8 DD FLAT:??_R0?AVCViewportSkillState@@@8 ; CViewportSkillState::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CViewportSkillState@@8
rdata$r	ENDS
;	COMDAT ??_R2CViewportSkillState@@8
rdata$r	SEGMENT
??_R2CViewportSkillState@@8 DD FLAT:??_R1A@?0A@EA@CViewportSkillState@@8 ; CViewportSkillState::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CViewportSkillState@@8
rdata$r	SEGMENT
??_R3CViewportSkillState@@8 DD 00H			; CViewportSkillState::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CViewportSkillState@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCViewportSkillState@@@8
_DATA	SEGMENT
??_R0?AVCViewportSkillState@@@8 DD FLAT:??_7type_info@@6B@ ; CViewportSkillState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCViewportSkillState@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CViewportSkillState@@6B@
rdata$r	SEGMENT
??_R4CViewportSkillState@@6B@ DD 00H			; CViewportSkillState::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCViewportSkillState@@@8
	DD	FLAT:??_R3CViewportSkillState@@8
rdata$r	ENDS
;	COMDAT ??_7CViewportSkillState@@6B@
CONST	SEGMENT
??_7CViewportSkillState@@6B@ DD FLAT:??_R4CViewportSkillState@@6B@ ; CViewportSkillState::`vftable'
	DD	FLAT:??_ECViewportSkillState@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CViewportSkillState@@QAE@XZ
_TEXT	SEGMENT
??0CViewportSkillState@@QAE@XZ PROC			; CViewportSkillState::CViewportSkillState, COMDAT
; _this$ = ecx

; 17   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CViewportSkillState@@6B@

; 18   : 
; 19   : }

  00008	c3		 ret	 0
??0CViewportSkillState@@QAE@XZ ENDP			; CViewportSkillState::CViewportSkillState
_TEXT	ENDS
PUBLIC	??1CViewportSkillState@@UAE@XZ			; CViewportSkillState::~CViewportSkillState
; Function compile flags: /Ogtp
;	COMDAT ??1CViewportSkillState@@UAE@XZ
_TEXT	SEGMENT
??1CViewportSkillState@@UAE@XZ PROC			; CViewportSkillState::~CViewportSkillState, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CViewportSkillState@@6B@

; 23   : 
; 24   : }

  00006	c3		 ret	 0
??1CViewportSkillState@@UAE@XZ ENDP			; CViewportSkillState::~CViewportSkillState
_TEXT	ENDS
PUBLIC	__real@3dcccccd
PUBLIC	__real@3fb99999a0000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@4059000000000000
PUBLIC	?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3fb99999a0000000
CONST	SEGMENT
__real@3fb99999a0000000 DQ 03fb99999a0000000r	; 0.1
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
tv837 = 12						; size = 4
tv743 = 12						; size = 4
tv732 = 12						; size = 4
tv664 = 12						; size = 4
tv636 = 12						; size = 4
_fPer$202573 = 12					; size = 4
_btEffectType$ = 12					; size = 1
_iValue$ = 16						; size = 4
?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z PROC ; CViewportSkillState::AddBuffEffect, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 28   : 	if(lpObj == NULL || btEffectType < 0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 c1 04 00
	00		 je	 $LN2@AddBuffEff

; 29   : 	{
; 30   : 		return;
; 31   : 	}
; 32   : 
; 33   : 	if(lpObj->Connected < PLAYER_PLAYING)

  0000f	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00013	0f 8c b7 04 00
	00		 jl	 $LN2@AddBuffEff

; 34   : 	{
; 35   : 		return;
; 36   : 	}
; 37   : 
; 38   : //	switch(btEffectType)
; 39   : //	{
; 40   : //	case 1:
; 41   : //		{
; 42   : //			lpObj->m_AttackSpeed += iValue;
; 43   : //			lpObj->m_MagicSpeed += iValue;
; 44   : //		}
; 45   : //		break;
; 46   : //	case 3:
; 47   : //		{
; 48   : //			lpObj->m_Defense += iValue;
; 49   : //			lpObj->m_MagicDefense += iValue;
; 50   : //		}
; 51   : //		break;
; 52   : //	case 4:
; 53   : //		{
; 54   : //			lpObj->AddLife += iValue;
; 55   : //			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield));
; 56   : //			GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield);
; 57   : //		}
; 58   : //		break;
; 59   : //	case 5:
; 60   : //		{
; 61   : //			lpObj->AddMana += iValue;
; 62   : //			GCManaSend(lpObj->m_Index, (lpObj->MaxMana + lpObj->AddMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));
; 63   : //			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 64   : //		}
; 65   : //		break;
; 66   : //	case 21:
; 67   : //		{
; 68   : //			lpObj->m_iSoulBarrierDefense = iValue;
; 69   : //		}
; 70   : //		break;
; 71   : //	case 22:
; 72   : //		{
; 73   : //			lpObj->m_MagicDefense += iValue;
; 74   : //		}
; 75   : //		break;
; 76   : //	case 24:
; 77   : //		{
; 78   : //			lpObj->DamageReflect += iValue;
; 79   : //		}
; 80   : //		break;
; 81   : //	case 26:
; 82   : //		{
; 83   : //			lpObj->m_AttackRating -= iValue;
; 84   : //		}
; 85   : //		break;
; 86   : //	case 28:
; 87   : //		{
; 88   : //			lpObj->m_sSoulBarrierDuration = iValue;
; 89   : //		}
; 90   : //		break;
; 91   : //		//Season 4 add-on
; 92   : //	case 31: //good
; 93   : //		{
; 94   : //			lpObj->AddMana += (int)( (((float)(iValue) * (float)(lpObj->MaxMana))) / 100.0f);
; 95   : //#ifdef DEBUG_CODE
; 96   : //			LogAddC(2,"lpObj->AddMana: %d | lpObj->Mana: %d",lpObj->AddMana,lpObj->Mana);
; 97   : //#endif
; 98   : //			GCManaSend(lpObj->m_Index, (lpObj->MaxMana + lpObj->AddMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));
; 99   : //			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 100  : //		}
; 101  : //		break;
; 102  : //	case 32: //good :)
; 103  : //		{
; 104  : //			float loc2 = 0; //loc2
; 105  : //
; 106  : //			float loc3 = (((float)(40.0f) - (float)(iValue))/100.0f); //good
; 107  : //
; 108  : //			loc3 = (loc3 > 0.1f)?loc3:0.1f; //good
; 109  : //			
; 110  : //			loc2 = loc3 * lpObj->MaxLife; //good
; 111  : //
; 112  : //			lpObj->AddLife -= (int)((float)(loc2)); //good
; 113  : //
; 114  : //			lpObj->Life = ( (float)(lpObj->Life) < ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) )?( (float)(lpObj->Life) ):( ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) ); //good
; 115  : //
; 116  : //			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield)); //good
; 117  : //			GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield); //good
; 118  : //		}
; 119  : //		break;
; 120  : //	case 33: //Wizardry Expansion ??
; 121  : //		{
; 122  : //			lpObj->m_MagicDamageMin += iValue;
; 123  : //			lpObj->m_MagicDamageMax += iValue;
; 124  : //		}
; 125  : //		break;
; 126  : //	case 57: //XMas Attack ??
; 127  : //		{
; 128  : //			lpObj->m_AttackDamageMaxLeft += iValue;
; 129  : //			lpObj->m_AttackDamageMinLeft += iValue;
; 130  : //			lpObj->m_AttackDamageMaxRight += iValue;
; 131  : //			lpObj->m_AttackDamageMinRight += iValue;
; 132  : //
; 133  : //			lpObj->m_MagicDamageMin += iValue;
; 134  : //			lpObj->m_MagicDamageMax += iValue;
; 135  : //
; 136  : //			lpObj->m_iSummonerBookSpellDamageMin += iValue;
; 137  : //			lpObj->m_iSummonerBookSpellDamageMax += iValue;
; 138  : //		}
; 139  : //		break;
; 140  : //	case 58: //XMas Defense??
; 141  : //		{
; 142  : //			lpObj->m_Defense += iValue;
; 143  : //		}
; 144  : //		break;
; 145  : //	case ADD_OPTION_LEVEL_BP:
; 146  : //		lpObj->AddBP += iValue * (lpObj->MLevel + lpObj->Level);
; 147  : //		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);
; 148  : //        GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 149  : //		break;
; 150  : //	case ADD_OPTION_LEVEL_SD:
; 151  : //		lpObj->iAddShield += iValue * (lpObj->MLevel + lpObj->Level);
; 152  : //		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);
; 153  : //        GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 154  : //		break;
; 155  : //	case ADD_OPTION_BP:
; 156  : //		lpObj->AddBP += iValue;
; 157  : //		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);
; 158  : //        GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 159  : //		break;
; 160  : //	case ADD_OPTION_SD:
; 161  : //		lpObj->iAddShield += iValue;
; 162  : //		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);
; 163  : //        GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 164  : //		break;
; 165  : //	case ADD_OPTION_IGNOREDEFENSE:
; 166  : //		lpObj->SetOpIgnoreDefense += iValue;
; 167  : //		break;
; 168  : //	case ADD_OPTION_SUCCESSFULBLOCKING:
; 169  : //		lpObj->m_SuccessfulBlocking += iValue;
; 170  : //		break;
; 171  : //	case SUB_OPTION_SUCCESSFULBLOCKING:
; 172  : //        lpObj->m_SuccessfulBlocking -= iValue;
; 173  : //        if ( lpObj->m_SuccessfulBlocking < 0 )
; 174  : //          lpObj->m_SuccessfulBlocking = 0;
; 175  : //        break;
; 176  : //	default:
; 177  : //		return;
; 178  : //	}
; 179  : 	switch( btEffectType )

  00019	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  0001d	48		 dec	 eax
  0001e	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00021	0f 87 a9 04 00
	00		 ja	 $LN2@AddBuffEff
  00027	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN43@AddBuffEff[eax]
  0002e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN52@AddBuffEff[eax*4]
$LN31@AddBuffEff:

; 180  : 	{
; 181  : 	case ADD_OPTION_SPEED:
; 182  : 		lpObj->m_AttackSpeed += iValue;

  00035	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  00038	01 86 8c 04 00
	00		 add	 DWORD PTR [esi+1164], eax

; 183  : 		lpObj->m_MagicSpeed += iValue;

  0003e	01 86 90 04 00
	00		 add	 DWORD PTR [esi+1168], eax
  00044	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
$LN30@AddBuffEff:

; 184  : 		break;
; 185  : 	case ADD_OPTION_DEFENSE:
; 186  : 		lpObj->m_Defense += iValue;

  00049	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  0004c	01 86 94 04 00
	00		 add	 DWORD PTR [esi+1172], eax

; 187  : 		lpObj->m_MagicDefense += iValue;

  00052	01 86 98 04 00
	00		 add	 DWORD PTR [esi+1176], eax
  00058	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
$LN29@AddBuffEff:

; 188  : 		break;
; 189  : 	case ADD_OPTION_LIFE:
; 190  : 		lpObj->AddLife += iValue;

  0005d	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]

; 191  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00060	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00066	01 8e 4c 01 00
	00		 add	 DWORD PTR [esi+332], ecx
  0006c	8b 96 4c 01 00
	00		 mov	 edx, DWORD PTR [esi+332]
  00072	8b 86 5c 01 00
	00		 mov	 eax, DWORD PTR [esi+348]
  00078	03 86 58 01 00
	00		 add	 eax, DWORD PTR [esi+344]
  0007e	89 55 0c	 mov	 DWORD PTR tv636[ebp], edx
  00081	da 45 0c	 fiadd	 DWORD PTR tv636[ebp]
  00084	50		 push	 eax
  00085	6a 00		 push	 0
  00087	68 fe 00 00 00	 push	 254			; 000000feH
  0008c	e8 00 00 00 00	 call	 __ftol2_sse
  00091	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00093	50		 push	 eax
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 192  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFF, 0, lpObj->iShield);

  0009a	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  000a0	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  000a6	83 c4 14	 add	 esp, 20			; 00000014H
  000a9	52		 push	 edx
  000aa	6a 00		 push	 0
  000ac	68 ff 00 00 00	 push	 255			; 000000ffH
  000b1	e8 00 00 00 00	 call	 __ftol2_sse
  000b6	50		 push	 eax
  000b7	8b 06		 mov	 eax, DWORD PTR [esi]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  000bf	83 c4 14	 add	 esp, 20			; 00000014H
  000c2	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH
$LN28@AddBuffEff:

; 193  : 		break;
; 194  : 	case ADD_OPTION_MANA:
; 195  : 		lpObj->AddMana += iValue;

  000c7	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]

; 196  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  000ca	d9 86 14 01 00
	00		 fld	 DWORD PTR [esi+276]
  000d0	01 8e 50 01 00
	00		 add	 DWORD PTR [esi+336], ecx
  000d6	8b 96 50 01 00
	00		 mov	 edx, DWORD PTR [esi+336]
  000dc	8b 86 30 01 00
	00		 mov	 eax, DWORD PTR [esi+304]
  000e2	03 86 2c 01 00
	00		 add	 eax, DWORD PTR [esi+300]
  000e8	89 55 0c	 mov	 DWORD PTR tv664[ebp], edx
  000eb	da 45 0c	 fiadd	 DWORD PTR tv664[ebp]
  000ee	50		 push	 eax
  000ef	6a 00		 push	 0
  000f1	68 fe 00 00 00	 push	 254			; 000000feH
  000f6	e8 00 00 00 00	 call	 __ftol2_sse
  000fb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000fd	50		 push	 eax
  000fe	51		 push	 ecx
  000ff	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 197  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFF, 0, lpObj->BP);

  00104	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  0010a	8b 96 28 01 00
	00		 mov	 edx, DWORD PTR [esi+296]
  00110	83 c4 14	 add	 esp, 20			; 00000014H
  00113	52		 push	 edx
  00114	6a 00		 push	 0
  00116	68 ff 00 00 00	 push	 255			; 000000ffH
  0011b	e8 00 00 00 00	 call	 __ftol2_sse
  00120	50		 push	 eax
  00121	8b 06		 mov	 eax, DWORD PTR [esi]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00129	83 c4 14	 add	 esp, 20			; 00000014H
  0012c	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0012d	5d		 pop	 ebp
  0012e	c2 0c 00	 ret	 12			; 0000000cH
$LN27@AddBuffEff:

; 198  : 		break;
; 199  : 	case ADD_OPTION_STRENGTH:
; 200  : 		lpObj->AddStrength += iValue;

  00131	66 8b 4d 10	 mov	 cx, WORD PTR _iValue$[ebp]
  00135	66 01 8e 20 01
	00 00		 add	 WORD PTR [esi+288], cx
  0013c	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0013d	5d		 pop	 ebp
  0013e	c2 0c 00	 ret	 12			; 0000000cH
$LN26@AddBuffEff:

; 201  : 		break;
; 202  : 	case ADD_OPTION_DEXTERITY:
; 203  : 		lpObj->AddDexterity += iValue;

  00141	66 8b 55 10	 mov	 dx, WORD PTR _iValue$[ebp]
  00145	66 01 96 22 01
	00 00		 add	 WORD PTR [esi+290], dx
  0014c	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0014d	5d		 pop	 ebp
  0014e	c2 0c 00	 ret	 12			; 0000000cH
$LN25@AddBuffEff:

; 204  : 		break;
; 205  : 	case ADD_OPTION_VITALITY:
; 206  : 		lpObj->AddVitality += iValue;

  00151	66 8b 45 10	 mov	 ax, WORD PTR _iValue$[ebp]
  00155	66 01 86 24 01
	00 00		 add	 WORD PTR [esi+292], ax
  0015c	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0015d	5d		 pop	 ebp
  0015e	c2 0c 00	 ret	 12			; 0000000cH
$LN24@AddBuffEff:

; 207  : 		break;
; 208  : 	case ADD_OPTION_ENERGY:
; 209  : 		lpObj->AddEnergy += iValue;

  00161	66 8b 4d 10	 mov	 cx, WORD PTR _iValue$[ebp]
  00165	66 01 8e 26 01
	00 00		 add	 WORD PTR [esi+294], cx
  0016c	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0016d	5d		 pop	 ebp
  0016e	c2 0c 00	 ret	 12			; 0000000cH
$LN23@AddBuffEff:

; 210  : 		break;
; 211  : 	case ADD_OPTION_LEADERSHIP:
; 212  : 		lpObj->AddLeadership += iValue;

  00171	66 8b 55 10	 mov	 dx, WORD PTR _iValue$[ebp]
  00175	66 01 96 1a 01
	00 00		 add	 WORD PTR [esi+282], dx
  0017c	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0017d	5d		 pop	 ebp
  0017e	c2 0c 00	 ret	 12			; 0000000cH
$LN22@AddBuffEff:

; 213  : 		break;
; 214  : 	case ADD_OPTION_WIZARD_DEFENSE:
; 215  :         lpObj->m_iSoulBarrierDefense = iValue;

  00181	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  00184	89 86 e0 04 00
	00		 mov	 DWORD PTR [esi+1248], eax
  0018a	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0018b	5d		 pop	 ebp
  0018c	c2 0c 00	 ret	 12			; 0000000cH
$LN21@AddBuffEff:

; 216  :         break;
; 217  : 	case ADD_OPTION_MAGIC_DEFENSE:
; 218  : 		lpObj->m_MagicDefense += iValue;

  0018f	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  00192	01 8e 98 04 00
	00		 add	 DWORD PTR [esi+1176], ecx
  00198	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  00199	5d		 pop	 ebp
  0019a	c2 0c 00	 ret	 12			; 0000000cH
$LN20@AddBuffEff:

; 219  : 		break;
; 220  : 	case ADD_OPTION_REFLECT:
; 221  : 		lpObj->DamageReflect += iValue;

  0019d	8a 55 10	 mov	 dl, BYTE PTR _iValue$[ebp]
  001a0	00 96 71 01 00
	00		 add	 BYTE PTR [esi+369], dl
  001a6	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  001a7	5d		 pop	 ebp
  001a8	c2 0c 00	 ret	 12			; 0000000cH
$LN19@AddBuffEff:

; 222  : 		break;
; 223  : 	case ADD_OPTION_ATTACK_RATE:
; 224  : 		lpObj->m_AttackRating -= iValue;

  001ab	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  001ae	29 86 88 04 00
	00		 sub	 DWORD PTR [esi+1160], eax
  001b4	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  001b5	5d		 pop	 ebp
  001b6	c2 0c 00	 ret	 12			; 0000000cH
$LN18@AddBuffEff:

; 225  : 		break;
; 226  : 	case ADD_OPTION_WIZARD_DEFENSE_DURATION:
; 227  : 		lpObj->m_sSoulBarrierDuration = iValue;

  001b9	66 8b 4d 10	 mov	 cx, WORD PTR _iValue$[ebp]
  001bd	66 89 8e e4 04
	00 00		 mov	 WORD PTR [esi+1252], cx
  001c4	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  001c5	5d		 pop	 ebp
  001c6	c2 0c 00	 ret	 12			; 0000000cH
$LN17@AddBuffEff:

; 228  : 		break;
; 229  : 	case ADD_OPTION_CRITICAL_DAMAGE:
; 230  : 		lpObj->m_CriticalDamage += iValue;

  001c9	8b 55 10	 mov	 edx, DWORD PTR _iValue$[ebp]
  001cc	01 96 bc 04 00
	00		 add	 DWORD PTR [esi+1212], edx
  001d2	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  001d3	5d		 pop	 ebp
  001d4	c2 0c 00	 ret	 12			; 0000000cH
$LN16@AddBuffEff:

; 231  : 		break;
; 232  : 	case ADD_OPTION_EXCELLENT_DAMAGE:
; 233  : 		lpObj->m_ExcelentDamage += iValue;

  001d7	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  001da	01 86 c0 04 00
	00		 add	 DWORD PTR [esi+1216], eax
  001e0	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  001e1	5d		 pop	 ebp
  001e2	c2 0c 00	 ret	 12			; 0000000cH
$LN15@AddBuffEff:

; 234  : 		break;
; 235  : 	case ADD_OPTION_BERSERKMANA:
; 236  :         lpObj->AddMana += (int)(iValue * lpObj->MaxMana / 100.0);

  001e5	db 45 10	 fild	 DWORD PTR _iValue$[ebp]
  001e8	d8 8e 14 01 00
	00		 fmul	 DWORD PTR [esi+276]
  001ee	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  001f4	e8 00 00 00 00	 call	 __ftol2_sse
  001f9	01 86 50 01 00
	00		 add	 DWORD PTR [esi+336], eax
  001ff	8b 8e 50 01 00
	00		 mov	 ecx, DWORD PTR [esi+336]

; 237  :         GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00205	8b 96 30 01 00
	00		 mov	 edx, DWORD PTR [esi+304]
  0020b	03 96 2c 01 00
	00		 add	 edx, DWORD PTR [esi+300]
  00211	89 4d 0c	 mov	 DWORD PTR tv732[ebp], ecx
  00214	db 45 0c	 fild	 DWORD PTR tv732[ebp]
  00217	52		 push	 edx
  00218	6a 00		 push	 0
  0021a	68 fe 00 00 00	 push	 254			; 000000feH
  0021f	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00225	e8 00 00 00 00	 call	 __ftol2_sse
  0022a	50		 push	 eax
  0022b	8b 06		 mov	 eax, DWORD PTR [esi]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 238  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  00233	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  00239	8b 8e 28 01 00
	00		 mov	 ecx, DWORD PTR [esi+296]
  0023f	83 c4 14	 add	 esp, 20			; 00000014H
  00242	51		 push	 ecx
  00243	6a 00		 push	 0
  00245	68 ff 00 00 00	 push	 255			; 000000ffH
  0024a	e8 00 00 00 00	 call	 __ftol2_sse
  0024f	8b 16		 mov	 edx, DWORD PTR [esi]
  00251	50		 push	 eax
  00252	52		 push	 edx
  00253	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00258	83 c4 14	 add	 esp, 20			; 00000014H
  0025b	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0025c	5d		 pop	 ebp
  0025d	c2 0c 00	 ret	 12			; 0000000cH
$LN14@AddBuffEff:

; 239  :         break;
; 240  : 	case ADD_OPTION_BERSERKLIFE:
; 241  : 		{
; 242  : 			float fAddLife = 0;
; 243  : 			float fPer = (((float)(40.0f) - (float)(iValue))/100.0f);

  00260	db 45 10	 fild	 DWORD PTR _iValue$[ebp]
  00263	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4044000000000000
  00269	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0026f	d9 5d 0c	 fstp	 DWORD PTR _fPer$202573[ebp]

; 244  : 
; 245  : 			fPer = (fPer > 0.1f)?fPer:0.1f;

  00272	d9 45 0c	 fld	 DWORD PTR _fPer$202573[ebp]
  00275	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3fb99999a0000000
  0027b	df e0		 fnstsw	 ax
  0027d	f6 c4 41	 test	 ah, 65			; 00000041H
  00280	74 09		 je	 SHORT $LN40@AddBuffEff
  00282	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3dcccccd
  00288	d9 5d 0c	 fstp	 DWORD PTR _fPer$202573[ebp]
$LN40@AddBuffEff:

; 246  : 			fAddLife = fPer * lpObj->MaxLife;
; 247  : 
; 248  : 			lpObj->AddLife -= (int)((float)(fAddLife));

  0028b	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00291	d8 4d 0c	 fmul	 DWORD PTR _fPer$202573[ebp]
  00294	d9 5d 0c	 fstp	 DWORD PTR tv837[ebp]
  00297	d9 45 0c	 fld	 DWORD PTR tv837[ebp]
  0029a	e8 00 00 00 00	 call	 __ftol2_sse
  0029f	29 86 4c 01 00
	00		 sub	 DWORD PTR [esi+332], eax
  002a5	8b 86 4c 01 00
	00		 mov	 eax, DWORD PTR [esi+332]
  002ab	89 45 0c	 mov	 DWORD PTR tv743[ebp], eax

; 249  : 			lpObj->Life = ( (float)(lpObj->Life) < ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) )?( (float)(lpObj->Life) ):( ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) );

  002ae	db 45 0c	 fild	 DWORD PTR tv743[ebp]
  002b1	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  002b7	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  002bd	d8 d9		 fcomp	 ST(1)
  002bf	df e0		 fnstsw	 ax
  002c1	f6 c4 05	 test	 ah, 5
  002c4	7a 08		 jp	 SHORT $LN41@AddBuffEff
  002c6	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  002cc	eb 02		 jmp	 SHORT $LN42@AddBuffEff
$LN41@AddBuffEff:
  002ce	d9 c0		 fld	 ST(0)
$LN42@AddBuffEff:

; 250  : 
; 251  : 			GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  002d0	8b 8e 5c 01 00
	00		 mov	 ecx, DWORD PTR [esi+348]
  002d6	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  002dc	03 8e 58 01 00
	00		 add	 ecx, DWORD PTR [esi+344]
$LN51@AddBuffEff:
  002e2	51		 push	 ecx
  002e3	6a 00		 push	 0
  002e5	68 fe 00 00 00	 push	 254			; 000000feH
  002ea	e8 00 00 00 00	 call	 __ftol2_sse
  002ef	8b 16		 mov	 edx, DWORD PTR [esi]
  002f1	50		 push	 eax
  002f2	52		 push	 edx
  002f3	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 252  : 			GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  002f8	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  002fe	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  00304	83 c4 14	 add	 esp, 20			; 00000014H
  00307	50		 push	 eax
  00308	6a 00		 push	 0
  0030a	68 ff 00 00 00	 push	 255			; 000000ffH
  0030f	e8 00 00 00 00	 call	 __ftol2_sse
  00314	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00316	50		 push	 eax
  00317	51		 push	 ecx
  00318	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0031d	83 c4 14	 add	 esp, 20			; 00000014H
  00320	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  00321	5d		 pop	 ebp
  00322	c2 0c 00	 ret	 12			; 0000000cH
$LN13@AddBuffEff:

; 253  : 		}
; 254  : 		break;
; 255  : 	case ADD_OPTION_MAGICDAMAGEMIN:
; 256  : 		lpObj->m_MagicDamageMin += iValue;

  00325	8b 55 10	 mov	 edx, DWORD PTR _iValue$[ebp]
  00328	01 96 68 04 00
	00		 add	 DWORD PTR [esi+1128], edx
  0032e	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0032f	5d		 pop	 ebp
  00330	c2 0c 00	 ret	 12			; 0000000cH
$LN12@AddBuffEff:

; 257  : 		break;
; 258  : 	case ADD_OPTION_MAGICDAMAGEMAX:
; 259  : 		lpObj->m_MagicDamageMax += iValue;

  00333	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  00336	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax
  0033c	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  0033d	5d		 pop	 ebp
  0033e	c2 0c 00	 ret	 12			; 0000000cH
$LN11@AddBuffEff:

; 260  : 		break;
; 261  : 	case ADD_OPTION_XMASATTACK:
; 262  : 		lpObj->m_AttackDamageMaxLeft += iValue;

  00341	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  00344	01 86 78 04 00
	00		 add	 DWORD PTR [esi+1144], eax

; 263  : 		lpObj->m_AttackDamageMinLeft += iValue;

  0034a	01 86 7c 04 00
	00		 add	 DWORD PTR [esi+1148], eax

; 264  : 		lpObj->m_AttackDamageMaxRight += iValue;

  00350	01 86 80 04 00
	00		 add	 DWORD PTR [esi+1152], eax

; 265  : 		lpObj->m_AttackDamageMinRight += iValue;

  00356	01 86 84 04 00
	00		 add	 DWORD PTR [esi+1156], eax

; 266  : 		lpObj->m_MagicDamageMin += iValue;

  0035c	01 86 68 04 00
	00		 add	 DWORD PTR [esi+1128], eax

; 267  : 		lpObj->m_MagicDamageMax += iValue;

  00362	01 86 6c 04 00
	00		 add	 DWORD PTR [esi+1132], eax

; 268  : 		lpObj->m_iSummonerBookSpellDamageMin += iValue;

  00368	01 86 a4 04 00
	00		 add	 DWORD PTR [esi+1188], eax

; 269  : 		lpObj->m_iSummonerBookSpellDamageMax += iValue;

  0036e	01 86 a8 04 00
	00		 add	 DWORD PTR [esi+1192], eax
  00374	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  00375	5d		 pop	 ebp
  00376	c2 0c 00	 ret	 12			; 0000000cH
$LN10@AddBuffEff:

; 270  : 		break;
; 271  : 	case ADD_OPTION_XMASDEFENSE:
; 272  : 		lpObj->m_Defense += iValue;

  00379	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  0037c	01 8e 94 04 00
	00		 add	 DWORD PTR [esi+1172], ecx
  00382	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  00383	5d		 pop	 ebp
  00384	c2 0c 00	 ret	 12			; 0000000cH
$LN9@AddBuffEff:

; 273  : 		break;
; 274  : 	case ADD_OPTION_LEVEL_BP:
; 275  : 		lpObj->AddBP += iValue * (lpObj->MLevel + lpObj->Level);

  00387	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]

; 276  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  0038e	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  00394	0f bf 96 d0 00
	00 00		 movsx	 edx, WORD PTR [esi+208]
  0039b	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  003a1	8b 8e 2c 01 00
	00		 mov	 ecx, DWORD PTR [esi+300]
  003a7	03 d0		 add	 edx, eax
  003a9	0f af 55 10	 imul	 edx, DWORD PTR _iValue$[ebp]
  003ad	01 96 30 01 00
	00		 add	 DWORD PTR [esi+304], edx
  003b3	03 8e 30 01 00
	00		 add	 ecx, DWORD PTR [esi+304]
  003b9	51		 push	 ecx
  003ba	6a 00		 push	 0
  003bc	68 fe 00 00 00	 push	 254			; 000000feH
  003c1	e8 00 00 00 00	 call	 __ftol2_sse
  003c6	8b 16		 mov	 edx, DWORD PTR [esi]
  003c8	50		 push	 eax
  003c9	52		 push	 edx
  003ca	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 277  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  003cf	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  003d5	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  003db	83 c4 14	 add	 esp, 20			; 00000014H
  003de	50		 push	 eax
  003df	6a 00		 push	 0
  003e1	68 ff 00 00 00	 push	 255			; 000000ffH
  003e6	e8 00 00 00 00	 call	 __ftol2_sse
  003eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003ed	50		 push	 eax
  003ee	51		 push	 ecx
  003ef	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  003f4	83 c4 14	 add	 esp, 20			; 00000014H
  003f7	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  003f8	5d		 pop	 ebp
  003f9	c2 0c 00	 ret	 12			; 0000000cH
$LN8@AddBuffEff:

; 278  : 		break;
; 279  : 	case ADD_OPTION_LEVEL_SD:
; 280  : 		lpObj->iAddShield += iValue * (lpObj->MLevel + lpObj->Level);

  003fc	0f bf 96 d0 00
	00 00		 movsx	 edx, WORD PTR [esi+208]
  00403	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  0040a	03 d0		 add	 edx, eax
  0040c	0f af 55 10	 imul	 edx, DWORD PTR _iValue$[ebp]
$LN50@AddBuffEff:

; 281  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00410	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00416	8b 8e 58 01 00
	00		 mov	 ecx, DWORD PTR [esi+344]
  0041c	01 96 5c 01 00
	00		 add	 DWORD PTR [esi+348], edx
  00422	03 8e 5c 01 00
	00		 add	 ecx, DWORD PTR [esi+348]
  00428	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]

; 282  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 283  : 		break;

  0042e	e9 af fe ff ff	 jmp	 $LN51@AddBuffEff
$LN7@AddBuffEff:

; 284  : 	case ADD_OPTION_BP:
; 285  : 		lpObj->AddBP += iValue;

  00433	8b 55 10	 mov	 edx, DWORD PTR _iValue$[ebp]

; 286  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00436	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  0043c	01 96 30 01 00
	00		 add	 DWORD PTR [esi+304], edx
  00442	8b 8e 2c 01 00
	00		 mov	 ecx, DWORD PTR [esi+300]
  00448	03 8e 30 01 00
	00		 add	 ecx, DWORD PTR [esi+304]
  0044e	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00454	51		 push	 ecx
  00455	6a 00		 push	 0
  00457	68 fe 00 00 00	 push	 254			; 000000feH
  0045c	e8 00 00 00 00	 call	 __ftol2_sse
  00461	8b 16		 mov	 edx, DWORD PTR [esi]
  00463	50		 push	 eax
  00464	52		 push	 edx
  00465	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 287  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  0046a	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  00470	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  00476	83 c4 14	 add	 esp, 20			; 00000014H
  00479	50		 push	 eax
  0047a	6a 00		 push	 0
  0047c	68 ff 00 00 00	 push	 255			; 000000ffH
  00481	e8 00 00 00 00	 call	 __ftol2_sse
  00486	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00488	50		 push	 eax
  00489	51		 push	 ecx
  0048a	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0048f	83 c4 14	 add	 esp, 20			; 00000014H
  00492	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  00493	5d		 pop	 ebp
  00494	c2 0c 00	 ret	 12			; 0000000cH
$LN6@AddBuffEff:

; 288  : 		break;
; 289  : 	case ADD_OPTION_SD:
; 290  : 		lpObj->iAddShield += iValue;

  00497	8b 55 10	 mov	 edx, DWORD PTR _iValue$[ebp]

; 291  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);
; 292  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 293  : 		break;

  0049a	e9 71 ff ff ff	 jmp	 $LN50@AddBuffEff
$LN5@AddBuffEff:

; 294  : 	case ADD_OPTION_IGNOREDEFENSE:
; 295  : 		lpObj->SetOpIgnoreDefense += iValue;

  0049f	8a 55 10	 mov	 dl, BYTE PTR _iValue$[ebp]
  004a2	00 96 3e 11 00
	00		 add	 BYTE PTR [esi+4414], dl
  004a8	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  004a9	5d		 pop	 ebp
  004aa	c2 0c 00	 ret	 12			; 0000000cH
$LN4@AddBuffEff:

; 296  : 		break;
; 297  : 	case ADD_OPTION_SUCCESSFULBLOCKING:
; 298  : 		lpObj->m_SuccessfulBlocking += iValue;

  004ad	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  004b0	01 86 9c 04 00
	00		 add	 DWORD PTR [esi+1180], eax
  004b6	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  004b7	5d		 pop	 ebp
  004b8	c2 0c 00	 ret	 12			; 0000000cH
$LN3@AddBuffEff:

; 299  : 		break;
; 300  : 	case SUB_OPTION_SUCCESSFULBLOCKING:
; 301  :         lpObj->m_SuccessfulBlocking -= iValue;

  004bb	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  004be	29 8e 9c 04 00
	00		 sub	 DWORD PTR [esi+1180], ecx

; 302  :         if ( lpObj->m_SuccessfulBlocking < 0 )

  004c4	79 0a		 jns	 SHORT $LN2@AddBuffEff

; 303  :           lpObj->m_SuccessfulBlocking = 0;

  004c6	c7 86 9c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1180], 0
$LN2@AddBuffEff:
  004d0	5e		 pop	 esi

; 304  :         break;
; 305  : 	default:
; 306  : 		return;
; 307  : 	}
; 308  : }

  004d1	5d		 pop	 ebp
  004d2	c2 0c 00	 ret	 12			; 0000000cH
  004d5	8d 49 00	 npad	 3
$LN52@AddBuffEff:
  004d8	00 00 00 00	 DD	 $LN31@AddBuffEff
  004dc	00 00 00 00	 DD	 $LN30@AddBuffEff
  004e0	00 00 00 00	 DD	 $LN29@AddBuffEff
  004e4	00 00 00 00	 DD	 $LN28@AddBuffEff
  004e8	00 00 00 00	 DD	 $LN27@AddBuffEff
  004ec	00 00 00 00	 DD	 $LN26@AddBuffEff
  004f0	00 00 00 00	 DD	 $LN25@AddBuffEff
  004f4	00 00 00 00	 DD	 $LN24@AddBuffEff
  004f8	00 00 00 00	 DD	 $LN23@AddBuffEff
  004fc	00 00 00 00	 DD	 $LN22@AddBuffEff
  00500	00 00 00 00	 DD	 $LN21@AddBuffEff
  00504	00 00 00 00	 DD	 $LN20@AddBuffEff
  00508	00 00 00 00	 DD	 $LN19@AddBuffEff
  0050c	00 00 00 00	 DD	 $LN18@AddBuffEff
  00510	00 00 00 00	 DD	 $LN15@AddBuffEff
  00514	00 00 00 00	 DD	 $LN14@AddBuffEff
  00518	00 00 00 00	 DD	 $LN13@AddBuffEff
  0051c	00 00 00 00	 DD	 $LN12@AddBuffEff
  00520	00 00 00 00	 DD	 $LN17@AddBuffEff
  00524	00 00 00 00	 DD	 $LN16@AddBuffEff
  00528	00 00 00 00	 DD	 $LN11@AddBuffEff
  0052c	00 00 00 00	 DD	 $LN10@AddBuffEff
  00530	00 00 00 00	 DD	 $LN9@AddBuffEff
  00534	00 00 00 00	 DD	 $LN8@AddBuffEff
  00538	00 00 00 00	 DD	 $LN6@AddBuffEff
  0053c	00 00 00 00	 DD	 $LN7@AddBuffEff
  00540	00 00 00 00	 DD	 $LN5@AddBuffEff
  00544	00 00 00 00	 DD	 $LN4@AddBuffEff
  00548	00 00 00 00	 DD	 $LN3@AddBuffEff
  0054c	00 00 00 00	 DD	 $LN2@AddBuffEff
$LN43@AddBuffEff:
  00550	00		 DB	 0
  00551	1d		 DB	 29			; 0000001dH
  00552	01		 DB	 1
  00553	02		 DB	 2
  00554	03		 DB	 3
  00555	1d		 DB	 29			; 0000001dH
  00556	1d		 DB	 29			; 0000001dH
  00557	1d		 DB	 29			; 0000001dH
  00558	04		 DB	 4
  00559	05		 DB	 5
  0055a	06		 DB	 6
  0055b	07		 DB	 7
  0055c	08		 DB	 8
  0055d	1d		 DB	 29			; 0000001dH
  0055e	1d		 DB	 29			; 0000001dH
  0055f	1d		 DB	 29			; 0000001dH
  00560	1d		 DB	 29			; 0000001dH
  00561	1d		 DB	 29			; 0000001dH
  00562	1d		 DB	 29			; 0000001dH
  00563	1d		 DB	 29			; 0000001dH
  00564	09		 DB	 9
  00565	0a		 DB	 10			; 0000000aH
  00566	1d		 DB	 29			; 0000001dH
  00567	0b		 DB	 11			; 0000000bH
  00568	1d		 DB	 29			; 0000001dH
  00569	0c		 DB	 12			; 0000000cH
  0056a	1d		 DB	 29			; 0000001dH
  0056b	0d		 DB	 13			; 0000000dH
  0056c	1d		 DB	 29			; 0000001dH
  0056d	1d		 DB	 29			; 0000001dH
  0056e	0e		 DB	 14			; 0000000eH
  0056f	0f		 DB	 15			; 0000000fH
  00570	10		 DB	 16			; 00000010H
  00571	11		 DB	 17			; 00000011H
  00572	1d		 DB	 29			; 0000001dH
  00573	1d		 DB	 29			; 0000001dH
  00574	1d		 DB	 29			; 0000001dH
  00575	1d		 DB	 29			; 0000001dH
  00576	1d		 DB	 29			; 0000001dH
  00577	1d		 DB	 29			; 0000001dH
  00578	1d		 DB	 29			; 0000001dH
  00579	1d		 DB	 29			; 0000001dH
  0057a	1d		 DB	 29			; 0000001dH
  0057b	1d		 DB	 29			; 0000001dH
  0057c	1d		 DB	 29			; 0000001dH
  0057d	1d		 DB	 29			; 0000001dH
  0057e	1d		 DB	 29			; 0000001dH
  0057f	1d		 DB	 29			; 0000001dH
  00580	1d		 DB	 29			; 0000001dH
  00581	1d		 DB	 29			; 0000001dH
  00582	1d		 DB	 29			; 0000001dH
  00583	1d		 DB	 29			; 0000001dH
  00584	1d		 DB	 29			; 0000001dH
  00585	1d		 DB	 29			; 0000001dH
  00586	12		 DB	 18			; 00000012H
  00587	13		 DB	 19			; 00000013H
  00588	14		 DB	 20			; 00000014H
  00589	15		 DB	 21			; 00000015H
  0058a	1d		 DB	 29			; 0000001dH
  0058b	1d		 DB	 29			; 0000001dH
  0058c	1d		 DB	 29			; 0000001dH
  0058d	1d		 DB	 29			; 0000001dH
  0058e	1d		 DB	 29			; 0000001dH
  0058f	1d		 DB	 29			; 0000001dH
  00590	1d		 DB	 29			; 0000001dH
  00591	16		 DB	 22			; 00000016H
  00592	17		 DB	 23			; 00000017H
  00593	1d		 DB	 29			; 0000001dH
  00594	1d		 DB	 29			; 0000001dH
  00595	18		 DB	 24			; 00000018H
  00596	19		 DB	 25			; 00000019H
  00597	1a		 DB	 26			; 0000001aH
  00598	1d		 DB	 29			; 0000001dH
  00599	1b		 DB	 27			; 0000001bH
  0059a	1c		 DB	 28			; 0000001cH
?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ENDP ; CViewportSkillState::AddBuffEffect
_TEXT	ENDS
PUBLIC	__real@c059000000000000
PUBLIC	?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::RemoveBuffEffect
;	COMDAT __real@c059000000000000
CONST	SEGMENT
__real@c059000000000000 DQ 0c059000000000000r	; -100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
tv818 = 12						; size = 4
tv814 = 12						; size = 4
tv799 = 12						; size = 4
tv729 = 12						; size = 4
_fPer$202648 = 12					; size = 4
_btEffectType$ = 12					; size = 1
_iValue$ = 16						; size = 4
?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z PROC ; CViewportSkillState::RemoveBuffEffect, COMDAT
; _this$ = ecx

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 312  : 	if(lpObj == NULL || btEffectType < 0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 b8 04 00
	00		 je	 $LN1@RemoveBuff

; 313  : 	{
; 314  : 		return;
; 315  : 	}
; 316  : 
; 317  : 	if(lpObj->Connected < PLAYER_PLAYING)

  0000f	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00013	0f 8c ae 04 00
	00		 jl	 $LN1@RemoveBuff

; 318  : 	{
; 319  : 		return;
; 320  : 	}
; 321  : 
; 322  : //	switch(btEffectType)
; 323  : //	{
; 324  : //	case 1:
; 325  : //		{
; 326  : //			lpObj->m_AttackSpeed -= iValue;
; 327  : //			lpObj->m_MagicSpeed -= iValue;
; 328  : //		}
; 329  : //		break;
; 330  : //	case 3:
; 331  : //		{
; 332  : //			lpObj->m_Defense -= iValue;
; 333  : //			lpObj->m_MagicDefense -= iValue;
; 334  : //		}
; 335  : //		break;
; 336  : //	case 4:
; 337  : //		{
; 338  : //			lpObj->AddLife -= iValue;
; 339  : //			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield));
; 340  : //			GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield);
; 341  : //		}
; 342  : //		break;
; 343  : //	case 5:
; 344  : //		{
; 345  : //			lpObj->AddMana -= iValue;
; 346  : //			GCManaSend(lpObj->m_Index, (lpObj->MaxMana + lpObj->AddMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));
; 347  : //			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 348  : //		}
; 349  : //		break;
; 350  : //	case 21:
; 351  : //		{
; 352  : //			lpObj->m_iSoulBarrierDefense -= iValue;
; 353  : //		}
; 354  : //		break;
; 355  : //	case 22:
; 356  : //		{
; 357  : //			lpObj->m_MagicDefense -= iValue;
; 358  : //		}
; 359  : //		break;
; 360  : //	case 24:
; 361  : //		{
; 362  : //			lpObj->DamageReflect -= iValue;
; 363  : //		}
; 364  : //		break;
; 365  : //	case 26:
; 366  : //		{
; 367  : //			lpObj->m_AttackRating += iValue;
; 368  : //		}
; 369  : //		break;
; 370  : //	case 28:
; 371  : //		{
; 372  : //			lpObj->m_sSoulBarrierDuration = 0;
; 373  : //		}
; 374  : //		break;
; 375  : //		//Season 4 add-on
; 376  : //	case 31: //good
; 377  : //		{
; 378  : //			lpObj->AddMana -= (int)( (((iValue) * (lpObj->MaxMana))) / 100.0f);
; 379  : //			lpObj->Mana = ( (lpObj->Mana) < ( (lpObj->AddMana) + (lpObj->MaxMana) ) )?( (lpObj->Mana) ):( ( (lpObj->AddMana) + (lpObj->MaxMana) ) ); //good
; 380  : //#ifdef DEBUG_CODE
; 381  : //			LogAddC(2,"lpObj->AddMana: %d | lpObj->Mana: %d",lpObj->AddMana,lpObj->Mana);
; 382  : //#endif
; 383  : //			GCManaSend(lpObj->m_Index, (lpObj->MaxMana + lpObj->AddMana), -2, 0, (lpObj->MaxBP + lpObj->AddBP));
; 384  : //			GCManaSend(lpObj->m_Index, lpObj->Mana, -1, 0, lpObj->BP);
; 385  : //		}
; 386  : //		break;
; 387  : //	case 32: //good :)
; 388  : //		{
; 389  : //			float loc2 = 0; //loc2
; 390  : //
; 391  : //			float loc3 = (((float)(40.0f) - (float)(iValue))/100.0f); //good
; 392  : //
; 393  : //			loc3 = (loc3 > 0.1f)?loc3:0.1f; //good
; 394  : //			
; 395  : //			loc2 = loc3 * lpObj->MaxLife; //good
; 396  : //
; 397  : //			lpObj->AddLife += (int)(loc2); //good
; 398  : //
; 399  : //			GCReFillSend(lpObj->m_Index, (lpObj->MaxLife + lpObj->AddLife), -2, 0, (lpObj->iMaxShield + lpObj->iAddShield)); //good
; 400  : //			GCReFillSend(lpObj->m_Index, lpObj->Life, -1, 0, lpObj->iShield); //good
; 401  : //		}
; 402  : //		break;
; 403  : //	case 33: //Wizardry Expansion ??
; 404  : //		{
; 405  : //			lpObj->m_MagicDamageMin -= iValue;
; 406  : //			lpObj->m_MagicDamageMax -= iValue;
; 407  : //		}
; 408  : //		break;
; 409  : //	case 57: //XMas Attack ??
; 410  : //		{
; 411  : //			lpObj->m_AttackDamageMaxLeft -= iValue;
; 412  : //			lpObj->m_AttackDamageMinLeft -= iValue;
; 413  : //			lpObj->m_AttackDamageMaxRight -= iValue;
; 414  : //			lpObj->m_AttackDamageMinRight -= iValue;
; 415  : //
; 416  : //			lpObj->m_MagicDamageMin -= iValue;
; 417  : //			lpObj->m_MagicDamageMax -= iValue;
; 418  : //
; 419  : //			lpObj->m_iSummonerBookSpellDamageMin -= iValue;
; 420  : //			lpObj->m_iSummonerBookSpellDamageMax -= iValue;
; 421  : //		}
; 422  : //		break;
; 423  : //	case 58: //XMas Defense??
; 424  : //		{
; 425  : //			lpObj->m_Defense -= iValue;
; 426  : //		}
; 427  : //		break;
; 428  : //	case ADD_OPTION_LEVEL_BP:
; 429  : //		lpObj->AddBP -= iValue * (lpObj->MLevel + lpObj->Level);
; 430  : //		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);
; 431  : //        GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 432  : //		break;
; 433  : //	case ADD_OPTION_LEVEL_SD:
; 434  : //		lpObj->iAddShield -= iValue * (lpObj->MLevel + lpObj->Level);
; 435  : //		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);
; 436  : //        GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 437  : //		break;
; 438  : //	case ADD_OPTION_BP:
; 439  : //		lpObj->AddBP -= iValue;
; 440  : //		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);
; 441  : //        GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 442  : //		break;
; 443  : //	case ADD_OPTION_SD:
; 444  : //		lpObj->iAddShield -= iValue;
; 445  : //		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);
; 446  : //        GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 447  : //		break;
; 448  : //	case ADD_OPTION_IGNOREDEFENSE:
; 449  : //		lpObj->SetOpIgnoreDefense -= iValue;
; 450  : //		break;
; 451  : //	case ADD_OPTION_SUCCESSFULBLOCKING:
; 452  : //		lpObj->m_SuccessfulBlocking -= iValue;
; 453  : //		break;
; 454  : //	case SUB_OPTION_SUCCESSFULBLOCKING:
; 455  : //        lpObj->m_SuccessfulBlocking += iValue;
; 456  : //        break;
; 457  : //	default:
; 458  : //		return;
; 459  : //	}
; 460  : 	switch( btEffectType )

  00019	0f b6 45 0c	 movzx	 eax, BYTE PTR _btEffectType$[ebp]
  0001d	48		 dec	 eax
  0001e	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00021	0f 87 a0 04 00
	00		 ja	 $LN1@RemoveBuff
  00027	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN46@RemoveBuff[eax]
  0002e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN62@RemoveBuff[eax*4]
$LN32@RemoveBuff:

; 461  : 	{
; 462  : 	case ADD_OPTION_SPEED:
; 463  : 		lpObj->m_AttackSpeed -= iValue;

  00035	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  00038	29 86 8c 04 00
	00		 sub	 DWORD PTR [esi+1164], eax

; 464  : 		lpObj->m_MagicSpeed -= iValue;

  0003e	29 86 90 04 00
	00		 sub	 DWORD PTR [esi+1168], eax
  00044	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
$LN31@RemoveBuff:

; 465  : 		break;
; 466  : 	case ADD_OPTION_DEFENSE:
; 467  : 		lpObj->m_Defense -= iValue;

  00049	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  0004c	29 86 94 04 00
	00		 sub	 DWORD PTR [esi+1172], eax

; 468  : 		lpObj->m_MagicDefense -= iValue;

  00052	29 86 98 04 00
	00		 sub	 DWORD PTR [esi+1176], eax
  00058	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
$LN30@RemoveBuff:

; 469  : 		break;
; 470  : 	case ADD_OPTION_LIFE:
; 471  : #ifdef FIX_DEATH_HP_BAF
; 472  : 		if (lpObj->AddLife < iValue)

  0005d	8b 86 4c 01 00
	00		 mov	 eax, DWORD PTR [esi+332]
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  00066	3b c1		 cmp	 eax, ecx
  00068	7c 08		 jl	 SHORT $LN28@RemoveBuff

; 473  : 		{
; 474  : 
; 475  : 		}
; 476  : 		else
; 477  : 		{
; 478  : 			lpObj->AddLife -= iValue;

  0006a	2b c1		 sub	 eax, ecx
  0006c	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax
$LN28@RemoveBuff:

; 479  : 		}
; 480  : 
; 481  : #else
; 482  : 		lpObj->AddLife -= iValue;
; 483  : #endif
; 484  : 
; 485  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00072	8b 8e 5c 01 00
	00		 mov	 ecx, DWORD PTR [esi+348]
  00078	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  0007e	03 8e 58 01 00
	00		 add	 ecx, DWORD PTR [esi+344]
  00084	da 86 4c 01 00
	00		 fiadd	 DWORD PTR [esi+332]

; 486  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 487  : 		break;

  0008a	e9 d0 03 00 00	 jmp	 $LN59@RemoveBuff
$LN27@RemoveBuff:

; 488  : 	case ADD_OPTION_MANA:
; 489  : 		lpObj->AddMana -= iValue;

  0008f	8b 55 10	 mov	 edx, DWORD PTR _iValue$[ebp]

; 490  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00092	d9 86 14 01 00
	00		 fld	 DWORD PTR [esi+276]
  00098	29 96 50 01 00
	00		 sub	 DWORD PTR [esi+336], edx
  0009e	8b 86 50 01 00
	00		 mov	 eax, DWORD PTR [esi+336]
  000a4	8b 8e 30 01 00
	00		 mov	 ecx, DWORD PTR [esi+304]
  000aa	03 8e 2c 01 00
	00		 add	 ecx, DWORD PTR [esi+300]
  000b0	89 45 0c	 mov	 DWORD PTR tv729[ebp], eax
  000b3	da 45 0c	 fiadd	 DWORD PTR tv729[ebp]

; 491  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 492  : 		break;

  000b6	e9 40 03 00 00	 jmp	 $LN60@RemoveBuff
$LN26@RemoveBuff:

; 493  : 	case ADD_OPTION_STRENGTH:
; 494  : 		lpObj->AddStrength -= iValue;

  000bb	66 8b 55 10	 mov	 dx, WORD PTR _iValue$[ebp]
  000bf	66 29 96 20 01
	00 00		 sub	 WORD PTR [esi+288], dx
  000c6	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  000c7	5d		 pop	 ebp
  000c8	c2 0c 00	 ret	 12			; 0000000cH
$LN25@RemoveBuff:

; 495  : 		break;
; 496  : 	case ADD_OPTION_DEXTERITY:
; 497  : 		lpObj->AddDexterity -= iValue;

  000cb	66 8b 45 10	 mov	 ax, WORD PTR _iValue$[ebp]
  000cf	66 29 86 22 01
	00 00		 sub	 WORD PTR [esi+290], ax
  000d6	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  000d7	5d		 pop	 ebp
  000d8	c2 0c 00	 ret	 12			; 0000000cH
$LN24@RemoveBuff:

; 498  : 		break;
; 499  : 	case ADD_OPTION_VITALITY:
; 500  : 		lpObj->AddVitality -= iValue;

  000db	66 8b 4d 10	 mov	 cx, WORD PTR _iValue$[ebp]
  000df	66 29 8e 24 01
	00 00		 sub	 WORD PTR [esi+292], cx
  000e6	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  000e7	5d		 pop	 ebp
  000e8	c2 0c 00	 ret	 12			; 0000000cH
$LN23@RemoveBuff:

; 501  : 		break;
; 502  : 	case ADD_OPTION_ENERGY:
; 503  : 		lpObj->AddEnergy -= iValue;

  000eb	66 8b 55 10	 mov	 dx, WORD PTR _iValue$[ebp]
  000ef	66 29 96 26 01
	00 00		 sub	 WORD PTR [esi+294], dx
  000f6	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  000f7	5d		 pop	 ebp
  000f8	c2 0c 00	 ret	 12			; 0000000cH
$LN22@RemoveBuff:

; 504  : 		break;
; 505  : 	case ADD_OPTION_LEADERSHIP:
; 506  : 		lpObj->AddLeadership -= iValue;

  000fb	66 8b 45 10	 mov	 ax, WORD PTR _iValue$[ebp]
  000ff	66 29 86 1a 01
	00 00		 sub	 WORD PTR [esi+282], ax
  00106	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00107	5d		 pop	 ebp
  00108	c2 0c 00	 ret	 12			; 0000000cH
$LN21@RemoveBuff:

; 507  : 		break;
; 508  : 	case ADD_OPTION_WIZARD_DEFENSE:
; 509  :         lpObj->m_iSoulBarrierDefense -= iValue;

  0010b	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  0010e	29 8e e0 04 00
	00		 sub	 DWORD PTR [esi+1248], ecx
  00114	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00115	5d		 pop	 ebp
  00116	c2 0c 00	 ret	 12			; 0000000cH
$LN20@RemoveBuff:

; 510  :         break;
; 511  : 	case ADD_OPTION_MAGIC_DEFENSE:
; 512  : 		lpObj->m_MagicDefense -= iValue;

  00119	8b 55 10	 mov	 edx, DWORD PTR _iValue$[ebp]
  0011c	29 96 98 04 00
	00		 sub	 DWORD PTR [esi+1176], edx
  00122	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00123	5d		 pop	 ebp
  00124	c2 0c 00	 ret	 12			; 0000000cH
$LN19@RemoveBuff:

; 513  : 		break;
; 514  : 	case ADD_OPTION_REFLECT:
; 515  : 		lpObj->DamageReflect -= iValue;

  00127	8a 45 10	 mov	 al, BYTE PTR _iValue$[ebp]
  0012a	28 86 71 01 00
	00		 sub	 BYTE PTR [esi+369], al
  00130	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00131	5d		 pop	 ebp
  00132	c2 0c 00	 ret	 12			; 0000000cH
$LN18@RemoveBuff:

; 516  : 		break;
; 517  : 	case ADD_OPTION_ATTACK_RATE:
; 518  : 		lpObj->m_AttackRating += iValue;

  00135	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  00138	01 8e 88 04 00
	00		 add	 DWORD PTR [esi+1160], ecx
  0013e	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  0013f	5d		 pop	 ebp
  00140	c2 0c 00	 ret	 12			; 0000000cH
$LN17@RemoveBuff:

; 519  : 		break;
; 520  : 	case ADD_OPTION_WIZARD_DEFENSE_DURATION:
; 521  : 		lpObj->m_sSoulBarrierDuration = 0;

  00143	33 d2		 xor	 edx, edx
  00145	66 89 96 e4 04
	00 00		 mov	 WORD PTR [esi+1252], dx
  0014c	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  0014d	5d		 pop	 ebp
  0014e	c2 0c 00	 ret	 12			; 0000000cH
$LN16@RemoveBuff:

; 522  : 		break;
; 523  : 	case ADD_OPTION_CRITICAL_DAMAGE:
; 524  : 		lpObj->m_CriticalDamage -= iValue;

  00151	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  00154	29 86 bc 04 00
	00		 sub	 DWORD PTR [esi+1212], eax
  0015a	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  0015b	5d		 pop	 ebp
  0015c	c2 0c 00	 ret	 12			; 0000000cH
$LN15@RemoveBuff:

; 525  : 		break;
; 526  : 	case ADD_OPTION_EXCELLENT_DAMAGE:
; 527  : 		lpObj->m_ExcelentDamage -= iValue;

  0015f	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  00162	29 8e c0 04 00
	00		 sub	 DWORD PTR [esi+1216], ecx
  00168	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00169	5d		 pop	 ebp
  0016a	c2 0c 00	 ret	 12			; 0000000cH
$LN14@RemoveBuff:

; 528  : 		break;
; 529  : 	case ADD_OPTION_BERSERKMANA:
; 530  :         lpObj->AddMana -= (int)(iValue * lpObj->MaxMana / 100.0);

  0016d	db 45 10	 fild	 DWORD PTR _iValue$[ebp]
  00170	d8 8e 14 01 00
	00		 fmul	 DWORD PTR [esi+276]
  00176	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@c059000000000000
  0017c	e8 00 00 00 00	 call	 __ftol2_sse
  00181	01 86 50 01 00
	00		 add	 DWORD PTR [esi+336], eax
  00187	8b 96 50 01 00
	00		 mov	 edx, DWORD PTR [esi+336]
  0018d	89 55 0c	 mov	 DWORD PTR tv799[ebp], edx

; 531  : 		lpObj->Mana = ((lpObj->AddMana + lpObj->MaxMana) <= lpObj->Mana) ? lpObj->Mana : (lpObj->AddMana + lpObj->MaxMana);

  00190	db 45 0c	 fild	 DWORD PTR tv799[ebp]
  00193	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  00199	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  0019f	d8 d9		 fcomp	 ST(1)
  001a1	df e0		 fnstsw	 ax
  001a3	f6 c4 01	 test	 ah, 1
  001a6	75 08		 jne	 SHORT $LN40@RemoveBuff
  001a8	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  001ae	eb 02		 jmp	 SHORT $LN41@RemoveBuff
$LN40@RemoveBuff:
  001b0	d9 c0		 fld	 ST(0)
$LN41@RemoveBuff:

; 532  : 
; 533  :         GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  001b2	8b 86 30 01 00
	00		 mov	 eax, DWORD PTR [esi+304]
  001b8	d9 9e 10 01 00
	00		 fstp	 DWORD PTR [esi+272]
  001be	03 86 2c 01 00
	00		 add	 eax, DWORD PTR [esi+300]
  001c4	50		 push	 eax
  001c5	6a 00		 push	 0
  001c7	68 fe 00 00 00	 push	 254			; 000000feH
  001cc	e8 00 00 00 00	 call	 __ftol2_sse
  001d1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d3	50		 push	 eax
  001d4	51		 push	 ecx
  001d5	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 534  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  001da	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  001e0	8b 96 28 01 00
	00		 mov	 edx, DWORD PTR [esi+296]
  001e6	83 c4 14	 add	 esp, 20			; 00000014H
  001e9	52		 push	 edx
  001ea	6a 00		 push	 0
  001ec	68 ff 00 00 00	 push	 255			; 000000ffH
  001f1	e8 00 00 00 00	 call	 __ftol2_sse
  001f6	50		 push	 eax
  001f7	8b 06		 mov	 eax, DWORD PTR [esi]
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 579  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  001ff	83 c4 14	 add	 esp, 20			; 00000014H
  00202	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00203	5d		 pop	 ebp
  00204	c2 0c 00	 ret	 12			; 0000000cH
$LN13@RemoveBuff:

; 535  :         break;
; 536  : 	case ADD_OPTION_BERSERKLIFE:
; 537  : 		{
; 538  : 			float fAddLife = 0;
; 539  : 			float fPer = (((float)(40.0f) - (float)(iValue))/100.0f);

  00207	db 45 10	 fild	 DWORD PTR _iValue$[ebp]
  0020a	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4044000000000000
  00210	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00216	d9 5d 0c	 fstp	 DWORD PTR _fPer$202648[ebp]

; 540  : 
; 541  : 			fPer = (fPer > 0.1f)?fPer:0.1f;

  00219	d9 45 0c	 fld	 DWORD PTR _fPer$202648[ebp]
  0021c	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3fb99999a0000000
  00222	df e0		 fnstsw	 ax
  00224	f6 c4 41	 test	 ah, 65			; 00000041H
  00227	74 09		 je	 SHORT $LN43@RemoveBuff
  00229	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3dcccccd
  0022f	d9 5d 0c	 fstp	 DWORD PTR _fPer$202648[ebp]
$LN43@RemoveBuff:

; 542  : 			fAddLife = fPer * lpObj->MaxLife;
; 543  : 
; 544  : 			lpObj->AddLife += (int)((float)(fAddLife));

  00232	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00238	d8 4d 0c	 fmul	 DWORD PTR _fPer$202648[ebp]
  0023b	d9 5d 0c	 fstp	 DWORD PTR tv818[ebp]
  0023e	d9 45 0c	 fld	 DWORD PTR tv818[ebp]
  00241	e8 00 00 00 00	 call	 __ftol2_sse
  00246	01 86 4c 01 00
	00		 add	 DWORD PTR [esi+332], eax
  0024c	8b 8e 4c 01 00
	00		 mov	 ecx, DWORD PTR [esi+332]
  00252	89 4d 0c	 mov	 DWORD PTR tv814[ebp], ecx

; 545  : 			lpObj->Life = ( (float)(lpObj->Life) < ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) )?( (float)(lpObj->Life) ):( ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) );

  00255	db 45 0c	 fild	 DWORD PTR tv814[ebp]
  00258	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  0025e	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00264	d8 d9		 fcomp	 ST(1)
  00266	df e0		 fnstsw	 ax
  00268	f6 c4 05	 test	 ah, 5
  0026b	7a 08		 jp	 SHORT $LN44@RemoveBuff
  0026d	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00273	eb 02		 jmp	 SHORT $LN45@RemoveBuff
$LN44@RemoveBuff:
  00275	d9 c0		 fld	 ST(0)
$LN45@RemoveBuff:

; 546  : 
; 547  : 			GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00277	8b 96 5c 01 00
	00		 mov	 edx, DWORD PTR [esi+348]
  0027d	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  00283	03 96 58 01 00
	00		 add	 edx, DWORD PTR [esi+344]

; 548  : 			GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 549  : 		}
; 550  : 		break;

  00289	e9 09 01 00 00	 jmp	 $LN61@RemoveBuff
$LN12@RemoveBuff:

; 551  : 	case ADD_OPTION_MAGICDAMAGEMIN:
; 552  : 		lpObj->m_MagicDamageMin -= iValue;

  0028e	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  00291	29 86 68 04 00
	00		 sub	 DWORD PTR [esi+1128], eax
  00297	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00298	5d		 pop	 ebp
  00299	c2 0c 00	 ret	 12			; 0000000cH
$LN11@RemoveBuff:

; 553  : 		break;
; 554  : 	case ADD_OPTION_MAGICDAMAGEMAX:
; 555  : 		lpObj->m_MagicDamageMax -= iValue;

  0029c	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  0029f	29 8e 6c 04 00
	00		 sub	 DWORD PTR [esi+1132], ecx
  002a5	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  002a6	5d		 pop	 ebp
  002a7	c2 0c 00	 ret	 12			; 0000000cH
$LN10@RemoveBuff:

; 556  : 		//lpObj->m_MPSkillOpt.Ukn[43] = 0; --  need to update this when ML structs done
; 557  : 		break;
; 558  : 	case ADD_OPTION_XMASATTACK:
; 559  : 		lpObj->m_AttackDamageMaxLeft -= iValue;

  002aa	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  002ad	29 86 78 04 00
	00		 sub	 DWORD PTR [esi+1144], eax

; 560  : 		lpObj->m_AttackDamageMinLeft -= iValue;

  002b3	29 86 7c 04 00
	00		 sub	 DWORD PTR [esi+1148], eax

; 561  : 		lpObj->m_AttackDamageMaxRight -= iValue;

  002b9	29 86 80 04 00
	00		 sub	 DWORD PTR [esi+1152], eax

; 562  : 		lpObj->m_AttackDamageMinRight -= iValue;

  002bf	29 86 84 04 00
	00		 sub	 DWORD PTR [esi+1156], eax

; 563  : 		lpObj->m_MagicDamageMin -= iValue;

  002c5	29 86 68 04 00
	00		 sub	 DWORD PTR [esi+1128], eax

; 564  : 		lpObj->m_MagicDamageMax -= iValue;

  002cb	29 86 6c 04 00
	00		 sub	 DWORD PTR [esi+1132], eax

; 565  : 		lpObj->m_iSummonerBookSpellDamageMin -= iValue;

  002d1	29 86 a4 04 00
	00		 sub	 DWORD PTR [esi+1188], eax

; 566  : 		lpObj->m_iSummonerBookSpellDamageMax -= iValue;

  002d7	29 86 a8 04 00
	00		 sub	 DWORD PTR [esi+1192], eax
  002dd	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  002de	5d		 pop	 ebp
  002df	c2 0c 00	 ret	 12			; 0000000cH
$LN9@RemoveBuff:

; 567  : 		break;
; 568  : 	case ADD_OPTION_XMASDEFENSE:
; 569  : 		lpObj->m_Defense -= iValue;

  002e2	8b 55 10	 mov	 edx, DWORD PTR _iValue$[ebp]
  002e5	29 96 94 04 00
	00		 sub	 DWORD PTR [esi+1172], edx
  002eb	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  002ec	5d		 pop	 ebp
  002ed	c2 0c 00	 ret	 12			; 0000000cH
$LN8@RemoveBuff:

; 570  : 		break;
; 571  : 	case ADD_OPTION_LEVEL_BP:
; 572  : 		lpObj->AddBP -= iValue * (lpObj->MLevel + lpObj->Level);

  002f0	0f bf 8e be 00
	00 00		 movsx	 ecx, WORD PTR [esi+190]

; 573  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  002f7	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  002fd	0f bf 86 d0 00
	00 00		 movsx	 eax, WORD PTR [esi+208]
  00304	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
  0030a	8b 96 2c 01 00
	00		 mov	 edx, DWORD PTR [esi+300]
  00310	03 c1		 add	 eax, ecx
  00312	0f af 45 10	 imul	 eax, DWORD PTR _iValue$[ebp]
  00316	29 86 30 01 00
	00		 sub	 DWORD PTR [esi+304], eax
  0031c	03 96 30 01 00
	00		 add	 edx, DWORD PTR [esi+304]
  00322	52		 push	 edx
  00323	6a 00		 push	 0
  00325	68 fe 00 00 00	 push	 254			; 000000feH
  0032a	e8 00 00 00 00	 call	 __ftol2_sse
  0032f	50		 push	 eax
  00330	8b 06		 mov	 eax, DWORD PTR [esi]
  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 574  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  00338	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  0033e	8b 8e 28 01 00
	00		 mov	 ecx, DWORD PTR [esi+296]
  00344	83 c4 14	 add	 esp, 20			; 00000014H
  00347	51		 push	 ecx
  00348	6a 00		 push	 0
  0034a	68 ff 00 00 00	 push	 255			; 000000ffH
  0034f	e8 00 00 00 00	 call	 __ftol2_sse
  00354	8b 16		 mov	 edx, DWORD PTR [esi]
  00356	50		 push	 eax
  00357	52		 push	 edx
  00358	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0035d	83 c4 14	 add	 esp, 20			; 00000014H
  00360	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  00361	5d		 pop	 ebp
  00362	c2 0c 00	 ret	 12			; 0000000cH
$LN7@RemoveBuff:

; 575  : 		break;
; 576  : 	case ADD_OPTION_LEVEL_SD:
; 577  : 		lpObj->iAddShield -= iValue * (lpObj->MLevel + lpObj->Level);

  00365	0f bf 86 d0 00
	00 00		 movsx	 eax, WORD PTR [esi+208]

; 578  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  0036c	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00372	0f bf 8e be 00
	00 00		 movsx	 ecx, WORD PTR [esi+190]
  00379	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  0037f	8b 96 58 01 00
	00		 mov	 edx, DWORD PTR [esi+344]
  00385	03 c1		 add	 eax, ecx
  00387	0f af 45 10	 imul	 eax, DWORD PTR _iValue$[ebp]
  0038b	29 86 5c 01 00
	00		 sub	 DWORD PTR [esi+348], eax
  00391	03 96 5c 01 00
	00		 add	 edx, DWORD PTR [esi+348]
$LN61@RemoveBuff:
  00397	52		 push	 edx
  00398	6a 00		 push	 0
  0039a	68 fe 00 00 00	 push	 254			; 000000feH
  0039f	e8 00 00 00 00	 call	 __ftol2_sse
  003a4	50		 push	 eax
  003a5	8b 06		 mov	 eax, DWORD PTR [esi]
  003a7	50		 push	 eax
  003a8	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 579  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  003ad	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  003b3	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  003b9	83 c4 14	 add	 esp, 20			; 00000014H
  003bc	51		 push	 ecx
  003bd	6a 00		 push	 0
  003bf	68 ff 00 00 00	 push	 255			; 000000ffH
  003c4	e8 00 00 00 00	 call	 __ftol2_sse
  003c9	8b 16		 mov	 edx, DWORD PTR [esi]
  003cb	50		 push	 eax
  003cc	52		 push	 edx
  003cd	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  003d2	83 c4 14	 add	 esp, 20			; 00000014H
  003d5	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  003d6	5d		 pop	 ebp
  003d7	c2 0c 00	 ret	 12			; 0000000cH
$LN6@RemoveBuff:

; 580  : 		break;
; 581  : 	case ADD_OPTION_BP:
; 582  : 		lpObj->AddBP -= iValue;
; 583  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  003da	db 86 50 01 00
	00		 fild	 DWORD PTR [esi+336]
  003e0	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  003e3	8b 8e 2c 01 00
	00		 mov	 ecx, DWORD PTR [esi+300]
  003e9	29 86 30 01 00
	00		 sub	 DWORD PTR [esi+304], eax
  003ef	03 8e 30 01 00
	00		 add	 ecx, DWORD PTR [esi+304]
  003f5	d8 86 14 01 00
	00		 fadd	 DWORD PTR [esi+276]
$LN60@RemoveBuff:
  003fb	51		 push	 ecx
  003fc	6a 00		 push	 0
  003fe	68 fe 00 00 00	 push	 254			; 000000feH
  00403	e8 00 00 00 00	 call	 __ftol2_sse
  00408	8b 16		 mov	 edx, DWORD PTR [esi]
  0040a	50		 push	 eax
  0040b	52		 push	 edx
  0040c	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 584  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  00411	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  00417	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  0041d	83 c4 14	 add	 esp, 20			; 00000014H
  00420	50		 push	 eax
  00421	6a 00		 push	 0
  00423	68 ff 00 00 00	 push	 255			; 000000ffH
  00428	e8 00 00 00 00	 call	 __ftol2_sse
  0042d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0042f	50		 push	 eax
  00430	51		 push	 ecx
  00431	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  00436	83 c4 14	 add	 esp, 20			; 00000014H
  00439	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  0043a	5d		 pop	 ebp
  0043b	c2 0c 00	 ret	 12			; 0000000cH
$LN5@RemoveBuff:

; 585  : 		break;
; 586  : 	case ADD_OPTION_SD:
; 587  : 		lpObj->iAddShield -= iValue;
; 588  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  0043e	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00444	8b 55 10	 mov	 edx, DWORD PTR _iValue$[ebp]
  00447	8b 8e 58 01 00
	00		 mov	 ecx, DWORD PTR [esi+344]
  0044d	29 96 5c 01 00
	00		 sub	 DWORD PTR [esi+348], edx
  00453	03 8e 5c 01 00
	00		 add	 ecx, DWORD PTR [esi+348]
  00459	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
$LN59@RemoveBuff:
  0045f	51		 push	 ecx
  00460	6a 00		 push	 0
  00462	68 fe 00 00 00	 push	 254			; 000000feH
  00467	e8 00 00 00 00	 call	 __ftol2_sse
  0046c	8b 16		 mov	 edx, DWORD PTR [esi]
  0046e	50		 push	 eax
  0046f	52		 push	 edx
  00470	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 589  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  00475	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0047b	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  00481	83 c4 14	 add	 esp, 20			; 00000014H
  00484	50		 push	 eax
  00485	6a 00		 push	 0
  00487	68 ff 00 00 00	 push	 255			; 000000ffH
  0048c	e8 00 00 00 00	 call	 __ftol2_sse
  00491	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00493	50		 push	 eax
  00494	51		 push	 ecx
  00495	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  0049a	83 c4 14	 add	 esp, 20			; 00000014H
  0049d	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  0049e	5d		 pop	 ebp
  0049f	c2 0c 00	 ret	 12			; 0000000cH
$LN4@RemoveBuff:

; 590  : 		break;
; 591  : 	case ADD_OPTION_IGNOREDEFENSE:
; 592  : 		lpObj->SetOpIgnoreDefense -= iValue;

  004a2	8a 55 10	 mov	 dl, BYTE PTR _iValue$[ebp]
  004a5	28 96 3e 11 00
	00		 sub	 BYTE PTR [esi+4414], dl
  004ab	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  004ac	5d		 pop	 ebp
  004ad	c2 0c 00	 ret	 12			; 0000000cH
$LN3@RemoveBuff:

; 593  : 		break;
; 594  : 	case ADD_OPTION_SUCCESSFULBLOCKING:
; 595  : 		lpObj->m_SuccessfulBlocking -= iValue;

  004b0	8b 45 10	 mov	 eax, DWORD PTR _iValue$[ebp]
  004b3	29 86 9c 04 00
	00		 sub	 DWORD PTR [esi+1180], eax
  004b9	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  004ba	5d		 pop	 ebp
  004bb	c2 0c 00	 ret	 12			; 0000000cH
$LN2@RemoveBuff:

; 596  : 		break;
; 597  : 	case SUB_OPTION_SUCCESSFULBLOCKING:
; 598  :         lpObj->m_SuccessfulBlocking += iValue;

  004be	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  004c1	01 8e 9c 04 00
	00		 add	 DWORD PTR [esi+1180], ecx
$LN1@RemoveBuff:
  004c7	5e		 pop	 esi

; 599  :         break;
; 600  : 	default:
; 601  : 		return;
; 602  : 	}
; 603  : }

  004c8	5d		 pop	 ebp
  004c9	c2 0c 00	 ret	 12			; 0000000cH
$LN62@RemoveBuff:
  004cc	00 00 00 00	 DD	 $LN32@RemoveBuff
  004d0	00 00 00 00	 DD	 $LN31@RemoveBuff
  004d4	00 00 00 00	 DD	 $LN30@RemoveBuff
  004d8	00 00 00 00	 DD	 $LN27@RemoveBuff
  004dc	00 00 00 00	 DD	 $LN26@RemoveBuff
  004e0	00 00 00 00	 DD	 $LN25@RemoveBuff
  004e4	00 00 00 00	 DD	 $LN24@RemoveBuff
  004e8	00 00 00 00	 DD	 $LN23@RemoveBuff
  004ec	00 00 00 00	 DD	 $LN22@RemoveBuff
  004f0	00 00 00 00	 DD	 $LN21@RemoveBuff
  004f4	00 00 00 00	 DD	 $LN20@RemoveBuff
  004f8	00 00 00 00	 DD	 $LN19@RemoveBuff
  004fc	00 00 00 00	 DD	 $LN18@RemoveBuff
  00500	00 00 00 00	 DD	 $LN17@RemoveBuff
  00504	00 00 00 00	 DD	 $LN14@RemoveBuff
  00508	00 00 00 00	 DD	 $LN13@RemoveBuff
  0050c	00 00 00 00	 DD	 $LN12@RemoveBuff
  00510	00 00 00 00	 DD	 $LN11@RemoveBuff
  00514	00 00 00 00	 DD	 $LN16@RemoveBuff
  00518	00 00 00 00	 DD	 $LN15@RemoveBuff
  0051c	00 00 00 00	 DD	 $LN10@RemoveBuff
  00520	00 00 00 00	 DD	 $LN9@RemoveBuff
  00524	00 00 00 00	 DD	 $LN8@RemoveBuff
  00528	00 00 00 00	 DD	 $LN7@RemoveBuff
  0052c	00 00 00 00	 DD	 $LN5@RemoveBuff
  00530	00 00 00 00	 DD	 $LN6@RemoveBuff
  00534	00 00 00 00	 DD	 $LN4@RemoveBuff
  00538	00 00 00 00	 DD	 $LN3@RemoveBuff
  0053c	00 00 00 00	 DD	 $LN2@RemoveBuff
  00540	00 00 00 00	 DD	 $LN1@RemoveBuff
$LN46@RemoveBuff:
  00544	00		 DB	 0
  00545	1d		 DB	 29			; 0000001dH
  00546	01		 DB	 1
  00547	02		 DB	 2
  00548	03		 DB	 3
  00549	1d		 DB	 29			; 0000001dH
  0054a	1d		 DB	 29			; 0000001dH
  0054b	1d		 DB	 29			; 0000001dH
  0054c	04		 DB	 4
  0054d	05		 DB	 5
  0054e	06		 DB	 6
  0054f	07		 DB	 7
  00550	08		 DB	 8
  00551	1d		 DB	 29			; 0000001dH
  00552	1d		 DB	 29			; 0000001dH
  00553	1d		 DB	 29			; 0000001dH
  00554	1d		 DB	 29			; 0000001dH
  00555	1d		 DB	 29			; 0000001dH
  00556	1d		 DB	 29			; 0000001dH
  00557	1d		 DB	 29			; 0000001dH
  00558	09		 DB	 9
  00559	0a		 DB	 10			; 0000000aH
  0055a	1d		 DB	 29			; 0000001dH
  0055b	0b		 DB	 11			; 0000000bH
  0055c	1d		 DB	 29			; 0000001dH
  0055d	0c		 DB	 12			; 0000000cH
  0055e	1d		 DB	 29			; 0000001dH
  0055f	0d		 DB	 13			; 0000000dH
  00560	1d		 DB	 29			; 0000001dH
  00561	1d		 DB	 29			; 0000001dH
  00562	0e		 DB	 14			; 0000000eH
  00563	0f		 DB	 15			; 0000000fH
  00564	10		 DB	 16			; 00000010H
  00565	11		 DB	 17			; 00000011H
  00566	1d		 DB	 29			; 0000001dH
  00567	1d		 DB	 29			; 0000001dH
  00568	1d		 DB	 29			; 0000001dH
  00569	1d		 DB	 29			; 0000001dH
  0056a	1d		 DB	 29			; 0000001dH
  0056b	1d		 DB	 29			; 0000001dH
  0056c	1d		 DB	 29			; 0000001dH
  0056d	1d		 DB	 29			; 0000001dH
  0056e	1d		 DB	 29			; 0000001dH
  0056f	1d		 DB	 29			; 0000001dH
  00570	1d		 DB	 29			; 0000001dH
  00571	1d		 DB	 29			; 0000001dH
  00572	1d		 DB	 29			; 0000001dH
  00573	1d		 DB	 29			; 0000001dH
  00574	1d		 DB	 29			; 0000001dH
  00575	1d		 DB	 29			; 0000001dH
  00576	1d		 DB	 29			; 0000001dH
  00577	1d		 DB	 29			; 0000001dH
  00578	1d		 DB	 29			; 0000001dH
  00579	1d		 DB	 29			; 0000001dH
  0057a	12		 DB	 18			; 00000012H
  0057b	13		 DB	 19			; 00000013H
  0057c	14		 DB	 20			; 00000014H
  0057d	15		 DB	 21			; 00000015H
  0057e	1d		 DB	 29			; 0000001dH
  0057f	1d		 DB	 29			; 0000001dH
  00580	1d		 DB	 29			; 0000001dH
  00581	1d		 DB	 29			; 0000001dH
  00582	1d		 DB	 29			; 0000001dH
  00583	1d		 DB	 29			; 0000001dH
  00584	1d		 DB	 29			; 0000001dH
  00585	16		 DB	 22			; 00000016H
  00586	17		 DB	 23			; 00000017H
  00587	1d		 DB	 29			; 0000001dH
  00588	1d		 DB	 29			; 0000001dH
  00589	18		 DB	 24			; 00000018H
  0058a	19		 DB	 25			; 00000019H
  0058b	1a		 DB	 26			; 0000001aH
  0058c	1d		 DB	 29			; 0000001dH
  0058d	1b		 DB	 27			; 0000001bH
  0058e	1c		 DB	 28			; 0000001cH
?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ENDP ; CViewportSkillState::RemoveBuffEffect
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?ReflectDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@H@Z ; CViewportSkillState::ReflectDamage
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ReflectDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iDamage$ = 12						; size = 4
_iDamageValue$ = 12					; size = 4
?ReflectDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CViewportSkillState::ReflectDamage, COMDAT
; _this$ = ecx

; 624  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 625  : 	int iDamage = 0;
; 626  : 	int iShieldDamage = 0;
; 627  : 
; 628  : 	iDamage = iDamageValue;
; 629  : 	iShieldDamage = iDamage;
; 630  : 
; 631  : 	if(lpObj->Live == false)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	80 7e 6a 00	 cmp	 BYTE PTR [esi+106], 0
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _iDamageValue$[ebp]
  0000f	0f 84 ab 00 00
	00		 je	 $LN1@ReflectDam

; 632  : 	{
; 633  : 		return;
; 634  : 	}
; 635  : 
; 636  : 	if(lpObj->lpAttackObj != 0 && lpObj->Type == OBJ_USER && lpObj->lpAttackObj->Type == OBJ_USER)

  00015	53		 push	 ebx
  00016	8b 9e d4 03 00
	00		 mov	 ebx, DWORD PTR [esi+980]
  0001c	85 db		 test	 ebx, ebx
  0001e	74 5d		 je	 SHORT $LN6@ReflectDam
  00020	b8 01 00 00 00	 mov	 eax, 1
  00025	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  00029	75 52		 jne	 SHORT $LN6@ReflectDam
  0002b	66 39 43 68	 cmp	 WORD PTR [ebx+104], ax
  0002f	75 4c		 jne	 SHORT $LN6@ReflectDam

; 637  : 	{
; 638  : 		iShieldDamage = 90 * iDamage / 100;

  00031	8b cf		 mov	 ecx, edi

; 644  : 			lpObj->Life -= iDamage;

  00033	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00039	6b c9 5a	 imul	 ecx, 90			; 0000005aH
  0003c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00041	f7 e9		 imul	 ecx
  00043	c1 fa 05	 sar	 edx, 5
  00046	8b ca		 mov	 ecx, edx
  00048	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004b	03 ca		 add	 ecx, edx
  0004d	8b 96 54 01 00
	00		 mov	 edx, DWORD PTR [esi+340]
  00053	8b c2		 mov	 eax, edx
  00055	2b f9		 sub	 edi, ecx
  00057	2b c1		 sub	 eax, ecx
  00059	89 7d 0c	 mov	 DWORD PTR _iDamage$[ebp], edi
  0005c	85 c0		 test	 eax, eax
  0005e	7e 08		 jle	 SHORT $LN5@ReflectDam

; 639  : 		iDamage -= iShieldDamage;
; 640  : 
; 641  : 		if(lpObj->iShield-iShieldDamage > 0) //Shield Damage
; 642  : 		{
; 643  : 			lpObj->iShield -= iShieldDamage;

  00060	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax

; 645  : 		}
; 646  : 		else

  00066	eb 1d		 jmp	 SHORT $LN14@ReflectDam
$LN5@ReflectDam:

; 647  : 		{
; 648  : 			iDamage += iShieldDamage - lpObj->iShield;

  00068	2b ca		 sub	 ecx, edx
  0006a	03 f9		 add	 edi, ecx
  0006c	89 7d 0c	 mov	 DWORD PTR _iDamage$[ebp], edi

; 649  : 			iShieldDamage = lpObj->iShield;

  0006f	8b ca		 mov	 ecx, edx

; 650  : 			lpObj->Life -= iDamage;
; 651  : 			lpObj->iShield = 0;

  00071	c7 86 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+340], 0

; 652  : 		}
; 653  : 	}
; 654  : 	else

  0007b	eb 08		 jmp	 SHORT $LN14@ReflectDam
$LN6@ReflectDam:

; 655  : 	{
; 656  : 		iShieldDamage = 0;
; 657  : 		lpObj->Life -= iDamage;

  0007d	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00083	33 c9		 xor	 ecx, ecx
$LN14@ReflectDam:
  00085	da 65 0c	 fisub	 DWORD PTR _iDamageValue$[ebp]
  00088	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 658  : 	}
; 659  : 
; 660  : 	if(lpObj->Life < 0.0f)

  0008e	d9 ee		 fldz
  00090	d8 96 fc 00 00
	00		 fcom	 DWORD PTR [esi+252]
  00096	df e0		 fnstsw	 ax
  00098	f6 c4 41	 test	 ah, 65			; 00000041H
  0009b	75 08		 jne	 SHORT $LN12@ReflectDam

; 661  : 	{
; 662  : 		lpObj->Life = 0.0f;

  0009d	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  000a3	eb 02		 jmp	 SHORT $LN2@ReflectDam
$LN12@ReflectDam:
  000a5	dd d8		 fstp	 ST(0)
$LN2@ReflectDam:

; 663  : 	}
; 664  : 
; 665  : 	if(lpObj->lpAttackObj != 0)

  000a7	85 db		 test	 ebx, ebx
  000a9	74 14		 je	 SHORT $LN10@ReflectDam

; 666  : 	{
; 667  : 		gObjLifeCheck(lpObj, lpObj->lpAttackObj, iDamage, 3, 0, 0, 0, iShieldDamage);

  000ab	51		 push	 ecx
  000ac	6a 00		 push	 0
  000ae	6a 00		 push	 0
  000b0	6a 00		 push	 0
  000b2	6a 03		 push	 3
  000b4	57		 push	 edi
  000b5	53		 push	 ebx
  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  000bc	83 c4 20	 add	 esp, 32			; 00000020H
$LN10@ReflectDam:
  000bf	5b		 pop	 ebx
$LN1@ReflectDam:
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi

; 668  : 	}
; 669  : }

  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
?ReflectDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CViewportSkillState::ReflectDamage
_TEXT	ENDS
PUBLIC	?PoisonDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@E@Z ; CViewportSkillState::PoisonDamage
; Function compile flags: /Ogtp
;	COMDAT ?PoisonDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@E@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
tv238 = 12						; size = 4
_iDamage$ = 12						; size = 4
_btDamageValue$ = 12					; size = 1
?PoisonDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CViewportSkillState::PoisonDamage, COMDAT
; _this$ = ecx

; 672  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 673  : 	int iDamage = 0;
; 674  : 	int iShieldDamage = 0;
; 675  : 
; 676  : 	int loc4 = btDamageValue; //useless
; 677  : 
; 678  : 	iDamage = (int)(loc4 * lpObj->Life / 100);

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btDamageValue$[ebp]
  00007	89 45 0c	 mov	 DWORD PTR tv238[ebp], eax
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	db 45 0c	 fild	 DWORD PTR tv238[ebp]
  0000f	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00012	57		 push	 edi
  00013	d8 8e fc 00 00
	00		 fmul	 DWORD PTR [esi+252]
  00019	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0001f	e8 00 00 00 00	 call	 __ftol2_sse

; 679  : 
; 680  : 	iShieldDamage = iDamage;
; 681  : 
; 682  : 	if(lpObj->lpAttackObj != 0 && lpObj->Type == OBJ_USER && lpObj->lpAttackObj->Type == OBJ_USER)

  00024	8b 9e d4 03 00
	00		 mov	 ebx, DWORD PTR [esi+980]
  0002a	8b c8		 mov	 ecx, eax
  0002c	89 4d 0c	 mov	 DWORD PTR _iDamage$[ebp], ecx
  0002f	8b f9		 mov	 edi, ecx
  00031	85 db		 test	 ebx, ebx
  00033	74 3c		 je	 SHORT $LN9@PoisonDama
  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	66 39 46 68	 cmp	 WORD PTR [esi+104], ax
  0003e	75 31		 jne	 SHORT $LN9@PoisonDama
  00040	66 39 43 68	 cmp	 WORD PTR [ebx+104], ax
  00044	75 2b		 jne	 SHORT $LN9@PoisonDama

; 683  : 	{
; 684  : 		if(lpObj->iShield-iShieldDamage > 0) //Shield Damage

  00046	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  0004c	8b d0		 mov	 edx, eax
  0004e	2b d1		 sub	 edx, ecx
  00050	85 d2		 test	 edx, edx
  00052	7e 0a		 jle	 SHORT $LN5@PoisonDama

; 685  : 		{
; 686  : 			lpObj->iShield -= iShieldDamage;

  00054	89 96 54 01 00
	00		 mov	 DWORD PTR [esi+340], edx

; 687  : 			iDamage = 0;

  0005a	33 c9		 xor	 ecx, ecx

; 688  : 		}
; 689  : 		else

  0005c	eb 24		 jmp	 SHORT $LN3@PoisonDama
$LN5@PoisonDama:

; 690  : 		{
; 691  : 			iDamage = iShieldDamage - lpObj->iShield;

  0005e	2b c8		 sub	 ecx, eax
  00060	89 4d 0c	 mov	 DWORD PTR _iDamage$[ebp], ecx

; 692  : 			iShieldDamage = lpObj->iShield;

  00063	8b f8		 mov	 edi, eax

; 693  : 			lpObj->Life -= iDamage;
; 694  : 			lpObj->iShield = 0;

  00065	c7 86 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+340], 0

; 695  : 		}
; 696  : 	}
; 697  : 	else

  0006f	eb 02		 jmp	 SHORT $LN13@PoisonDama
$LN9@PoisonDama:

; 700  : 		iShieldDamage = 0;

  00071	33 ff		 xor	 edi, edi
$LN13@PoisonDama:

; 698  : 	{
; 699  : 		lpObj->Life -= iDamage;

  00073	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  00079	da 65 0c	 fisub	 DWORD PTR _iDamage$[ebp]
  0007c	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
$LN3@PoisonDama:

; 701  : 	}
; 702  : 	
; 703  : 	if(lpObj->Life < 0.0f)

  00082	d9 ee		 fldz
  00084	d8 96 fc 00 00
	00		 fcom	 DWORD PTR [esi+252]
  0008a	df e0		 fnstsw	 ax
  0008c	f6 c4 41	 test	 ah, 65			; 00000041H
  0008f	75 08		 jne	 SHORT $LN11@PoisonDama

; 704  : 	{
; 705  : 		lpObj->Life = 0.0f;

  00091	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  00097	eb 02		 jmp	 SHORT $LN2@PoisonDama
$LN11@PoisonDama:
  00099	dd d8		 fstp	 ST(0)
$LN2@PoisonDama:

; 706  : 	}
; 707  : 
; 708  : 	if(lpObj->lpAttackObj != 0)

  0009b	85 db		 test	 ebx, ebx
  0009d	74 14		 je	 SHORT $LN1@PoisonDama

; 709  : 	{
; 710  : 		gObjLifeCheck(lpObj, lpObj->lpAttackObj, iDamage, 2, 0, 0, 1, iShieldDamage);

  0009f	57		 push	 edi
  000a0	6a 01		 push	 1
  000a2	6a 00		 push	 0
  000a4	6a 00		 push	 0
  000a6	6a 02		 push	 2
  000a8	51		 push	 ecx
  000a9	53		 push	 ebx
  000aa	56		 push	 esi
  000ab	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  000b0	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@PoisonDama:
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx

; 711  : 	}
; 712  : }

  000b6	5d		 pop	 ebp
  000b7	c2 08 00	 ret	 8
?PoisonDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CViewportSkillState::PoisonDamage
_TEXT	ENDS
PUBLIC	?PrevBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ; CViewportSkillState::PrevBuffLastEffect
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
; Function compile flags: /Ogtp
;	COMDAT ?PrevBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv450 = 8						; size = 4
_lpObj$ = 8						; size = 4
?PrevBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CViewportSkillState::PrevBuffLastEffect, COMDAT
; _this$ = ecx

; 715  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 716  : 	if(lpObj == 0)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	0f 84 9e 00 00
	00		 je	 $LN10@PrevBuffLa

; 717  : 	{
; 718  : 		return;
; 719  : 	}
; 720  : 
; 721  : 	int BuffCount = 0;
; 722  : 
; 723  : 	int MaxStateCount = 16;
; 724  : 
; 725  : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) ||
; 726  : 		g_ZtLicense.CheckUser(eZtUB::Gredy2) ||
; 727  : 		g_ZtLicense.CheckUser(eZtUB::GredyLocal))

  00012	6a 20		 push	 32			; 00000020H
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00019	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0001e	84 c0		 test	 al, al
  00020	75 1c		 jne	 SHORT $LN13@PrevBuffLa
  00022	6a 22		 push	 34			; 00000022H
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00029	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0002e	84 c0		 test	 al, al
  00030	75 0c		 jne	 SHORT $LN13@PrevBuffLa
  00032	6a 21		 push	 33			; 00000021H
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00039	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
$LN13@PrevBuffLa:

; 728  : 	{
; 729  : 		MaxStateCount = MAX_STATE_COUNT;
; 730  : 	}
; 731  : 
; 732  : 	for(int States = 0; States < MaxStateCount; States++)

  0003e	56		 push	 esi
  0003f	8d b7 2a 02 00
	00		 lea	 esi, DWORD PTR [edi+554]
  00045	c7 45 08 10 00
	00 00		 mov	 DWORD PTR tv450[ebp], 16 ; 00000010H
  0004c	8d 64 24 00	 npad	 4
$LL12@PrevBuffLa:

; 733  : 	{
; 734  : 		if(lpObj->m_BuffEffectState[States].btBuffIndex == NULL)

  00050	80 7e fe 00	 cmp	 BYTE PTR [esi-2], 0
  00054	74 51		 je	 SHORT $LN11@PrevBuffLa

; 735  : 		{
; 736  : 			continue;
; 737  : 		}
; 738  : 
; 739  : 		switch(lpObj->m_BuffEffectState[States].btEffectType1)

  00056	8a 06		 mov	 al, BYTE PTR [esi]
  00058	0f b6 c8	 movzx	 ecx, al
  0005b	83 c1 fc	 add	 ecx, -4			; fffffffcH
  0005e	83 f9 14	 cmp	 ecx, 20			; 00000014H
  00061	77 1b		 ja	 SHORT $LN5@PrevBuffLa
  00063	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN20@PrevBuffLa[ecx]
  0006a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN23@PrevBuffLa[ecx*4]
$LN6@PrevBuffLa:

; 740  : 		{
; 741  : 		case ADD_OPTION_LIFE:
; 742  : 		case ADD_OPTION_MANA:
; 743  : 		case ADD_OPTION_STRENGTH:
; 744  : 		case ADD_OPTION_DEXTERITY:
; 745  : 		case ADD_OPTION_VITALITY:
; 746  : 		case ADD_OPTION_ENERGY:
; 747  : 		case ADD_OPTION_LEADERSHIP:
; 748  : 		case ADD_OPTION_REFLECT:
; 749  : 			BuffCount++;
; 750  : 			this->AddBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType1, lpObj->m_BuffEffectState[States].iValue1);

  00071	8b 56 02	 mov	 edx, DWORD PTR [esi+2]
  00074	52		 push	 edx
  00075	50		 push	 eax
  00076	57		 push	 edi
  00077	8b cb		 mov	 ecx, ebx
  00079	e8 00 00 00 00	 call	 ?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
$LN5@PrevBuffLa:

; 751  : 			break;
; 752  : 		default:
; 753  : 			break;
; 754  : 		}
; 755  : 
; 756  : 		switch(lpObj->m_BuffEffectState[States].btEffectType2)

  0007e	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00081	0f b6 c8	 movzx	 ecx, al
  00084	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00087	83 f9 14	 cmp	 ecx, 20			; 00000014H
  0008a	77 1b		 ja	 SHORT $LN11@PrevBuffLa
  0008c	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN21@PrevBuffLa[ecx]
  00093	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN24@PrevBuffLa[ecx*4]
$LN2@PrevBuffLa:

; 757  : 		{
; 758  : 		case ADD_OPTION_LIFE:
; 759  : 		case ADD_OPTION_MANA:
; 760  : 		case ADD_OPTION_STRENGTH:
; 761  : 		case ADD_OPTION_DEXTERITY:
; 762  : 		case ADD_OPTION_VITALITY:
; 763  : 		case ADD_OPTION_ENERGY:
; 764  : 		case ADD_OPTION_LEADERSHIP:
; 765  : 		case ADD_OPTION_REFLECT:
; 766  : 			BuffCount++;
; 767  : 			this->AddBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType2, lpObj->m_BuffEffectState[States].iValue2);

  0009a	8b 56 06	 mov	 edx, DWORD PTR [esi+6]
  0009d	52		 push	 edx
  0009e	50		 push	 eax
  0009f	57		 push	 edi
  000a0	8b cb		 mov	 ecx, ebx
  000a2	e8 00 00 00 00	 call	 ?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
$LN11@PrevBuffLa:

; 728  : 	{
; 729  : 		MaxStateCount = MAX_STATE_COUNT;
; 730  : 	}
; 731  : 
; 732  : 	for(int States = 0; States < MaxStateCount; States++)

  000a7	83 c6 14	 add	 esi, 20			; 00000014H
  000aa	ff 4d 08	 dec	 DWORD PTR tv450[ebp]
  000ad	75 a1		 jne	 SHORT $LL12@PrevBuffLa
  000af	5e		 pop	 esi
$LN10@PrevBuffLa:
  000b0	5f		 pop	 edi
  000b1	5b		 pop	 ebx

; 768  : 			break;
; 769  : 		default:
; 770  : 			break;
; 771  : 		}
; 772  : 	}
; 773  : }

  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
  000b6	8b ff		 npad	 2
$LN23@PrevBuffLa:
  000b8	00 00 00 00	 DD	 $LN6@PrevBuffLa
  000bc	00 00 00 00	 DD	 $LN5@PrevBuffLa
$LN20@PrevBuffLa:
  000c0	00		 DB	 0
  000c1	00		 DB	 0
  000c2	01		 DB	 1
  000c3	01		 DB	 1
  000c4	01		 DB	 1
  000c5	00		 DB	 0
  000c6	00		 DB	 0
  000c7	00		 DB	 0
  000c8	00		 DB	 0
  000c9	00		 DB	 0
  000ca	01		 DB	 1
  000cb	01		 DB	 1
  000cc	01		 DB	 1
  000cd	01		 DB	 1
  000ce	01		 DB	 1
  000cf	01		 DB	 1
  000d0	01		 DB	 1
  000d1	01		 DB	 1
  000d2	01		 DB	 1
  000d3	01		 DB	 1
  000d4	00		 DB	 0
  000d5	8d 49 00	 npad	 3
$LN24@PrevBuffLa:
  000d8	00 00 00 00	 DD	 $LN2@PrevBuffLa
  000dc	00 00 00 00	 DD	 $LN11@PrevBuffLa
$LN21@PrevBuffLa:
  000e0	00		 DB	 0
  000e1	00		 DB	 0
  000e2	01		 DB	 1
  000e3	01		 DB	 1
  000e4	01		 DB	 1
  000e5	00		 DB	 0
  000e6	00		 DB	 0
  000e7	00		 DB	 0
  000e8	00		 DB	 0
  000e9	00		 DB	 0
  000ea	01		 DB	 1
  000eb	01		 DB	 1
  000ec	01		 DB	 1
  000ed	01		 DB	 1
  000ee	01		 DB	 1
  000ef	01		 DB	 1
  000f0	01		 DB	 1
  000f1	01		 DB	 1
  000f2	01		 DB	 1
  000f3	01		 DB	 1
  000f4	00		 DB	 0
?PrevBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CViewportSkillState::PrevBuffLastEffect
_TEXT	ENDS
PUBLIC	?NextSetBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ; CViewportSkillState::NextSetBuffLastEffect
; Function compile flags: /Ogtp
;	COMDAT ?NextSetBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv450 = 8						; size = 4
_lpObj$ = 8						; size = 4
?NextSetBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CViewportSkillState::NextSetBuffLastEffect, COMDAT
; _this$ = ecx

; 776  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 777  : 	if(lpObj == 0)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	0f 84 9e 00 00
	00		 je	 $LN10@NextSetBuf

; 778  : 	{
; 779  : 		return;
; 780  : 	}
; 781  : 
; 782  : 	int BuffCount = 0;
; 783  : 
; 784  : 	int MaxStateCount = 16;
; 785  : 
; 786  : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) ||
; 787  : 		g_ZtLicense.CheckUser(eZtUB::Gredy2) ||
; 788  : 		g_ZtLicense.CheckUser(eZtUB::GredyLocal))

  00012	6a 20		 push	 32			; 00000020H
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00019	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0001e	84 c0		 test	 al, al
  00020	75 1c		 jne	 SHORT $LN13@NextSetBuf
  00022	6a 22		 push	 34			; 00000022H
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00029	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0002e	84 c0		 test	 al, al
  00030	75 0c		 jne	 SHORT $LN13@NextSetBuf
  00032	6a 21		 push	 33			; 00000021H
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00039	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
$LN13@NextSetBuf:

; 789  : 	{
; 790  : 		MaxStateCount = MAX_STATE_COUNT;
; 791  : 	}
; 792  : 
; 793  : 	for(int States = 0; States < MaxStateCount; States++)

  0003e	56		 push	 esi
  0003f	8d b7 2a 02 00
	00		 lea	 esi, DWORD PTR [edi+554]
  00045	c7 45 08 10 00
	00 00		 mov	 DWORD PTR tv450[ebp], 16 ; 00000010H
  0004c	8d 64 24 00	 npad	 4
$LL12@NextSetBuf:

; 794  : 	{
; 795  : 		if(lpObj->m_BuffEffectState[States].btBuffIndex == NULL)

  00050	80 7e fe 00	 cmp	 BYTE PTR [esi-2], 0
  00054	74 51		 je	 SHORT $LN11@NextSetBuf

; 796  : 		{
; 797  : 			continue;
; 798  : 		}
; 799  : 
; 800  : 		switch(lpObj->m_BuffEffectState[States].btEffectType1)

  00056	8a 06		 mov	 al, BYTE PTR [esi]
  00058	0f b6 c8	 movzx	 ecx, al
  0005b	83 c1 fc	 add	 ecx, -4			; fffffffcH
  0005e	83 f9 14	 cmp	 ecx, 20			; 00000014H
  00061	77 0e		 ja	 SHORT $LN5@NextSetBuf
  00063	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN20@NextSetBuf[ecx]
  0006a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN23@NextSetBuf[ecx*4]
$LN5@NextSetBuf:

; 801  : 		{
; 802  : 		case ADD_OPTION_LIFE:
; 803  : 		case ADD_OPTION_MANA:
; 804  : 		case ADD_OPTION_STRENGTH:
; 805  : 		case ADD_OPTION_DEXTERITY:
; 806  : 		case ADD_OPTION_VITALITY:
; 807  : 		case ADD_OPTION_ENERGY:
; 808  : 		case ADD_OPTION_LEADERSHIP:
; 809  : 		case ADD_OPTION_REFLECT:
; 810  : 			break;
; 811  : 		default:
; 812  : 			BuffCount++;
; 813  : 			this->AddBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType1, lpObj->m_BuffEffectState[States].iValue1);

  00071	8b 56 02	 mov	 edx, DWORD PTR [esi+2]
  00074	52		 push	 edx
  00075	50		 push	 eax
  00076	57		 push	 edi
  00077	8b cb		 mov	 ecx, ebx
  00079	e8 00 00 00 00	 call	 ?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
$LN7@NextSetBuf:

; 814  : 			break;
; 815  : 		}
; 816  : 
; 817  : 		switch(lpObj->m_BuffEffectState[States].btEffectType2)

  0007e	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00081	0f b6 c8	 movzx	 ecx, al
  00084	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00087	83 f9 14	 cmp	 ecx, 20			; 00000014H
  0008a	77 0e		 ja	 SHORT $LN1@NextSetBuf
  0008c	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN21@NextSetBuf[ecx]
  00093	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN24@NextSetBuf[ecx*4]
$LN1@NextSetBuf:

; 818  : 		{
; 819  : 		case ADD_OPTION_LIFE:
; 820  : 		case ADD_OPTION_MANA:
; 821  : 		case ADD_OPTION_STRENGTH:
; 822  : 		case ADD_OPTION_DEXTERITY:
; 823  : 		case ADD_OPTION_VITALITY:
; 824  : 		case ADD_OPTION_ENERGY:
; 825  : 		case ADD_OPTION_LEADERSHIP:
; 826  : 		case ADD_OPTION_REFLECT:
; 827  : 			break;
; 828  : 		default:
; 829  : 			BuffCount++;
; 830  : 			this->AddBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType2, lpObj->m_BuffEffectState[States].iValue2);

  0009a	8b 56 06	 mov	 edx, DWORD PTR [esi+6]
  0009d	52		 push	 edx
  0009e	50		 push	 eax
  0009f	57		 push	 edi
  000a0	8b cb		 mov	 ecx, ebx
  000a2	e8 00 00 00 00	 call	 ?AddBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::AddBuffEffect
$LN11@NextSetBuf:

; 789  : 	{
; 790  : 		MaxStateCount = MAX_STATE_COUNT;
; 791  : 	}
; 792  : 
; 793  : 	for(int States = 0; States < MaxStateCount; States++)

  000a7	83 c6 14	 add	 esi, 20			; 00000014H
  000aa	ff 4d 08	 dec	 DWORD PTR tv450[ebp]
  000ad	75 a1		 jne	 SHORT $LL12@NextSetBuf
  000af	5e		 pop	 esi
$LN10@NextSetBuf:
  000b0	5f		 pop	 edi
  000b1	5b		 pop	 ebx

; 831  : 			break;
; 832  : 		}
; 833  : 	}
; 834  : }

  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
  000b6	8b ff		 npad	 2
$LN23@NextSetBuf:
  000b8	00 00 00 00	 DD	 $LN7@NextSetBuf
  000bc	00 00 00 00	 DD	 $LN5@NextSetBuf
$LN20@NextSetBuf:
  000c0	00		 DB	 0
  000c1	00		 DB	 0
  000c2	01		 DB	 1
  000c3	01		 DB	 1
  000c4	01		 DB	 1
  000c5	00		 DB	 0
  000c6	00		 DB	 0
  000c7	00		 DB	 0
  000c8	00		 DB	 0
  000c9	00		 DB	 0
  000ca	01		 DB	 1
  000cb	01		 DB	 1
  000cc	01		 DB	 1
  000cd	01		 DB	 1
  000ce	01		 DB	 1
  000cf	01		 DB	 1
  000d0	01		 DB	 1
  000d1	01		 DB	 1
  000d2	01		 DB	 1
  000d3	01		 DB	 1
  000d4	00		 DB	 0
  000d5	8d 49 00	 npad	 3
$LN24@NextSetBuf:
  000d8	00 00 00 00	 DD	 $LN11@NextSetBuf
  000dc	00 00 00 00	 DD	 $LN1@NextSetBuf
$LN21@NextSetBuf:
  000e0	00		 DB	 0
  000e1	00		 DB	 0
  000e2	01		 DB	 1
  000e3	01		 DB	 1
  000e4	01		 DB	 1
  000e5	00		 DB	 0
  000e6	00		 DB	 0
  000e7	00		 DB	 0
  000e8	00		 DB	 0
  000e9	00		 DB	 0
  000ea	01		 DB	 1
  000eb	01		 DB	 1
  000ec	01		 DB	 1
  000ed	01		 DB	 1
  000ee	01		 DB	 1
  000ef	01		 DB	 1
  000f0	01		 DB	 1
  000f1	01		 DB	 1
  000f2	01		 DB	 1
  000f3	01		 DB	 1
  000f4	00		 DB	 0
?NextSetBuffLastEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CViewportSkillState::NextSetBuffLastEffect
_TEXT	ENDS
PUBLIC	?CalCharacterRemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ; CViewportSkillState::CalCharacterRemoveBuffEffect
; Function compile flags: /Ogtp
;	COMDAT ?CalCharacterRemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?CalCharacterRemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CViewportSkillState::CalCharacterRemoveBuffEffect, COMDAT
; _this$ = ecx

; 837  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 838  : 	int MaxStateCount = 16;
; 839  : 
; 840  : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) ||
; 841  : 		g_ZtLicense.CheckUser(eZtUB::Gredy2) ||
; 842  : 		g_ZtLicense.CheckUser(eZtUB::GredyLocal))

  00007	6a 20		 push	 32			; 00000020H
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00013	84 c0		 test	 al, al
  00015	75 1c		 jne	 SHORT $LN5@CalCharact
  00017	6a 22		 push	 34			; 00000022H
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00023	84 c0		 test	 al, al
  00025	75 0c		 jne	 SHORT $LN5@CalCharact
  00027	6a 21		 push	 33			; 00000021H
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
$LN5@CalCharact:

; 843  : 	{
; 844  : 		MaxStateCount = MAX_STATE_COUNT;
; 845  : 	}
; 846  : 
; 847  : 	for(int States = 0; States < MaxStateCount; States++)

  00033	53		 push	 ebx
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00039	8d b7 2c 02 00
	00		 lea	 esi, DWORD PTR [edi+556]
  0003f	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
$LL4@CalCharact:

; 848  : 	{
; 849  : 		if(lpObj->m_BuffEffectState[States].btBuffIndex == NULL)

  00044	80 7e fc 00	 cmp	 BYTE PTR [esi-4], 0
  00048	74 23		 je	 SHORT $LN3@CalCharact

; 850  : 		{
; 851  : 			continue;
; 852  : 		}
; 853  : 
; 854  : 		this->RemoveBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType1, lpObj->m_BuffEffectState[States].iValue1);

  0004a	0f b6 4e fe	 movzx	 ecx, BYTE PTR [esi-2]
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	50		 push	 eax
  00051	51		 push	 ecx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	57		 push	 edi
  00056	e8 00 00 00 00	 call	 ?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::RemoveBuffEffect

; 855  : 		this->RemoveBuffEffect(lpObj, lpObj->m_BuffEffectState[States].btEffectType2, lpObj->m_BuffEffectState[States].iValue2);

  0005b	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0005e	0f b6 46 ff	 movzx	 eax, BYTE PTR [esi-1]
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	52		 push	 edx
  00066	50		 push	 eax
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ?RemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::RemoveBuffEffect
$LN3@CalCharact:

; 843  : 	{
; 844  : 		MaxStateCount = MAX_STATE_COUNT;
; 845  : 	}
; 846  : 
; 847  : 	for(int States = 0; States < MaxStateCount; States++)

  0006d	83 c6 14	 add	 esi, 20			; 00000014H
  00070	4b		 dec	 ebx
  00071	75 d1		 jne	 SHORT $LL4@CalCharact
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx

; 856  : 	}
; 857  : }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?CalCharacterRemoveBuffEffect@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CViewportSkillState::CalCharacterRemoveBuffEffect
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCViewportSkillState@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCViewportSkillState@@UAEPAXI@Z PROC			; CViewportSkillState::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CViewportSkillState@@UAE@XZ ; CViewportSkillState::~CViewportSkillState
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCViewportSkillState@@UAEPAXI@Z ENDP			; CViewportSkillState::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetDamageType@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CViewportSkillState::SetDamageType
; Function compile flags: /Ogtp
;	COMDAT ?SetDamageType@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_DamageType$ = 12					; size = 1
_iDamageValue$ = 16					; size = 4
?SetDamageType@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z PROC ; CViewportSkillState::SetDamageType, COMDAT
; _this$ = ecx

; 606  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 	if(DamageType <= 0)

  00003	8a 45 0c	 mov	 al, BYTE PTR _DamageType$[ebp]
  00006	84 c0		 test	 al, al
  00008	74 29		 je	 SHORT $LN3@SetDamageT

; 608  : 	{
; 609  : 		return;
; 610  : 	}
; 611  : 
; 612  : 	switch(DamageType)

  0000a	0f b6 c0	 movzx	 eax, al
  0000d	83 e8 12	 sub	 eax, 18			; 00000012H
  00010	74 14		 je	 SHORT $LN2@SetDamageT
  00012	48		 dec	 eax
  00013	75 1e		 jne	 SHORT $LN3@SetDamageT

; 616  : 		break;
; 617  : 	case 19: //Poison?
; 618  : 		this->PoisonDamage(lpObj, iDamageValue);

  00015	8b 45 10	 mov	 eax, DWORD PTR _iDamageValue$[ebp]
  00018	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?PoisonDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@E@Z ; CViewportSkillState::PoisonDamage

; 619  : 		break;
; 620  : 	}
; 621  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
$LN2@SetDamageT:

; 613  : 	{
; 614  : 	case 18: //Reflect?
; 615  : 		this->ReflectDamage(lpObj, iDamageValue);

  00026	8b 45 10	 mov	 eax, DWORD PTR _iDamageValue$[ebp]
  00029	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0002c	50		 push	 eax
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ?ReflectDamage@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@H@Z ; CViewportSkillState::ReflectDamage
$LN3@SetDamageT:

; 619  : 		break;
; 620  : 	}
; 621  : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?SetDamageType@CViewportSkillState@@QAEXPAUOBJECTSTRUCT@@EH@Z ENDP ; CViewportSkillState::SetDamageType
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ViewportSkillState@@YAXXZ
text$yc	SEGMENT
??__Eg_ViewportSkillState@@YAXXZ PROC			; `dynamic initializer for 'g_ViewportSkillState'', COMDAT

; 14   : CViewportSkillState g_ViewportSkillState;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ViewportSkillState@@3VCViewportSkillState@@A ; g_ViewportSkillState
  00005	e8 00 00 00 00	 call	 ??0CViewportSkillState@@QAE@XZ ; CViewportSkillState::CViewportSkillState
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ViewportSkillState@@YAXXZ ; `dynamic atexit destructor for 'g_ViewportSkillState''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ViewportSkillState@@YAXXZ ENDP			; `dynamic initializer for 'g_ViewportSkillState''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ViewportSkillState@@YAXXZ
text$yd	SEGMENT
??__Fg_ViewportSkillState@@YAXXZ PROC			; `dynamic atexit destructor for 'g_ViewportSkillState'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ViewportSkillState@@3VCViewportSkillState@@A ; g_ViewportSkillState
  00005	e9 00 00 00 00	 jmp	 ??1CViewportSkillState@@UAE@XZ ; CViewportSkillState::~CViewportSkillState
??__Fg_ViewportSkillState@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_ViewportSkillState''
text$yd	ENDS
PUBLIC	?g_ViewportSkillState@@3VCViewportSkillState@@A	; g_ViewportSkillState
_BSS	SEGMENT
?g_ViewportSkillState@@3VCViewportSkillState@@A DD 01H DUP (?) ; g_ViewportSkillState
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ViewportSkillState$initializer$ DD FLAT:??__Eg_ViewportSkillState@@YAXXZ
CRT$XCU	ENDS
END
