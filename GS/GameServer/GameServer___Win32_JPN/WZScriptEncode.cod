; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\common\WZScriptEncode.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XorTable@@3PAEA				; XorTable
_DATA	SEGMENT
?XorTable@@3PAEA DB 0a1H				; XorTable
	DB	0b2H
	DB	0aaH
	DB	012H
	DB	023H
	DB	0f1H
	DB	0f3H
	DB	0d3H
	DB	078H
	DB	02H
_DATA	ENDS
PUBLIC	??_7CWZScriptEncode@@6B@			; CWZScriptEncode::`vftable'
PUBLIC	??0CWZScriptEncode@@QAE@XZ			; CWZScriptEncode::CWZScriptEncode
PUBLIC	??_R4CWZScriptEncode@@6B@			; CWZScriptEncode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWZScriptEncode@@@8			; CWZScriptEncode `RTTI Type Descriptor'
PUBLIC	??_R3CWZScriptEncode@@8				; CWZScriptEncode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWZScriptEncode@@8				; CWZScriptEncode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWZScriptEncode@@8		; CWZScriptEncode::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECWZScriptEncode@@UAEPAXI@Z:PROC		; CWZScriptEncode::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CWZScriptEncode@@8
; File e:\work\tranet_version\gs\common\wzscriptencode.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CWZScriptEncode@@8 DD FLAT:??_R0?AVCWZScriptEncode@@@8 ; CWZScriptEncode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_R2CWZScriptEncode@@8
rdata$r	SEGMENT
??_R2CWZScriptEncode@@8 DD FLAT:??_R1A@?0A@EA@CWZScriptEncode@@8 ; CWZScriptEncode::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWZScriptEncode@@8
rdata$r	SEGMENT
??_R3CWZScriptEncode@@8 DD 00H				; CWZScriptEncode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWZScriptEncode@@@8
_DATA	SEGMENT
??_R0?AVCWZScriptEncode@@@8 DD FLAT:??_7type_info@@6B@	; CWZScriptEncode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWZScriptEncode@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CWZScriptEncode@@6B@
rdata$r	SEGMENT
??_R4CWZScriptEncode@@6B@ DD 00H			; CWZScriptEncode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWZScriptEncode@@@8
	DD	FLAT:??_R3CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_7CWZScriptEncode@@6B@
CONST	SEGMENT
??_7CWZScriptEncode@@6B@ DD FLAT:??_R4CWZScriptEncode@@6B@ ; CWZScriptEncode::`vftable'
	DD	FLAT:??_ECWZScriptEncode@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CWZScriptEncode@@QAE@XZ
_TEXT	SEGMENT
??0CWZScriptEncode@@QAE@XZ PROC				; CWZScriptEncode::CWZScriptEncode, COMDAT
; _this$ = ecx

; 11   : {

  00000	8b c1		 mov	 eax, ecx

; 12   : 	this->m_pBuffer=0;

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWZScriptEncode@@6B@
  0000a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 13   : 	this->m_iBufferSize=0;

  0000d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 14   : 	this->m_iBufferCount=0;

  00010	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 15   : 	this->m_hFile=INVALID_HANDLE_VALUE;

  00013	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [eax+16], -1

; 16   : }

  0001a	c3		 ret	 0
??0CWZScriptEncode@@QAE@XZ ENDP				; CWZScriptEncode::CWZScriptEncode
_TEXT	ENDS
PUBLIC	?Close@CWZScriptEncode@@QAEXXZ			; CWZScriptEncode::Close
EXTRN	_free:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Close@CWZScriptEncode@@QAEXXZ
_TEXT	SEGMENT
?Close@CWZScriptEncode@@QAEXXZ PROC			; CWZScriptEncode::Close, COMDAT
; _this$ = ecx

; 61   : 	if ( this->m_pBuffer != 0)

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 07		 je	 SHORT $LN1@Close

; 62   : 	{
; 63   : 		free( this->m_pBuffer );

  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _free
  0000d	59		 pop	 ecx
$LN1@Close:

; 64   : 	}
; 65   : }

  0000e	c3		 ret	 0
?Close@CWZScriptEncode@@QAEXXZ ENDP			; CWZScriptEncode::Close
_TEXT	ENDS
PUBLIC	?Encode@CWZScriptEncode@@QAEXPADH@Z		; CWZScriptEncode::Encode
; Function compile flags: /Ogtp
;	COMDAT ?Encode@CWZScriptEncode@@QAEXPADH@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Encode@CWZScriptEncode@@QAEXPADH@Z PROC		; CWZScriptEncode::Encode, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 69   : 	int i;
; 70   : 
; 71   : 	for (i=0;i<size; i++)

  00004	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	85 ff		 test	 edi, edi
  0000b	7e 26		 jle	 SHORT $LN1@Encode
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR _buffer$[ebp]
$LL3@Encode:

; 72   : 	{
; 73   : 		buffer[i]=buffer[i]^XorTable[i%10];	

  00011	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  00016	f7 e1		 mul	 ecx
  00018	c1 ea 03	 shr	 edx, 3
  0001b	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  0001e	03 c0		 add	 eax, eax
  00020	8b d1		 mov	 edx, ecx
  00022	2b d0		 sub	 edx, eax
  00024	8a 82 00 00 00
	00		 mov	 al, BYTE PTR ?XorTable@@3PAEA[edx]
  0002a	30 04 31	 xor	 BYTE PTR [ecx+esi], al
  0002d	41		 inc	 ecx
  0002e	3b cf		 cmp	 ecx, edi
  00030	7c df		 jl	 SHORT $LL3@Encode
  00032	5e		 pop	 esi
$LN1@Encode:
  00033	5f		 pop	 edi

; 74   : 	}
; 75   : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?Encode@CWZScriptEncode@@QAEXPADH@Z ENDP		; CWZScriptEncode::Encode
_TEXT	ENDS
PUBLIC	?GetC@CWZScriptEncode@@IAEHXZ			; CWZScriptEncode::GetC
; Function compile flags: /Ogtp
;	COMDAT ?GetC@CWZScriptEncode@@IAEHXZ
_TEXT	SEGMENT
?GetC@CWZScriptEncode@@IAEHXZ PROC			; CWZScriptEncode::GetC, COMDAT
; _this$ = ecx

; 79   : 	if ( this->m_iBufferCount >= this->m_iBufferSize )

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00006	7c 04		 jl	 SHORT $LN2@GetC

; 80   : 	{
; 81   : 		return -1;

  00008	83 c8 ff	 or	 eax, -1

; 86   : 	}
; 87   : }

  0000b	c3		 ret	 0
$LN2@GetC:

; 82   : 	}
; 83   : 	else
; 84   : 	{
; 85   : 		return this->m_pBuffer [ this->m_iBufferCount++ ];

  0000c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000f	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  00013	42		 inc	 edx
  00014	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 86   : 	}
; 87   : }

  00017	c3		 ret	 0
?GetC@CWZScriptEncode@@IAEHXZ ENDP			; CWZScriptEncode::GetC
_TEXT	ENDS
PUBLIC	?UnGetC@CWZScriptEncode@@IAEXH@Z		; CWZScriptEncode::UnGetC
; Function compile flags: /Ogtp
;	COMDAT ?UnGetC@CWZScriptEncode@@IAEXH@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 4
?UnGetC@CWZScriptEncode@@IAEXH@Z PROC			; CWZScriptEncode::UnGetC, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   : 	if ( this->m_iBufferCount <= 0)

  00003	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00006	85 c0		 test	 eax, eax
  00008	7e 0d		 jle	 SHORT $LN1@UnGetC

; 92   : 	{
; 93   : 		return;
; 94   : 	}
; 95   : 	else
; 96   : 	{
; 97   : 		this->m_iBufferCount--;
; 98   : 
; 99   : 		this->m_pBuffer [ this->m_iBufferCount ] = ch;

  0000a	8a 55 08	 mov	 dl, BYTE PTR _ch$[ebp]
  0000d	48		 dec	 eax
  0000e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
$LN1@UnGetC:

; 100  : 	}
; 101  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?UnGetC@CWZScriptEncode@@IAEXH@Z ENDP			; CWZScriptEncode::UnGetC
_TEXT	ENDS
PUBLIC	?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::SetScriptParsingBuffer
; Function compile flags: /Ogtp
;	COMDAT ?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z PROC ; CWZScriptEncode::SetScriptParsingBuffer, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 106  : 	this->m_pBuffer = buffer;

  00003	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]

; 107  : 	this->m_iBufferSize = size;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  00009	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000c	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 108  : 	this->m_iBufferCount = 0;

  0000f	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 109  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ENDP ; CWZScriptEncode::SetScriptParsingBuffer
_TEXT	ENDS
PUBLIC	?GetNumber@CWZScriptEncode@@QAEHXZ		; CWZScriptEncode::GetNumber
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetNumber@CWZScriptEncode@@QAEHXZ
_TEXT	SEGMENT
?GetNumber@CWZScriptEncode@@QAEHXZ PROC			; CWZScriptEncode::GetNumber, COMDAT
; _this$ = ecx

; 113  : 	return (int)this->TokenNumber;

  00000	d9 41 18	 fld	 DWORD PTR [ecx+24]
  00003	e9 00 00 00 00	 jmp	 __ftol2_sse
?GetNumber@CWZScriptEncode@@QAEHXZ ENDP			; CWZScriptEncode::GetNumber
_TEXT	ENDS
PUBLIC	?GetString@CWZScriptEncode@@QAEPADXZ		; CWZScriptEncode::GetString
; Function compile flags: /Ogtp
;	COMDAT ?GetString@CWZScriptEncode@@QAEPADXZ
_TEXT	SEGMENT
?GetString@CWZScriptEncode@@QAEPADXZ PROC		; CWZScriptEncode::GetString, COMDAT
; _this$ = ecx

; 118  : 	return &this->TokenString[0];

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]

; 119  : }

  00003	c3		 ret	 0
?GetString@CWZScriptEncode@@QAEPADXZ ENDP		; CWZScriptEncode::GetString
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ ; CWZScriptEncode::GetToken
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ PROC	; CWZScriptEncode::GetToken, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx
  00014	57		 push	 edi

; 123  : 	char ch;
; 124  : 	char* p;
; 125  : 	char TempString[100];
; 126  : 
; 127  : 	this->TokenString[0]=0;	// Set String NULL

  00015	8d 7e 1c	 lea	 edi, DWORD PTR [esi+28]
  00018	c6 07 00	 mov	 BYTE PTR [edi], 0
  0001b	eb 03 8d 49 00	 npad	 5
$LL30@GetToken:

; 128  : 
; 129  : 	do
; 130  : 	{
; 131  : 		if ( (ch=this->GetC ()) == (-1) )

  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00027	8a d8		 mov	 bl, al
  00029	80 fb ff	 cmp	 bl, -1
  0002c	74 4d		 je	 SHORT $LN38@GetToken

; 134  : 		}
; 135  : 		else
; 136  : 		{	
; 137  : 			if (ch=='/')		// this is /

  0002e	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00031	75 1b		 jne	 SHORT $LN29@GetToken

; 138  : 			{
; 139  : 				if((ch=this->GetC ()) == '/')

  00033	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00038	8a d8		 mov	 bl, al
  0003a	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0003d	75 0f		 jne	 SHORT $LN29@GetToken
  0003f	90		 npad	 1
$LL23@GetToken:

; 140  : 				{
; 141  : 					while ( ((ch=this->GetC()) != ('\n')) )	// End of Line (EOL)

  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00047	8a d8		 mov	 bl, al
  00049	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  0004c	75 f2		 jne	 SHORT $LL23@GetToken
$LN29@GetToken:

; 142  : 					{
; 143  : 						continue;
; 144  : 					}
; 145  : 				}
; 146  : 			}
; 147  : 		}
; 148  : 	}
; 149  : 	while (isspace(ch) != 0);

  0004e	0f be c3	 movsx	 eax, bl
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _isspace
  00057	83 c4 04	 add	 esp, 4
  0005a	85 c0		 test	 eax, eax
  0005c	75 c2		 jne	 SHORT $LL30@GetToken

; 150  : 
; 151  : 	switch(ch)

  0005e	0f be c3	 movsx	 eax, bl
  00061	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00064	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00067	0f 87 06 01 00
	00		 ja	 $LN6@GetToken
  0006d	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN43@GetToken[ecx]
  00074	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN45@GetToken[ecx*4]
$LN38@GetToken:
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi

; 132  : 		{
; 133  : 			return T_END;

  0007d	b8 02 00 00 00	 mov	 eax, 2
  00082	5b		 pop	 ebx

; 238  : 		}
; 239  : 		break;
; 240  : 
; 241  : 	}
; 242  : 
; 243  : }

  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	33 cd		 xor	 ecx, ebp
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN19@GetToken:

; 152  : 	{
; 153  : 
; 154  : 	case 0x23:	// #
; 155  : 		return this->CurrentToken=T_COMMAND;

  00091	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  00096	e9 51 01 00 00	 jmp	 $LN44@GetToken
$LN18@GetToken:

; 156  : 		break;
; 157  : 	
; 158  : 	case 0x3B:	// ;
; 159  : 		return this->CurrentToken=T_SEMICOLON;

  0009b	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000a0	e9 47 01 00 00	 jmp	 $LN44@GetToken
$LN17@GetToken:

; 160  : 		break;
; 161  : 	
; 162  : 	case 0x2C:	// ,
; 163  : 
; 164  : 		return this->CurrentToken=T_COMMA;

  000a5	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000aa	e9 3d 01 00 00	 jmp	 $LN44@GetToken
$LN16@GetToken:

; 165  : 		break;
; 166  : 	
; 167  : 	case 0x7B:	// {
; 168  : 		return this->CurrentToken = T_LP;

  000af	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000b4	e9 33 01 00 00	 jmp	 $LN44@GetToken
$LN15@GetToken:

; 169  : 		break;
; 170  : 
; 171  : 	case 0x7D:	// }
; 172  : 		return this->CurrentToken = T_RP;

  000b9	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000be	e9 29 01 00 00	 jmp	 $LN44@GetToken
$LN14@GetToken:

; 173  : 		break;
; 174  : 	// Nice Index Table :)	by Deathway
; 175  : 	case 0x2D:	//-
; 176  : 	case 0x2E:	//.
; 177  : 	case 0x30:	//0
; 178  : 	case 0x31:	//1
; 179  : 	case 0x32:	//2
; 180  : 	case 0x33:	//3
; 181  : 	case 0x34:	//4		
; 182  : 	case 0x35:	//5
; 183  : 	case 0x36:	//6
; 184  : 	case 0x37:	//7
; 185  : 	case 0x38:	//8
; 186  : 	case 0x39:	//9
; 187  : 		this->UnGetC (ch);

  000c3	50		 push	 eax
  000c4	8b ce		 mov	 ecx, esi
  000c6	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC

; 188  : 		p = TempString;
; 189  : 		
; 190  : 		while (((ch=this->GetC()) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D))) 

  000cb	8b ce		 mov	 ecx, esi
  000cd	8d 7d 98	 lea	 edi, DWORD PTR _TempString$[ebp]
  000d0	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  000d5	8a d8		 mov	 bl, al
  000d7	80 fb ff	 cmp	 bl, -1
  000da	74 2f		 je	 SHORT $LN12@GetToken
  000dc	8d 64 24 00	 npad	 4
$LL13@GetToken:
  000e0	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  000e3	74 15		 je	 SHORT $LN11@GetToken
  000e5	0f be d3	 movsx	 edx, bl
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 _isdigit
  000ee	83 c4 04	 add	 esp, 4
  000f1	85 c0		 test	 eax, eax
  000f3	75 05		 jne	 SHORT $LN11@GetToken
  000f5	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  000f8	75 11		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 191  : 		{
; 192  : 			*p = ch;

  000fa	88 1f		 mov	 BYTE PTR [edi], bl
  000fc	8b ce		 mov	 ecx, esi

; 193  : 			p++;

  000fe	47		 inc	 edi
  000ff	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00104	8a d8		 mov	 bl, al
  00106	80 fb ff	 cmp	 bl, -1
  00109	75 d5		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 194  : 		}		
; 195  : 		*p = 0;
; 196  : 		this->TokenNumber = atof( TempString);

  0010b	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0010e	50		 push	 eax
  0010f	c6 07 00	 mov	 BYTE PTR [edi], 0
  00112	e8 00 00 00 00	 call	 _atof
  00117	d9 5e 18	 fstp	 DWORD PTR [esi+24]
  0011a	83 c4 04	 add	 esp, 4

; 197  : 		return this->CurrentToken  = T_NUMBER ;

  0011d	b8 01 00 00 00	 mov	 eax, 1
  00122	e9 c5 00 00 00	 jmp	 $LN44@GetToken
$LN10@GetToken:

; 198  : 		break;
; 199  : 
; 200  : 	case 0x22:	// "	
; 201  : 		p=&this->TokenString[0];
; 202  : 		
; 203  : 		while (((ch=this->GetC() ) != -1 ) && (ch != 0x22))	// nice

  00127	8b ce		 mov	 ecx, esi
  00129	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  0012e	3c ff		 cmp	 al, -1
  00130	74 12		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00132	3c 22		 cmp	 al, 34			; 00000022H
  00134	74 1d		 je	 SHORT $LN7@GetToken

; 204  : 		{
; 205  : 			*p = ch;

  00136	88 07		 mov	 BYTE PTR [edi], al
  00138	8b ce		 mov	 ecx, esi

; 206  : 			p++;

  0013a	47		 inc	 edi
  0013b	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00140	3c ff		 cmp	 al, -1
  00142	75 ee		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 207  : 		}
; 208  : 		if (ch != 0x22 )

  00144	3c 22		 cmp	 al, 34			; 00000022H
  00146	74 0b		 je	 SHORT $LN7@GetToken

; 209  : 		{
; 210  : 			this->UnGetC(ch);

  00148	0f be c8	 movsx	 ecx, al
  0014b	51		 push	 ecx
  0014c	8b ce		 mov	 ecx, esi
  0014e	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC
$LN7@GetToken:

; 211  : 		}
; 212  : 		*p = 0;

  00153	c6 07 00	 mov	 BYTE PTR [edi], 0
  00156	5f		 pop	 edi

; 213  : 		return this->CurrentToken = T_NAME;

  00157	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  00161	5e		 pop	 esi
  00162	33 c0		 xor	 eax, eax
  00164	5b		 pop	 ebx

; 238  : 		}
; 239  : 		break;
; 240  : 
; 241  : 	}
; 242  : 
; 243  : }

  00165	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00168	33 cd		 xor	 ecx, ebp
  0016a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c3		 ret	 0
$LN6@GetToken:

; 214  : 		break;
; 215  : 
; 216  : 	default:	
; 217  : 		if (isalpha(ch))

  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 _isalpha
  00179	83 c4 04	 add	 esp, 4
  0017c	85 c0		 test	 eax, eax
  0017e	74 67		 je	 SHORT $LN5@GetToken

; 218  : 		{
; 219  : 			p=&this->TokenString[0];
; 220  : 			*p=ch;

  00180	88 1f		 mov	 BYTE PTR [edi], bl

; 221  : 			p++;
; 222  : 
; 223  : 			while ( ((ch=this->GetC() ) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00182	8b ce		 mov	 ecx, esi
  00184	47		 inc	 edi
  00185	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  0018a	8a d8		 mov	 bl, al
  0018c	80 fb ff	 cmp	 bl, -1
  0018f	74 2b		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  00191	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00194	74 15		 je	 SHORT $LN2@GetToken
  00196	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  00199	74 10		 je	 SHORT $LN2@GetToken
  0019b	0f be d3	 movsx	 edx, bl
  0019e	52		 push	 edx
  0019f	e8 00 00 00 00	 call	 _isalnum
  001a4	83 c4 04	 add	 esp, 4
  001a7	85 c0		 test	 eax, eax
  001a9	74 11		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 224  : 			{
; 225  : 				*p=ch;

  001ab	88 1f		 mov	 BYTE PTR [edi], bl
  001ad	8b ce		 mov	 ecx, esi

; 226  : 				p++;

  001af	47		 inc	 edi
  001b0	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  001b5	8a d8		 mov	 bl, al
  001b7	80 fb ff	 cmp	 bl, -1
  001ba	75 d5		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 227  : 				
; 228  : 			}
; 229  : 
; 230  : 			this->UnGetC(ch);

  001bc	0f be c3	 movsx	 eax, bl
  001bf	50		 push	 eax
  001c0	8b ce		 mov	 ecx, esi
  001c2	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC

; 231  : 			*p=0;

  001c7	c6 07 00	 mov	 BYTE PTR [edi], 0
  001ca	5f		 pop	 edi

; 232  : 			this->CurrentToken=T_NAME;

  001cb	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  001d5	5e		 pop	 esi

; 233  : 			return T_NAME;

  001d6	33 c0		 xor	 eax, eax
  001d8	5b		 pop	 ebx

; 238  : 		}
; 239  : 		break;
; 240  : 
; 241  : 	}
; 242  : 
; 243  : }

  001d9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001dc	33 cd		 xor	 ecx, ebp
  001de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e3	8b e5		 mov	 esp, ebp
  001e5	5d		 pop	 ebp
  001e6	c3		 ret	 0
$LN5@GetToken:

; 234  : 		}
; 235  : 		else
; 236  : 		{
; 237  : 			return this->CurrentToken = T_SMD_ERROR;

  001e7	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN44@GetToken:

; 238  : 		}
; 239  : 		break;
; 240  : 
; 241  : 	}
; 242  : 
; 243  : }

  001ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ef	5f		 pop	 edi
  001f0	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  001f6	5e		 pop	 esi
  001f7	33 cd		 xor	 ecx, ebp
  001f9	5b		 pop	 ebx
  001fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c3		 ret	 0
  00203	90		 npad	 1
$LN45@GetToken:
  00204	00 00 00 00	 DD	 $LN10@GetToken
  00208	00 00 00 00	 DD	 $LN19@GetToken
  0020c	00 00 00 00	 DD	 $LN17@GetToken
  00210	00 00 00 00	 DD	 $LN14@GetToken
  00214	00 00 00 00	 DD	 $LN18@GetToken
  00218	00 00 00 00	 DD	 $LN16@GetToken
  0021c	00 00 00 00	 DD	 $LN15@GetToken
  00220	00 00 00 00	 DD	 $LN6@GetToken
$LN43@GetToken:
  00224	00		 DB	 0
  00225	01		 DB	 1
  00226	07		 DB	 7
  00227	07		 DB	 7
  00228	07		 DB	 7
  00229	07		 DB	 7
  0022a	07		 DB	 7
  0022b	07		 DB	 7
  0022c	07		 DB	 7
  0022d	07		 DB	 7
  0022e	02		 DB	 2
  0022f	03		 DB	 3
  00230	03		 DB	 3
  00231	07		 DB	 7
  00232	03		 DB	 3
  00233	03		 DB	 3
  00234	03		 DB	 3
  00235	03		 DB	 3
  00236	03		 DB	 3
  00237	03		 DB	 3
  00238	03		 DB	 3
  00239	03		 DB	 3
  0023a	03		 DB	 3
  0023b	03		 DB	 3
  0023c	07		 DB	 7
  0023d	04		 DB	 4
  0023e	07		 DB	 7
  0023f	07		 DB	 7
  00240	07		 DB	 7
  00241	07		 DB	 7
  00242	07		 DB	 7
  00243	07		 DB	 7
  00244	07		 DB	 7
  00245	07		 DB	 7
  00246	07		 DB	 7
  00247	07		 DB	 7
  00248	07		 DB	 7
  00249	07		 DB	 7
  0024a	07		 DB	 7
  0024b	07		 DB	 7
  0024c	07		 DB	 7
  0024d	07		 DB	 7
  0024e	07		 DB	 7
  0024f	07		 DB	 7
  00250	07		 DB	 7
  00251	07		 DB	 7
  00252	07		 DB	 7
  00253	07		 DB	 7
  00254	07		 DB	 7
  00255	07		 DB	 7
  00256	07		 DB	 7
  00257	07		 DB	 7
  00258	07		 DB	 7
  00259	07		 DB	 7
  0025a	07		 DB	 7
  0025b	07		 DB	 7
  0025c	07		 DB	 7
  0025d	07		 DB	 7
  0025e	07		 DB	 7
  0025f	07		 DB	 7
  00260	07		 DB	 7
  00261	07		 DB	 7
  00262	07		 DB	 7
  00263	07		 DB	 7
  00264	07		 DB	 7
  00265	07		 DB	 7
  00266	07		 DB	 7
  00267	07		 DB	 7
  00268	07		 DB	 7
  00269	07		 DB	 7
  0026a	07		 DB	 7
  0026b	07		 DB	 7
  0026c	07		 DB	 7
  0026d	07		 DB	 7
  0026e	07		 DB	 7
  0026f	07		 DB	 7
  00270	07		 DB	 7
  00271	07		 DB	 7
  00272	07		 DB	 7
  00273	07		 DB	 7
  00274	07		 DB	 7
  00275	07		 DB	 7
  00276	07		 DB	 7
  00277	07		 DB	 7
  00278	07		 DB	 7
  00279	07		 DB	 7
  0027a	07		 DB	 7
  0027b	07		 DB	 7
  0027c	07		 DB	 7
  0027d	05		 DB	 5
  0027e	07		 DB	 7
  0027f	06		 DB	 6
?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ ENDP	; CWZScriptEncode::GetToken
_TEXT	ENDS
PUBLIC	??1CWZScriptEncode@@UAE@XZ			; CWZScriptEncode::~CWZScriptEncode
; Function compile flags: /Ogtp
;	COMDAT ??1CWZScriptEncode@@UAE@XZ
_TEXT	SEGMENT
??1CWZScriptEncode@@UAE@XZ PROC				; CWZScriptEncode::~CWZScriptEncode, COMDAT
; _this$ = ecx

; 19   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CWZScriptEncode@@6B@

; 20   : 	this->Close();

  00006	e9 00 00 00 00	 jmp	 ?Close@CWZScriptEncode@@QAEXXZ ; CWZScriptEncode::Close
??1CWZScriptEncode@@UAE@XZ ENDP				; CWZScriptEncode::~CWZScriptEncode
_TEXT	ENDS
PUBLIC	?Open@CWZScriptEncode@@QAEHPAD@Z		; CWZScriptEncode::Open
EXTRN	__imp__ReadFile@20:PROC
EXTRN	_malloc:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Open@CWZScriptEncode@@QAEHPAD@Z
_TEXT	SEGMENT
_iReadFileSize$ = -4					; size = 4
_filename$ = 8						; size = 4
?Open@CWZScriptEncode@@QAEHPAD@Z PROC			; CWZScriptEncode::Open, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 26   : 	int filesize;
; 27   : 	char* pBuffer;
; 28   : 	int iReadFileSize;
; 29   : 
; 30   : 	if ( this->m_hFile != INVALID_HANDLE_VALUE )

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	83 f8 ff	 cmp	 eax, -1
  0000d	74 07		 je	 SHORT $LN3@Open

; 31   : 	{
; 32   : 		CloseHandle( this->m_hFile );

  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN3@Open:

; 33   : 	}
; 34   : 
; 35   : 	this->m_hFile = CreateFile(filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0x80 , NULL); // 0x80 == NORMAL

  00016	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00019	6a 00		 push	 0
  0001b	68 80 00 00 00	 push	 128			; 00000080H
  00020	6a 03		 push	 3
  00022	6a 00		 push	 0
  00024	6a 01		 push	 1
  00026	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0002b	50		 push	 eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00032	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 36   : 
; 37   : 	if ( this->m_hFile == INVALID_HANDLE_VALUE )

  00035	83 f8 ff	 cmp	 eax, -1
  00038	75 09		 jne	 SHORT $LN2@Open

; 38   : 	{
; 39   : 		return 0;

  0003a	33 c0		 xor	 eax, eax
  0003c	5e		 pop	 esi

; 57   : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
$LN2@Open:
  00043	53		 push	 ebx
  00044	57		 push	 edi

; 40   : 	}
; 41   : 
; 42   : 	filesize = GetFileSize(this->m_hFile , NULL);

  00045	6a 00		 push	 0
  00047	50		 push	 eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  0004e	8b d8		 mov	 ebx, eax

; 43   : 	pBuffer = (char*)malloc(filesize);

  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 _malloc

; 44   : 	ReadFile(this->m_hFile, (void*)pBuffer, filesize, (unsigned long*)&iReadFileSize, 0);

  00056	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00059	83 c4 04	 add	 esp, 4
  0005c	6a 00		 push	 0
  0005e	8d 4d fc	 lea	 ecx, DWORD PTR _iReadFileSize$[ebp]
  00061	51		 push	 ecx
  00062	53		 push	 ebx
  00063	8b f8		 mov	 edi, eax
  00065	57		 push	 edi
  00066	52		 push	 edx
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 45   : 
; 46   : 	if ( iReadFileSize == 0 )

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _iReadFileSize$[ebp]

; 47   : 	{
; 48   : 		this->Close();

  00070	8b ce		 mov	 ecx, esi
  00072	85 c0		 test	 eax, eax
  00074	75 10		 jne	 SHORT $LN1@Open
  00076	e8 00 00 00 00	 call	 ?Close@CWZScriptEncode@@QAEXXZ ; CWZScriptEncode::Close
  0007b	5f		 pop	 edi
  0007c	5b		 pop	 ebx

; 49   : 		return 0;

  0007d	33 c0		 xor	 eax, eax
  0007f	5e		 pop	 esi

; 57   : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
$LN1@Open:

; 50   : 	}
; 51   : 
; 52   : 	this->Encode(pBuffer, iReadFileSize);

  00086	50		 push	 eax
  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ?Encode@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::Encode

; 53   : 	this->SetScriptParsingBuffer(pBuffer, iReadFileSize);

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _iReadFileSize$[ebp]
  00090	50		 push	 eax
  00091	57		 push	 edi
  00092	8b ce		 mov	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::SetScriptParsingBuffer

; 54   : 
; 55   : 	CloseHandle(this->m_hFile );

  00099	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0009c	51		 push	 ecx
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000a3	5f		 pop	 edi
  000a4	5b		 pop	 ebx

; 56   : 	return 1;

  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	5e		 pop	 esi

; 57   : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?Open@CWZScriptEncode@@QAEHPAD@Z ENDP			; CWZScriptEncode::Open
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCWZScriptEncode@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWZScriptEncode@@UAEPAXI@Z PROC			; CWZScriptEncode::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWZScriptEncode@@UAE@XZ ; CWZScriptEncode::~CWZScriptEncode
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCWZScriptEncode@@UAEPAXI@Z ENDP			; CWZScriptEncode::`scalar deleting destructor'
_TEXT	ENDS
END
