; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\Weapon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_WEAPON_CS_ATTACKER DB 03eH
	DB	067H
	DB	048H
	DB	070H
	DB	058H
	DB	068H
	DB	07cH
	DB	06fH
	DB	074H
	DB	069H
	DB	07cH
	DB	070H
	DB	049H
	DB	056H
	DB	069H
	DB	067H
_WEAPON_CS_DEFENSER DB 03dH
	DB	058H
	DB	05dH
	DB	06cH
	DB	05cH
	DB	059H
	DB	07fH
	DB	06fH
	DB	054H
	DB	034H
	DB	066H
	DB	042H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\weapon.h
;	COMDAT ?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ
_TEXT	SEGMENT
?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ PROC	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET, COMDAT
; _this$ = ecx

; 25   : 		this->m_iWeaponObjIndex = -1;
; 26   : 		this->m_iTargetObjIndex = -1;
; 27   : 		this->m_iDamageDealingTime = 0;

  00000	33 c0		 xor	 eax, eax
  00002	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1
  00008	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  0000f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 28   : 		this->m_IsUsed = FALSE;

  00012	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 29   : 	}

  00015	c3		 ret	 0
?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ ENDP	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET
_TEXT	ENDS
PUBLIC	?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ	; ST_WEAPON_CAL_DAMAGER_INFO::RESET
; Function compile flags: /Ogtp
;	COMDAT ?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ
_TEXT	SEGMENT
?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ PROC		; ST_WEAPON_CAL_DAMAGER_INFO::RESET, COMDAT
; _this$ = ecx

; 42   : 		this->m_iWeaponObjIndex = -1;

  00000	83 c8 ff	 or	 eax, -1
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 43   : 		this->m_iTargetX = -1;

  00005	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 44   : 		this->m_iTargetY = -1;

  00008	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 45   : 		this->m_iLimitTime = -1;

  0000b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 46   : 		this->m_IsUsed = FALSE;

  0000e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 47   : 	}

  00015	c3		 ret	 0
?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ ENDP		; ST_WEAPON_CAL_DAMAGER_INFO::RESET
_TEXT	ENDS
PUBLIC	??_7CWeapon@@6B@				; CWeapon::`vftable'
PUBLIC	??0CWeapon@@QAE@XZ				; CWeapon::CWeapon
PUBLIC	??_R4CWeapon@@6B@				; CWeapon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWeapon@@@8				; CWeapon `RTTI Type Descriptor'
PUBLIC	??_R3CWeapon@@8					; CWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWeapon@@8					; CWeapon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWeapon@@8			; CWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECWeapon@@UAEPAXI@Z:PROC			; CWeapon::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWeapon@@8 DD FLAT:??_R0?AVCWeapon@@@8	; CWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R2CWeapon@@8
rdata$r	SEGMENT
??_R2CWeapon@@8 DD FLAT:??_R1A@?0A@EA@CWeapon@@8	; CWeapon::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWeapon@@8
rdata$r	SEGMENT
??_R3CWeapon@@8 DD 00H					; CWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWeapon@@@8
_DATA	SEGMENT
??_R0?AVCWeapon@@@8 DD FLAT:??_7type_info@@6B@		; CWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CWeapon@@6B@
rdata$r	SEGMENT
??_R4CWeapon@@6B@ DD 00H				; CWeapon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWeapon@@@8
	DD	FLAT:??_R3CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_7CWeapon@@6B@
CONST	SEGMENT
??_7CWeapon@@6B@ DD FLAT:??_R4CWeapon@@6B@		; CWeapon::`vftable'
	DD	FLAT:??_ECWeapon@@UAEPAXI@Z
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\weapon.cpp
CONST	ENDS
;	COMDAT ??0CWeapon@@QAE@XZ
_TEXT	SEGMENT
??0CWeapon@@QAE@XZ PROC					; CWeapon::CWeapon, COMDAT
; _this$ = ecx

; 40   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b c1		 mov	 eax, ecx
  00004	57		 push	 edi
  00005	83 ce ff	 or	 esi, -1
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWeapon@@6B@
  0000e	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00011	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
  00016	33 db		 xor	 ebx, ebx
$LL6@CWeapon:

; 41   : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)
; 42   : 	{
; 43   : 		this->m_WeaponDamagedTargetInfo[i].RESET();

  00018	89 72 f8	 mov	 DWORD PTR [edx-8], esi
  0001b	89 72 fc	 mov	 DWORD PTR [edx-4], esi
  0001e	89 1a		 mov	 DWORD PTR [edx], ebx
  00020	89 5a 04	 mov	 DWORD PTR [edx+4], ebx
  00023	83 c2 10	 add	 edx, 16			; 00000010H
  00026	4f		 dec	 edi
  00027	75 ef		 jne	 SHORT $LL6@CWeapon

; 44   : 	}
; 45   : 
; 46   : 	for (int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00029	8d 90 4c 06 00
	00		 lea	 edx, DWORD PTR [eax+1612]
  0002f	bf 64 00 00 00	 mov	 edi, 100		; 00000064H
$LL3@CWeapon:

; 47   : 	{
; 48   : 		this->m_WeaponCalDamageInfo[i].RESET();

  00034	89 72 f8	 mov	 DWORD PTR [edx-8], esi
  00037	89 72 fc	 mov	 DWORD PTR [edx-4], esi
  0003a	89 32		 mov	 DWORD PTR [edx], esi
  0003c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0003f	89 5a 08	 mov	 DWORD PTR [edx+8], ebx
  00042	83 c2 14	 add	 edx, 20			; 00000014H
  00045	4f		 dec	 edi
  00046	75 ec		 jne	 SHORT $LL3@CWeapon

; 49   : 	}
; 50   : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	c3		 ret	 0
??0CWeapon@@QAE@XZ ENDP					; CWeapon::CWeapon
_TEXT	ENDS
PUBLIC	??1CWeapon@@UAE@XZ				; CWeapon::~CWeapon
; Function compile flags: /Ogtp
;	COMDAT ??1CWeapon@@UAE@XZ
_TEXT	SEGMENT
??1CWeapon@@UAE@XZ PROC					; CWeapon::~CWeapon, COMDAT
; _this$ = ecx

; 57   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CWeapon@@6B@

; 58   : 	return;
; 59   : }

  00006	c3		 ret	 0
??1CWeapon@@UAE@XZ ENDP					; CWeapon::~CWeapon
_TEXT	ENDS
PUBLIC	?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z	; CWeapon::SetWeaponCalDamageInfo
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z
_TEXT	SEGMENT
_wObjIndex$ = 8						; size = 2
_btTargetX$ = 12					; size = 1
_btTargetY$ = 16					; size = 1
_iDelayTime$ = 20					; size = 4
?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z PROC	; CWeapon::SetWeaponCalDamageInfo, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 64   : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00007	33 f6		 xor	 esi, esi
  00009	8d 83 54 06 00
	00		 lea	 eax, DWORD PTR [ebx+1620]
  0000f	90		 npad	 1
$LL4@SetWeaponC:

; 65   : 	{
; 66   : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == FALSE )

  00010	83 38 00	 cmp	 DWORD PTR [eax], 0
  00013	74 11		 je	 SHORT $LN8@SetWeaponC

; 64   : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00015	46		 inc	 esi
  00016	83 c0 14	 add	 eax, 20			; 00000014H
  00019	83 fe 32	 cmp	 esi, 50			; 00000032H
  0001c	7c f2		 jl	 SHORT $LL4@SetWeaponC

; 75   : 		}
; 76   : 	}
; 77   : 
; 78   : 	return FALSE;

  0001e	5e		 pop	 esi
  0001f	33 c0		 xor	 eax, eax
  00021	5b		 pop	 ebx

; 79   : }

  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
$LN8@SetWeaponC:

; 67   : 		{
; 68   : 			this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex = wObjIndex;

  00026	0f b7 4d 08	 movzx	 ecx, WORD PTR _wObjIndex$[ebp]

; 69   : 			this->m_WeaponCalDamageInfo[i].m_iTargetX = btTargetX;

  0002a	0f b6 55 0c	 movzx	 edx, BYTE PTR _btTargetX$[ebp]
  0002e	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00031	57		 push	 edi
  00032	8d 3c 83	 lea	 edi, DWORD PTR [ebx+eax*4]

; 70   : 			this->m_WeaponCalDamageInfo[i].m_iTargetY = btTargetY;

  00035	0f b6 45 10	 movzx	 eax, BYTE PTR _btTargetY$[ebp]
  00039	89 8f 44 06 00
	00		 mov	 DWORD PTR [edi+1604], ecx
  0003f	89 97 48 06 00
	00		 mov	 DWORD PTR [edi+1608], edx
  00045	89 87 4c 06 00
	00		 mov	 DWORD PTR [edi+1612], eax

; 71   : 			this->m_WeaponCalDamageInfo[i].m_iLimitTime = GetTickCount() + iDelayTime;

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00051	03 45 14	 add	 eax, DWORD PTR _iDelayTime$[ebp]

; 72   : 			this->m_WeaponCalDamageInfo[i].m_IsUsed = TRUE;

  00054	8d 8c b6 95 01
	00 00		 lea	 ecx, DWORD PTR [esi+esi*4+405]
  0005b	89 87 50 06 00
	00		 mov	 DWORD PTR [edi+1616], eax
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	c7 04 8b 01 00
	00 00		 mov	 DWORD PTR [ebx+ecx*4], 1

; 73   : 
; 74   : 			return TRUE;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	5b		 pop	 ebx

; 79   : }

  00070	5d		 pop	 ebp
  00071	c2 10 00	 ret	 16			; 00000010H
?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z ENDP	; CWeapon::SetWeaponCalDamageInfo
_TEXT	ENDS
PUBLIC	?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z	; CWeapon::GetWeaponCalDamageInfo
; Function compile flags: /Ogtp
;	COMDAT ?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z
_TEXT	SEGMENT
_wObjIndex$ = 8						; size = 2
_btTargetX$ = 12					; size = 4
_btTargetY$ = 16					; size = 4
?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z PROC	; CWeapon::GetWeaponCalDamageInfo, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 84   : 	for( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00006	66 8b 7d 08	 mov	 di, WORD PTR _wObjIndex$[ebp]
  0000a	33 d2		 xor	 edx, edx
  0000c	8d b1 44 06 00
	00		 lea	 esi, DWORD PTR [ecx+1604]
  00012	b8 01 00 00 00	 mov	 eax, 1
$LL4@GetWeaponC:

; 85   : 	{
; 86   : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == TRUE && this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex == wObjIndex)

  00017	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  0001a	75 07		 jne	 SHORT $LN3@GetWeaponC
  0001c	0f b7 df	 movzx	 ebx, di
  0001f	39 1e		 cmp	 DWORD PTR [esi], ebx
  00021	74 13		 je	 SHORT $LN10@GetWeaponC
$LN3@GetWeaponC:

; 84   : 	for( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00023	03 d0		 add	 edx, eax
  00025	83 c6 14	 add	 esi, 20			; 00000014H
  00028	83 fa 32	 cmp	 edx, 50			; 00000032H
  0002b	7c ea		 jl	 SHORT $LL4@GetWeaponC

; 92   : 
; 93   : 			return TRUE;
; 94   : 		}
; 95   : 	}
; 96   : 
; 97   : 	return FALSE;

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	33 c0		 xor	 eax, eax
  00031	5b		 pop	 ebx

; 98   : }

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
$LN10@GetWeaponC:

; 87   : 		{
; 88   : 			btTargetX = this->m_WeaponCalDamageInfo[i].m_iTargetX;

  00036	8b 75 0c	 mov	 esi, DWORD PTR _btTargetX$[ebp]
  00039	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  0003c	8d 0c 91	 lea	 ecx, DWORD PTR [ecx+edx*4]
  0003f	0f b6 91 48 06
	00 00		 movzx	 edx, BYTE PTR [ecx+1608]
  00046	88 16		 mov	 BYTE PTR [esi], dl

; 89   : 			btTargetY = this->m_WeaponCalDamageInfo[i].m_iTargetY;

  00048	0f b6 91 4c 06
	00 00		 movzx	 edx, BYTE PTR [ecx+1612]
  0004f	8b 75 10	 mov	 esi, DWORD PTR _btTargetY$[ebp]
  00052	88 16		 mov	 BYTE PTR [esi], dl

; 90   : 
; 91   : 			this->m_WeaponCalDamageInfo[i].RESET();

  00054	83 ca ff	 or	 edx, -1
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	89 91 44 06 00
	00		 mov	 DWORD PTR [ecx+1604], edx
  0005f	89 91 48 06 00
	00		 mov	 DWORD PTR [ecx+1608], edx
  00065	89 91 4c 06 00
	00		 mov	 DWORD PTR [ecx+1612], edx
  0006b	89 91 50 06 00
	00		 mov	 DWORD PTR [ecx+1616], edx
  00071	c7 81 54 06 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1620], 0
  0007b	5b		 pop	 ebx

; 98   : }

  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z ENDP	; CWeapon::GetWeaponCalDamageInfo
_TEXT	ENDS
PUBLIC	?GetAttackDamage@CWeapon@@QAEHH@Z		; CWeapon::GetAttackDamage
; Function compile flags: /Ogtp
;	COMDAT ?GetAttackDamage@CWeapon@@QAEHH@Z
_TEXT	SEGMENT
_iObjClass$ = 8						; size = 4
?GetAttackDamage@CWeapon@@QAEHH@Z PROC			; CWeapon::GetAttackDamage, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 104  : 	int iDamage = 0;
; 105  : 
; 106  : 	if ( iObjClass == 221 )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iObjClass$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	81 f9 dd 00 00
	00		 cmp	 ecx, 221		; 000000ddH
  0000e	75 07		 jne	 SHORT $LN3@GetAttackD

; 107  : 	{
; 108  : 		iDamage = 300;

  00010	8d 41 4f	 lea	 eax, DWORD PTR [ecx+79]

; 113  : 	}
; 114  : 
; 115  : 	return iDamage;
; 116  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN3@GetAttackD:

; 109  : 	}
; 110  : 	else if ( iObjClass == 222 )

  00017	81 f9 de 00 00
	00		 cmp	 ecx, 222		; 000000deH
  0001d	75 03		 jne	 SHORT $LN1@GetAttackD

; 111  : 	{
; 112  : 		iDamage = 200;

  0001f	8d 41 ea	 lea	 eax, DWORD PTR [ecx-22]
$LN1@GetAttackD:

; 113  : 	}
; 114  : 
; 115  : 	return iDamage;
; 116  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?GetAttackDamage@CWeapon@@QAEHH@Z ENDP			; CWeapon::GetAttackDamage
_TEXT	ENDS
PUBLIC	?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z	; CWeapon::GetTargetPointXY
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z
_TEXT	SEGMENT
_iObjClass$ = 8						; size = 4
tv294 = 12						; size = 4
tv264 = 12						; size = 4
_iTargetPointIndex$ = 12				; size = 4
_btX$ = 16						; size = 4
_btY$ = 20						; size = 4
_bRandomPos$ = 24					; size = 4
?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z PROC		; CWeapon::GetTargetPointXY, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 	if ( iObjClass == 221 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iObjClass$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	3d dd 00 00 00	 cmp	 eax, 221		; 000000ddH
  0000e	75 49		 jne	 SHORT $LN5@GetTargetP

; 124  : 	{
; 125  : 		if ( iTargetPointIndex >= 0 && iTargetPointIndex < MAX_ST_CS_WEAPON )

  00010	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  00013	83 f8 03	 cmp	 eax, 3
  00016	0f 87 cc 00 00
	00		 ja	 $LN13@GetTargetP

; 126  : 		{
; 127  : 			int tx = WEAPON_CS_ATTACKER[iTargetPointIndex].btXEnd - WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin;

  0001c	0f b6 34 85 02
	00 00 00	 movzx	 esi, BYTE PTR _WEAPON_CS_ATTACKER[eax*4+2]

; 128  : 			int ty = WEAPON_CS_ATTACKER[iTargetPointIndex].btYEnd - WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin;

  00024	0f b6 3c 85 03
	00 00 00	 movzx	 edi, BYTE PTR _WEAPON_CS_ATTACKER[eax*4+3]
  0002c	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR _WEAPON_CS_ATTACKER[eax*4]
  00033	89 4d 0c	 mov	 DWORD PTR tv264[ebp], ecx
  00036	8a 09		 mov	 cl, BYTE PTR [ecx]
  00038	8d 1c 85 01 00
	00 00		 lea	 ebx, DWORD PTR _WEAPON_CS_ATTACKER[eax*4+1]
  0003f	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00042	0f b6 d1	 movzx	 edx, cl
  00045	2b f2		 sub	 esi, edx
  00047	2b f8		 sub	 edi, eax

; 129  : 
; 130  : 			if ( bRandomPos != FALSE )

  00049	83 7d 18 00	 cmp	 DWORD PTR _bRandomPos$[ebp], 0
  0004d	74 7d		 je	 SHORT $LN2@GetTargetP

; 131  : 			{
; 132  : 				btX = WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin + rand() % tx;

  0004f	e8 00 00 00 00	 call	 _rand
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR tv264[ebp]

; 133  : 				btY = WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin + rand() % ty;
; 134  : 			}
; 135  : 			else
; 136  : 			{
; 137  : 				btX = WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin + tx / 2;
; 138  : 				btY = WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin + ty / 2;
; 139  : 			}
; 140  : 		}
; 141  : 	}
; 142  : 
; 143  : 	if ( iObjClass == 222 )

  00057	eb 4e		 jmp	 SHORT $LN14@GetTargetP
$LN5@GetTargetP:
  00059	3d de 00 00 00	 cmp	 eax, 222		; 000000deH
  0005e	0f 85 84 00 00
	00		 jne	 $LN13@GetTargetP

; 144  : 	{
; 145  : 		if ( iTargetPointIndex >= 0 && iTargetPointIndex < MAX_ST_CS_WEAPON )

  00064	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  00067	83 f8 03	 cmp	 eax, 3
  0006a	77 7c		 ja	 SHORT $LN13@GetTargetP

; 146  : 		{
; 147  : 			int tx = WEAPON_CS_DEFENSER[iTargetPointIndex].btXEnd - WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin;

  0006c	0f b6 34 85 02
	00 00 00	 movzx	 esi, BYTE PTR _WEAPON_CS_DEFENSER[eax*4+2]

; 148  : 			int ty = WEAPON_CS_DEFENSER[iTargetPointIndex].btYEnd - WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin;

  00074	0f b6 3c 85 03
	00 00 00	 movzx	 edi, BYTE PTR _WEAPON_CS_DEFENSER[eax*4+3]
  0007c	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR _WEAPON_CS_DEFENSER[eax*4]
  00083	89 4d 0c	 mov	 DWORD PTR tv294[ebp], ecx
  00086	8a 09		 mov	 cl, BYTE PTR [ecx]
  00088	8d 1c 85 01 00
	00 00		 lea	 ebx, DWORD PTR _WEAPON_CS_DEFENSER[eax*4+1]
  0008f	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00092	0f b6 d1	 movzx	 edx, cl
  00095	2b f2		 sub	 esi, edx
  00097	2b f8		 sub	 edi, eax

; 149  : 
; 150  : 			if ( bRandomPos != FALSE )

  00099	83 7d 18 00	 cmp	 DWORD PTR _bRandomPos$[ebp], 0
  0009d	74 2d		 je	 SHORT $LN2@GetTargetP

; 151  : 			{
; 152  : 				btX = WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin + rand() % tx;

  0009f	e8 00 00 00 00	 call	 _rand
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR tv294[ebp]
$LN14@GetTargetP:
  000a7	99		 cdq
  000a8	f7 fe		 idiv	 esi
  000aa	8b 45 10	 mov	 eax, DWORD PTR _btX$[ebp]
  000ad	02 11		 add	 dl, BYTE PTR [ecx]
  000af	88 10		 mov	 BYTE PTR [eax], dl

; 153  : 				btY = WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin + rand() % ty;

  000b1	e8 00 00 00 00	 call	 _rand
  000b6	99		 cdq
  000b7	f7 ff		 idiv	 edi
  000b9	8b 4d 14	 mov	 ecx, DWORD PTR _btY$[ebp]
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi

; 159  : 			}
; 160  : 		}
; 161  : 	}
; 162  : 
; 163  : 	return TRUE;

  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	02 13		 add	 dl, BYTE PTR [ebx]
  000c5	5b		 pop	 ebx
  000c6	88 11		 mov	 BYTE PTR [ecx], dl

; 164  : }

  000c8	5d		 pop	 ebp
  000c9	c2 14 00	 ret	 20			; 00000014H
$LN2@GetTargetP:

; 154  : 			}
; 155  : 			else
; 156  : 			{
; 157  : 				btX = WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin + tx / 2;

  000cc	8b c6		 mov	 eax, esi
  000ce	99		 cdq
  000cf	2b c2		 sub	 eax, edx
  000d1	8b 55 10	 mov	 edx, DWORD PTR _btX$[ebp]
  000d4	d1 f8		 sar	 eax, 1
  000d6	02 c1		 add	 al, cl

; 158  : 				btY = WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin + ty / 2;

  000d8	8b 4d 14	 mov	 ecx, DWORD PTR _btY$[ebp]
  000db	88 02		 mov	 BYTE PTR [edx], al
  000dd	8b c7		 mov	 eax, edi
  000df	99		 cdq
  000e0	2b c2		 sub	 eax, edx
  000e2	d1 f8		 sar	 eax, 1
  000e4	02 03		 add	 al, BYTE PTR [ebx]
  000e6	88 01		 mov	 BYTE PTR [ecx], al
$LN13@GetTargetP:

; 159  : 			}
; 160  : 		}
; 161  : 	}
; 162  : 
; 163  : 	return TRUE;

  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	b8 01 00 00 00	 mov	 eax, 1
  000ef	5b		 pop	 ebx

; 164  : }

  000f0	5d		 pop	 ebp
  000f1	c2 14 00	 ret	 20			; 00000014H
?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z ENDP		; CWeapon::GetTargetPointXY
_TEXT	ENDS
PUBLIC	?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ; CWeapon::MissCheck
; Function compile flags: /Ogtp
;	COMDAT ?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_iSkill$ = 16						; size = 4
_iSkillSuccess$ = 20					; size = 4
_bAllMiss$ = 24						; size = 4
?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z PROC	; CWeapon::MissCheck, COMDAT
; _this$ = ecx

; 170  : 	return TRUE;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 171  : }

  00005	c2 14 00	 ret	 20			; 00000014H
?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ENDP	; CWeapon::MissCheck
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	__real@00000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@4024000000000000
PUBLIC	?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ; CWeapon::Attack
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjUniriaSprite
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z:PROC ; gObjArmorRandomDurDown
EXTRN	?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z:PROC ; gObjUpdateAppliedBuffEffect
EXTRN	?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z:PROC ; gObjSearchActiveEffect
EXTRN	?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z:PROC ; cWingsDamage::SetCharHorseAttack
EXTRN	?gWingsDamage@@3VcWingsDamage@@A:BYTE		; gWingsDamage
EXTRN	?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjDarkHorse
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ:PROC ; CItem::IsDinorantReduceAttackDamaege
EXTRN	?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjDenorantSprite
EXTRN	?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjWingSprite
EXTRN	?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAngelSprite
EXTRN	?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetActiveEffect
EXTRN	?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAttackQ
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_MSBFlag$ = -12						; size = 4
_ManaChange$ = -8					; size = 4
_iSkill$ = -4						; size = 4
tv605 = 8						; size = 4
tv550 = 8						; size = 4
_replacemana$203209 = 8					; size = 4
_iWizardSkillTime$203208 = 8				; size = 4
_DHPercent$203201 = 8					; size = 4
_lpObj$ = 8						; size = 4
tv620 = 12						; size = 4
tv618 = 12						; size = 4
tv617 = 12						; size = 4
tv610 = 12						; size = 4
tv608 = 12						; size = 4
tv601 = 12						; size = 4
tv599 = 12						; size = 4
_iAttackDamage$ = 12					; size = 4
_lpTargetObj$ = 12					; size = 4
_bAllMiss$ = 16						; size = 4
_lpMagic$ = 16						; size = 4
_MsgDamage$ = 19					; size = 1
tv578 = 20						; size = 4
_iWizardSkillDefense$203207 = 20			; size = 4
_iCriticalDamage$ = 20					; size = 4
_iActionType$ = 24					; size = 4
?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z PROC ; CWeapon::Attack, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 178  : 	int iSkill = 0;
; 179  : 	int iSkillSuccess = TRUE;
; 180  : 	BYTE MsgDamage = 0;
; 181  : 	int ManaChange = 0;
; 182  : 
; 183  : 	if ( lpMagic != NULL )

  00006	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	33 c9		 xor	 ecx, ecx
  0000f	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00012	89 4d fc	 mov	 DWORD PTR _iSkill$[ebp], ecx
  00015	89 4d f8	 mov	 DWORD PTR _ManaChange$[ebp], ecx
  00018	3b c1		 cmp	 eax, ecx
  0001a	74 06		 je	 SHORT $LN44@Attack

; 184  : 	{
; 185  : 		iSkill = lpMagic->m_Skill;

  0001c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001f	89 45 fc	 mov	 DWORD PTR _iSkill$[ebp], eax
$LN44@Attack:

; 186  : 	}
; 187  : 
; 188  : 	if ( (lpTargetObj->Authority & 2) == 2 )

  00022	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  00025	f6 86 0c 02 00
	00 02		 test	 BYTE PTR [esi+524], 2
  0002c	74 0a		 je	 SHORT $LN43@Attack

; 189  : 	{
; 190  : 		return FALSE;

  0002e	5f		 pop	 edi
  0002f	33 c0		 xor	 eax, eax
  00031	5e		 pop	 esi

; 421  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 14 00	 ret	 20			; 00000014H
$LN43@Attack:
  00038	53		 push	 ebx

; 191  : 	}
; 192  : 
; 193  : 	if ( lpObj->MapNumber != lpTargetObj->MapNumber )

  00039	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0003c	8a 8b 49 01 00
	00		 mov	 cl, BYTE PTR [ebx+329]
  00042	3a 8e 49 01 00
	00		 cmp	 cl, BYTE PTR [esi+329]

; 194  : 	{
; 195  : 		return FALSE;

  00048	75 71		 jne	 SHORT $LN78@Attack

; 196  : 	}
; 197  : 
; 198  : 	if ( lpTargetObj->Type == OBJ_USER )

  0004a	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0004f	75 0d		 jne	 SHORT $LN40@Attack

; 199  : 	{
; 200  : 		if ( gObjIsConnected(lpTargetObj) == FALSE )

  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00057	83 c4 04	 add	 esp, 4
  0005a	85 c0		 test	 eax, eax

; 201  : 		{
; 202  : 			return FALSE;

  0005c	74 5d		 je	 SHORT $LN78@Attack
$LN40@Attack:

; 203  : 		}
; 204  : 	}
; 205  : 
; 206  : 	if ( gObjAttackQ(lpTargetObj) == 0 )

  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAttackQ
  00064	83 c4 04	 add	 esp, 4
  00067	85 c0		 test	 eax, eax

; 207  : 	{
; 208  : 		return FALSE;

  00069	74 50		 je	 SHORT $LN78@Attack

; 209  : 	}
; 210  : 
; 211  : 	lpObj->m_TotalAttackCount++;
; 212  : 
; 213  : 	int MSBFlag = 0;
; 214  : 
; 215  : 	if ( iCriticalDamage != 0 )

  0006b	8b 45 14	 mov	 eax, DWORD PTR _iCriticalDamage$[ebp]
  0006e	ff 83 98 03 00
	00		 inc	 DWORD PTR [ebx+920]

; 216  : 	{
; 217  : 		MsgDamage = 3;
; 218  : 	}
; 219  : 	else
; 220  : 	{
; 221  : 		MsgDamage = 0;
; 222  : 	}
; 223  : 
; 224  : 	int iAttackDamage = this->GetAttackDamage(lpObj->Class);

  00074	0f b7 93 b8 00
	00 00		 movzx	 edx, WORD PTR [ebx+184]
  0007b	f7 d8		 neg	 eax
  0007d	1a c0		 sbb	 al, al
  0007f	24 03		 and	 al, 3
  00081	52		 push	 edx
  00082	8b cf		 mov	 ecx, edi
  00084	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _MSBFlag$[ebp], 0
  0008b	88 45 13	 mov	 BYTE PTR _MsgDamage$[ebp], al
  0008e	e8 00 00 00 00	 call	 ?GetAttackDamage@CWeapon@@QAEHH@Z ; CWeapon::GetAttackDamage

; 225  : 	int iTargetDefense = lpTargetObj->m_Defense;
; 226  : 	int iSkillMagumReduceDefense = gObjGetActiveEffect(lpObj, 23);

  00093	6a 17		 push	 23			; 00000017H
  00095	53		 push	 ebx
  00096	8b f8		 mov	 edi, eax
  00098	89 45 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], eax
  0009b	e8 00 00 00 00	 call	 ?gObjGetActiveEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetActiveEffect

; 227  : 
; 228  : 	iTargetDefense -= (iTargetDefense * iSkillMagumReduceDefense)/100;
; 229  : 
; 230  : 	BOOL bAllMiss = FALSE;
; 231  : 	
; 232  : 	if ( this->MissCheck(lpObj, lpTargetObj, iSkill, iSkillSuccess, bAllMiss) == FALSE )

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  000a3	83 c4 08	 add	 esp, 8
  000a6	8d 45 10	 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  000a9	50		 push	 eax
  000aa	6a 01		 push	 1
  000ac	51		 push	 ecx
  000ad	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	56		 push	 esi
  000b1	53		 push	 ebx
  000b2	e8 00 00 00 00	 call	 ?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ; CWeapon::MissCheck
  000b7	85 c0		 test	 eax, eax
  000b9	75 0b		 jne	 SHORT $LN35@Attack
$LN78@Attack:
  000bb	5b		 pop	 ebx
  000bc	5f		 pop	 edi

; 233  : 	{
; 234  : 		return FALSE;

  000bd	33 c0		 xor	 eax, eax
  000bf	5e		 pop	 esi

; 421  : }

  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 14 00	 ret	 20			; 00000014H
$LN35@Attack:

; 235  : 	}
; 236  : 
; 237  : 	if ( bAllMiss != FALSE )
; 238  : 	{
; 239  : 		iAttackDamage = (iAttackDamage * 30)/100;
; 240  : 	}
; 241  : 
; 242  : 	if ( lpTargetObj->DamageMinus != 0 )

  000c6	8a 86 70 01 00
	00		 mov	 al, BYTE PTR [esi+368]
  000cc	84 c0		 test	 al, al
  000ce	74 1c		 je	 SHORT $LN34@Attack

; 243  : 	{
; 244  : 		int lc11 = iAttackDamage;
; 245  : 		iAttackDamage -= (iAttackDamage * lpTargetObj->DamageMinus)/100;

  000d0	0f b6 c8	 movzx	 ecx, al
  000d3	0f af cf	 imul	 ecx, edi
  000d6	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  000db	f7 e9		 imul	 ecx
  000dd	c1 fa 05	 sar	 edx, 5
  000e0	8b c2		 mov	 eax, edx
  000e2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e5	03 c2		 add	 eax, edx
  000e7	03 f8		 add	 edi, eax
  000e9	89 7d 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], edi
$LN34@Attack:

; 246  : 	}
; 247  : 
; 248  : 	int iTargetLevel = lpObj->Level / 10;

  000ec	0f bf 8b be 00
	00 00		 movsx	 ecx, WORD PTR [ebx+190]
  000f3	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000f8	f7 e9		 imul	 ecx
  000fa	c1 fa 02	 sar	 edx, 2
  000fd	8b c2		 mov	 eax, edx
  000ff	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00102	03 c2		 add	 eax, edx

; 249  : 
; 250  : 	if ( iAttackDamage < iTargetLevel )

  00104	3b f8		 cmp	 edi, eax
  00106	7d 0f		 jge	 SHORT $LN47@Attack

; 251  : 	{
; 252  : 		if ( iTargetLevel < 1 )

  00108	83 f8 01	 cmp	 eax, 1
  0010b	7d 05		 jge	 SHORT $LN32@Attack

; 253  : 		{
; 254  : 			iTargetLevel = 1;

  0010d	b8 01 00 00 00	 mov	 eax, 1
$LN32@Attack:

; 255  : 		}
; 256  : 
; 257  : 		iAttackDamage = iTargetLevel;

  00112	8b f8		 mov	 edi, eax
  00114	89 7d 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], edi
$LN47@Attack:

; 258  : 	}
; 259  : 
; 260  : 	if ( lpTargetObj->m_SkillNumber == 18 )

  00117	66 83 be d8 03
	00 00 12	 cmp	 WORD PTR [esi+984], 18	; 00000012H
  0011f	75 0a		 jne	 SHORT $LN30@Attack

; 261  : 	{
; 262  : 		if ( iAttackDamage > 1 )

  00121	83 ff 01	 cmp	 edi, 1
  00124	7e 05		 jle	 SHORT $LN30@Attack

; 263  : 		{
; 264  : 			iAttackDamage = iAttackDamage >> 1;

  00126	d1 ff		 sar	 edi, 1
  00128	89 7d 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], edi
$LN30@Attack:

; 265  : 		}
; 266  : 	}
; 267  : 
; 268  : 	if ( gObjAngelSprite(lpTargetObj) == TRUE )

  0012b	56		 push	 esi
  0012c	e8 00 00 00 00	 call	 ?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAngelSprite
  00131	83 c4 04	 add	 esp, 4
  00134	83 f8 01	 cmp	 eax, 1
  00137	75 27		 jne	 SHORT $LN28@Attack

; 269  : 	{
; 270  : 		if ( iAttackDamage > 1 )

  00139	3b f8		 cmp	 edi, eax
  0013b	7e 23		 jle	 SHORT $LN28@Attack

; 271  : 		{
; 272  : 			float lc13 = (float)(iAttackDamage * 8 ) / 10.0f;

  0013d	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]

; 273  : 			iAttackDamage = (int)( lc13 );

  00144	89 4d 0c	 mov	 DWORD PTR tv620[ebp], ecx
  00147	db 45 0c	 fild	 DWORD PTR tv620[ebp]
  0014a	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4024000000000000
  00150	d9 5d 0c	 fstp	 DWORD PTR tv618[ebp]
  00153	d9 45 0c	 fld	 DWORD PTR tv618[ebp]
  00156	e8 00 00 00 00	 call	 __ftol2_sse
  0015b	8b f8		 mov	 edi, eax
  0015d	89 7d 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], edi
$LN28@Attack:

; 274  : 		}
; 275  : 	}
; 276  : 
; 277  : 	if ( gObjWingSprite(lpTargetObj) == TRUE )

  00160	56		 push	 esi
  00161	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  00166	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  0016c	83 c4 04	 add	 esp, 4
  0016f	83 f8 01	 cmp	 eax, 1
  00172	75 6f		 jne	 SHORT $LN59@Attack

; 278  : 	{
; 279  : 		CItem * Wing = &lpTargetObj->pInventory[7];

  00174	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]

; 280  : 
; 281  : 		if ( iAttackDamage > 1 )

  0017a	83 ff 01	 cmp	 edi, 1
  0017d	7e 64		 jle	 SHORT $LN59@Attack

; 282  : 		{
; 283  : 			if ( Wing->m_Type > ITEMGET(12,2) )

  0017f	ba 02 18 00 00	 mov	 edx, 6146		; 00001802H
  00184	66 39 90 d2 05
	00 00		 cmp	 WORD PTR [eax+1490], dx
  0018b	7e 2b		 jle	 SHORT $LN25@Attack

; 284  : 			{
; 285  : 				float lc15 = float((int)iAttackDamage *  (int)(75 - Wing->m_Level * 2) ) / 100.0f;
; 286  : 				iAttackDamage = (int )lc15;

  0018d	0f bf 80 d4 05
	00 00		 movsx	 eax, WORD PTR [eax+1492]
  00194	03 c0		 add	 eax, eax
  00196	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  0019b	2b c8		 sub	 ecx, eax
  0019d	0f af cf	 imul	 ecx, edi
  001a0	89 4d 0c	 mov	 DWORD PTR tv610[ebp], ecx
  001a3	da 7d 0c	 fidivr	 DWORD PTR tv610[ebp]
  001a6	d9 5d 0c	 fstp	 DWORD PTR tv608[ebp]
  001a9	d9 45 0c	 fld	 DWORD PTR tv608[ebp]
  001ac	e8 00 00 00 00	 call	 __ftol2_sse
  001b1	8b f8		 mov	 edi, eax
  001b3	89 7d 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], edi

; 287  : 			}
; 288  : 			else

  001b6	eb 2d		 jmp	 SHORT $LN24@Attack
$LN25@Attack:

; 289  : 			{
; 290  : 				float lc16 = float((int)iAttackDamage *  (int)(88 - Wing->m_Level * 2) ) / 100.0f;
; 291  : 				iAttackDamage = (int)lc16;

  001b8	0f bf 90 d4 05
	00 00		 movsx	 edx, WORD PTR [eax+1492]
  001bf	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  001c4	2b c2		 sub	 eax, edx
  001c6	0f af c7	 imul	 eax, edi
  001c9	03 c0		 add	 eax, eax
  001cb	89 45 0c	 mov	 DWORD PTR tv601[ebp], eax
  001ce	da 7d 0c	 fidivr	 DWORD PTR tv601[ebp]
  001d1	d9 5d 0c	 fstp	 DWORD PTR tv599[ebp]
  001d4	d9 45 0c	 fld	 DWORD PTR tv599[ebp]
  001d7	e8 00 00 00 00	 call	 __ftol2_sse
  001dc	8b f8		 mov	 edi, eax
  001de	89 7d 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], edi
  001e1	eb 02		 jmp	 SHORT $LN24@Attack
$LN59@Attack:

; 280  : 
; 281  : 		if ( iAttackDamage > 1 )

  001e3	dd d8		 fstp	 ST(0)
$LN24@Attack:

; 292  : 			}
; 293  : 		}
; 294  : 	}
; 295  : 
; 296  : 	if ( gObjDenorantSprite(lpTargetObj) != FALSE )

  001e5	56		 push	 esi
  001e6	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  001eb	83 c4 04	 add	 esp, 4
  001ee	85 c0		 test	 eax, eax
  001f0	0f 84 83 00 00
	00		 je	 $LN23@Attack

; 297  : 	{
; 298  : 		CItem * Dino = &lpTargetObj->pInventory[8];

  001f6	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  001fc	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H

; 299  : 
; 300  : 		int ReduceDamage = 90 - Dino->IsDinorantReduceAttackDamaege();

  00202	e8 00 00 00 00	 call	 ?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ ; CItem::IsDinorantReduceAttackDamaege

; 301  : 
; 302  : 		lpObj->Life -= 1.0f;

  00207	d9 83 fc 00 00
	00		 fld	 DWORD PTR [ebx+252]
  0020d	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00213	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00218	2b c8		 sub	 ecx, eax
  0021a	d9 5d 08	 fstp	 DWORD PTR tv550[ebp]
  0021d	d9 45 08	 fld	 DWORD PTR tv550[ebp]
  00220	d9 93 fc 00 00
	00		 fst	 DWORD PTR [ebx+252]

; 303  : 
; 304  : 		if ( lpObj->Life < 0.0f )

  00226	d9 ee		 fldz
  00228	d8 d1		 fcom	 ST(1)
  0022a	df e0		 fnstsw	 ax
  0022c	dd d9		 fstp	 ST(1)
  0022e	f6 c4 41	 test	 ah, 65			; 00000041H
  00231	75 08		 jne	 SHORT $LN65@Attack

; 305  : 		{
; 306  : 			lpObj->Life = 0;

  00233	d9 9b fc 00 00
	00		 fstp	 DWORD PTR [ebx+252]

; 307  : 		}
; 308  : 		else

  00239	eb 19		 jmp	 SHORT $LN21@Attack
$LN65@Attack:

; 309  : 		{
; 310  : 			iAttackDamage = (iAttackDamage * ReduceDamage)/100;

  0023b	0f af cf	 imul	 ecx, edi
  0023e	dd d8		 fstp	 ST(0)
  00240	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00245	f7 e9		 imul	 ecx
  00247	c1 fa 05	 sar	 edx, 5
  0024a	8b fa		 mov	 edi, edx
  0024c	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0024f	03 fa		 add	 edi, edx
  00251	89 7d 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], edi
$LN21@Attack:

; 311  : 		}
; 312  : 
; 313  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, (BYTE)-1, 0, lpObj->iShield);

  00254	8b 93 54 01 00
	00		 mov	 edx, DWORD PTR [ebx+340]
  0025a	d9 83 fc 00 00
	00		 fld	 DWORD PTR [ebx+252]
  00260	52		 push	 edx
  00261	6a 00		 push	 0
  00263	68 ff 00 00 00	 push	 255			; 000000ffH
  00268	e8 00 00 00 00	 call	 __ftol2_sse
  0026d	50		 push	 eax
  0026e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00276	83 c4 14	 add	 esp, 20			; 00000014H
$LN23@Attack:

; 314  : 	}
; 315  : 
; 316  : 	if ( gObjDarkHorse(lpTargetObj) != FALSE )

  00279	56		 push	 esi
  0027a	e8 00 00 00 00	 call	 ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDarkHorse
  0027f	83 c4 04	 add	 esp, 4
  00282	85 c0		 test	 eax, eax
  00284	0f 84 ac 00 00
	00		 je	 $LN20@Attack

; 317  : 	{
; 318  : 		CItem * DarkHorse = &lpTargetObj->pInventory[8];

  0028a	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]

; 319  : 
; 320  : 		int DHPercent = 100-(DarkHorse->m_PetItem_Level+30)/2;

  00290	8b 81 5c 07 00
	00		 mov	 eax, DWORD PTR [ecx+1884]
  00296	83 c0 1e	 add	 eax, 30			; 0000001eH
  00299	99		 cdq
  0029a	2b c2		 sub	 eax, edx
  0029c	d1 f8		 sar	 eax, 1
  0029e	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  002a3	2b d0		 sub	 edx, eax

; 321  : #ifdef _WINGS_DAMAGE_
; 322  : 		gWingsDamage.SetCharHorseAttack(lpTargetObj->m_Index, DarkHorse->m_Type, DarkHorse->m_PetItem_Level, DHPercent);

  002a5	8d 45 08	 lea	 eax, DWORD PTR _DHPercent$203201[ebp]
  002a8	50		 push	 eax
  002a9	89 55 08	 mov	 DWORD PTR _DHPercent$203201[ebp], edx
  002ac	8b 91 5c 07 00
	00		 mov	 edx, DWORD PTR [ecx+1884]
  002b2	0f bf 81 a6 06
	00 00		 movsx	 eax, WORD PTR [ecx+1702]
  002b9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002bb	52		 push	 edx
  002bc	50		 push	 eax
  002bd	51		 push	 ecx
  002be	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWingsDamage@@3VcWingsDamage@@A ; gWingsDamage
  002c3	e8 00 00 00 00	 call	 ?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z ; cWingsDamage::SetCharHorseAttack

; 323  : #endif
; 324  : 		lpTargetObj->Life -= 1.0f;

  002c8	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  002ce	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  002d4	d9 5d 14	 fstp	 DWORD PTR tv578[ebp]
  002d7	d9 45 14	 fld	 DWORD PTR tv578[ebp]
  002da	d9 96 fc 00 00
	00		 fst	 DWORD PTR [esi+252]

; 325  : 
; 326  : 		if ( lpTargetObj->Life < 0.0f )

  002e0	d9 ee		 fldz
  002e2	d8 d1		 fcom	 ST(1)
  002e4	df e0		 fnstsw	 ax
  002e6	dd d9		 fstp	 ST(1)
  002e8	f6 c4 41	 test	 ah, 65			; 00000041H
  002eb	75 08		 jne	 SHORT $LN68@Attack

; 327  : 		{
; 328  : 			lpTargetObj->Life = 0;

  002ed	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]

; 329  : 		}
; 330  : 		else

  002f3	eb 1c		 jmp	 SHORT $LN18@Attack
$LN68@Attack:

; 331  : 		{
; 332  : 			iAttackDamage = (iAttackDamage * DHPercent)/100;

  002f5	8b 4d 08	 mov	 ecx, DWORD PTR _DHPercent$203201[ebp]
  002f8	dd d8		 fstp	 ST(0)
  002fa	0f af cf	 imul	 ecx, edi
  002fd	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00302	f7 e9		 imul	 ecx
  00304	c1 fa 05	 sar	 edx, 5
  00307	8b fa		 mov	 edi, edx
  00309	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0030c	03 fa		 add	 edi, edx
  0030e	89 7d 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], edi
$LN18@Attack:

; 333  : 		}
; 334  : 
; 335  : 		GCReFillSend(lpTargetObj->m_Index, lpTargetObj->Life, (BYTE)-1, 0, lpTargetObj->iShield);

  00311	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  00317	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0031d	51		 push	 ecx
  0031e	6a 00		 push	 0
  00320	68 ff 00 00 00	 push	 255			; 000000ffH
  00325	e8 00 00 00 00	 call	 __ftol2_sse
  0032a	8b 16		 mov	 edx, DWORD PTR [esi]
  0032c	50		 push	 eax
  0032d	52		 push	 edx
  0032e	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend
  00333	83 c4 14	 add	 esp, 20			; 00000014H
$LN20@Attack:

; 336  : 	}
; 337  : 
; 338  : 	if ( lpTargetObj->Live != FALSE )

  00336	80 7e 6a 00	 cmp	 BYTE PTR [esi+106], 0
  0033a	0f 84 e0 00 00
	00		 je	 $LN50@Attack

; 339  : 	{
; 340  : 		if(gObjSearchActiveEffect(lpTargetObj, AT_WIZARD_DEFENSE) == 1 && iAttackDamage > 0)

  00340	6a 04		 push	 4
  00342	56		 push	 esi
  00343	e8 00 00 00 00	 call	 ?gObjSearchActiveEffect@@YAEPAUOBJECTSTRUCT@@H@Z ; gObjSearchActiveEffect
  00348	83 c4 08	 add	 esp, 8
  0034b	3c 01		 cmp	 al, 1
  0034d	0f 85 a1 00 00
	00		 jne	 $LN48@Attack
  00353	33 c0		 xor	 eax, eax
  00355	3b f8		 cmp	 edi, eax
  00357	0f 8e 97 00 00
	00		 jle	 $LN48@Attack

; 341  : 		{
; 342  : 			int iWizardSkillDefense = 0;

  0035d	89 45 14	 mov	 DWORD PTR _iWizardSkillDefense$203207[ebp], eax

; 343  : 			int iWizardSkillTime = 0;

  00360	89 45 08	 mov	 DWORD PTR _iWizardSkillTime$203208[ebp], eax

; 344  : 
; 345  : 			gObjUpdateAppliedBuffEffect(lpTargetObj, AT_WIZARD_DEFENSE, &iWizardSkillDefense, &iWizardSkillTime);

  00363	8d 45 08	 lea	 eax, DWORD PTR _iWizardSkillTime$203208[ebp]
  00366	50		 push	 eax
  00367	8d 4d 14	 lea	 ecx, DWORD PTR _iWizardSkillDefense$203207[ebp]
  0036a	51		 push	 ecx
  0036b	6a 04		 push	 4
  0036d	56		 push	 esi
  0036e	e8 00 00 00 00	 call	 ?gObjUpdateAppliedBuffEffect@@YAEPAUOBJECTSTRUCT@@HPAH1@Z ; gObjUpdateAppliedBuffEffect
  00373	83 c4 10	 add	 esp, 16			; 00000010H

; 346  : 
; 347  : 			int replacemana = 0;
; 348  : 
; 349  : 			if(iWizardSkillTime > 0)

  00376	83 7d 08 00	 cmp	 DWORD PTR _iWizardSkillTime$203208[ebp], 0
  0037a	7e 11		 jle	 SHORT $LN15@Attack

; 350  : 			{
; 351  : 				replacemana = lpTargetObj->Mana * iWizardSkillTime / 1000;

  0037c	db 45 08	 fild	 DWORD PTR _iWizardSkillTime$203208[ebp]
  0037f	d8 8e 10 01 00
	00		 fmul	 DWORD PTR [esi+272]
  00385	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@408f400000000000

; 352  : 			}
; 353  : 			else

  0038b	eb 0e		 jmp	 SHORT $LN77@Attack
$LN15@Attack:

; 354  : 			{
; 355  : 				replacemana = lpTargetObj->Mana * 2 / 100;

  0038d	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  00393	dc c0		 fadd	 ST(0), ST(0)
  00395	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
$LN77@Attack:
  0039b	e8 00 00 00 00	 call	 __ftol2_sse
  003a0	89 45 08	 mov	 DWORD PTR _replacemana$203209[ebp], eax

; 356  : 			}
; 357  : 
; 358  : 			if ( replacemana < lpTargetObj->Mana )

  003a3	db 45 08	 fild	 DWORD PTR _replacemana$203209[ebp]
  003a6	d9 5d 08	 fstp	 DWORD PTR tv605[ebp]
  003a9	d9 45 08	 fld	 DWORD PTR tv605[ebp]
  003ac	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  003b2	d8 d9		 fcomp	 ST(1)
  003b4	df e0		 fnstsw	 ax
  003b6	f6 c4 41	 test	 ah, 65			; 00000041H
  003b9	75 37		 jne	 SHORT $LN71@Attack

; 359  : 			{
; 360  : 				lpTargetObj->Mana -= replacemana;

  003bb	d8 ae 10 01 00
	00		 fsubr	 DWORD PTR [esi+272]

; 361  : 
; 362  : 				int decattackdamage = 0;
; 363  : 
; 364  : 				if(iWizardSkillDefense > 0)

  003c1	8b 4d 14	 mov	 ecx, DWORD PTR _iWizardSkillDefense$203207[ebp]
  003c4	33 c0		 xor	 eax, eax
  003c6	d9 9e 10 01 00
	00		 fstp	 DWORD PTR [esi+272]
  003cc	85 c9		 test	 ecx, ecx
  003ce	7e 14		 jle	 SHORT $LN12@Attack

; 365  : 				{
; 366  : 					decattackdamage = iAttackDamage * iWizardSkillDefense / 100;

  003d0	0f af cf	 imul	 ecx, edi
  003d3	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003d8	f7 e9		 imul	 ecx
  003da	c1 fa 05	 sar	 edx, 5
  003dd	8b c2		 mov	 eax, edx
  003df	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003e2	03 c2		 add	 eax, edx
$LN12@Attack:

; 367  : 				}
; 368  : 
; 369  : 				iAttackDamage -= decattackdamage;

  003e4	2b f8		 sub	 edi, eax
  003e6	89 7d 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], edi

; 370  : 				ManaChange = TRUE;

  003e9	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ManaChange$[ebp], 1
  003f0	eb 02		 jmp	 SHORT $LN48@Attack
$LN71@Attack:
  003f2	dd d8		 fstp	 ST(0)
$LN48@Attack:

; 371  : 			}
; 372  : 		}
; 373  : 
; 374  : 		lpTargetObj->Life -= iAttackDamage;

  003f4	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  003fa	da 65 0c	 fisub	 DWORD PTR _iAttackDamage$[ebp]
  003fd	d9 5d 0c	 fstp	 DWORD PTR tv617[ebp]
  00400	d9 45 0c	 fld	 DWORD PTR tv617[ebp]
  00403	d9 96 fc 00 00
	00		 fst	 DWORD PTR [esi+252]

; 375  : 
; 376  : 		if ( lpTargetObj->Life < 0.0f )

  00409	d9 ee		 fldz
  0040b	d8 d1		 fcom	 ST(1)
  0040d	df e0		 fnstsw	 ax
  0040f	dd d9		 fstp	 ST(1)
  00411	f6 c4 41	 test	 ah, 65			; 00000041H
  00414	75 08		 jne	 SHORT $LN74@Attack

; 377  : 		{
; 378  : 			lpTargetObj->Life = 0;

  00416	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  0041c	eb 02		 jmp	 SHORT $LN50@Attack
$LN74@Attack:
  0041e	dd d8		 fstp	 ST(0)
$LN50@Attack:

; 379  : 		}
; 380  : 	}
; 381  : 
; 382  : 	if ( iAttackDamage >= 1 )

  00420	83 ff 01	 cmp	 edi, 1
  00423	7c 11		 jl	 SHORT $LN9@Attack

; 383  : 	{
; 384  : 		if ( lpTargetObj->Type == OBJ_USER )

  00425	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0042a	75 0a		 jne	 SHORT $LN9@Attack

; 385  : 		{
; 386  : 			gObjArmorRandomDurDown(lpTargetObj, lpObj);

  0042c	53		 push	 ebx
  0042d	56		 push	 esi
  0042e	e8 00 00 00 00	 call	 ?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z ; gObjArmorRandomDurDown
  00433	83 c4 08	 add	 esp, 8
$LN9@Attack:

; 387  : 		}
; 388  : 	}
; 389  : 
; 390  : 	if ( iAttackDamage >= 5 )

  00436	83 ff 05	 cmp	 edi, 5
  00439	7c 52		 jl	 SHORT $LN51@Attack

; 391  : 	{
; 392  : 		if ( lpTargetObj->Type == OBJ_MONSTER )

  0043b	66 83 7e 68 02	 cmp	 WORD PTR [esi+104], 2
  00440	75 24		 jne	 SHORT $LN7@Attack

; 393  : 		{
; 394  : 			if ( (rand()%26) == 0 )

  00442	e8 00 00 00 00	 call	 _rand
  00447	99		 cdq
  00448	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0044d	f7 f9		 idiv	 ecx
  0044f	85 d2		 test	 edx, edx
  00451	75 3a		 jne	 SHORT $LN51@Attack

; 395  : 			{
; 396  : 				gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  00453	52		 push	 edx
  00454	8b 13		 mov	 edx, DWORD PTR [ebx]
  00456	6a 64		 push	 100			; 00000064H
  00458	52		 push	 edx
  00459	6a 04		 push	 4
  0045b	56		 push	 esi
  0045c	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  00461	83 c4 14	 add	 esp, 20			; 00000014H

; 397  : 			}
; 398  : 		}

  00464	eb 27		 jmp	 SHORT $LN51@Attack
$LN7@Attack:

; 399  : 		else if ( (rand()%4) == 0 )

  00466	e8 00 00 00 00	 call	 _rand
  0046b	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00470	79 05		 jns	 SHORT $LN76@Attack
  00472	48		 dec	 eax
  00473	83 c8 fc	 or	 eax, -4			; fffffffcH
  00476	40		 inc	 eax
$LN76@Attack:
  00477	75 14		 jne	 SHORT $LN51@Attack

; 400  : 		{
; 401  : 			if ( gObjUniriaSprite(lpTargetObj) == FALSE )

  00479	56		 push	 esi
  0047a	e8 00 00 00 00	 call	 ?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjUniriaSprite
  0047f	83 c4 04	 add	 esp, 4
  00482	85 c0		 test	 eax, eax
  00484	75 07		 jne	 SHORT $LN51@Attack

; 402  : 			{
; 403  : 				MSBFlag = TRUE;

  00486	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _MSBFlag$[ebp], 1
$LN51@Attack:

; 404  : 			}
; 405  : 		}
; 406  : 	}
; 407  : 
; 408  : 	if ( ManaChange != FALSE )

  0048d	83 7d f8 00	 cmp	 DWORD PTR _ManaChange$[ebp], 0
  00491	74 25		 je	 SHORT $LN2@Attack

; 409  : 	{
; 410  : 		GCManaSend(lpTargetObj->m_Index, lpTargetObj->Mana, (BYTE)-1, 0, lpTargetObj->BP);

  00493	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  00499	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  0049f	50		 push	 eax
  004a0	6a 00		 push	 0
  004a2	68 ff 00 00 00	 push	 255			; 000000ffH
  004a7	e8 00 00 00 00	 call	 __ftol2_sse
  004ac	8b 0e		 mov	 ecx, DWORD PTR [esi]
  004ae	50		 push	 eax
  004af	51		 push	 ecx
  004b0	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  004b5	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@Attack:

; 411  : 	}
; 412  : 
; 413  : 	lpObj->m_Rest = 0;

  004b8	c6 83 25 02 00
	00 00		 mov	 BYTE PTR [ebx+549], 0

; 414  : 
; 415  : 	if ( iAttackDamage > 0 )

  004bf	85 ff		 test	 edi, edi
  004c1	7e 1c		 jle	 SHORT $LN1@Attack

; 416  : 	{
; 417  : 		gObjLifeCheck(lpTargetObj, lpObj, iAttackDamage, 0, MSBFlag, MsgDamage, iSkill, 0);

  004c3	8b 55 fc	 mov	 edx, DWORD PTR _iSkill$[ebp]
  004c6	0f b6 45 13	 movzx	 eax, BYTE PTR _MsgDamage$[ebp]
  004ca	8b 4d f4	 mov	 ecx, DWORD PTR _MSBFlag$[ebp]
  004cd	6a 00		 push	 0
  004cf	52		 push	 edx
  004d0	50		 push	 eax
  004d1	51		 push	 ecx
  004d2	6a 00		 push	 0
  004d4	57		 push	 edi
  004d5	53		 push	 ebx
  004d6	56		 push	 esi
  004d7	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  004dc	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@Attack:

; 418  : 	}
; 419  : 
; 420  : 	return TRUE;

  004df	5b		 pop	 ebx
  004e0	5f		 pop	 edi
  004e1	b8 01 00 00 00	 mov	 eax, 1
  004e6	5e		 pop	 esi

; 421  : }

  004e7	8b e5		 mov	 esp, ebp
  004e9	5d		 pop	 ebp
  004ea	c2 14 00	 ret	 20			; 00000014H
?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ENDP ; CWeapon::Attack
_TEXT	ENDS
PUBLIC	?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z	; CWeapon::AddWeaponDamagedTargetInfo
; Function compile flags: /Ogtp
;	COMDAT ?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z
_TEXT	SEGMENT
_iWeaponIndex$ = 8					; size = 4
_iTargetIndex$ = 12					; size = 4
_iDelayTime$ = 16					; size = 4
?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z PROC	; CWeapon::AddWeaponDamagedTargetInfo, COMDAT
; _this$ = ecx

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 427  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00003	33 c0		 xor	 eax, eax
  00005	8d 51 10	 lea	 edx, DWORD PTR [ecx+16]
$LL4@AddWeaponD:

; 428  : 	{
; 429  : 		if ( this->m_WeaponDamagedTargetInfo[i].m_IsUsed == FALSE )

  00008	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000b	74 0f		 je	 SHORT $LN8@AddWeaponD

; 427  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  0000d	40		 inc	 eax
  0000e	83 c2 10	 add	 edx, 16			; 00000010H
  00011	83 f8 64	 cmp	 eax, 100		; 00000064H
  00014	7c f2		 jl	 SHORT $LL4@AddWeaponD

; 437  : 		}
; 438  : 	}
; 439  : 
; 440  : 	return FALSE;

  00016	33 c0		 xor	 eax, eax

; 441  : }

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
$LN8@AddWeaponD:

; 430  : 		{
; 431  : 			this->m_WeaponDamagedTargetInfo[i].m_iWeaponObjIndex = iWeaponIndex;

  0001c	03 c0		 add	 eax, eax
  0001e	56		 push	 esi
  0001f	8d 34 c1	 lea	 esi, DWORD PTR [ecx+eax*8]
  00022	8b 45 08	 mov	 eax, DWORD PTR _iWeaponIndex$[ebp]

; 432  : 			this->m_WeaponDamagedTargetInfo[i].m_iTargetObjIndex = iTargetIndex;

  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _iTargetIndex$[ebp]
  00028	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 433  : 			this->m_WeaponDamagedTargetInfo[i].m_iDamageDealingTime = GetTickCount() + iDelayTime;

  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00034	03 45 10	 add	 eax, DWORD PTR _iDelayTime$[ebp]

; 434  : 			this->m_WeaponDamagedTargetInfo[i].m_IsUsed = TRUE;

  00037	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1
  0003e	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 435  : 
; 436  : 			return TRUE;

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	5e		 pop	 esi

; 441  : }

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z ENDP	; CWeapon::AddWeaponDamagedTargetInfo
_TEXT	ENDS
PUBLIC	?WeaponAttackProc@CWeapon@@QAEXXZ		; CWeapon::WeaponAttackProc
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?WeaponAttackProc@CWeapon@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv638 = -4						; size = 4
?WeaponAttackProc@CWeapon@@QAEXXZ PROC			; CWeapon::WeaponAttackProc, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 447  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  0000c	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
  0000f	c7 45 fc 64 00
	00 00		 mov	 DWORD PTR tv638[ebp], 100 ; 00000064H
$LL7@WeaponAtta:

; 448  : 	{
; 449  : 		if ( this->m_WeaponDamagedTargetInfo[i].m_IsUsed == TRUE )

  00016	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  0001a	75 6e		 jne	 SHORT $LN6@WeaponAtta

; 450  : 		{
; 451  : 			if ( this->m_WeaponDamagedTargetInfo[i].m_iDamageDealingTime > GetTickCount() )

  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00022	39 06		 cmp	 DWORD PTR [esi], eax
  00024	77 64		 ja	 SHORT $LN6@WeaponAtta

; 452  : 			{
; 453  : 				continue;
; 454  : 			}
; 455  : 
; 456  : 			LPOBJ lpTargetObj = &gObj[this->m_WeaponDamagedTargetInfo[i].m_iTargetObjIndex];

  00026	8b 5e fc	 mov	 ebx, DWORD PTR [esi-4]

; 457  : 			LPOBJ lpWeaponObj = & gObj[this->m_WeaponDamagedTargetInfo[i].m_iWeaponObjIndex];

  00029	8b 7e f8	 mov	 edi, DWORD PTR [esi-8]
  0002c	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00037	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0003d	03 d8		 add	 ebx, eax

; 458  : 
; 459  : 			if ( gObjIsConnected(lpTargetObj) == FALSE )

  0003f	53		 push	 ebx
  00040	03 f8		 add	 edi, eax
  00042	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00047	83 c4 04	 add	 esp, 4
  0004a	85 c0		 test	 eax, eax

; 460  : 			{
; 461  : 				this->m_WeaponDamagedTargetInfo[i].RESET();
; 462  : 				continue;

  0004c	74 26		 je	 SHORT $LN21@WeaponAtta

; 463  : 			}
; 464  : 
; 465  : 			if (  OBJMAX_RANGE(lpWeaponObj->m_Index) == FALSE )

  0004e	8b 07		 mov	 eax, DWORD PTR [edi]
  00050	85 c0		 test	 eax, eax
  00052	78 20		 js	 SHORT $LN21@WeaponAtta
  00054	33 c9		 xor	 ecx, ecx
  00056	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0005b	0f 9e c1	 setle	 cl
  0005e	8b c1		 mov	 eax, ecx
  00060	85 c0		 test	 eax, eax

; 466  : 			{
; 467  : 				this->m_WeaponDamagedTargetInfo[i].RESET();
; 468  : 				continue;

  00062	74 10		 je	 SHORT $LN21@WeaponAtta

; 469  : 			}
; 470  : 
; 471  : 			this->Attack(lpWeaponObj, lpTargetObj, NULL, FALSE, 0);

  00064	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	6a 00		 push	 0
  00069	6a 00		 push	 0
  0006b	6a 00		 push	 0
  0006d	53		 push	 ebx
  0006e	57		 push	 edi
  0006f	e8 00 00 00 00	 call	 ?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ; CWeapon::Attack
$LN21@WeaponAtta:

; 472  : 
; 473  : 			this->m_WeaponDamagedTargetInfo[i].RESET();

  00074	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0007b	83 c8 ff	 or	 eax, -1
  0007e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00084	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  00087	89 46 f8	 mov	 DWORD PTR [esi-8], eax
$LN6@WeaponAtta:

; 447  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  0008a	83 c6 10	 add	 esi, 16			; 00000010H
  0008d	ff 4d fc	 dec	 DWORD PTR tv638[ebp]
  00090	75 84		 jne	 SHORT $LL7@WeaponAtta
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 474  : 		}
; 475  : 	}
; 476  : 
; 477  : }

  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
?WeaponAttackProc@CWeapon@@QAEXXZ ENDP			; CWeapon::WeaponAttackProc
_TEXT	ENDS
PUBLIC	?WeaponAct@CWeapon@@QAEXH@Z			; CWeapon::WeaponAct
; Function compile flags: /Ogtp
;	COMDAT ?WeaponAct@CWeapon@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?WeaponAct@CWeapon@@QAEXH@Z PROC			; CWeapon::WeaponAct, COMDAT
; _this$ = ecx

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 483  : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00006	8d b1 4c 06 00
	00		 lea	 esi, DWORD PTR [ecx+1612]
  0000c	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
  00011	83 cb ff	 or	 ebx, -1
$LL6@WeaponAct:

; 484  : 	{
; 485  : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == TRUE )

  00014	83 7e 08 01	 cmp	 DWORD PTR [esi+8], 1
  00018	75 25		 jne	 SHORT $LN5@WeaponAct

; 486  : 		{
; 487  : 			if ( this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex == iIndex )

  0001a	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0001d	39 46 f8	 cmp	 DWORD PTR [esi-8], eax
  00020	75 1d		 jne	 SHORT $LN5@WeaponAct

; 488  : 			{
; 489  : 				if ( this->m_WeaponCalDamageInfo[i].m_iLimitTime < GetTickCount() )

  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00028	39 46 04	 cmp	 DWORD PTR [esi+4], eax
  0002b	73 12		 jae	 SHORT $LN5@WeaponAct

; 490  : 				{
; 491  : 					this->m_WeaponCalDamageInfo[i].RESET();

  0002d	89 5e f8	 mov	 DWORD PTR [esi-8], ebx
  00030	89 5e fc	 mov	 DWORD PTR [esi-4], ebx
  00033	89 1e		 mov	 DWORD PTR [esi], ebx
  00035	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00038	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@WeaponAct:

; 483  : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  0003f	83 c6 14	 add	 esi, 20			; 00000014H
  00042	4f		 dec	 edi
  00043	75 cf		 jne	 SHORT $LL6@WeaponAct
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx

; 492  : 				}
; 493  : 			}
; 494  : 		}
; 495  : 	}
; 496  : }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?WeaponAct@CWeapon@@QAEXH@Z ENDP			; CWeapon::WeaponAct
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCWeapon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWeapon@@UAEPAXI@Z PROC				; CWeapon::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWeapon@@UAE@XZ	; CWeapon::~CWeapon
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCWeapon@@UAEPAXI@Z ENDP				; CWeapon::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CsNPC_Weapon@@YAXXZ
text$yc	SEGMENT
??__Eg_CsNPC_Weapon@@YAXXZ PROC				; `dynamic initializer for 'g_CsNPC_Weapon'', COMDAT

; 11   : CWeapon g_CsNPC_Weapon;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Weapon@@3VCWeapon@@A ; g_CsNPC_Weapon
  00005	e8 00 00 00 00	 call	 ??0CWeapon@@QAE@XZ	; CWeapon::CWeapon
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_Weapon@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_Weapon''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CsNPC_Weapon@@YAXXZ ENDP				; `dynamic initializer for 'g_CsNPC_Weapon''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CsNPC_Weapon@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_Weapon@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CsNPC_Weapon'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Weapon@@3VCWeapon@@A ; g_CsNPC_Weapon
  00005	e9 00 00 00 00	 jmp	 ??1CWeapon@@UAE@XZ	; CWeapon::~CWeapon
??__Fg_CsNPC_Weapon@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CsNPC_Weapon''
text$yd	ENDS
PUBLIC	?g_CsNPC_Weapon@@3VCWeapon@@A			; g_CsNPC_Weapon
_BSS	SEGMENT
?g_CsNPC_Weapon@@3VCWeapon@@A DB 0a2cH DUP (?)		; g_CsNPC_Weapon
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CsNPC_Weapon$initializer$ DD FLAT:??__Eg_CsNPC_Weapon@@YAXXZ
CRT$XCU	ENDS
END
