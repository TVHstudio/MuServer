; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\WinQuestSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??0cWinQuestSystem@@QAE@XZ			; cWinQuestSystem::cWinQuestSystem
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\winquestsystem.cpp
;	COMDAT ??0cWinQuestSystem@@QAE@XZ
_TEXT	SEGMENT
??0cWinQuestSystem@@QAE@XZ PROC				; cWinQuestSystem::cWinQuestSystem, COMDAT
; _this$ = ecx

; 26   : {

  00000	56		 push	 esi

; 27   : 	this->Enable = true;
; 28   : 	ZeroMemory(this->Data, sizeof(this->Data));

  00001	68 40 d3 5f 00	 push	 6280000			; 005fd340H
  00006	8b f1		 mov	 esi, ecx
  00008	6a 00		 push	 0
  0000a	56		 push	 esi
  0000b	c6 86 a8 f0 89
	00 01		 mov	 BYTE PTR [esi+9040040], 1
  00012	e8 00 00 00 00	 call	 _memset

; 29   : 	ZeroMemory(this->Count, sizeof(this->Count));

  00017	33 c0		 xor	 eax, eax
  00019	89 86 80 f0 89
	00		 mov	 DWORD PTR [esi+9040000], eax
  0001f	89 86 84 f0 89
	00		 mov	 DWORD PTR [esi+9040004], eax
  00025	89 86 88 f0 89
	00		 mov	 DWORD PTR [esi+9040008], eax
  0002b	89 86 8c f0 89
	00		 mov	 DWORD PTR [esi+9040012], eax
  00031	89 86 90 f0 89
	00		 mov	 DWORD PTR [esi+9040016], eax
  00037	89 86 94 f0 89
	00		 mov	 DWORD PTR [esi+9040020], eax
  0003d	89 86 98 f0 89
	00		 mov	 DWORD PTR [esi+9040024], eax
  00043	89 86 9c f0 89
	00		 mov	 DWORD PTR [esi+9040028], eax
  00049	89 86 a0 f0 89
	00		 mov	 DWORD PTR [esi+9040032], eax
  0004f	89 86 a4 f0 89
	00		 mov	 DWORD PTR [esi+9040036], eax
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 30   : }

  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	c3		 ret	 0
??0cWinQuestSystem@@QAE@XZ ENDP				; cWinQuestSystem::cWinQuestSystem
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@cWinQuestSystem@@QAEXHPAD@Z		; cWinQuestSystem::Load
EXTRN	_fclose:PROC
EXTRN	_strncpy:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@cWinQuestSystem@@QAEXHPAD@Z
_TEXT	SEGMENT
_iQuest$ = 8						; size = 4
_k$210749 = 12						; size = 4
_k$210745 = 12						; size = 4
_k$210741 = 12						; size = 4
_Dir$ = 12						; size = 4
?Load@cWinQuestSystem@@QAEXHPAD@Z PROC			; cWinQuestSystem::Load, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 60   : 	SMDFile = fopen(Dir, "r");

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _Dir$[ebp]
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000d	57		 push	 edi
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 _fopen
  00015	83 c4 08	 add	 esp, 8
  00018	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 61   : 
; 62   : 	if ( SMDFile == NULL )

  0001d	85 c0		 test	 eax, eax
  0001f	75 16		 jne	 SHORT $LN18@Load

; 63   : 	{
; 64   : 		MsgBox(Dir);

  00021	57		 push	 edi
  00022	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 154  : 
; 155  : 	}
; 156  :     
; 157  : 	fclose(SMDFile);

  00027	83 c4 04	 add	 esp, 4
  0002a	5f		 pop	 edi
  0002b	c6 86 a8 f0 89
	00 00		 mov	 BYTE PTR [esi+9040040], 0
  00032	5e		 pop	 esi

; 158  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN18@Load:

; 65   : 		this->Enable = 0;
; 66   : 		return;
; 67   : 	}
; 68   : 
; 69   : 	int Token;
; 70   : 
; 71   : 	while ( true )
; 72   : 	{
; 73   : 	    Token = GetToken();

  00037	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 74   : 
; 75   :         if( Token == END)

  0003c	83 f8 02	 cmp	 eax, 2
  0003f	0f 84 cb 03 00
	00		 je	 $LN22@Load
  00045	53		 push	 ebx
  00046	8b 5d 08	 mov	 ebx, DWORD PTR _iQuest$[ebp]
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL13@Load:

; 76   : 		{
; 77   :             break;
; 78   : 		}
; 79   : 
; 80   : 		if ( strcmp("end", TokenString ) == 0)

  00050	bf 00 00 00 00	 mov	 edi, OFFSET _TokenString
  00055	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL28@Load:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	3a 0f		 cmp	 cl, BYTE PTR [edi]
  00064	75 1a		 jne	 SHORT $LN29@Load
  00066	84 c9		 test	 cl, cl
  00068	74 12		 je	 SHORT $LN30@Load
  0006a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0006d	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  00070	75 0e		 jne	 SHORT $LN29@Load
  00072	83 c0 02	 add	 eax, 2
  00075	83 c7 02	 add	 edi, 2
  00078	84 c9		 test	 cl, cl
  0007a	75 e4		 jne	 SHORT $LL28@Load
$LN30@Load:
  0007c	33 c0		 xor	 eax, eax
  0007e	eb 05		 jmp	 SHORT $LN31@Load
$LN29@Load:
  00080	1b c0		 sbb	 eax, eax
  00082	83 d8 ff	 sbb	 eax, -1
$LN31@Load:
  00085	85 c0		 test	 eax, eax
  00087	0f 84 82 03 00
	00		 je	 $LN33@Load

; 81   : 		{
; 82   : 			break;
; 83   : 		}
; 84   : 
; 85   : 		strncpy(this->Data[iQuest][this->Count[iQuest]].Name,TokenString,50);

  0008d	8b 84 9e 80 f0
	89 00		 mov	 eax, DWORD PTR [esi+ebx*4+9040000]
  00094	8b fb		 mov	 edi, ebx
  00096	69 ff e8 03 00
	00		 imul	 edi, 1000		; 000003e8H
  0009c	03 c7		 add	 eax, edi
  0009e	69 c0 74 02 00
	00		 imul	 eax, 628		; 00000274H
  000a4	6a 32		 push	 50			; 00000032H
  000a6	8d 4c 30 08	 lea	 ecx, DWORD PTR [eax+esi+8]
  000aa	68 00 00 00 00	 push	 OFFSET _TokenString
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 _strncpy
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 86   : 
; 87   : 		for (int k=0;k<5;k++)

  000b8	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _k$210741[ebp], 0
  000bf	90		 npad	 1
$LL9@Load:

; 88   : 		{
; 89   : 			Token=GetToken();

  000c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 			this->Data[iQuest][this->Count[iQuest]].MissionType[k] = TokenNumber;

  000c5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000cb	e8 00 00 00 00	 call	 __ftol2_sse
  000d0	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  000d7	03 d7		 add	 edx, edi
  000d9	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  000df	03 55 0c	 add	 edx, DWORD PTR _k$210741[ebp]
  000e2	89 44 96 3c	 mov	 DWORD PTR [esi+edx*4+60], eax

; 91   : 
; 92   : 			Token=GetToken();

  000e6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 93   : 			this->Data[iQuest][this->Count[iQuest]].MissionMain[k] = TokenNumber;

  000eb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000f1	e8 00 00 00 00	 call	 __ftol2_sse
  000f6	8b 8c 9e 80 f0
	89 00		 mov	 ecx, DWORD PTR [esi+ebx*4+9040000]
  000fd	03 cf		 add	 ecx, edi
  000ff	69 c9 9d 00 00
	00		 imul	 ecx, 157		; 0000009dH
  00105	03 4d 0c	 add	 ecx, DWORD PTR _k$210741[ebp]
  00108	89 44 8e 50	 mov	 DWORD PTR [esi+ecx*4+80], eax

; 94   : 
; 95   : 			Token=GetToken();

  0010c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 96   : 			this->Data[iQuest][this->Count[iQuest]].MissionLvL[k] = TokenNumber;

  00111	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00117	e8 00 00 00 00	 call	 __ftol2_sse
  0011c	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  00123	03 d7		 add	 edx, edi
  00125	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  0012b	03 55 0c	 add	 edx, DWORD PTR _k$210741[ebp]
  0012e	89 44 96 64	 mov	 DWORD PTR [esi+edx*4+100], eax

; 97   : 
; 98   : 			Token=GetToken();

  00132	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 99   : 			this->Data[iQuest][this->Count[iQuest]].MissionLuck[k] = TokenNumber;

  00137	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0013d	e8 00 00 00 00	 call	 __ftol2_sse
  00142	8b 8c 9e 80 f0
	89 00		 mov	 ecx, DWORD PTR [esi+ebx*4+9040000]
  00149	03 cf		 add	 ecx, edi
  0014b	69 c9 9d 00 00
	00		 imul	 ecx, 157		; 0000009dH
  00151	03 4d 0c	 add	 ecx, DWORD PTR _k$210741[ebp]
  00154	89 44 8e 78	 mov	 DWORD PTR [esi+ecx*4+120], eax

; 100  : 
; 101  : 			Token=GetToken();

  00158	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 102  : 			this->Data[iQuest][this->Count[iQuest]].MissionExl[k] = TokenNumber;

  0015d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00163	e8 00 00 00 00	 call	 __ftol2_sse
  00168	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  0016f	03 d7		 add	 edx, edi
  00171	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  00177	03 55 0c	 add	 edx, DWORD PTR _k$210741[ebp]
  0017a	89 84 96 8c 00
	00 00		 mov	 DWORD PTR [esi+edx*4+140], eax

; 103  : 
; 104  : 			Token=GetToken();

  00181	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 105  : 			this->Data[iQuest][this->Count[iQuest]].MissionAnc[k] = TokenNumber;

  00186	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018c	e8 00 00 00 00	 call	 __ftol2_sse
  00191	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  00198	8b 4d 0c	 mov	 ecx, DWORD PTR _k$210741[ebp]
  0019b	03 d7		 add	 edx, edi
  0019d	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  001a3	03 d1		 add	 edx, ecx
  001a5	41		 inc	 ecx
  001a6	89 84 96 a0 00
	00 00		 mov	 DWORD PTR [esi+edx*4+160], eax
  001ad	89 4d 0c	 mov	 DWORD PTR _k$210741[ebp], ecx
  001b0	83 f9 05	 cmp	 ecx, 5
  001b3	0f 8c 07 ff ff
	ff		 jl	 $LL9@Load

; 106  : 		}
; 107  : 
; 108  : 		for (int k=0;k<5;k++)

  001b9	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _k$210745[ebp], 0
$LL6@Load:

; 109  : 		{
; 110  : 			Token=GetToken();

  001c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 111  : 			this->Data[iQuest][this->Count[iQuest]].RewardType[k] = TokenNumber;

  001c5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001cb	e8 00 00 00 00	 call	 __ftol2_sse
  001d0	8b 8c 9e 80 f0
	89 00		 mov	 ecx, DWORD PTR [esi+ebx*4+9040000]
  001d7	03 cf		 add	 ecx, edi
  001d9	69 c9 9d 00 00
	00		 imul	 ecx, 157		; 0000009dH
  001df	03 4d 0c	 add	 ecx, DWORD PTR _k$210745[ebp]
  001e2	89 84 8e b4 00
	00 00		 mov	 DWORD PTR [esi+ecx*4+180], eax

; 112  : 
; 113  : 			Token=GetToken();

  001e9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 			this->Data[iQuest][this->Count[iQuest]].RewardMain[k] = TokenNumber;

  001ee	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001f4	e8 00 00 00 00	 call	 __ftol2_sse
  001f9	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  00200	03 d7		 add	 edx, edi
  00202	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  00208	03 55 0c	 add	 edx, DWORD PTR _k$210745[ebp]
  0020b	89 84 96 c8 00
	00 00		 mov	 DWORD PTR [esi+edx*4+200], eax

; 115  : 
; 116  : 			Token=GetToken();

  00212	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 			this->Data[iQuest][this->Count[iQuest]].RewardLvL[k] = TokenNumber;

  00217	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0021d	e8 00 00 00 00	 call	 __ftol2_sse
  00222	8b 8c 9e 80 f0
	89 00		 mov	 ecx, DWORD PTR [esi+ebx*4+9040000]
  00229	03 cf		 add	 ecx, edi
  0022b	69 c9 9d 00 00
	00		 imul	 ecx, 157		; 0000009dH
  00231	03 4d 0c	 add	 ecx, DWORD PTR _k$210745[ebp]
  00234	89 84 8e dc 00
	00 00		 mov	 DWORD PTR [esi+ecx*4+220], eax

; 118  : 
; 119  : 			Token=GetToken();

  0023b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 120  : 			this->Data[iQuest][this->Count[iQuest]].RewardLuck[k] = TokenNumber;

  00240	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00246	e8 00 00 00 00	 call	 __ftol2_sse
  0024b	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  00252	03 d7		 add	 edx, edi
  00254	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  0025a	03 55 0c	 add	 edx, DWORD PTR _k$210745[ebp]
  0025d	89 84 96 f0 00
	00 00		 mov	 DWORD PTR [esi+edx*4+240], eax

; 121  : 
; 122  : 			Token=GetToken();

  00264	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 			this->Data[iQuest][this->Count[iQuest]].RewardExl[k] = TokenNumber;

  00269	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026f	e8 00 00 00 00	 call	 __ftol2_sse
  00274	8b 8c 9e 80 f0
	89 00		 mov	 ecx, DWORD PTR [esi+ebx*4+9040000]
  0027b	03 cf		 add	 ecx, edi
  0027d	69 c9 9d 00 00
	00		 imul	 ecx, 157		; 0000009dH
  00283	03 4d 0c	 add	 ecx, DWORD PTR _k$210745[ebp]
  00286	89 84 8e 04 01
	00 00		 mov	 DWORD PTR [esi+ecx*4+260], eax

; 124  : 
; 125  : 			Token=GetToken();

  0028d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 126  : 			this->Data[iQuest][this->Count[iQuest]].RewardAnc[k] = TokenNumber;

  00292	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00298	e8 00 00 00 00	 call	 __ftol2_sse
  0029d	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  002a4	8b 4d 0c	 mov	 ecx, DWORD PTR _k$210745[ebp]
  002a7	03 d7		 add	 edx, edi
  002a9	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  002af	03 d1		 add	 edx, ecx
  002b1	41		 inc	 ecx
  002b2	89 84 96 18 01
	00 00		 mov	 DWORD PTR [esi+edx*4+280], eax
  002b9	89 4d 0c	 mov	 DWORD PTR _k$210745[ebp], ecx
  002bc	83 f9 05	 cmp	 ecx, 5
  002bf	0f 8c fb fe ff
	ff		 jl	 $LL6@Load

; 127  : 		}
; 128  : 
; 129  : 		for (int k=0;k<5;k++)

  002c5	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _k$210749[ebp], 0
  002cc	8d 64 24 00	 npad	 4
$LL3@Load:

; 130  : 		{
; 131  : 			Token=GetToken();

  002d0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 132  : 			this->Data[iQuest][this->Count[iQuest]].PriceType[k] = TokenNumber;

  002d5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002db	e8 00 00 00 00	 call	 __ftol2_sse
  002e0	8b 8c 9e 80 f0
	89 00		 mov	 ecx, DWORD PTR [esi+ebx*4+9040000]
  002e7	03 cf		 add	 ecx, edi
  002e9	69 c9 9d 00 00
	00		 imul	 ecx, 157		; 0000009dH
  002ef	03 4d 0c	 add	 ecx, DWORD PTR _k$210749[ebp]
  002f2	89 84 8e 2c 01
	00 00		 mov	 DWORD PTR [esi+ecx*4+300], eax

; 133  : 
; 134  : 			Token=GetToken();

  002f9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 135  : 			this->Data[iQuest][this->Count[iQuest]].PriceMain[k] = TokenNumber;

  002fe	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00304	e8 00 00 00 00	 call	 __ftol2_sse
  00309	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  00310	03 d7		 add	 edx, edi
  00312	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  00318	03 55 0c	 add	 edx, DWORD PTR _k$210749[ebp]
  0031b	89 84 96 40 01
	00 00		 mov	 DWORD PTR [esi+edx*4+320], eax

; 136  : 
; 137  : 			Token=GetToken();

  00322	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 138  : 			this->Data[iQuest][this->Count[iQuest]].PriceLvL[k] = TokenNumber;

  00327	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0032d	e8 00 00 00 00	 call	 __ftol2_sse
  00332	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  00339	8b 4d 0c	 mov	 ecx, DWORD PTR _k$210749[ebp]
  0033c	03 d7		 add	 edx, edi
  0033e	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  00344	03 d1		 add	 edx, ecx
  00346	41		 inc	 ecx
  00347	89 84 96 54 01
	00 00		 mov	 DWORD PTR [esi+edx*4+340], eax
  0034e	89 4d 0c	 mov	 DWORD PTR _k$210749[ebp], ecx
  00351	83 f9 05	 cmp	 ecx, 5
  00354	0f 8c 76 ff ff
	ff		 jl	 $LL3@Load

; 139  : 		}
; 140  : 
; 141  : 		Token=GetToken();

  0035a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 142  : 		this->Data[iQuest][this->Count[iQuest]].NeedLevel = TokenNumber;

  0035f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00365	e8 00 00 00 00	 call	 __ftol2_sse
  0036a	8b 8c 9e 80 f0
	89 00		 mov	 ecx, DWORD PTR [esi+ebx*4+9040000]
  00371	03 cf		 add	 ecx, edi
  00373	69 c9 74 02 00
	00		 imul	 ecx, 628		; 00000274H
  00379	89 84 31 68 01
	00 00		 mov	 DWORD PTR [ecx+esi+360], eax

; 143  : 
; 144  : 		Token=GetToken();

  00380	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 145  : 		this->Data[iQuest][this->Count[iQuest]].NeedReset = TokenNumber;

  00385	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0038b	e8 00 00 00 00	 call	 __ftol2_sse
  00390	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  00397	03 d7		 add	 edx, edi
  00399	69 d2 74 02 00
	00		 imul	 edx, 628		; 00000274H
  0039f	89 84 32 6c 01
	00 00		 mov	 DWORD PTR [edx+esi+364], eax

; 146  : 
; 147  : 		Token=GetToken();

  003a6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 148  : 		this->Data[iQuest][this->Count[iQuest]].NeedGrand = TokenNumber;

  003ab	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003b1	e8 00 00 00 00	 call	 __ftol2_sse
  003b6	8b 8c 9e 80 f0
	89 00		 mov	 ecx, DWORD PTR [esi+ebx*4+9040000]
  003bd	03 cf		 add	 ecx, edi
  003bf	69 c9 74 02 00
	00		 imul	 ecx, 628		; 00000274H
  003c5	89 84 31 70 01
	00 00		 mov	 DWORD PTR [ecx+esi+368], eax

; 149  : 
; 150  : 		Token = GetToken();

  003cc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 151  : 		strncpy(this->Data[iQuest][this->Count[iQuest]].Info,TokenString,256);

  003d1	8b 94 9e 80 f0
	89 00		 mov	 edx, DWORD PTR [esi+ebx*4+9040000]
  003d8	03 d7		 add	 edx, edi
  003da	69 d2 74 02 00
	00		 imul	 edx, 628		; 00000274H
  003e0	68 00 01 00 00	 push	 256			; 00000100H
  003e5	8d 84 32 74 01
	00 00		 lea	 eax, DWORD PTR [edx+esi+372]
  003ec	68 00 00 00 00	 push	 OFFSET _TokenString
  003f1	50		 push	 eax
  003f2	e8 00 00 00 00	 call	 _strncpy

; 152  : 
; 153  : 		this->Count[iQuest]++;

  003f7	ff 84 9e 80 f0
	89 00		 inc	 DWORD PTR [esi+ebx*4+9040000]
  003fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00401	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00406	83 f8 02	 cmp	 eax, 2
  00409	0f 85 41 fc ff
	ff		 jne	 $LL13@Load
$LN33@Load:
  0040f	5b		 pop	 ebx
$LN22@Load:

; 154  : 
; 155  : 	}
; 156  :     
; 157  : 	fclose(SMDFile);

  00410	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00416	51		 push	 ecx
  00417	e8 00 00 00 00	 call	 _fclose
  0041c	83 c4 04	 add	 esp, 4
  0041f	5f		 pop	 edi
  00420	5e		 pop	 esi

; 158  : }

  00421	5d		 pop	 ebp
  00422	c2 08 00	 ret	 8
?Load@cWinQuestSystem@@QAEXHPAD@Z ENDP			; cWinQuestSystem::Load
_TEXT	ENDS
PUBLIC	?SendWindowsClose@cWinQuestSystem@@QAEXH@Z	; cWinQuestSystem::SendWindowsClose
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSubSetW@@YAXPAEEEH@Z:PROC			; PHeadSubSetW
; Function compile flags: /Ogtp
;	COMDAT ?SendWindowsClose@cWinQuestSystem@@QAEXH@Z
_TEXT	SEGMENT
_rSend$ = -8						; size = 5
_aIndex$ = 8						; size = 4
?SendWindowsClose@cWinQuestSystem@@QAEXH@Z PROC		; cWinQuestSystem::SendWindowsClose, COMDAT
; _this$ = ecx

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 697  : 	CGWinClose rSend;
; 698  : 
; 699  : 	ZeroMemory(&rSend,sizeof(rSend));

  00006	33 c0		 xor	 eax, eax

; 700  : 	PHeadSubSetW((LPBYTE)&rSend, 0xFA, 0x04, sizeof(rSend));

  00008	6a 05		 push	 5
  0000a	6a 04		 push	 4
  0000c	89 45 f8	 mov	 DWORD PTR _rSend$[ebp], eax
  0000f	88 45 fc	 mov	 BYTE PTR _rSend$[ebp+4], al
  00012	8d 45 f8	 lea	 eax, DWORD PTR _rSend$[ebp]
  00015	68 fa 00 00 00	 push	 250			; 000000faH
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?PHeadSubSetW@@YAXPAEEEH@Z ; PHeadSubSetW

; 701  : 
; 702  : 	rSend.Result = 1;
; 703  : 
; 704  : 	DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  00020	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00023	6a 05		 push	 5
  00025	8d 4d f8	 lea	 ecx, DWORD PTR _rSend$[ebp]
  00028	51		 push	 ecx
  00029	52		 push	 edx
  0002a	c6 45 fc 01	 mov	 BYTE PTR _rSend$[ebp+4], 1
  0002e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00033	83 c4 1c	 add	 esp, 28			; 0000001cH

; 705  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?SendWindowsClose@cWinQuestSystem@@QAEXH@Z ENDP		; cWinQuestSystem::SendWindowsClose
_TEXT	ENDS
PUBLIC	?CheckItemUser@cWinQuestSystem@@QAE_NHHH@Z	; cWinQuestSystem::CheckItemUser
EXTRN	?CheckOptions@@YA_N_NHH@Z:PROC			; CheckOptions
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?CheckItemUser@cWinQuestSystem@@QAE_NHHH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_iType$210960 = 12					; size = 2
_QuestNum$ = 12						; size = 4
_iLvl$210961 = 16					; size = 2
_k$ = 16						; size = 4
?CheckItemUser@cWinQuestSystem@@QAE_NHHH@Z PROC		; cWinQuestSystem::CheckItemUser, COMDAT
; _this$ = ecx

; 742  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 743  : 	if(aIndex >= OBJMAX)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00009	81 f9 98 3a 00
	00		 cmp	 ecx, 15000		; 00003a98H
  0000f	7c 07		 jl	 SHORT $LN6@CheckItemU

; 744  : 		return 0;

  00011	32 c0		 xor	 al, al
  00013	5e		 pop	 esi

; 770  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN6@CheckItemU:

; 745  : 
; 746  : 	int n = this->WinQ[aIndex].Num[QuestNum];

  00018	8b 45 0c	 mov	 eax, DWORD PTR _QuestNum$[ebp]
  0001b	8b d1		 mov	 edx, ecx

; 747  : 
; 748  : 	LPOBJ lpObj = &gObj[aIndex];

  0001d	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  00023	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	6b d2 5c	 imul	 edx, 92			; 0000005cH
  0002c	03 d0		 add	 edx, eax

; 749  : 
; 750  : 	if(this->Data[QuestNum][n].MissionType[k] == 3)

  0002e	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  00034	0f bf 94 56 54
	d3 5f 00	 movsx	 edx, WORD PTR [esi+edx*2+6280020]
  0003c	03 c2		 add	 eax, edx
  0003e	69 c0 9d 00 00
	00		 imul	 eax, 157		; 0000009dH
  00044	53		 push	 ebx
  00045	89 4d 08	 mov	 DWORD PTR _lpObj$[ebp], ecx
  00048	8b 4d 10	 mov	 ecx, DWORD PTR _k$[ebp]
  0004b	57		 push	 edi
  0004c	8d 3c 08	 lea	 edi, DWORD PTR [eax+ecx]
  0004f	83 7c be 3c 03	 cmp	 DWORD PTR [esi+edi*4+60], 3
  00054	0f 85 b4 00 00
	00		 jne	 $LN2@CheckItemU

; 751  : 	{
; 752  : 		short iType = this->Data[QuestNum][n].MissionMain[k];

  0005a	0f b7 54 be 50	 movzx	 edx, WORD PTR [esi+edi*4+80]

; 753  : 		short iLvl = this->Data[QuestNum][n].MissionLvL[k];

  0005f	0f b7 44 be 64	 movzx	 eax, WORD PTR [esi+edi*4+100]
  00064	89 55 0c	 mov	 DWORD PTR _iType$210960[ebp], edx
  00067	89 45 10	 mov	 DWORD PTR _iLvl$210961[ebp], eax
  0006a	bb f0 09 00 00	 mov	 ebx, 2544		; 000009f0H
  0006f	90		 npad	 1
$LL13@CheckItemU:

; 756  : 		{
; 757  : 			if( lpObj->pInventory[i].m_Type == iType && 
; 758  : 				lpObj->pInventory[i].m_Level >= iLvl &&
; 759  : 				CheckOptions(0,lpObj->pInventory[i].m_Option2, this->Data[QuestNum][n].MissionLuck[k]) &&
; 760  : 				CheckOptions(0,lpObj->pInventory[i].m_NewOption, this->Data[QuestNum][n].MissionExl[k]) &&
; 761  : 				CheckOptions(0,lpObj->pInventory[i].m_SetOption, this->Data[QuestNum][n].MissionAnc[k]) )

  00070	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00073	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  00079	66 8b 4d 0c	 mov	 cx, WORD PTR _iType$210960[ebp]
  0007d	66 39 4c 13 06	 cmp	 WORD PTR [ebx+edx+6], cx
  00082	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  00085	75 75		 jne	 SHORT $LN3@CheckItemU
  00087	66 8b 55 10	 mov	 dx, WORD PTR _iLvl$210961[ebp]
  0008b	66 39 50 08	 cmp	 WORD PTR [eax+8], dx
  0008f	7c 6b		 jl	 SHORT $LN3@CheckItemU
  00091	8b 4c be 78	 mov	 ecx, DWORD PTR [esi+edi*4+120]
  00095	0f b6 90 95 00
	00 00		 movzx	 edx, BYTE PTR [eax+149]
  0009c	51		 push	 ecx
  0009d	52		 push	 edx
  0009e	6a 00		 push	 0
  000a0	e8 00 00 00 00	 call	 ?CheckOptions@@YA_N_NHH@Z ; CheckOptions
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	84 c0		 test	 al, al
  000aa	74 50		 je	 SHORT $LN3@CheckItemU
  000ac	8b 84 be 8c 00
	00 00		 mov	 eax, DWORD PTR [esi+edi*4+140]
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000b6	8b 91 24 0e 00
	00		 mov	 edx, DWORD PTR [ecx+3620]
  000bc	50		 push	 eax
  000bd	0f b6 84 13 97
	00 00 00	 movzx	 eax, BYTE PTR [ebx+edx+151]
  000c5	50		 push	 eax
  000c6	6a 00		 push	 0
  000c8	e8 00 00 00 00	 call	 ?CheckOptions@@YA_N_NHH@Z ; CheckOptions
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	84 c0		 test	 al, al
  000d2	74 28		 je	 SHORT $LN3@CheckItemU
  000d4	8b 8c be a0 00
	00 00		 mov	 ecx, DWORD PTR [esi+edi*4+160]
  000db	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000de	8b 82 24 0e 00
	00		 mov	 eax, DWORD PTR [edx+3620]
  000e4	51		 push	 ecx
  000e5	0f b6 8c 03 ae
	00 00 00	 movzx	 ecx, BYTE PTR [ebx+eax+174]
  000ed	51		 push	 ecx
  000ee	6a 00		 push	 0
  000f0	e8 00 00 00 00	 call	 ?CheckOptions@@YA_N_NHH@Z ; CheckOptions
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f8	84 c0		 test	 al, al
  000fa	75 1b		 jne	 SHORT $LN10@CheckItemU
$LN3@CheckItemU:

; 754  : 
; 755  : 		for (int i = INVETORY_WEAR_SIZE; i < INVENTORY_SIZE; i++)

  000fc	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  00102	81 fb 70 c3 00
	00		 cmp	 ebx, 50032		; 0000c370H
  00108	0f 8c 62 ff ff
	ff		 jl	 $LL13@CheckItemU
$LN2@CheckItemU:
  0010e	5f		 pop	 edi
  0010f	5b		 pop	 ebx

; 764  : 			}
; 765  : 		}
; 766  : 
; 767  : 	}
; 768  : 
; 769  : 	return false;

  00110	32 c0		 xor	 al, al
  00112	5e		 pop	 esi

; 770  : }

  00113	5d		 pop	 ebp
  00114	c2 0c 00	 ret	 12			; 0000000cH
$LN10@CheckItemU:
  00117	5f		 pop	 edi
  00118	5b		 pop	 ebx

; 762  : 			{
; 763  : 				return true;

  00119	b0 01		 mov	 al, 1
  0011b	5e		 pop	 esi

; 770  : }

  0011c	5d		 pop	 ebp
  0011d	c2 0c 00	 ret	 12			; 0000000cH
?CheckItemUser@cWinQuestSystem@@QAE_NHHH@Z ENDP		; cWinQuestSystem::CheckItemUser
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DGSendInformation@cWinQuestSystem@@QAEXH@Z	; cWinQuestSystem::DGSendInformation
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
; Function compile flags: /Ogtp
;	COMDAT ?DGSendInformation@cWinQuestSystem@@QAEXH@Z
_TEXT	SEGMENT
_GDsend$ = -204						; size = 200
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?DGSendInformation@cWinQuestSystem@@QAEXH@Z PROC	; cWinQuestSystem::DGSendInformation, COMDAT
; _this$ = ecx

; 775  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 776  : 	if(!this->Enable) return;

  00016	80 bb a8 f0 89
	00 00		 cmp	 BYTE PTR [ebx+9040040], 0
  0001d	57		 push	 edi
  0001e	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00021	0f 84 42 01 00
	00		 je	 $LN8@DGSendInfo

; 777  : 
; 778  : 	LPOBJ lpObj = &gObj[aIndex];

  00027	56		 push	 esi
  00028	8b f7		 mov	 esi, edi
  0002a	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  00030	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 779  : 
; 780  : 	GDQuestUser GDsend;
; 781  : 
; 782  : 	ZeroMemory(&GDsend,sizeof(GDsend));

  00036	68 c8 00 00 00	 push	 200			; 000000c8H
  0003b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _GDsend$[ebp]
  00041	6a 00		 push	 0
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _memset

; 783  : 
; 784  : 	PHeadSubSetB((LPBYTE)&GDsend, 0xE2, 0x02, sizeof(GDsend));

  00049	68 c8 00 00 00	 push	 200			; 000000c8H
  0004e	6a 02		 push	 2
  00050	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _GDsend$[ebp]
  00056	68 e2 00 00 00	 push	 226			; 000000e2H
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 785  : 
; 786  : 	strncpy(GDsend.Name,lpObj->Name,10);

  00061	6a 0a		 push	 10			; 0000000aH
  00063	83 c6 77	 add	 esi, 119		; 00000077H
  00066	8d 95 38 ff ff
	ff		 lea	 edx, DWORD PTR _GDsend$[ebp+4]
  0006c	56		 push	 esi
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _strncpy
  00073	69 ff b8 00 00
	00		 imul	 edi, 184		; 000000b8H
  00079	83 c4 28	 add	 esp, 40			; 00000028H

; 787  : 
; 788  : 	for(int i=0; i < MAX_WIN_QUEST; i++)

  0007c	33 d2		 xor	 edx, edx
  0007e	03 fb		 add	 edi, ebx
  00080	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _GDsend$[ebp+56]
  00086	8d b7 54 d3 5f
	00		 lea	 esi, DWORD PTR [edi+6280020]
  0008c	8d 8f 6a d3 5f
	00		 lea	 ecx, DWORD PTR [edi+6280042]
  00092	eb 0c 8d a4 24
	00 00 00 00 eb
	03 8d 49 00	 npad	 14
$LL6@DGSendInfo:

; 789  : 	{
; 790  : 		GDsend.Start[i] = this->WinQ[aIndex].Start[i];

  000a0	0f b7 5e ec	 movzx	 ebx, WORD PTR [esi-20]
  000a4	66 89 9c 55 42
	ff ff ff	 mov	 WORD PTR _GDsend$[ebp+edx*2+14], bx

; 791  : 		GDsend.Num[i] = this->WinQ[aIndex].Num[i];

  000ac	0f b7 1e	 movzx	 ebx, WORD PTR [esi]
  000af	66 89 9c 55 56
	ff ff ff	 mov	 WORD PTR _GDsend$[ebp+edx*2+34], bx

; 792  : 
; 793  : 		for(int k = 0; k < 5 ; k++)
; 794  : 		{
; 795  : 			GDsend.Count[i][k] = this->WinQ[aIndex].Count[i][k];

  000b7	0f b7 59 fe	 movzx	 ebx, WORD PTR [ecx-2]
  000bb	66 89 58 fe	 mov	 WORD PTR [eax-2], bx
  000bf	0f b7 19	 movzx	 ebx, WORD PTR [ecx]
  000c2	66 89 18	 mov	 WORD PTR [eax], bx
  000c5	0f b7 59 02	 movzx	 ebx, WORD PTR [ecx+2]
  000c9	66 89 58 02	 mov	 WORD PTR [eax+2], bx
  000cd	0f b7 59 04	 movzx	 ebx, WORD PTR [ecx+4]
  000d1	66 89 58 04	 mov	 WORD PTR [eax+4], bx
  000d5	0f b7 59 06	 movzx	 ebx, WORD PTR [ecx+6]
  000d9	66 89 58 06	 mov	 WORD PTR [eax+6], bx
  000dd	42		 inc	 edx
  000de	83 c6 02	 add	 esi, 2
  000e1	83 c0 0a	 add	 eax, 10			; 0000000aH
  000e4	83 c1 0a	 add	 ecx, 10			; 0000000aH
  000e7	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  000ea	7c b4		 jl	 SHORT $LL6@DGSendInfo

; 796  : 		}
; 797  : 	}
; 798  : 
; 799  : 	GDsend.Damage = this->WinQ[aIndex].Damage;
; 800  : 	GDsend.Defence = this->WinQ[aIndex].Defence;
; 801  : 	GDsend.Life = this->WinQ[aIndex].Life;

  000ec	8b 97 d4 d3 5f
	00		 mov	 edx, DWORD PTR [edi+6280148]
  000f2	8b 87 cc d3 5f
	00		 mov	 eax, DWORD PTR [edi+6280140]
  000f8	8b 8f d0 d3 5f
	00		 mov	 ecx, DWORD PTR [edi+6280144]
  000fe	89 45 d0	 mov	 DWORD PTR _GDsend$[ebp+156], eax

; 802  : 	GDsend.SD = this->WinQ[aIndex].SD;

  00101	8b 87 d8 d3 5f
	00		 mov	 eax, DWORD PTR [edi+6280152]
  00107	89 55 d8	 mov	 DWORD PTR _GDsend$[ebp+164], edx

; 803  : 	GDsend.Crit = this->WinQ[aIndex].Crit;
; 804  : 	GDsend.Exel = this->WinQ[aIndex].Exel;

  0010a	8b 97 e0 d3 5f
	00		 mov	 edx, DWORD PTR [edi+6280160]
  00110	89 4d d4	 mov	 DWORD PTR _GDsend$[ebp+160], ecx
  00113	8b 8f dc d3 5f
	00		 mov	 ecx, DWORD PTR [edi+6280156]
  00119	89 45 dc	 mov	 DWORD PTR _GDsend$[ebp+168], eax

; 805  : 	GDsend.Double = this->WinQ[aIndex].Double;

  0011c	8b 87 e4 d3 5f
	00		 mov	 eax, DWORD PTR [edi+6280164]
  00122	89 55 e4	 mov	 DWORD PTR _GDsend$[ebp+176], edx

; 806  : 	GDsend.Ignore = this->WinQ[aIndex].Ignore;
; 807  : 	GDsend.Ref = this->WinQ[aIndex].Ref;

  00125	8b 97 ec d3 5f
	00		 mov	 edx, DWORD PTR [edi+6280172]
  0012b	89 4d e0	 mov	 DWORD PTR _GDsend$[ebp+172], ecx
  0012e	8b 8f e8 d3 5f
	00		 mov	 ecx, DWORD PTR [edi+6280168]
  00134	89 45 e8	 mov	 DWORD PTR _GDsend$[ebp+180], eax

; 808  : 	GDsend.Exp = this->WinQ[aIndex].Exp;

  00137	8b 87 f0 d3 5f
	00		 mov	 eax, DWORD PTR [edi+6280176]
  0013d	89 55 f0	 mov	 DWORD PTR _GDsend$[ebp+188], edx

; 809  : 	GDsend.Drop = this->WinQ[aIndex].Drop;
; 810  : 
; 811  : 	cDBSMng.Send( (char*)&GDsend, GDsend.h.size);

  00140	0f b6 95 35 ff
	ff ff		 movzx	 edx, BYTE PTR _GDsend$[ebp+1]
  00147	89 4d ec	 mov	 DWORD PTR _GDsend$[ebp+184], ecx
  0014a	8b 8f f4 d3 5f
	00		 mov	 ecx, DWORD PTR [edi+6280180]
  00150	89 45 f4	 mov	 DWORD PTR _GDsend$[ebp+192], eax
  00153	52		 push	 edx
  00154	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _GDsend$[ebp]
  0015a	89 4d f8	 mov	 DWORD PTR _GDsend$[ebp+196], ecx
  0015d	50		 push	 eax
  0015e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00163	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  00168	5e		 pop	 esi
$LN8@DGSendInfo:

; 812  : }

  00169	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016c	5f		 pop	 edi
  0016d	33 cd		 xor	 ecx, ebp
  0016f	5b		 pop	 ebx
  00170	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 04 00	 ret	 4
?DGSendInformation@cWinQuestSystem@@QAEXH@Z ENDP	; cWinQuestSystem::DGSendInformation
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ReqQuestInfo@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; cWinQuestSystem::ReqQuestInfo
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
; Function compile flags: /Ogtp
;	COMDAT ?ReqQuestInfo@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$210990 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?ReqQuestInfo@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; cWinQuestSystem::ReqQuestInfo, COMDAT
; _this$ = ecx

; 817  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 818  : 	if( !OBJMAX_RANGE(lpObj->m_Index) ) 

  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	85 c0		 test	 eax, eax
  00018	78 60		 js	 SHORT $LN1@ReqQuestIn
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00021	0f 9e c1	 setle	 cl
  00024	8b c1		 mov	 eax, ecx
  00026	85 c0		 test	 eax, eax
  00028	74 50		 je	 SHORT $LN1@ReqQuestIn

; 819  : 	{
; 820  : 		return;
; 821  : 	}
; 822  : 
; 823  : 	// ----
; 824  : 
; 825  : 	if( gObjIsConnected(lpObj) )

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00030	83 c4 04	 add	 esp, 4
  00033	85 c0		 test	 eax, eax
  00035	74 43		 je	 SHORT $LN1@ReqQuestIn

; 826  : 	{
; 827  : 		GDSelectQuest pMsg;			
; 828  : 
; 829  : 		PHeadSubSetB((LPBYTE)&pMsg, 0xE2, 0x01, sizeof(pMsg));

  00037	6a 10		 push	 16			; 00000010H
  00039	6a 01		 push	 1
  0003b	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$210990[ebp]
  0003e	68 e2 00 00 00	 push	 226			; 000000e2H
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 830  : 
; 831  : 		memcpy(pMsg.Name, lpObj->Name, 10);

  00049	8b 4e 7b	 mov	 ecx, DWORD PTR [esi+123]
  0004c	66 8b 56 7f	 mov	 dx, WORD PTR [esi+127]
  00050	8b 46 77	 mov	 eax, DWORD PTR [esi+119]
  00053	89 4d f6	 mov	 DWORD PTR _pMsg$210990[ebp+10], ecx

; 832  : 		pMsg.aIndex = lpObj->m_Index;
; 833  : 
; 834  : 		if( cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size) )

  00056	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$210990[ebp+1]
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	66 89 55 fa	 mov	 WORD PTR _pMsg$210990[ebp+14], dx
  00061	51		 push	 ecx
  00062	89 45 f2	 mov	 DWORD PTR _pMsg$210990[ebp+6], eax
  00065	66 8b 06	 mov	 ax, WORD PTR [esi]
  00068	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$210990[ebp]
  0006b	52		 push	 edx
  0006c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00071	66 89 45 f0	 mov	 WORD PTR _pMsg$210990[ebp+4], ax
  00075	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN1@ReqQuestIn:

; 835  : 		{
; 836  : 			return;
; 837  : 		}
; 838  : 	}
; 839  : 	return;
; 840  : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	33 cd		 xor	 ecx, ebp
  0007f	5e		 pop	 esi
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
?ReqQuestInfo@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; cWinQuestSystem::ReqQuestInfo
_TEXT	ENDS
PUBLIC	?CharOptions@cWinQuestSystem@@QAEXH@Z		; cWinQuestSystem::CharOptions
; Function compile flags: /Ogtp
;	COMDAT ?CharOptions@cWinQuestSystem@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?CharOptions@cWinQuestSystem@@QAEXH@Z PROC		; cWinQuestSystem::CharOptions, COMDAT
; _this$ = ecx

; 877  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 878  : 	if(!this->Enable) return;

  00003	80 b9 a8 f0 89
	00 00		 cmp	 BYTE PTR [ecx+9040040], 0
  0000a	0f 84 57 01 00
	00		 je	 $LN1@CharOption

; 879  : 
; 880  : 	LPOBJ lpObj = &gObj[aIndex];

  00010	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00013	8b c2		 mov	 eax, edx

; 881  : 
; 882  : 	if(this->WinQ[aIndex].Ref > 0)

  00015	69 d2 b8 00 00
	00		 imul	 edx, 184		; 000000b8H
  0001b	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00021	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	03 ca		 add	 ecx, edx
  00029	83 b9 ec d3 5f
	00 00		 cmp	 DWORD PTR [ecx+6280172], 0
  00030	53		 push	 ebx
  00031	bb 5a 00 00 00	 mov	 ebx, 90			; 0000005aH
  00036	7e 1a		 jle	 SHORT $LN18@CharOption

; 883  : 	{
; 884  : 		lpObj->DamageReflect += this->WinQ[aIndex].Ref;

  00038	8a 91 ec d3 5f
	00		 mov	 dl, BYTE PTR [ecx+6280172]
  0003e	00 90 71 01 00
	00		 add	 BYTE PTR [eax+369], dl

; 885  : 		if(lpObj->DamageReflect >= 90)

  00044	38 98 71 01 00
	00		 cmp	 BYTE PTR [eax+369], bl
  0004a	72 06		 jb	 SHORT $LN18@CharOption

; 886  : 		{
; 887  : 			lpObj->DamageReflect = 90;

  0004c	88 98 71 01 00
	00		 mov	 BYTE PTR [eax+369], bl
$LN18@CharOption:

; 888  : 		}
; 889  : 	}
; 890  : 
; 891  : 	if(this->WinQ[aIndex].Damage > 0)

  00052	83 b9 cc d3 5f
	00 00		 cmp	 DWORD PTR [ecx+6280140], 0
  00059	7e 48		 jle	 SHORT $LN12@CharOption

; 892  : 	{
; 893  : 		lpObj->m_AttackDamageMaxLeft += this->WinQ[aIndex].Damage;

  0005b	8b 91 cc d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280140]
  00061	01 90 78 04 00
	00		 add	 DWORD PTR [eax+1144], edx

; 894  : 		lpObj->m_AttackDamageMinLeft += this->WinQ[aIndex].Damage;

  00067	8b 91 cc d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280140]
  0006d	01 90 7c 04 00
	00		 add	 DWORD PTR [eax+1148], edx

; 895  : 		lpObj->m_AttackDamageMaxRight += this->WinQ[aIndex].Damage;

  00073	8b 91 cc d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280140]
  00079	01 90 80 04 00
	00		 add	 DWORD PTR [eax+1152], edx

; 896  : 		lpObj->m_AttackDamageMinRight += this->WinQ[aIndex].Damage;

  0007f	8b 91 cc d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280140]
  00085	01 90 84 04 00
	00		 add	 DWORD PTR [eax+1156], edx

; 897  : 
; 898  : 		lpObj->m_MagicDamageMin += this->WinQ[aIndex].Damage;

  0008b	8b 91 cc d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280140]
  00091	01 90 68 04 00
	00		 add	 DWORD PTR [eax+1128], edx

; 899  : 		lpObj->m_MagicDamageMax += this->WinQ[aIndex].Damage;

  00097	8b 91 cc d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280140]
  0009d	01 90 6c 04 00
	00		 add	 DWORD PTR [eax+1132], edx
$LN12@CharOption:

; 900  : 	}
; 901  : 
; 902  : 	if(this->WinQ[aIndex].Defence > 0)

  000a3	83 b9 d0 d3 5f
	00 00		 cmp	 DWORD PTR [ecx+6280144], 0
  000aa	7e 18		 jle	 SHORT $LN11@CharOption

; 903  : 	{
; 904  : 		lpObj->m_Defense += this->WinQ[aIndex].Defence;

  000ac	8b 91 d0 d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280144]
  000b2	01 90 94 04 00
	00		 add	 DWORD PTR [eax+1172], edx

; 905  : 		lpObj->m_MagicDefense += this->WinQ[aIndex].Defence;

  000b8	8b 91 d0 d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280144]
  000be	01 90 98 04 00
	00		 add	 DWORD PTR [eax+1176], edx
$LN11@CharOption:

; 906  : 	}
; 907  : 
; 908  : 	if(this->WinQ[aIndex].Crit > 0)

  000c4	8b 91 dc d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280156]
  000ca	85 d2		 test	 edx, edx
  000cc	7e 14		 jle	 SHORT $LN9@CharOption

; 909  : 	{
; 910  : 		lpObj->m_CriticalDamage += this->WinQ[aIndex].Crit;

  000ce	01 90 bc 04 00
	00		 add	 DWORD PTR [eax+1212], edx

; 911  : 		if(lpObj->m_CriticalDamage > 90)

  000d4	39 98 bc 04 00
	00		 cmp	 DWORD PTR [eax+1212], ebx
  000da	7e 06		 jle	 SHORT $LN9@CharOption

; 912  : 		{
; 913  : 			lpObj->m_CriticalDamage = 90;

  000dc	89 98 bc 04 00
	00		 mov	 DWORD PTR [eax+1212], ebx
$LN9@CharOption:

; 914  : 		}
; 915  : 	}
; 916  : 
; 917  : 	if(this->WinQ[aIndex].Exel > 0)

  000e2	8b 91 e0 d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280160]
  000e8	85 d2		 test	 edx, edx
  000ea	7e 14		 jle	 SHORT $LN7@CharOption

; 918  : 	{
; 919  : 		lpObj->m_ExcelentDamage += this->WinQ[aIndex].Exel;

  000ec	01 90 c0 04 00
	00		 add	 DWORD PTR [eax+1216], edx

; 920  : 		if(lpObj->m_ExcelentDamage > 90)

  000f2	39 98 c0 04 00
	00		 cmp	 DWORD PTR [eax+1216], ebx
  000f8	7e 06		 jle	 SHORT $LN7@CharOption

; 921  : 		{
; 922  : 			lpObj->m_ExcelentDamage = 90;

  000fa	89 98 c0 04 00
	00		 mov	 DWORD PTR [eax+1216], ebx
$LN7@CharOption:

; 923  : 		}
; 924  : 	}
; 925  : 
; 926  : 	if(this->WinQ[aIndex].Double > 0)

  00100	83 b9 e4 d3 5f
	00 00		 cmp	 DWORD PTR [ecx+6280164], 0
  00107	7e 1a		 jle	 SHORT $LN19@CharOption

; 927  : 	{
; 928  : 		lpObj->SetOpDoubleDamage += this->WinQ[aIndex].Double;

  00109	8a 91 e4 d3 5f
	00		 mov	 dl, BYTE PTR [ecx+6280164]
  0010f	00 90 3f 11 00
	00		 add	 BYTE PTR [eax+4415], dl

; 929  : 		if(lpObj->SetOpDoubleDamage > 90)

  00115	38 98 3f 11 00
	00		 cmp	 BYTE PTR [eax+4415], bl
  0011b	76 06		 jbe	 SHORT $LN19@CharOption

; 930  : 		{
; 931  : 			lpObj->SetOpDoubleDamage = 90;

  0011d	88 98 3f 11 00
	00		 mov	 BYTE PTR [eax+4415], bl
$LN19@CharOption:

; 932  : 		}
; 933  : 	}
; 934  : 
; 935  : 	if(this->WinQ[aIndex].Ignore > 0)

  00123	83 b9 e8 d3 5f
	00 00		 cmp	 DWORD PTR [ecx+6280168], 0
  0012a	7e 1a		 jle	 SHORT $LN20@CharOption

; 936  : 	{
; 937  : 		lpObj->SetOpIgnoreDefense += this->WinQ[aIndex].Ignore;

  0012c	8a 91 e8 d3 5f
	00		 mov	 dl, BYTE PTR [ecx+6280168]
  00132	00 90 3e 11 00
	00		 add	 BYTE PTR [eax+4414], dl

; 938  : 		if(lpObj->SetOpIgnoreDefense > 90)

  00138	38 98 3e 11 00
	00		 cmp	 BYTE PTR [eax+4414], bl
  0013e	76 06		 jbe	 SHORT $LN20@CharOption

; 939  : 		{
; 940  : 			lpObj->SetOpIgnoreDefense = 90;

  00140	88 98 3e 11 00
	00		 mov	 BYTE PTR [eax+4414], bl
$LN20@CharOption:

; 941  : 		}
; 942  : 	}
; 943  : 
; 944  : 	if(this->WinQ[aIndex].Life > 0)

  00146	8b 91 d4 d3 5f
	00		 mov	 edx, DWORD PTR [ecx+6280148]
  0014c	5b		 pop	 ebx
  0014d	85 d2		 test	 edx, edx
  0014f	7e 06		 jle	 SHORT $LN2@CharOption

; 945  : 	{
; 946  : 		lpObj->AddLife += this->WinQ[aIndex].Life;

  00151	01 90 4c 01 00
	00		 add	 DWORD PTR [eax+332], edx
$LN2@CharOption:

; 947  : 	}
; 948  : 
; 949  : 	if(this->WinQ[aIndex].SD > 0)

  00157	8b 89 d8 d3 5f
	00		 mov	 ecx, DWORD PTR [ecx+6280152]
  0015d	85 c9		 test	 ecx, ecx
  0015f	7e 06		 jle	 SHORT $LN1@CharOption

; 950  : 	{
; 951  : 		lpObj->iAddShield += this->WinQ[aIndex].SD;

  00161	01 88 5c 01 00
	00		 add	 DWORD PTR [eax+348], ecx
$LN1@CharOption:

; 952  : 	}
; 953  : }

  00167	5d		 pop	 ebp
  00168	c2 04 00	 ret	 4
?CharOptions@cWinQuestSystem@@QAEXH@Z ENDP		; cWinQuestSystem::CharOptions
_TEXT	ENDS
PUBLIC	?ExpOption@cWinQuestSystem@@QAEXHAA_J@Z		; cWinQuestSystem::ExpOption
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ExpOption@cWinQuestSystem@@QAEXHAA_J@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_Exp$ = 12						; size = 4
?ExpOption@cWinQuestSystem@@QAEXHAA_J@Z PROC		; cWinQuestSystem::ExpOption, COMDAT
; _this$ = ecx

; 958  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 959  : 	if(!this->Enable) return;

  00003	80 b9 a8 f0 89
	00 00		 cmp	 BYTE PTR [ecx+9040040], 0
  0000a	74 40		 je	 SHORT $LN1@ExpOption

; 960  : 	
; 961  : 	if(this->WinQ[aIndex].Exp > 0)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000f	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00015	8b 84 08 f0 d3
	5f 00		 mov	 eax, DWORD PTR [eax+ecx+6280176]
  0001c	85 c0		 test	 eax, eax
  0001e	7e 2c		 jle	 SHORT $LN1@ExpOption

; 962  : 	{
; 963  : 		Exp += ( Exp * this->WinQ[aIndex].Exp ) / 100;

  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	8b 75 0c	 mov	 esi, DWORD PTR _Exp$[ebp]
  00025	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00028	57		 push	 edi
  00029	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002b	53		 push	 ebx
  0002c	99		 cdq
  0002d	57		 push	 edi
  0002e	52		 push	 edx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 __allmul
  00035	6a 00		 push	 0
  00037	6a 64		 push	 100			; 00000064H
  00039	52		 push	 edx
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 __alldiv
  00040	03 c7		 add	 eax, edi
  00042	13 d3		 adc	 edx, ebx
  00044	5f		 pop	 edi
  00045	89 06		 mov	 DWORD PTR [esi], eax
  00047	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
$LN1@ExpOption:

; 964  : 	}
; 965  : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?ExpOption@cWinQuestSystem@@QAEXHAA_J@Z ENDP		; cWinQuestSystem::ExpOption
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?ZenOption@cWinQuestSystem@@QAEXHAAM@Z		; cWinQuestSystem::ZenOption
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ZenOption@cWinQuestSystem@@QAEXHAAM@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_Money$ = 12						; size = 4
?ZenOption@cWinQuestSystem@@QAEXHAAM@Z PROC		; cWinQuestSystem::ZenOption, COMDAT
; _this$ = ecx

; 970  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 971  : 	if(!this->Enable) return;

  00003	80 b9 a8 f0 89
	00 00		 cmp	 BYTE PTR [ecx+9040040], 0
  0000a	74 29		 je	 SHORT $LN1@ZenOption

; 972  : 
; 973  : 	if(this->WinQ[aIndex].Drop > 0)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000f	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00015	83 bc 08 f4 d3
	5f 00 00	 cmp	 DWORD PTR [eax+ecx+6280180], 0
  0001d	7e 16		 jle	 SHORT $LN1@ZenOption

; 974  : 	{
; 975  : 		Money += ( Money * this->WinQ[aIndex].Exp ) / 100;

  0001f	db 84 08 f0 d3
	5f 00		 fild	 DWORD PTR [eax+ecx+6280176]
  00026	8b 45 0c	 mov	 eax, DWORD PTR _Money$[ebp]
  00029	d8 08		 fmul	 DWORD PTR [eax]
  0002b	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00031	d8 00		 fadd	 DWORD PTR [eax]
  00033	d9 18		 fstp	 DWORD PTR [eax]
$LN1@ZenOption:

; 976  : 	}
; 977  : }

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?ZenOption@cWinQuestSystem@@QAEXHAAM@Z ENDP		; cWinQuestSystem::ZenOption
_TEXT	ENDS
PUBLIC	?GetActive@cWinQuestSystem@@QAE_NXZ		; cWinQuestSystem::GetActive
; Function compile flags: /Ogtp
;	COMDAT ?GetActive@cWinQuestSystem@@QAE_NXZ
_TEXT	SEGMENT
?GetActive@cWinQuestSystem@@QAE_NXZ PROC		; cWinQuestSystem::GetActive, COMDAT
; _this$ = ecx

; 983  : 	return this->Enable;

  00000	8a 81 a8 f0 89
	00		 mov	 al, BYTE PTR [ecx+9040040]

; 984  : }

  00006	c3		 ret	 0
?GetActive@cWinQuestSystem@@QAE_NXZ ENDP		; cWinQuestSystem::GetActive
_TEXT	ENDS
PUBLIC	??_C@_0DD@HCAIKAFC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_0DC@EEOHEFHC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_0DC@IPLLJGNH@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_0DC@HOONCEAC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_0DC@LFLBPHKH@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_0DC@DDCFIFAJ@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_0DC@PIHJFGKM@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_0DC@OFHMGGBE@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_0DC@COCALFLB@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_0DC@KILEMHBP@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	??_C@_03BCJIDNJL@NPC?$AA@			; `string'
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0DH@BGEJGHNL@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ ; `string'
PUBLIC	?Init@cWinQuestSystem@@QAEXXZ			; cWinQuestSystem::Init
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
;	COMDAT ??_C@_0DD@HCAIKAFC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DD@HCAIKAFC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem10.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EEOHEFHC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DC@EEOHEFHC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem9.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IPLLJGNH@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DC@IPLLJGNH@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem8.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HOONCEAC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DC@HOONCEAC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem7.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LFLBPHKH@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DC@LFLBPHKH@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem6.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DDCFIFAJ@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DC@DDCFIFAJ@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem5.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PIHJFGKM@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DC@PIHJFGKM@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem4.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OFHMGGBE@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DC@OFHMGGBE@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem3.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@COCALFLB@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DC@COCALFLB@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem2.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KILEMHBP@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DC@KILEMHBP@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystem1.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCJIDNJL@NPC?$AA@
CONST	SEGMENT
??_C@_03BCJIDNJL@NPC?$AA@ DB 'NPC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@BGEJGHNL@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
CONST	SEGMENT
??_C@_0DH@BGEJGHNL@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@ DB '..\Data\Zt'
	DB	'Data\WinQuestSystem\WinQuestSystemConfig.ini', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Init@cWinQuestSystem@@QAEXXZ
_TEXT	SEGMENT
?Init@cWinQuestSystem@@QAEXXZ PROC			; cWinQuestSystem::Init, COMDAT
; _this$ = ecx

; 36   : 	if(!g_ZtLicense.user.WinQuest)

  00000	80 3d ce 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+206, 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	0f 84 cb 00 00
	00		 je	 $LN2@Init

; 37   : 	{
; 38   : 		return;
; 39   : 	}
; 40   : 
; 41   : 	this->Enable = GetPrivateProfileInt("ZtTeam","Enable",0,WIN_QUEST_SYSTEM_CFG);

  00010	57		 push	 edi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@BGEJGHNL@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  0001c	6a 00		 push	 0
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00028	ff d7		 call	 edi

; 42   : 	this->NPC = GetPrivateProfileInt("ZtTeam","NPC",0,WIN_QUEST_SYSTEM_CFG);

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@BGEJGHNL@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  0002f	6a 00		 push	 0
  00031	85 c0		 test	 eax, eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_03BCJIDNJL@NPC?$AA@
  00038	0f 95 c0	 setne	 al
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00040	88 86 a8 f0 89
	00		 mov	 BYTE PTR [esi+9040040], al
  00046	ff d7		 call	 edi

; 43   : 
; 44   : 	this->Load(0, WIN_QUEST_SYSTEM_DIR1);

  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KILEMHBP@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  0004d	6a 00		 push	 0
  0004f	8b ce		 mov	 ecx, esi
  00051	89 86 ac f0 89
	00		 mov	 DWORD PTR [esi+9040044], eax
  00057	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load

; 45   : 	this->Load(1, WIN_QUEST_SYSTEM_DIR2);

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@COCALFLB@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  00061	6a 01		 push	 1
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load

; 46   : 	this->Load(2, WIN_QUEST_SYSTEM_DIR3);

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@OFHMGGBE@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  0006f	6a 02		 push	 2
  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load

; 47   : 	this->Load(3, WIN_QUEST_SYSTEM_DIR4);

  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PIHJFGKM@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  0007d	6a 03		 push	 3
  0007f	8b ce		 mov	 ecx, esi
  00081	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load

; 48   : 	this->Load(4, WIN_QUEST_SYSTEM_DIR5);

  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@DDCFIFAJ@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  0008b	6a 04		 push	 4
  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load

; 49   : 	this->Load(5, WIN_QUEST_SYSTEM_DIR6);

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LFLBPHKH@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  00099	6a 05		 push	 5
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load

; 50   : 	this->Load(6, WIN_QUEST_SYSTEM_DIR7);

  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HOONCEAC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  000a7	6a 06		 push	 6
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load

; 51   : 	this->Load(7, WIN_QUEST_SYSTEM_DIR8);

  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@IPLLJGNH@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  000b5	6a 07		 push	 7
  000b7	8b ce		 mov	 ecx, esi
  000b9	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load

; 52   : 	this->Load(8, WIN_QUEST_SYSTEM_DIR9);

  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@EEOHEFHC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  000c3	6a 08		 push	 8
  000c5	8b ce		 mov	 ecx, esi
  000c7	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load

; 53   : 	this->Load(9, WIN_QUEST_SYSTEM_DIR10);

  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@HCAIKAFC@?4?4?2Data?2ZtData?2WinQuestSystem?2Wi@
  000d1	6a 09		 push	 9
  000d3	8b ce		 mov	 ecx, esi
  000d5	e8 00 00 00 00	 call	 ?Load@cWinQuestSystem@@QAEXHPAD@Z ; cWinQuestSystem::Load
  000da	5f		 pop	 edi
$LN2@Init:
  000db	5e		 pop	 esi

; 54   : }

  000dc	c3		 ret	 0
?Init@cWinQuestSystem@@QAEXXZ ENDP			; cWinQuestSystem::Init
_TEXT	ENDS
PUBLIC	_aIndex$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SendPacket@cWinQuestSystem@@QAEXHE@Z		; cWinQuestSystem::SendPacket
EXTRN	?gObjGetItemCountInInventory@@YAHHHH@Z:PROC	; gObjGetItemCountInInventory
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SendPacket@cWinQuestSystem@@QAEXHE@Z
_TEXT	SEGMENT
tv1410 = -5640						; size = 4
tv1475 = -5636						; size = 4
_this$GSCopy$ = -5632					; size = 4
tv3760 = -5628						; size = 4
_i$210799 = -5624					; size = 4
tv3434 = -5620						; size = 4
tv3328 = -5616						; size = 4
tv3758 = -5612						; size = 4
_aIndex$GSCopy$ = -5608					; size = 4
tv1853 = -5604						; size = 4
tv2988 = -5600						; size = 4
tv3817 = -5596						; size = 4
tv2992 = -5596						; size = 4
tv1869 = -5596						; size = 4
tv3326 = -5592						; size = 4
_lpObj$ = -5588						; size = 4
tv3148 = -5584						; size = 4
tv1855 = -5584						; size = 4
_Reward$210804 = -5578					; size = 1
_Accept$210803 = -5577					; size = 1
_qSend$ = -5576						; size = 5572
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_OpenWind$ = 12						; size = 1
?SendPacket@cWinQuestSystem@@QAEXHE@Z PROC		; cWinQuestSystem::SendPacket, COMDAT
; _this$ = ecx

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 08 16 00 00	 mov	 eax, 5640		; 00001608H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx

; 231  : 	if(!this->Enable) return;

  0001a	80 be a8 f0 89
	00 00		 cmp	 BYTE PTR [esi+9040040], 0
  00021	57		 push	 edi
  00022	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]

; 320  : 				}
; 321  : 			}
; 322  : 
; 323  : 			qSend.ztQuest[i].Count[k] = this->WinQ[aIndex].Count[i][k];

  00025	89 b5 00 ea ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0002b	89 bd 18 ea ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], edi
  00031	0f 84 e0 06 00
	00		 je	 $LN40@SendPacket

; 232  : 
; 233  : 	LPOBJ lpObj = &gObj[aIndex];

  00037	8b c7		 mov	 eax, edi
  00039	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00045	53		 push	 ebx

; 234  : 	CGWinQuestSystemTable qSend;
; 235  : 
; 236  : 	memset(&qSend,0,sizeof(qSend));

  00046	68 c4 15 00 00	 push	 5572			; 000015c4H
  0004b	89 85 2c ea ff
	ff		 mov	 DWORD PTR _lpObj$[ebp], eax
  00051	33 db		 xor	 ebx, ebx
  00053	8d 85 38 ea ff
	ff		 lea	 eax, DWORD PTR _qSend$[ebp]
  00059	53		 push	 ebx
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _memset

; 237  : 	PHeadSubSetW((LPBYTE)&qSend, 0xFA, 0x02, sizeof(qSend));

  00060	68 c4 15 00 00	 push	 5572			; 000015c4H
  00065	6a 02		 push	 2
  00067	8d 8d 38 ea ff
	ff		 lea	 ecx, DWORD PTR _qSend$[ebp]
  0006d	68 fa 00 00 00	 push	 250			; 000000faH
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ?PHeadSubSetW@@YAXPAEEEH@Z ; PHeadSubSetW
  00078	69 ff b8 00 00
	00		 imul	 edi, 184		; 000000b8H
  0007e	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00081	8d 90 40 d3 5f
	00		 lea	 edx, DWORD PTR [eax+6280000]
  00087	83 c4 1c	 add	 esp, 28			; 0000001cH
  0008a	89 85 fc e9 ff
	ff		 mov	 DWORD PTR tv1475[ebp], eax
  00090	8d 8e 80 f0 89
	00		 lea	 ecx, DWORD PTR [esi+9040000]
  00096	05 68 d3 5f 00	 add	 eax, 6280040		; 005fd368H

; 238  : 	
; 239  : 	for(int i=0; i < MAX_WIN_QUEST; i++)

  0009b	89 9d 08 ea ff
	ff		 mov	 DWORD PTR _i$210799[ebp], ebx
  000a1	89 9d 28 ea ff
	ff		 mov	 DWORD PTR tv3326[ebp], ebx
  000a7	89 9d 10 ea ff
	ff		 mov	 DWORD PTR tv3328[ebp], ebx
  000ad	89 95 14 ea ff
	ff		 mov	 DWORD PTR tv3758[ebp], edx
  000b3	89 8d 04 ea ff
	ff		 mov	 DWORD PTR tv3760[ebp], ecx
  000b9	89 85 24 ea ff
	ff		 mov	 DWORD PTR tv3817[ebp], eax
  000bf	eb 15		 jmp	 SHORT $LN38@SendPacket
  000c1	eb 0d 8d a4 24
	00 00 00 00 8d
	9b 00 00 00 00	 npad	 15
$LL50@SendPacket:

; 232  : 
; 233  : 	LPOBJ lpObj = &gObj[aIndex];

  000d0	8b b5 00 ea ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
$LN38@SendPacket:

; 240  : 	{
; 241  : 		BYTE Accept = 1;
; 242  : 		BYTE Reward = 1;
; 243  : 
; 244  : 		int n = this->WinQ[aIndex].Num[i];

  000d6	8b 95 14 ea ff
	ff		 mov	 edx, DWORD PTR tv3758[ebp]
  000dc	0f bf 5a 14	 movsx	 ebx, WORD PTR [edx+20]

; 245  : 
; 246  : 		strncpy(qSend.ztQuest[i].Name,this->Data[i][n].Name,40);

  000e0	8b bd 10 ea ff
	ff		 mov	 edi, DWORD PTR tv3328[ebp]
  000e6	03 fb		 add	 edi, ebx
  000e8	69 ff 74 02 00
	00		 imul	 edi, 628		; 00000274H
  000ee	03 fe		 add	 edi, esi
  000f0	8b b5 28 ea ff
	ff		 mov	 esi, DWORD PTR tv3326[ebp]
  000f6	6a 28		 push	 40			; 00000028H
  000f8	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000fb	8d b4 35 ae eb
	ff ff		 lea	 esi, DWORD PTR _qSend$[ebp+esi+374]
  00102	51		 push	 ecx
  00103	8d 96 c7 fe ff
	ff		 lea	 edx, DWORD PTR [esi-313]
  00109	52		 push	 edx
  0010a	c6 85 37 ea ff
	ff 01		 mov	 BYTE PTR _Accept$210803[ebp], 1
  00111	c6 85 36 ea ff
	ff 01		 mov	 BYTE PTR _Reward$210804[ebp], 1
  00118	89 bd 0c ea ff
	ff		 mov	 DWORD PTR tv3434[ebp], edi
  0011e	e8 00 00 00 00	 call	 _strncpy

; 247  : 		strncpy(qSend.ztQuest[i].Info,this->Data[i][n].Info,200);

  00123	68 c8 00 00 00	 push	 200			; 000000c8H
  00128	8d 87 74 01 00
	00		 lea	 eax, DWORD PTR [edi+372]
  0012e	50		 push	 eax
  0012f	56		 push	 esi
  00130	e8 00 00 00 00	 call	 _strncpy

; 248  : 
; 249  : 		qSend.ztQuest[i].n = n;
; 250  : 		qSend.ztQuest[i].e = this->Count[i];

  00135	8b 85 04 ea ff
	ff		 mov	 eax, DWORD PTR tv3760[ebp]
  0013b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0013e	83 c4 18	 add	 esp, 24			; 00000018H

; 251  : 
; 252  : 		//MsgNormal(aIndex,"%d / %d",n,this->Count[i]);
; 253  : 
; 254  : 		if(n >= this->Count[i])

  00141	3b 18		 cmp	 ebx, DWORD PTR [eax]

; 255  : 		{
; 256  : 			qSend.ztQuest[i].Finish = true;
; 257  : 		}
; 258  : 		else
; 259  : 		{
; 260  : 			qSend.ztQuest[i].Finish = false;
; 261  : 		}
; 262  : 
; 263  : 		qSend.ztQuest[i].start = this->WinQ[aIndex].Start[i];

  00143	8b 85 14 ea ff
	ff		 mov	 eax, DWORD PTR tv3758[ebp]
  00149	0f 9d c2	 setge	 dl
  0014c	66 89 8e c4 fe
	ff ff		 mov	 WORD PTR [esi-316], cx
  00153	8a 08		 mov	 cl, BYTE PTR [eax]
  00155	8d 86 f4 fe ff
	ff		 lea	 eax, DWORD PTR [esi-268]
  0015b	88 96 c6 fe ff
	ff		 mov	 BYTE PTR [esi-314], dl
  00161	8b 95 24 ea ff
	ff		 mov	 edx, DWORD PTR tv3817[ebp]
  00167	89 85 30 ea ff
	ff		 mov	 DWORD PTR tv1855[ebp], eax
  0016d	66 89 9e c2 fe
	ff ff		 mov	 WORD PTR [esi-318], bx
  00174	8d 86 62 ff ff
	ff		 lea	 eax, DWORD PTR [esi-158]

; 264  : 
; 265  : 		// ----
; 266  : 
; 267  : 		for(int k = 0; k < 5; k++)

  0017a	33 db		 xor	 ebx, ebx
  0017c	88 8e c0 fe ff
	ff		 mov	 BYTE PTR [esi-320], cl
  00182	89 95 1c ea ff
	ff		 mov	 DWORD PTR tv1853[ebp], edx
  00188	83 c7 64	 add	 edi, 100		; 00000064H
  0018b	89 85 24 ea ff
	ff		 mov	 DWORD PTR tv1869[ebp], eax
$LL33@SendPacket:

; 268  : 		{
; 269  : 			qSend.ztQuest[i].MissionType[k] = this->Data[i][n].MissionType[k];
; 270  : 			qSend.ztQuest[i].MissionMain[k] = this->Data[i][n].MissionMain[k];
; 271  : 			qSend.ztQuest[i].MissionLvL[k] = this->Data[i][n].MissionLvL[k];
; 272  : 			qSend.ztQuest[i].MissionLuck[k] = this->Data[i][n].MissionLuck[k];
; 273  : 			qSend.ztQuest[i].MissionExl[k] = this->Data[i][n].MissionExl[k];
; 274  : 			qSend.ztQuest[i].MissionAnc[k] = this->Data[i][n].MissionAnc[k];
; 275  : 
; 276  : 			if(this->Data[i][n].MissionType[k] == 1)	//Kill Mission

  00191	83 7f d8 01	 cmp	 DWORD PTR [edi-40], 1
  00195	0f b6 4f d8	 movzx	 ecx, BYTE PTR [edi-40]
  00199	66 8b 57 ec	 mov	 dx, WORD PTR [edi-20]
  0019d	88 8c 1e ef fe
	ff ff		 mov	 BYTE PTR [esi+ebx-273], cl
  001a4	66 8b 0f	 mov	 cx, WORD PTR [edi]
  001a7	66 89 08	 mov	 WORD PTR [eax], cx
  001aa	0f b6 4f 3c	 movzx	 ecx, BYTE PTR [edi+60]
  001ae	66 89 50 f6	 mov	 WORD PTR [eax-10], dx
  001b2	8a 57 14	 mov	 dl, BYTE PTR [edi+20]
  001b5	8a 47 28	 mov	 al, BYTE PTR [edi+40]
  001b8	88 94 1e 6c ff
	ff ff		 mov	 BYTE PTR [esi+ebx-148], dl
  001bf	88 84 1e 71 ff
	ff ff		 mov	 BYTE PTR [esi+ebx-143], al
  001c6	88 8c 1e 76 ff
	ff ff		 mov	 BYTE PTR [esi+ebx-138], cl
  001cd	75 5b		 jne	 SHORT $LN28@SendPacket

; 277  : 			{
; 278  : 				LPMONSTER_ATTRIBUTE lpMonsterAttr = gMAttr.GetAttr(this->Data[i][n].MissionMain[k]);

  001cf	8b 57 ec	 mov	 edx, DWORD PTR [edi-20]
  001d2	52		 push	 edx
  001d3	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  001d8	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr

; 279  : 				strncpy(qSend.ztQuest[i].MissionName[k], lpMonsterAttr->m_Name,20);

  001dd	83 c0 08	 add	 eax, 8
  001e0	6a 14		 push	 20			; 00000014H
  001e2	50		 push	 eax
  001e3	8b 85 30 ea ff
	ff		 mov	 eax, DWORD PTR tv1855[ebp]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 _strncpy

; 280  : 
; 281  : 				if(this->WinQ[aIndex].Count[i][k] < this->Data[i][n].MissionLvL[k])

  001ef	8b 8d 1c ea ff
	ff		 mov	 ecx, DWORD PTR tv1853[ebp]
  001f5	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  001f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fb	3b 17		 cmp	 edx, DWORD PTR [edi]
  001fd	7d 1a		 jge	 SHORT $LN29@SendPacket

; 282  : 				{
; 283  : 					Reward = 0;
; 284  : 					qSend.ztQuest[i].MissionCheck[k] = 0;

  001ff	8b 85 28 ea ff
	ff		 mov	 eax, DWORD PTR tv3326[ebp]
  00205	8d 8c 05 29 eb
	ff ff		 lea	 ecx, DWORD PTR _qSend$[ebp+eax+241]
  0020c	c6 85 36 ea ff
	ff 00		 mov	 BYTE PTR _Reward$210804[ebp], 0
  00213	c6 04 19 00	 mov	 BYTE PTR [ecx+ebx], 0

; 285  : 				}
; 286  : 				else

  00217	eb 11		 jmp	 SHORT $LN28@SendPacket
$LN29@SendPacket:

; 287  : 				{
; 288  : 					qSend.ztQuest[i].MissionCheck[k] = 1;

  00219	8b 95 28 ea ff
	ff		 mov	 edx, DWORD PTR tv3326[ebp]
  0021f	8d 84 15 29 eb
	ff ff		 lea	 eax, DWORD PTR _qSend$[ebp+edx+241]
  00226	c6 04 18 01	 mov	 BYTE PTR [eax+ebx], 1
$LN28@SendPacket:

; 289  : 				}
; 290  : 			}
; 291  : 
; 292  : 			if(this->Data[i][n].MissionType[k] == 2)

  0022a	83 7f d8 02	 cmp	 DWORD PTR [edi-40], 2
  0022e	75 56		 jne	 SHORT $LN25@SendPacket

; 293  : 			{
; 294  : 				LPITEM_ATTRIBUTE pItem = &ItemAttribute[this->Data[i][n].MissionMain[k]];

  00230	8b 4f ec	 mov	 ecx, DWORD PTR [edi-20]

; 295  : 				strncpy(qSend.ztQuest[i].MissionName[k], pItem->Name,20);

  00233	8b 95 30 ea ff
	ff		 mov	 edx, DWORD PTR tv1855[ebp]
  00239	6b c9 70	 imul	 ecx, 112		; 00000070H
  0023c	6a 14		 push	 20			; 00000014H
  0023e	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00244	51		 push	 ecx
  00245	52		 push	 edx
  00246	e8 00 00 00 00	 call	 _strncpy

; 296  : 				if(this->WinQ[aIndex].Count[i][k] < this->Data[i][n].MissionLvL[k])

  0024b	8b 85 1c ea ff
	ff		 mov	 eax, DWORD PTR tv1853[ebp]
  00251	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00254	83 c4 0c	 add	 esp, 12			; 0000000cH
  00257	3b 0f		 cmp	 ecx, DWORD PTR [edi]
  00259	7d 1a		 jge	 SHORT $LN26@SendPacket

; 297  : 				{
; 298  : 					Reward = 0;
; 299  : 					qSend.ztQuest[i].MissionCheck[k] = 0;

  0025b	8b 95 28 ea ff
	ff		 mov	 edx, DWORD PTR tv3326[ebp]
  00261	8d 84 15 29 eb
	ff ff		 lea	 eax, DWORD PTR _qSend$[ebp+edx+241]
  00268	c6 85 36 ea ff
	ff 00		 mov	 BYTE PTR _Reward$210804[ebp], 0
  0026f	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 300  : 				}
; 301  : 				else

  00273	eb 11		 jmp	 SHORT $LN25@SendPacket
$LN26@SendPacket:

; 302  : 				{
; 303  : 					qSend.ztQuest[i].MissionCheck[k] = 1;

  00275	8b 8d 28 ea ff
	ff		 mov	 ecx, DWORD PTR tv3326[ebp]
  0027b	8d 94 0d 29 eb
	ff ff		 lea	 edx, DWORD PTR _qSend$[ebp+ecx+241]
  00282	c6 04 1a 01	 mov	 BYTE PTR [edx+ebx], 1
$LN25@SendPacket:

; 304  : 				}
; 305  : 			}
; 306  : 
; 307  : 			if(this->Data[i][n].MissionType[k] == 3)

  00286	83 7f d8 03	 cmp	 DWORD PTR [edi-40], 3
  0028a	75 64		 jne	 SHORT $LN22@SendPacket

; 308  : 			{
; 309  : 				LPITEM_ATTRIBUTE pItem = &ItemAttribute[this->Data[i][n].MissionMain[k]];

  0028c	8b 47 ec	 mov	 eax, DWORD PTR [edi-20]

; 310  : 				strncpy(qSend.ztQuest[i].MissionName[k], pItem->Name,20);

  0028f	8b 8d 30 ea ff
	ff		 mov	 ecx, DWORD PTR tv1855[ebp]
  00295	6b c0 70	 imul	 eax, 112		; 00000070H
  00298	6a 14		 push	 20			; 00000014H
  0029a	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0029f	50		 push	 eax
  002a0	51		 push	 ecx
  002a1	e8 00 00 00 00	 call	 _strncpy

; 311  : 
; 312  : 				if(!CheckItemUser(aIndex, i, k))

  002a6	8b 95 08 ea ff
	ff		 mov	 edx, DWORD PTR _i$210799[ebp]
  002ac	8b 85 18 ea ff
	ff		 mov	 eax, DWORD PTR _aIndex$GSCopy$[ebp]
  002b2	8b 8d 00 ea ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002bb	53		 push	 ebx
  002bc	52		 push	 edx
  002bd	50		 push	 eax
  002be	e8 00 00 00 00	 call	 ?CheckItemUser@cWinQuestSystem@@QAE_NHHH@Z ; cWinQuestSystem::CheckItemUser
  002c3	84 c0		 test	 al, al
  002c5	75 18		 jne	 SHORT $LN23@SendPacket

; 313  : 				{
; 314  : 					Reward = 0;
; 315  : 					qSend.ztQuest[i].MissionCheck[k] = 0;

  002c7	8b 8d 28 ea ff
	ff		 mov	 ecx, DWORD PTR tv3326[ebp]
  002cd	8d 94 0d 29 eb
	ff ff		 lea	 edx, DWORD PTR _qSend$[ebp+ecx+241]
  002d4	88 85 36 ea ff
	ff		 mov	 BYTE PTR _Reward$210804[ebp], al
  002da	88 04 1a	 mov	 BYTE PTR [edx+ebx], al

; 316  : 				}
; 317  : 				else

  002dd	eb 11		 jmp	 SHORT $LN22@SendPacket
$LN23@SendPacket:

; 318  : 				{
; 319  : 					qSend.ztQuest[i].MissionCheck[k] = 1;

  002df	8b 85 28 ea ff
	ff		 mov	 eax, DWORD PTR tv3326[ebp]
  002e5	8d 8c 05 29 eb
	ff ff		 lea	 ecx, DWORD PTR _qSend$[ebp+eax+241]
  002ec	c6 04 19 01	 mov	 BYTE PTR [ecx+ebx], 1
$LN22@SendPacket:

; 320  : 				}
; 321  : 			}
; 322  : 
; 323  : 			qSend.ztQuest[i].Count[k] = this->WinQ[aIndex].Count[i][k];

  002f0	8b 8d 1c ea ff
	ff		 mov	 ecx, DWORD PTR tv1853[ebp]
  002f6	8b 85 24 ea ff
	ff		 mov	 eax, DWORD PTR tv1869[ebp]
  002fc	66 8b 11	 mov	 dx, WORD PTR [ecx]
  002ff	83 85 30 ea ff
	ff 14		 add	 DWORD PTR tv1855[ebp], 20 ; 00000014H
  00306	66 89 90 66 01
	00 00		 mov	 WORD PTR [eax+358], dx
  0030d	43		 inc	 ebx
  0030e	83 c1 02	 add	 ecx, 2
  00311	83 c0 02	 add	 eax, 2
  00314	83 c7 04	 add	 edi, 4
  00317	89 8d 1c ea ff
	ff		 mov	 DWORD PTR tv1853[ebp], ecx
  0031d	89 85 24 ea ff
	ff		 mov	 DWORD PTR tv1869[ebp], eax
  00323	83 fb 05	 cmp	 ebx, 5
  00326	0f 8c 65 fe ff
	ff		 jl	 $LL33@SendPacket

; 324  : 		}
; 325  : 
; 326  : 		// ----
; 327  : 
; 328  : 		for(int k = 0; k < 5; k++)

  0032c	8b 85 0c ea ff
	ff		 mov	 eax, DWORD PTR tv3434[ebp]
  00332	33 c9		 xor	 ecx, ecx
  00334	8d 7e 9a	 lea	 edi, DWORD PTR [esi-102]
  00337	8d 56 86	 lea	 edx, DWORD PTR [esi-122]
  0033a	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  0033f	90		 npad	 1
$LL21@SendPacket:

; 329  : 		{
; 330  : 			qSend.ztQuest[i].RewardType[k] = this->Data[i][n].RewardType[k];

  00340	0f b6 58 ec	 movzx	 ebx, BYTE PTR [eax-20]
  00344	88 5c 0e 80	 mov	 BYTE PTR [esi+ecx-128], bl

; 331  : 			qSend.ztQuest[i].RewardMain[k] = this->Data[i][n].RewardMain[k];

  00348	8b 18		 mov	 ebx, DWORD PTR [eax]
  0034a	89 1a		 mov	 DWORD PTR [edx], ebx

; 332  : 			qSend.ztQuest[i].RewardLvL[k] = this->Data[i][n].RewardLvL[k];

  0034c	66 8b 58 14	 mov	 bx, WORD PTR [eax+20]
  00350	66 89 1f	 mov	 WORD PTR [edi], bx

; 333  : 			qSend.ztQuest[i].RewardLuck[k] = this->Data[i][n].RewardLuck[k];

  00353	0f b6 58 28	 movzx	 ebx, BYTE PTR [eax+40]
  00357	88 5c 0e a4	 mov	 BYTE PTR [esi+ecx-92], bl

; 334  : 			qSend.ztQuest[i].RewardExl[k] = this->Data[i][n].RewardExl[k];

  0035b	0f b6 58 3c	 movzx	 ebx, BYTE PTR [eax+60]
  0035f	88 5c 0e a9	 mov	 BYTE PTR [esi+ecx-87], bl

; 335  : 			qSend.ztQuest[i].RewardAnc[k] = this->Data[i][n].RewardAnc[k];

  00363	0f b6 58 50	 movzx	 ebx, BYTE PTR [eax+80]
  00367	88 5c 0e ae	 mov	 BYTE PTR [esi+ecx-82], bl
  0036b	41		 inc	 ecx
  0036c	83 c7 02	 add	 edi, 2
  0036f	83 c0 04	 add	 eax, 4
  00372	83 c2 04	 add	 edx, 4
  00375	83 f9 05	 cmp	 ecx, 5
  00378	7c c6		 jl	 SHORT $LL21@SendPacket

; 336  : 		}
; 337  : 
; 338  : 		// ----
; 339  : 		
; 340  : 		for(int k = 0; k < 5; k++)

  0037a	8b 9d 0c ea ff
	ff		 mov	 ebx, DWORD PTR tv3434[ebp]
  00380	8d 4e da	 lea	 ecx, DWORD PTR [esi-38]
  00383	8d 46 ce	 lea	 eax, DWORD PTR [esi-50]
  00386	33 ff		 xor	 edi, edi
  00388	89 8d 20 ea ff
	ff		 mov	 DWORD PTR tv2988[ebp], ecx
  0038e	81 c3 2c 01 00
	00		 add	 ebx, 300		; 0000012cH
  00394	89 85 24 ea ff
	ff		 mov	 DWORD PTR tv2992[ebp], eax
  0039a	8d 9b 00 00 00
	00		 npad	 6
$LL18@SendPacket:

; 341  : 		{
; 342  : 			qSend.ztQuest[i].PriceType[k] = this->Data[i][n].PriceType[k];
; 343  : 			qSend.ztQuest[i].PriceMain[k] = this->Data[i][n].PriceMain[k];

  003a0	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  003a3	8a 13		 mov	 dl, BYTE PTR [ebx]
  003a5	88 54 3e b3	 mov	 BYTE PTR [esi+edi-77], dl

; 344  : 			qSend.ztQuest[i].PriceLvL[k] = this->Data[i][n].PriceLvL[k];

  003a9	8b 95 24 ea ff
	ff		 mov	 edx, DWORD PTR tv2992[ebp]
  003af	89 41 e0	 mov	 DWORD PTR [ecx-32], eax
  003b2	89 85 30 ea ff
	ff		 mov	 DWORD PTR tv3148[ebp], eax
  003b8	66 8b 43 28	 mov	 ax, WORD PTR [ebx+40]
  003bc	66 89 02	 mov	 WORD PTR [edx], ax

; 345  : 
; 346  : 			qSend.ztQuest[i].PriceCheck[k] = 1;
; 347  : 
; 348  : 			//0 - off; 1 - zen; 2 - WcoinC; 3 - WcoinP; 4 - Goblin; 5 - Cred; 6 - Item
; 349  : 
; 350  : 			if(this->Data[i][n].PriceType[k] == 1) //1 - zen

  003bf	8b 03		 mov	 eax, DWORD PTR [ebx]
  003c1	c6 44 3e ee 01	 mov	 BYTE PTR [esi+edi-18], 1
  003c6	83 f8 01	 cmp	 eax, 1
  003c9	75 2e		 jne	 SHORT $LN51@SendPacket

; 351  : 			{
; 352  : 				qSend.ztQuest[i].PriceDone[k] = lpObj->Money;

  003cb	8b 95 2c ea ff
	ff		 mov	 edx, DWORD PTR _lpObj$[ebp]
  003d1	8b 92 f0 00 00
	00		 mov	 edx, DWORD PTR [edx+240]
  003d7	89 11		 mov	 DWORD PTR [ecx], edx

; 353  : 
; 354  : 				if(this->Data[i][n].PriceMain[k] > lpObj->Money)

  003d9	8b 8d 30 ea ff
	ff		 mov	 ecx, DWORD PTR tv3148[ebp]
  003df	8b 95 2c ea ff
	ff		 mov	 edx, DWORD PTR _lpObj$[ebp]
  003e5	3b 8a f0 00 00
	00		 cmp	 ecx, DWORD PTR [edx+240]
  003eb	7e 0c		 jle	 SHORT $LN51@SendPacket

; 355  : 				{
; 356  : 					Accept = 0;

  003ed	c6 85 37 ea ff
	ff 00		 mov	 BYTE PTR _Accept$210803[ebp], 0

; 357  : 					qSend.ztQuest[i].PriceCheck[k] = 0;

  003f4	c6 44 3e ee 00	 mov	 BYTE PTR [esi+edi-18], 0
$LN51@SendPacket:

; 358  : 				}
; 359  : 			}
; 360  : 			if(this->Data[i][n].PriceType[k] == 2) //2 - WcoinC

  003f9	83 f8 02	 cmp	 eax, 2
  003fc	75 3e		 jne	 SHORT $LN52@SendPacket

; 361  : 			{
; 362  : 				qSend.ztQuest[i].PriceDone[k] = lpObj->GameShop.WCoinC;

  003fe	8b 85 2c ea ff
	ff		 mov	 eax, DWORD PTR _lpObj$[ebp]
  00404	dd 80 00 23 00
	00		 fld	 QWORD PTR [eax+8960]
  0040a	e8 00 00 00 00	 call	 __ftol2_sse

; 363  : 				if(this->Data[i][n].PriceMain[k] > lpObj->GameShop.WCoinC)

  0040f	db 85 30 ea ff
	ff		 fild	 DWORD PTR tv3148[ebp]
  00415	8b 8d 20 ea ff
	ff		 mov	 ecx, DWORD PTR tv2988[ebp]
  0041b	8b 95 2c ea ff
	ff		 mov	 edx, DWORD PTR _lpObj$[ebp]
  00421	89 01		 mov	 DWORD PTR [ecx], eax
  00423	dc 9a 00 23 00
	00		 fcomp	 QWORD PTR [edx+8960]
  00429	df e0		 fnstsw	 ax
  0042b	f6 c4 41	 test	 ah, 65			; 00000041H
  0042e	75 0c		 jne	 SHORT $LN52@SendPacket

; 364  : 				{
; 365  : 					Accept = 0;

  00430	c6 85 37 ea ff
	ff 00		 mov	 BYTE PTR _Accept$210803[ebp], 0

; 366  : 					qSend.ztQuest[i].PriceCheck[k] = 0;

  00437	c6 44 3e ee 00	 mov	 BYTE PTR [esi+edi-18], 0
$LN52@SendPacket:

; 367  : 				}
; 368  : 			}
; 369  : 			if(this->Data[i][n].PriceType[k] == 3) //3 - WcoinP

  0043c	83 3b 03	 cmp	 DWORD PTR [ebx], 3
  0043f	75 3e		 jne	 SHORT $LN53@SendPacket

; 370  : 			{
; 371  : 				qSend.ztQuest[i].PriceDone[k] = lpObj->GameShop.WCoinP;

  00441	8b 85 2c ea ff
	ff		 mov	 eax, DWORD PTR _lpObj$[ebp]
  00447	dd 80 f8 22 00
	00		 fld	 QWORD PTR [eax+8952]
  0044d	e8 00 00 00 00	 call	 __ftol2_sse

; 372  : 				if(this->Data[i][n].PriceMain[k] > lpObj->GameShop.WCoinP)

  00452	db 85 30 ea ff
	ff		 fild	 DWORD PTR tv3148[ebp]
  00458	8b 8d 20 ea ff
	ff		 mov	 ecx, DWORD PTR tv2988[ebp]
  0045e	8b 95 2c ea ff
	ff		 mov	 edx, DWORD PTR _lpObj$[ebp]
  00464	89 01		 mov	 DWORD PTR [ecx], eax
  00466	dc 9a f8 22 00
	00		 fcomp	 QWORD PTR [edx+8952]
  0046c	df e0		 fnstsw	 ax
  0046e	f6 c4 41	 test	 ah, 65			; 00000041H
  00471	75 0c		 jne	 SHORT $LN53@SendPacket

; 373  : 				{
; 374  : 					Accept = 0;

  00473	c6 85 37 ea ff
	ff 00		 mov	 BYTE PTR _Accept$210803[ebp], 0

; 375  : 					qSend.ztQuest[i].PriceCheck[k] = 0;

  0047a	c6 44 3e ee 00	 mov	 BYTE PTR [esi+edi-18], 0
$LN53@SendPacket:

; 376  : 				}
; 377  : 			}
; 378  : 			if(this->Data[i][n].PriceType[k] == 4) //4 - Goblin

  0047f	83 3b 04	 cmp	 DWORD PTR [ebx], 4
  00482	75 3e		 jne	 SHORT $LN54@SendPacket

; 379  : 			{
; 380  : 				qSend.ztQuest[i].PriceDone[k] = lpObj->GameShop.GoblinPoint;

  00484	8b 85 2c ea ff
	ff		 mov	 eax, DWORD PTR _lpObj$[ebp]
  0048a	dd 80 08 23 00
	00		 fld	 QWORD PTR [eax+8968]
  00490	e8 00 00 00 00	 call	 __ftol2_sse

; 381  : 				if(this->Data[i][n].PriceMain[k] > lpObj->GameShop.GoblinPoint)

  00495	db 85 30 ea ff
	ff		 fild	 DWORD PTR tv3148[ebp]
  0049b	8b 8d 20 ea ff
	ff		 mov	 ecx, DWORD PTR tv2988[ebp]
  004a1	8b 95 2c ea ff
	ff		 mov	 edx, DWORD PTR _lpObj$[ebp]
  004a7	89 01		 mov	 DWORD PTR [ecx], eax
  004a9	dc 9a 08 23 00
	00		 fcomp	 QWORD PTR [edx+8968]
  004af	df e0		 fnstsw	 ax
  004b1	f6 c4 41	 test	 ah, 65			; 00000041H
  004b4	75 0c		 jne	 SHORT $LN54@SendPacket

; 382  : 				{
; 383  : 					Accept = 0;

  004b6	c6 85 37 ea ff
	ff 00		 mov	 BYTE PTR _Accept$210803[ebp], 0

; 384  : 					qSend.ztQuest[i].PriceCheck[k] = 0;

  004bd	c6 44 3e ee 00	 mov	 BYTE PTR [esi+edi-18], 0
$LN54@SendPacket:

; 385  : 				}
; 386  : 			}
; 387  : 			if(this->Data[i][n].PriceType[k] == 5) //5 - Cred

  004c2	83 3b 05	 cmp	 DWORD PTR [ebx], 5
  004c5	75 47		 jne	 SHORT $LN55@SendPacket

; 388  : 			{
; 389  : 				qSend.ztQuest[i].PriceDone[k] = lpObj->ZtCred;

  004c7	8b 85 2c ea ff
	ff		 mov	 eax, DWORD PTR _lpObj$[ebp]
  004cd	d9 80 a8 22 00
	00		 fld	 DWORD PTR [eax+8872]
  004d3	05 a8 22 00 00	 add	 eax, 8872		; 000022a8H
  004d8	89 85 f8 e9 ff
	ff		 mov	 DWORD PTR tv1410[ebp], eax
  004de	e8 00 00 00 00	 call	 __ftol2_sse

; 390  : 				if(this->Data[i][n].PriceMain[k] > lpObj->ZtCred)

  004e3	db 85 30 ea ff
	ff		 fild	 DWORD PTR tv3148[ebp]
  004e9	8b 8d 20 ea ff
	ff		 mov	 ecx, DWORD PTR tv2988[ebp]
  004ef	8b 95 f8 e9 ff
	ff		 mov	 edx, DWORD PTR tv1410[ebp]
  004f5	89 01		 mov	 DWORD PTR [ecx], eax
  004f7	d9 02		 fld	 DWORD PTR [edx]
  004f9	de d9		 fcompp
  004fb	df e0		 fnstsw	 ax
  004fd	f6 c4 05	 test	 ah, 5
  00500	7a 0c		 jp	 SHORT $LN55@SendPacket

; 391  : 				{
; 392  : 					Accept = 0;

  00502	c6 85 37 ea ff
	ff 00		 mov	 BYTE PTR _Accept$210803[ebp], 0

; 393  : 					qSend.ztQuest[i].PriceCheck[k] = 0;

  00509	c6 44 3e ee 00	 mov	 BYTE PTR [esi+edi-18], 0
$LN55@SendPacket:

; 394  : 				}
; 395  : 			}
; 396  : 			if(this->Data[i][n].PriceType[k] == 6) //6 - Item

  0050e	83 3b 06	 cmp	 DWORD PTR [ebx], 6
  00511	75 46		 jne	 SHORT $LN17@SendPacket

; 397  : 			{
; 398  : 				qSend.ztQuest[i].PriceDone[k] = gObjGetItemCountInInventory(aIndex,this->Data[i][n].PriceMain[k],this->Data[i][n].PriceLvL[k]);

  00513	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00516	8b 8d 30 ea ff
	ff		 mov	 ecx, DWORD PTR tv3148[ebp]
  0051c	8b 95 18 ea ff
	ff		 mov	 edx, DWORD PTR _aIndex$GSCopy$[ebp]
  00522	50		 push	 eax
  00523	51		 push	 ecx
  00524	52		 push	 edx
  00525	e8 00 00 00 00	 call	 ?gObjGetItemCountInInventory@@YAHHHH@Z ; gObjGetItemCountInInventory
  0052a	8b 8d 20 ea ff
	ff		 mov	 ecx, DWORD PTR tv2988[ebp]

; 399  : 				if(gObjGetItemCountInInventory(aIndex,this->Data[i][n].PriceMain[k],this->Data[i][n].PriceLvL[k]) < 0)

  00530	8b 53 28	 mov	 edx, DWORD PTR [ebx+40]
  00533	89 01		 mov	 DWORD PTR [ecx], eax
  00535	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00538	8b 8d 18 ea ff
	ff		 mov	 ecx, DWORD PTR _aIndex$GSCopy$[ebp]
  0053e	52		 push	 edx
  0053f	50		 push	 eax
  00540	51		 push	 ecx
  00541	e8 00 00 00 00	 call	 ?gObjGetItemCountInInventory@@YAHHHH@Z ; gObjGetItemCountInInventory
  00546	83 c4 18	 add	 esp, 24			; 00000018H
  00549	85 c0		 test	 eax, eax
  0054b	79 0c		 jns	 SHORT $LN17@SendPacket

; 400  : 				{
; 401  : 					Accept = 0;

  0054d	c6 85 37 ea ff
	ff 00		 mov	 BYTE PTR _Accept$210803[ebp], 0

; 402  : 					qSend.ztQuest[i].PriceCheck[k] = 0;

  00554	c6 44 3e ee 00	 mov	 BYTE PTR [esi+edi-18], 0
$LN17@SendPacket:

; 336  : 		}
; 337  : 
; 338  : 		// ----
; 339  : 		
; 340  : 		for(int k = 0; k < 5; k++)

  00559	8b 8d 20 ea ff
	ff		 mov	 ecx, DWORD PTR tv2988[ebp]
  0055f	83 85 24 ea ff
	ff 02		 add	 DWORD PTR tv2992[ebp], 2
  00566	47		 inc	 edi
  00567	83 c1 04	 add	 ecx, 4
  0056a	83 c3 04	 add	 ebx, 4
  0056d	89 8d 20 ea ff
	ff		 mov	 DWORD PTR tv2988[ebp], ecx
  00573	83 ff 05	 cmp	 edi, 5
  00576	0f 8c 24 fe ff
	ff		 jl	 $LL18@SendPacket

; 403  : 				}
; 404  : 			}
; 405  : 		}
; 406  : 
; 407  : 		// ----
; 408  : 
; 409  : 		qSend.ztQuest[i].NeedLevel = this->Data[i][n].NeedLevel;

  0057c	8b 8d 0c ea ff
	ff		 mov	 ecx, DWORD PTR tv3434[ebp]
  00582	0f b7 91 68 01
	00 00		 movzx	 edx, WORD PTR [ecx+360]

; 410  : 		qSend.ztQuest[i].NeedReset = this->Data[i][n].NeedReset;

  00589	66 8b 81 6c 01
	00 00		 mov	 ax, WORD PTR [ecx+364]
  00590	66 89 56 f4	 mov	 WORD PTR [esi-12], dx

; 411  : 		qSend.ztQuest[i].NeedGrand = this->Data[i][n].NeedGrand;

  00594	0f b7 91 70 01
	00 00		 movzx	 edx, WORD PTR [ecx+368]
  0059b	66 89 46 f8	 mov	 WORD PTR [esi-8], ax

; 412  : 
; 413  : 		qSend.ztQuest[i].LevelDone = lpObj->Level;

  0059f	8b 85 2c ea ff
	ff		 mov	 eax, DWORD PTR _lpObj$[ebp]
  005a5	66 89 56 fc	 mov	 WORD PTR [esi-4], dx
  005a9	0f b7 90 be 00
	00 00		 movzx	 edx, WORD PTR [eax+190]
  005b0	66 89 56 f6	 mov	 WORD PTR [esi-10], dx

; 414  : 		if(this->Data[i][n].NeedLevel > lpObj->Level)

  005b4	0f bf 90 be 00
	00 00		 movsx	 edx, WORD PTR [eax+190]
  005bb	39 91 68 01 00
	00		 cmp	 DWORD PTR [ecx+360], edx
  005c1	7e 07		 jle	 SHORT $LN57@SendPacket

; 415  : 		{
; 416  : 			Accept = 0;

  005c3	c6 85 37 ea ff
	ff 00		 mov	 BYTE PTR _Accept$210803[ebp], 0
$LN57@SendPacket:

; 417  : 		}
; 418  : 
; 419  : 		qSend.ztQuest[i].ResetDone = lpObj->Reset;

  005ca	66 8b 90 90 22
	00 00		 mov	 dx, WORD PTR [eax+8848]
  005d1	66 89 56 fa	 mov	 WORD PTR [esi-6], dx

; 420  : 		if(this->Data[i][n].NeedReset > lpObj->Reset)

  005d5	8b 91 6c 01 00
	00		 mov	 edx, DWORD PTR [ecx+364]
  005db	3b 90 90 22 00
	00		 cmp	 edx, DWORD PTR [eax+8848]
  005e1	7e 07		 jle	 SHORT $LN2@SendPacket

; 421  : 		{
; 422  : 			Accept = 0;

  005e3	c6 85 37 ea ff
	ff 00		 mov	 BYTE PTR _Accept$210803[ebp], 0
$LN2@SendPacket:

; 423  : 		}
; 424  : 
; 425  : 		qSend.ztQuest[i].GrandDone = lpObj->GReset;

  005ea	66 8b 90 94 22
	00 00		 mov	 dx, WORD PTR [eax+8852]

; 426  : 		if(this->Data[i][n].NeedGrand > lpObj->GReset)

  005f1	8b 89 70 01 00
	00		 mov	 ecx, DWORD PTR [ecx+368]
  005f7	66 89 56 fe	 mov	 WORD PTR [esi-2], dx
  005fb	3b 88 94 22 00
	00		 cmp	 ecx, DWORD PTR [eax+8852]
  00601	7e 07		 jle	 SHORT $LN1@SendPacket

; 427  : 		{
; 428  : 			Accept = 0;

  00603	c6 85 37 ea ff
	ff 00		 mov	 BYTE PTR _Accept$210803[ebp], 0
$LN1@SendPacket:

; 429  : 		}
; 430  : 
; 431  : 		qSend.ztQuest[i].accept = Accept;
; 432  : 		qSend.ztQuest[i].reward = Reward;

  0060a	8a 85 36 ea ff
	ff		 mov	 al, BYTE PTR _Reward$210804[ebp]
  00610	8a 95 37 ea ff
	ff		 mov	 dl, BYTE PTR _Accept$210803[ebp]
  00616	ff 85 08 ea ff
	ff		 inc	 DWORD PTR _i$210799[ebp]
  0061c	83 85 04 ea ff
	ff 04		 add	 DWORD PTR tv3760[ebp], 4
  00623	83 85 14 ea ff
	ff 02		 add	 DWORD PTR tv3758[ebp], 2
  0062a	8b 8d 1c ea ff
	ff		 mov	 ecx, DWORD PTR tv1853[ebp]
  00630	81 85 28 ea ff
	ff 28 02 00 00	 add	 DWORD PTR tv3326[ebp], 552 ; 00000228H
  0063a	88 86 be fe ff
	ff		 mov	 BYTE PTR [esi-322], al
  00640	8b 85 10 ea ff
	ff		 mov	 eax, DWORD PTR tv3328[ebp]
  00646	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  0064b	88 96 bf fe ff
	ff		 mov	 BYTE PTR [esi-321], dl
  00651	89 8d 24 ea ff
	ff		 mov	 DWORD PTR tv3817[ebp], ecx
  00657	89 85 10 ea ff
	ff		 mov	 DWORD PTR tv3328[ebp], eax
  0065d	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  00662	0f 8c 68 fa ff
	ff		 jl	 $LL50@SendPacket

; 433  : 	}
; 434  : 
; 435  : 	qSend.OpenWind = OpenWind;
; 436  : 
; 437  : 	// ----
; 438  : 
; 439  : 	qSend.Damage = this->WinQ[aIndex].Damage;

  00668	8b 85 fc e9 ff
	ff		 mov	 eax, DWORD PTR tv1475[ebp]
  0066e	8b 88 cc d3 5f
	00		 mov	 ecx, DWORD PTR [eax+6280140]
  00674	8a 55 0c	 mov	 dl, BYTE PTR _OpenWind$[ebp]
  00677	88 95 3d ea ff
	ff		 mov	 BYTE PTR _qSend$[ebp+5], dl

; 440  : 	qSend.Defence = this->WinQ[aIndex].Defence;

  0067d	8b 90 d0 d3 5f
	00		 mov	 edx, DWORD PTR [eax+6280144]
  00683	89 8d 40 ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+8], ecx

; 441  : 	qSend.Life = this->WinQ[aIndex].Life;

  00689	8b 88 d4 d3 5f
	00		 mov	 ecx, DWORD PTR [eax+6280148]
  0068f	89 95 44 ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+12], edx

; 442  : 	qSend.SD = this->WinQ[aIndex].SD;

  00695	8b 90 d8 d3 5f
	00		 mov	 edx, DWORD PTR [eax+6280152]
  0069b	89 8d 48 ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+16], ecx

; 443  : 	qSend.Crit = this->WinQ[aIndex].Crit;

  006a1	8b 88 dc d3 5f
	00		 mov	 ecx, DWORD PTR [eax+6280156]
  006a7	89 95 4c ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+20], edx

; 444  : 	qSend.Exel = this->WinQ[aIndex].Exel;

  006ad	8b 90 e0 d3 5f
	00		 mov	 edx, DWORD PTR [eax+6280160]
  006b3	89 8d 50 ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+24], ecx

; 445  : 	qSend.Double = this->WinQ[aIndex].Double;

  006b9	8b 88 e4 d3 5f
	00		 mov	 ecx, DWORD PTR [eax+6280164]
  006bf	89 95 54 ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+28], edx

; 446  : 	qSend.Ignore = this->WinQ[aIndex].Ignore;

  006c5	8b 90 e8 d3 5f
	00		 mov	 edx, DWORD PTR [eax+6280168]
  006cb	89 8d 58 ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+32], ecx

; 447  : 	qSend.Ref = this->WinQ[aIndex].Ref;

  006d1	8b 88 ec d3 5f
	00		 mov	 ecx, DWORD PTR [eax+6280172]
  006d7	89 95 5c ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+36], edx

; 448  : 	qSend.Exp = this->WinQ[aIndex].Exp;

  006dd	8b 90 f0 d3 5f
	00		 mov	 edx, DWORD PTR [eax+6280176]

; 449  : 	qSend.Drop = this->WinQ[aIndex].Drop;	

  006e3	8b 80 f4 d3 5f
	00		 mov	 eax, DWORD PTR [eax+6280180]
  006e9	89 8d 60 ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+40], ecx

; 450  : 
; 451  : 	// ----
; 452  : 
; 453  : 	DataSend(aIndex,(LPBYTE)&qSend,sizeof(qSend));

  006ef	68 c4 15 00 00	 push	 5572			; 000015c4H
  006f4	8d 8d 38 ea ff
	ff		 lea	 ecx, DWORD PTR _qSend$[ebp]
  006fa	89 95 64 ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+44], edx
  00700	8b 95 18 ea ff
	ff		 mov	 edx, DWORD PTR _aIndex$GSCopy$[ebp]
  00706	51		 push	 ecx
  00707	52		 push	 edx
  00708	89 85 68 ea ff
	ff		 mov	 DWORD PTR _qSend$[ebp+48], eax
  0070e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00713	83 c4 0c	 add	 esp, 12			; 0000000cH
  00716	5b		 pop	 ebx
$LN40@SendPacket:

; 454  : }

  00717	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0071a	5f		 pop	 edi
  0071b	33 cd		 xor	 ecx, ebp
  0071d	5e		 pop	 esi
  0071e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00723	8b e5		 mov	 esp, ebp
  00725	5d		 pop	 ebp
  00726	c2 08 00	 ret	 8
?SendPacket@cWinQuestSystem@@QAEXHE@Z ENDP		; cWinQuestSystem::SendPacket
_TEXT	ENDS
PUBLIC	_aIndex$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SendInfoPacket@cWinQuestSystem@@QAEXH@Z	; cWinQuestSystem::SendInfoPacket
; Function compile flags: /Ogtp
;	COMDAT ?SendInfoPacket@cWinQuestSystem@@QAEXH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -188					; size = 4
_aIndex$GSCopy$ = -184					; size = 4
tv503 = -180						; size = 4
_i$210854 = -176					; size = 4
tv732 = -172						; size = 4
tv633 = -168						; size = 4
tv509 = -164						; size = 4
_rSend$ = -160						; size = 156
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?SendInfoPacket@cWinQuestSystem@@QAEXH@Z PROC		; cWinQuestSystem::SendInfoPacket, COMDAT
; _this$ = ecx

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]

; 460  : 	CGWinQuestProcess rSend;
; 461  : 
; 462  : 	ZeroMemory(&rSend,sizeof(rSend));

  00019	68 9c 00 00 00	 push	 156			; 0000009cH
  0001e	33 db		 xor	 ebx, ebx
  00020	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _rSend$[ebp]
  00026	8b f1		 mov	 esi, ecx
  00028	53		 push	 ebx
  00029	50		 push	 eax

; 463  : 	PHeadSubSetW((LPBYTE)&rSend, 0xFA, 0x03, sizeof(rSend));
; 464  : 
; 465  : 	for(int i=0; i < MAX_WIN_QUEST; i++)

  0002a	89 b5 44 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00030	89 bd 48 ff ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], edi
  00036	e8 00 00 00 00	 call	 _memset
  0003b	68 9c 00 00 00	 push	 156			; 0000009cH
  00040	6a 03		 push	 3
  00042	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _rSend$[ebp]
  00048	68 fa 00 00 00	 push	 250			; 000000faH
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ?PHeadSubSetW@@YAXPAEEEH@Z ; PHeadSubSetW
  00053	69 ff b8 00 00
	00		 imul	 edi, 184		; 000000b8H
  00059	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0005c	8d 90 54 d3 5f
	00		 lea	 edx, DWORD PTR [eax+6280020]
  00062	83 c4 1c	 add	 esp, 28			; 0000001cH
  00065	89 9d 50 ff ff
	ff		 mov	 DWORD PTR _i$210854[ebp], ebx
  0006b	89 9d 58 ff ff
	ff		 mov	 DWORD PTR tv633[ebp], ebx

; 466  : 	{
; 467  : 		int n = this->WinQ[aIndex].Num[i];

  00071	8d 5d ca	 lea	 ebx, DWORD PTR _rSend$[ebp+106]
  00074	8d 8d 66 ff ff
	ff		 lea	 ecx, DWORD PTR _rSend$[ebp+6]
  0007a	89 95 54 ff ff
	ff		 mov	 DWORD PTR tv732[ebp], edx
  00080	05 68 d3 5f 00	 add	 eax, 6280040		; 005fd368H
  00085	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL24@SendInfoPa:
  00090	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR tv732[ebp]
  00096	0f bf 12	 movsx	 edx, WORD PTR [edx]
  00099	8b bd 58 ff ff
	ff		 mov	 edi, DWORD PTR tv633[ebp]
  0009f	03 fa		 add	 edi, edx
  000a1	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _this$GSCopy$[ebp]

; 468  : 		for(int k=0;k<5;k++)

  000a7	33 f6		 xor	 esi, esi
  000a9	69 ff 74 02 00
	00		 imul	 edi, 628		; 00000274H
  000af	8d 54 17 3c	 lea	 edx, DWORD PTR [edi+edx+60]
  000b3	89 95 4c ff ff
	ff		 mov	 DWORD PTR tv503[ebp], edx
  000b9	8b f8		 mov	 edi, eax
  000bb	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv509[ebp], ecx
$LL25@SendInfoPa:

; 469  : 		{
; 470  : 			rSend.Count[i][k] = this->WinQ[aIndex].Count[i][k];

  000c1	0f b7 07	 movzx	 eax, WORD PTR [edi]
  000c4	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv509[ebp]
  000ca	66 89 01	 mov	 WORD PTR [ecx], ax

; 471  : 
; 472  : 			if(this->WinQ[aIndex].Count[i][k] < this->Data[i][n].MissionLvL[k])

  000cd	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  000d0	98		 cwde
  000d1	3b c1		 cmp	 eax, ecx
  000d3	7d 06		 jge	 SHORT $LN11@SendInfoPa

; 473  : 			{
; 474  : 				rSend.Check[i][k] = 0;

  000d5	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 475  : 			}
; 476  : 			else

  000d9	eb 04		 jmp	 SHORT $LN10@SendInfoPa
$LN11@SendInfoPa:

; 477  : 			{
; 478  : 				rSend.Check[i][k] = 1;

  000db	c6 04 33 01	 mov	 BYTE PTR [ebx+esi], 1
$LN10@SendInfoPa:

; 479  : 			}
; 480  : 
; 481  : 			if(this->Data[i][n].MissionType[k] == 1)	//Kill Mission

  000df	83 3a 01	 cmp	 DWORD PTR [edx], 1
  000e2	75 0b		 jne	 SHORT $LN8@SendInfoPa

; 482  : 			{
; 483  : 				if(this->WinQ[aIndex].Count[i][k] < this->Data[i][n].MissionLvL[k])

  000e4	0f bf 07	 movsx	 eax, WORD PTR [edi]
  000e7	3b c1		 cmp	 eax, ecx
  000e9	0f 9d c0	 setge	 al
  000ec	88 04 33	 mov	 BYTE PTR [ebx+esi], al
$LN8@SendInfoPa:

; 484  : 				{
; 485  : 					rSend.Check[i][k] = 0;
; 486  : 				}
; 487  : 				else
; 488  : 				{
; 489  : 					rSend.Check[i][k] = 1;
; 490  : 				}
; 491  : 			}
; 492  : 
; 493  : 			if(this->Data[i][n].MissionType[k] == 2)	//Drop Mission

  000ef	83 3a 02	 cmp	 DWORD PTR [edx], 2
  000f2	75 0b		 jne	 SHORT $LN5@SendInfoPa

; 494  : 			{
; 495  : 				if(this->WinQ[aIndex].Count[i][k] < this->Data[i][n].MissionLvL[k])

  000f4	0f bf 07	 movsx	 eax, WORD PTR [edi]
  000f7	3b c1		 cmp	 eax, ecx
  000f9	0f 9d c1	 setge	 cl
  000fc	88 0c 33	 mov	 BYTE PTR [ebx+esi], cl
$LN5@SendInfoPa:

; 496  : 				{
; 497  : 					rSend.Check[i][k] = 0;
; 498  : 				}
; 499  : 				else
; 500  : 				{
; 501  : 					rSend.Check[i][k] = 1;
; 502  : 				}
; 503  : 			}
; 504  : 
; 505  : 			if(this->Data[i][n].MissionType[k] == 3)	//Item Mission

  000ff	83 3a 03	 cmp	 DWORD PTR [edx], 3
  00102	75 28		 jne	 SHORT $LN13@SendInfoPa

; 506  : 			{
; 507  : 
; 508  : 				if(!CheckItemUser(aIndex, i, k))

  00104	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _i$210854[ebp]
  0010a	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _aIndex$GSCopy$[ebp]
  00110	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00116	56		 push	 esi
  00117	52		 push	 edx
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?CheckItemUser@cWinQuestSystem@@QAE_NHHH@Z ; cWinQuestSystem::CheckItemUser
  0011e	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv503[ebp]
  00124	84 c0		 test	 al, al
  00126	0f 95 c1	 setne	 cl
  00129	88 0c 33	 mov	 BYTE PTR [ebx+esi], cl
$LN13@SendInfoPa:

; 468  : 		for(int k=0;k<5;k++)

  0012c	83 85 5c ff ff
	ff 02		 add	 DWORD PTR tv509[ebp], 2
  00133	46		 inc	 esi
  00134	83 c2 04	 add	 edx, 4
  00137	83 c7 02	 add	 edi, 2
  0013a	89 95 4c ff ff
	ff		 mov	 DWORD PTR tv503[ebp], edx
  00140	83 fe 05	 cmp	 esi, 5
  00143	0f 8c 78 ff ff
	ff		 jl	 $LL25@SendInfoPa

; 463  : 	PHeadSubSetW((LPBYTE)&rSend, 0xFA, 0x03, sizeof(rSend));
; 464  : 
; 465  : 	for(int i=0; i < MAX_WIN_QUEST; i++)

  00149	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv633[ebp]
  0014f	ff 85 50 ff ff
	ff		 inc	 DWORD PTR _i$210854[ebp]
  00155	83 85 54 ff ff
	ff 02		 add	 DWORD PTR tv732[ebp], 2
  0015c	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv509[ebp]
  00162	81 c2 e8 03 00
	00		 add	 edx, 1000		; 000003e8H
  00168	83 c3 05	 add	 ebx, 5
  0016b	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv633[ebp], edx
  00171	8b c7		 mov	 eax, edi
  00173	81 fa 10 27 00
	00		 cmp	 edx, 10000		; 00002710H
  00179	0f 8c 11 ff ff
	ff		 jl	 $LL24@SendInfoPa

; 509  : 				{
; 510  : 					rSend.Check[i][k] = 0;
; 511  : 				}
; 512  : 				else
; 513  : 				{
; 514  : 					rSend.Check[i][k] = 1;
; 515  : 				}
; 516  : 			}
; 517  : 
; 518  : 		}
; 519  : 	}
; 520  : 
; 521  : 	DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  0017f	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _aIndex$GSCopy$[ebp]
  00185	68 9c 00 00 00	 push	 156			; 0000009cH
  0018a	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _rSend$[ebp]
  00190	52		 push	 edx
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 522  : }

  00197	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019d	5f		 pop	 edi
  0019e	5e		 pop	 esi
  0019f	33 cd		 xor	 ecx, ebp
  001a1	5b		 pop	 ebx
  001a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c2 04 00	 ret	 4
?SendInfoPacket@cWinQuestSystem@@QAEXH@Z ENDP		; cWinQuestSystem::SendInfoPacket
_TEXT	ENDS
PUBLIC	?RecvPacket@cWinQuestSystem@@QAEXHPAUCGSendQuestResult@@@Z ; cWinQuestSystem::RecvPacket
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?gObjDeleteItemsCount@@YAHHFFH@Z:PROC		; gObjDeleteItemsCount
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
EXTRN	?GDSaveUserInfo@GameShop@@QAEXH@Z:PROC		; GameShop::GDSaveUserInfo
EXTRN	?gGameShop@@3VGameShop@@A:BYTE			; gGameShop
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
; Function compile flags: /Ogtp
;	COMDAT ?RecvPacket@cWinQuestSystem@@QAEXHPAUCGSendQuestResult@@@Z
_TEXT	SEGMENT
tv1227 = -24						; size = 4
_n$ = -20						; size = 4
tv1226 = -16						; size = 4
_i$ = -12						; size = 4
_k$210896 = -8						; size = 4
_k$210885 = -8						; size = 4
tv1568 = -4						; size = 4
_aIndex$ = 8						; size = 4
tv1658 = 12						; size = 4
_Date$ = 12						; size = 4
?RecvPacket@cWinQuestSystem@@QAEXHPAUCGSendQuestResult@@@Z PROC ; cWinQuestSystem::RecvPacket, COMDAT
; _this$ = ecx

; 527  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 528  : 	if(!this->Enable) return;

  00009	80 be a8 f0 89
	00 00		 cmp	 BYTE PTR [esi+9040040], 0
  00010	0f 84 8c 05 00
	00		 je	 $LN27@RecvPacket

; 529  : 
; 530  : 	LPOBJ lpObj = &gObj[aIndex];
; 531  : 
; 532  : 	int i = Date->Num;

  00016	8b 45 0c	 mov	 eax, DWORD PTR _Date$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0001c	53		 push	 ebx
  0001d	57		 push	 edi
  0001e	0f b6 78 05	 movzx	 edi, BYTE PTR [eax+5]

; 533  : 	int n = this->WinQ[aIndex].Num[i];

  00022	8b c1		 mov	 eax, ecx
  00024	6b c0 5c	 imul	 eax, 92			; 0000005cH
  00027	8b d9		 mov	 ebx, ecx
  00029	69 db 50 2b 00
	00		 imul	 ebx, 11088		; 00002b50H
  0002f	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00035	89 45 f0	 mov	 DWORD PTR tv1226[ebp], eax
  00038	03 c7		 add	 eax, edi
  0003a	0f bf 94 46 54
	d3 5f 00	 movsx	 edx, WORD PTR [esi+eax*2+6280020]
  00042	89 45 e8	 mov	 DWORD PTR tv1227[ebp], eax

; 534  : 
; 535  : 	//-----------------------------------------------------------------------------------
; 536  : 	//	Quest Price Update
; 537  : 	//-----------------------------------------------------------------------------------
; 538  : 
; 539  : 	if(Date->Result == 1)

  00045	8b 45 0c	 mov	 eax, DWORD PTR _Date$[ebp]
  00048	80 78 04 01	 cmp	 BYTE PTR [eax+4], 1
  0004c	89 7d f4	 mov	 DWORD PTR _i$[ebp], edi
  0004f	89 55 ec	 mov	 DWORD PTR _n$[ebp], edx
  00052	0f 85 6a 01 00
	00		 jne	 $LN48@RecvPacket

; 540  : 	{
; 541  : 		for(int k = 0; k < 5; k++)

  00058	69 ff e8 03 00
	00		 imul	 edi, 1000		; 000003e8H
  0005e	03 fa		 add	 edi, edx
  00060	33 c0		 xor	 eax, eax
  00062	69 ff 9d 00 00
	00		 imul	 edi, 157		; 0000009dH
  00068	8d 94 be 2c 01
	00 00		 lea	 edx, DWORD PTR [esi+edi*4+300]
  0006f	89 45 f8	 mov	 DWORD PTR _k$210885[ebp], eax
  00072	89 55 fc	 mov	 DWORD PTR tv1568[ebp], edx
$LL36@RecvPacket:

; 542  : 		{
; 543  : 			//0 - off; 1 - zen; 2 - WcoinC; 3 - WcoinP; 4 - Goblin; 5 - Cred; 6 - Item
; 544  : 			if(this->Data[i][n].PriceType[k] == 1) //1 - zen

  00075	8b 55 fc	 mov	 edx, DWORD PTR tv1568[ebp]
  00078	83 3a 01	 cmp	 DWORD PTR [edx], 1
  0007b	75 25		 jne	 SHORT $LN33@RecvPacket

; 545  : 			{
; 546  : 				lpObj->Money -= this->Data[i][n].PriceMain[k];

  0007d	03 c7		 add	 eax, edi
  0007f	8b 94 86 40 01
	00 00		 mov	 edx, DWORD PTR [esi+eax*4+320]
  00086	29 93 f0 00 00
	00		 sub	 DWORD PTR [ebx+240], edx
  0008c	8b 83 f0 00 00
	00		 mov	 eax, DWORD PTR [ebx+240]

; 547  : 				GCMoneySend(aIndex,lpObj->Money);

  00092	50		 push	 eax
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _k$210885[ebp]
  0009f	83 c4 08	 add	 esp, 8
$LN33@RecvPacket:

; 548  : 			}
; 549  : 			if(this->Data[i][n].PriceType[k] == 2) //2 - WcoinC

  000a2	8b 55 fc	 mov	 edx, DWORD PTR tv1568[ebp]
  000a5	83 3a 02	 cmp	 DWORD PTR [edx], 2
  000a8	75 26		 jne	 SHORT $LN47@RecvPacket

; 550  : 			{
; 551  : 				lpObj->GameShop.WCoinC -= this->Data[i][n].PriceMain[k];

  000aa	03 c7		 add	 eax, edi
  000ac	db 84 86 40 01
	00 00		 fild	 DWORD PTR [esi+eax*4+320]

; 552  : 				gGameShop.GDSaveUserInfo(aIndex);

  000b3	51		 push	 ecx
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  000b9	dc ab 00 23 00
	00		 fsubr	 QWORD PTR [ebx+8960]
  000bf	dd 9b 00 23 00
	00		 fstp	 QWORD PTR [ebx+8960]
  000c5	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  000cd	8b 45 f8	 mov	 eax, DWORD PTR _k$210885[ebp]
$LN47@RecvPacket:

; 553  : 			}
; 554  : 			if(this->Data[i][n].PriceType[k] == 3) //3 - WcoinP

  000d0	8b 55 fc	 mov	 edx, DWORD PTR tv1568[ebp]
  000d3	83 3a 03	 cmp	 DWORD PTR [edx], 3
  000d6	75 26		 jne	 SHORT $LN31@RecvPacket

; 555  : 			{
; 556  : 				lpObj->GameShop.WCoinP -= this->Data[i][n].PriceMain[k];

  000d8	03 c7		 add	 eax, edi
  000da	db 84 86 40 01
	00 00		 fild	 DWORD PTR [esi+eax*4+320]

; 557  : 				gGameShop.GDSaveUserInfo(aIndex);

  000e1	51		 push	 ecx
  000e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  000e7	dc ab f8 22 00
	00		 fsubr	 QWORD PTR [ebx+8952]
  000ed	dd 9b f8 22 00
	00		 fstp	 QWORD PTR [ebx+8952]
  000f3	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  000fb	8b 45 f8	 mov	 eax, DWORD PTR _k$210885[ebp]
$LN31@RecvPacket:

; 558  : 			}
; 559  : 			if(this->Data[i][n].PriceType[k] == 4) //4 - Goblin

  000fe	8b 55 fc	 mov	 edx, DWORD PTR tv1568[ebp]
  00101	83 3a 04	 cmp	 DWORD PTR [edx], 4
  00104	75 26		 jne	 SHORT $LN30@RecvPacket

; 560  : 			{
; 561  : 				lpObj->GameShop.GoblinPoint -= this->Data[i][n].PriceMain[k];

  00106	03 c7		 add	 eax, edi
  00108	db 84 86 40 01
	00 00		 fild	 DWORD PTR [esi+eax*4+320]

; 562  : 				gGameShop.GDSaveUserInfo(aIndex);

  0010f	51		 push	 ecx
  00110	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00115	dc ab 08 23 00
	00		 fsubr	 QWORD PTR [ebx+8968]
  0011b	dd 9b 08 23 00
	00		 fstp	 QWORD PTR [ebx+8968]
  00121	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00129	8b 45 f8	 mov	 eax, DWORD PTR _k$210885[ebp]
$LN30@RecvPacket:

; 563  : 			}
; 564  : 			if(this->Data[i][n].PriceType[k] == 5) //5 - Cred

  0012c	8b 55 fc	 mov	 edx, DWORD PTR tv1568[ebp]
  0012f	83 3a 05	 cmp	 DWORD PTR [edx], 5
  00132	75 24		 jne	 SHORT $LN29@RecvPacket

; 565  : 			{
; 566  : 				lpObj->ZtCred -= this->Data[i][n].PriceMain[k];

  00134	d9 83 a8 22 00
	00		 fld	 DWORD PTR [ebx+8872]
  0013a	03 c7		 add	 eax, edi
  0013c	da a4 86 40 01
	00 00		 fisub	 DWORD PTR [esi+eax*4+320]

; 567  : 				ZtUserDataSend(aIndex);

  00143	51		 push	 ecx
  00144	d9 9b a8 22 00
	00		 fstp	 DWORD PTR [ebx+8872]
  0014a	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  0014f	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00152	8b 45 f8	 mov	 eax, DWORD PTR _k$210885[ebp]
  00155	83 c4 04	 add	 esp, 4
$LN29@RecvPacket:

; 568  : 
; 569  : 			}
; 570  : 			if(this->Data[i][n].PriceType[k] == 6) //6 - Item

  00158	8b 55 fc	 mov	 edx, DWORD PTR tv1568[ebp]
  0015b	83 3a 06	 cmp	 DWORD PTR [edx], 6
  0015e	75 28		 jne	 SHORT $LN35@RecvPacket

; 571  : 			{
; 572  : 				gObjDeleteItemsCount(aIndex,this->Data[i][n].PriceMain[k],this->Data[i][n].PriceLvL[k],1);

  00160	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00163	0f b7 94 96 54
	01 00 00	 movzx	 edx, WORD PTR [esi+edx*4+340]
  0016b	6a 01		 push	 1
  0016d	52		 push	 edx
  0016e	03 c7		 add	 eax, edi
  00170	0f b7 94 86 40
	01 00 00	 movzx	 edx, WORD PTR [esi+eax*4+320]
  00178	52		 push	 edx
  00179	51		 push	 ecx
  0017a	e8 00 00 00 00	 call	 ?gObjDeleteItemsCount@@YAHHFFH@Z ; gObjDeleteItemsCount
  0017f	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00182	8b 45 f8	 mov	 eax, DWORD PTR _k$210885[ebp]
  00185	83 c4 10	 add	 esp, 16			; 00000010H
$LN35@RecvPacket:

; 540  : 	{
; 541  : 		for(int k = 0; k < 5; k++)

  00188	83 45 fc 04	 add	 DWORD PTR tv1568[ebp], 4
  0018c	40		 inc	 eax
  0018d	89 45 f8	 mov	 DWORD PTR _k$210885[ebp], eax
  00190	83 f8 05	 cmp	 eax, 5
  00193	0f 8c dc fe ff
	ff		 jl	 $LL36@RecvPacket

; 573  : 			}
; 574  : 		}
; 575  : 
; 576  : 		this->WinQ[aIndex].Start[Date->Num] = 1;

  00199	8b 45 0c	 mov	 eax, DWORD PTR _Date$[ebp]
  0019c	0f b6 50 05	 movzx	 edx, BYTE PTR [eax+5]
  001a0	03 55 f0	 add	 edx, DWORD PTR tv1226[ebp]
  001a3	b8 01 00 00 00	 mov	 eax, 1

; 577  : 
; 578  : 		this->SendPacket(aIndex,1);	//Need ReCode

  001a8	50		 push	 eax
  001a9	51		 push	 ecx
  001aa	8b ce		 mov	 ecx, esi
  001ac	66 89 84 56 40
	d3 5f 00	 mov	 WORD PTR [esi+edx*2+6280000], ax
  001b4	e8 00 00 00 00	 call	 ?SendPacket@cWinQuestSystem@@QAEXHE@Z ; cWinQuestSystem::SendPacket
  001b9	8b 55 ec	 mov	 edx, DWORD PTR _n$[ebp]
  001bc	8b 7d f4	 mov	 edi, DWORD PTR _i$[ebp]
  001bf	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN48@RecvPacket:

; 579  : 
; 580  : 	}
; 581  : 
; 582  : 	//-----------------------------------------------------------------------------------
; 583  : 	//	Quest Reward Update
; 584  : 	//-----------------------------------------------------------------------------------
; 585  : 
; 586  : 	if(Date->Result == 2)

  001c2	8b 45 0c	 mov	 eax, DWORD PTR _Date$[ebp]
  001c5	80 78 04 02	 cmp	 BYTE PTR [eax+4], 2
  001c9	0f 85 d1 03 00
	00		 jne	 $LN51@RecvPacket

; 587  : 	{
; 588  : 		for(int k = 0; k < 5; k++)

  001cf	69 ff e8 03 00
	00		 imul	 edi, 1000		; 000003e8H
  001d5	03 fa		 add	 edi, edx
  001d7	33 c0		 xor	 eax, eax
  001d9	69 ff 9d 00 00
	00		 imul	 edi, 157		; 0000009dH
  001df	8d 94 be b4 00
	00 00		 lea	 edx, DWORD PTR [esi+edi*4+180]
  001e6	89 45 f8	 mov	 DWORD PTR _k$210896[ebp], eax
  001e9	89 55 0c	 mov	 DWORD PTR tv1658[ebp], edx
  001ec	8d 64 24 00	 npad	 4
$LL26@RecvPacket:

; 589  : 		{
; 590  : 			//0-off;1-zen;2-ZtFreePoints;3-WcoinC;4-WcoinP;5-Goblin;6-Cred;7-Damage;8-Defence;9-Life;10-SD;11-CritDmg;12-ExlDmg;13-Double;14-Ignore;15-Ref;16-Exp;17-Drop;18-Item
; 591  : 
; 592  : 			if(this->Data[i][n].RewardType[k] == 1)	//1-zen

  001f0	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  001f3	83 3a 01	 cmp	 DWORD PTR [edx], 1
  001f6	75 40		 jne	 SHORT $LN23@RecvPacket

; 593  : 			{
; 594  : 				if(lpObj->Money + this->Data[i][n].RewardMain[k] > 2000000000 )

  001f8	03 c7		 add	 eax, edi
  001fa	8b 94 86 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+eax*4+200]
  00201	8b 83 f0 00 00
	00		 mov	 eax, DWORD PTR [ebx+240]
  00207	03 c2		 add	 eax, edx
  00209	3d 00 94 35 77	 cmp	 eax, 2000000000		; 77359400H
  0020e	7e 0c		 jle	 SHORT $LN22@RecvPacket

; 595  : 				{
; 596  : 					lpObj->Money = 2000000000;

  00210	c7 83 f0 00 00
	00 00 94 35 77	 mov	 DWORD PTR [ebx+240], 2000000000 ; 77359400H

; 597  : 				}
; 598  : 				else

  0021a	eb 06		 jmp	 SHORT $LN21@RecvPacket
$LN22@RecvPacket:

; 599  : 				{
; 600  : 					lpObj->Money += this->Data[i][n].RewardMain[k];

  0021c	89 83 f0 00 00
	00		 mov	 DWORD PTR [ebx+240], eax
$LN21@RecvPacket:

; 601  : 				}
; 602  : 				GCMoneySend(aIndex,lpObj->Money);

  00222	8b 93 f0 00 00
	00		 mov	 edx, DWORD PTR [ebx+240]
  00228	52		 push	 edx
  00229	51		 push	 ecx
  0022a	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0022f	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00232	8b 45 f8	 mov	 eax, DWORD PTR _k$210896[ebp]
  00235	83 c4 08	 add	 esp, 8
$LN23@RecvPacket:

; 603  : 			}
; 604  : 			if(this->Data[i][n].RewardType[k] == 2)	//2-ZtFreePoints

  00238	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  0023b	83 3a 02	 cmp	 DWORD PTR [edx], 2
  0023e	75 10		 jne	 SHORT $LN20@RecvPacket

; 605  : 			{
; 606  : 				lpObj->ZtFreePoints += this->Data[i][n].RewardMain[k];

  00240	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00243	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  0024a	01 93 8c 22 00
	00		 add	 DWORD PTR [ebx+8844], edx
$LN20@RecvPacket:

; 607  : 			}
; 608  : 			if(this->Data[i][n].RewardType[k] == 3)	//3-WcoinC

  00250	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  00253	83 3a 03	 cmp	 DWORD PTR [edx], 3
  00256	75 26		 jne	 SHORT $LN19@RecvPacket

; 609  : 			{
; 610  : 				lpObj->GameShop.WCoinC += this->Data[i][n].RewardMain[k];

  00258	03 c7		 add	 eax, edi
  0025a	db 84 86 c8 00
	00 00		 fild	 DWORD PTR [esi+eax*4+200]

; 611  : 				gGameShop.GDSaveUserInfo(aIndex);

  00261	51		 push	 ecx
  00262	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00267	dc 83 00 23 00
	00		 fadd	 QWORD PTR [ebx+8960]
  0026d	dd 9b 00 23 00
	00		 fstp	 QWORD PTR [ebx+8960]
  00273	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
  00278	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0027b	8b 45 f8	 mov	 eax, DWORD PTR _k$210896[ebp]
$LN19@RecvPacket:

; 612  : 			}
; 613  : 			if(this->Data[i][n].RewardType[k] == 4)	//4-WcoinP

  0027e	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  00281	83 3a 04	 cmp	 DWORD PTR [edx], 4
  00284	75 26		 jne	 SHORT $LN18@RecvPacket

; 614  : 			{
; 615  : 				lpObj->GameShop.WCoinP += this->Data[i][n].RewardMain[k];

  00286	03 c7		 add	 eax, edi
  00288	db 84 86 c8 00
	00 00		 fild	 DWORD PTR [esi+eax*4+200]

; 616  : 				gGameShop.GDSaveUserInfo(aIndex);

  0028f	51		 push	 ecx
  00290	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00295	dc 83 f8 22 00
	00		 fadd	 QWORD PTR [ebx+8952]
  0029b	dd 9b f8 22 00
	00		 fstp	 QWORD PTR [ebx+8952]
  002a1	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
  002a6	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  002a9	8b 45 f8	 mov	 eax, DWORD PTR _k$210896[ebp]
$LN18@RecvPacket:

; 617  : 			}
; 618  : 			if(this->Data[i][n].RewardType[k] == 5)	//5-WcoinP

  002ac	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  002af	83 3a 05	 cmp	 DWORD PTR [edx], 5
  002b2	75 26		 jne	 SHORT $LN17@RecvPacket

; 619  : 			{
; 620  : 				lpObj->GameShop.GoblinPoint += this->Data[i][n].RewardMain[k];

  002b4	03 c7		 add	 eax, edi
  002b6	db 84 86 c8 00
	00 00		 fild	 DWORD PTR [esi+eax*4+200]

; 621  : 				gGameShop.GDSaveUserInfo(aIndex);

  002bd	51		 push	 ecx
  002be	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  002c3	dc 83 08 23 00
	00		 fadd	 QWORD PTR [ebx+8968]
  002c9	dd 9b 08 23 00
	00		 fstp	 QWORD PTR [ebx+8968]
  002cf	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo
  002d4	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  002d7	8b 45 f8	 mov	 eax, DWORD PTR _k$210896[ebp]
$LN17@RecvPacket:

; 622  : 			}
; 623  : 			if(this->Data[i][n].RewardType[k] == 6)	//6-Cred

  002da	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  002dd	83 3a 06	 cmp	 DWORD PTR [edx], 6
  002e0	75 24		 jne	 SHORT $LN16@RecvPacket

; 624  : 			{
; 625  : 				lpObj->GameShop.GoblinPoint += this->Data[i][n].RewardMain[k];

  002e2	03 c7		 add	 eax, edi
  002e4	db 84 86 c8 00
	00 00		 fild	 DWORD PTR [esi+eax*4+200]

; 626  : 				ZtUserDataSend(aIndex);

  002eb	51		 push	 ecx
  002ec	dc 83 08 23 00
	00		 fadd	 QWORD PTR [ebx+8968]
  002f2	dd 9b 08 23 00
	00		 fstp	 QWORD PTR [ebx+8968]
  002f8	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  002fd	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00300	8b 45 f8	 mov	 eax, DWORD PTR _k$210896[ebp]
  00303	83 c4 04	 add	 esp, 4
$LN16@RecvPacket:

; 627  : 			}
; 628  : 			if(this->Data[i][n].RewardType[k] == 7)	//7-Damage

  00306	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  00309	83 3a 07	 cmp	 DWORD PTR [edx], 7
  0030c	75 21		 jne	 SHORT $LN15@RecvPacket

; 629  : 			{
; 630  : 				this->WinQ[aIndex].Damage += this->Data[i][n].RewardMain[k];

  0030e	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  00314	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00317	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  0031e	01 94 31 cc d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280140], edx
  00325	8d 8c 31 cc d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280140]
  0032c	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN15@RecvPacket:

; 631  : 			}	
; 632  : 			if(this->Data[i][n].RewardType[k] == 8)	//8-Defence

  0032f	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  00332	83 3a 08	 cmp	 DWORD PTR [edx], 8
  00335	75 21		 jne	 SHORT $LN14@RecvPacket

; 633  : 			{
; 634  : 				this->WinQ[aIndex].Defence += this->Data[i][n].RewardMain[k];

  00337	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  0033d	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00340	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  00347	01 94 31 d0 d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280144], edx
  0034e	8d 8c 31 d0 d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280144]
  00355	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN14@RecvPacket:

; 635  : 			}
; 636  : 			if(this->Data[i][n].RewardType[k] == 9)	//9-Life

  00358	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  0035b	83 3a 09	 cmp	 DWORD PTR [edx], 9
  0035e	75 21		 jne	 SHORT $LN13@RecvPacket

; 637  : 			{
; 638  : 				this->WinQ[aIndex].Life += this->Data[i][n].RewardMain[k];

  00360	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  00366	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00369	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  00370	01 94 31 d4 d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280148], edx
  00377	8d 8c 31 d4 d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280148]
  0037e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN13@RecvPacket:

; 639  : 			}
; 640  : 			if(this->Data[i][n].RewardType[k] == 10)	//10-SD

  00381	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  00384	83 3a 0a	 cmp	 DWORD PTR [edx], 10	; 0000000aH
  00387	75 21		 jne	 SHORT $LN12@RecvPacket

; 641  : 			{
; 642  : 				this->WinQ[aIndex].SD += this->Data[i][n].RewardMain[k];

  00389	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  0038f	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00392	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  00399	01 94 31 d8 d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280152], edx
  003a0	8d 8c 31 d8 d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280152]
  003a7	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN12@RecvPacket:

; 643  : 			}
; 644  : 			if(this->Data[i][n].RewardType[k] == 11)	//11-CritDmg

  003aa	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  003ad	83 3a 0b	 cmp	 DWORD PTR [edx], 11	; 0000000bH
  003b0	75 21		 jne	 SHORT $LN11@RecvPacket

; 645  : 			{
; 646  : 				this->WinQ[aIndex].Crit += this->Data[i][n].RewardMain[k];

  003b2	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  003b8	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  003bb	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  003c2	01 94 31 dc d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280156], edx
  003c9	8d 8c 31 dc d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280156]
  003d0	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN11@RecvPacket:

; 647  : 			}
; 648  : 			if(this->Data[i][n].RewardType[k] == 12)	//12-ExlDmg

  003d3	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  003d6	83 3a 0c	 cmp	 DWORD PTR [edx], 12	; 0000000cH
  003d9	75 21		 jne	 SHORT $LN10@RecvPacket

; 649  : 			{
; 650  : 				this->WinQ[aIndex].Exel += this->Data[i][n].RewardMain[k];

  003db	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  003e1	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  003e4	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  003eb	01 94 31 e0 d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280160], edx
  003f2	8d 8c 31 e0 d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280160]
  003f9	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN10@RecvPacket:

; 651  : 			}
; 652  : 			if(this->Data[i][n].RewardType[k] == 13)	//13-Double

  003fc	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  003ff	83 3a 0d	 cmp	 DWORD PTR [edx], 13	; 0000000dH
  00402	75 21		 jne	 SHORT $LN9@RecvPacket

; 653  : 			{
; 654  : 				this->WinQ[aIndex].Double += this->Data[i][n].RewardMain[k];

  00404	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  0040a	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  0040d	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  00414	01 94 31 e4 d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280164], edx
  0041b	8d 8c 31 e4 d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280164]
  00422	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN9@RecvPacket:

; 655  : 			}
; 656  : 			if(this->Data[i][n].RewardType[k] == 14)	//14-Ignore

  00425	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  00428	83 3a 0e	 cmp	 DWORD PTR [edx], 14	; 0000000eH
  0042b	75 21		 jne	 SHORT $LN8@RecvPacket

; 657  : 			{
; 658  : 				this->WinQ[aIndex].Ignore += this->Data[i][n].RewardMain[k];

  0042d	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  00433	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00436	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  0043d	01 94 31 e8 d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280168], edx
  00444	8d 8c 31 e8 d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280168]
  0044b	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN8@RecvPacket:

; 659  : 			}
; 660  : 			if(this->Data[i][n].RewardType[k] == 15)	//15-Ref

  0044e	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  00451	83 3a 0f	 cmp	 DWORD PTR [edx], 15	; 0000000fH
  00454	75 21		 jne	 SHORT $LN7@RecvPacket

; 661  : 			{
; 662  : 				this->WinQ[aIndex].Ref += this->Data[i][n].RewardMain[k];

  00456	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  0045c	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  0045f	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  00466	01 94 31 ec d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280172], edx
  0046d	8d 8c 31 ec d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280172]
  00474	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN7@RecvPacket:

; 663  : 			}
; 664  : 			if(this->Data[i][n].RewardType[k] == 16)	//16-Exp

  00477	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  0047a	83 3a 10	 cmp	 DWORD PTR [edx], 16	; 00000010H
  0047d	75 21		 jne	 SHORT $LN6@RecvPacket

; 665  : 			{
; 666  : 				this->WinQ[aIndex].Exp += this->Data[i][n].RewardMain[k];

  0047f	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  00485	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00488	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  0048f	01 94 31 f0 d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280176], edx
  00496	8d 8c 31 f0 d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280176]
  0049d	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN6@RecvPacket:

; 667  : 			}
; 668  : 			if(this->Data[i][n].RewardType[k] == 17)	//17-Drop

  004a0	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  004a3	83 3a 11	 cmp	 DWORD PTR [edx], 17	; 00000011H
  004a6	75 21		 jne	 SHORT $LN5@RecvPacket

; 669  : 			{
; 670  : 				this->WinQ[aIndex].Drop += this->Data[i][n].RewardMain[k];

  004a8	69 c9 b8 00 00
	00		 imul	 ecx, 184		; 000000b8H
  004ae	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  004b1	8b 94 96 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+200]
  004b8	01 94 31 f4 d3
	5f 00		 add	 DWORD PTR [ecx+esi+6280180], edx
  004bf	8d 8c 31 f4 d3
	5f 00		 lea	 ecx, DWORD PTR [ecx+esi+6280180]
  004c6	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
$LN5@RecvPacket:

; 671  : 			}		
; 672  : 			if(this->Data[i][n].RewardType[k] == 18)	//18-Item

  004c9	8b 55 0c	 mov	 edx, DWORD PTR tv1658[ebp]
  004cc	83 3a 12	 cmp	 DWORD PTR [edx], 18	; 00000012H
  004cf	75 73		 jne	 SHORT $LN25@RecvPacket

; 673  : 			{
; 674  : 				ItemSerialCreateSend(aIndex,lpObj->MapNumber,lpObj->X,lpObj->Y,this->Data[i][n].RewardMain[k],this->Data[i][n].RewardLvL[k],0,0,this->Data[i][n].RewardLuck[k],0,aIndex,this->Data[i][n].RewardExl[k],this->Data[i][n].RewardAnc[k]);

  004d1	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  004d4	0f b6 94 96 18
	01 00 00	 movzx	 edx, BYTE PTR [esi+edx*4+280]
  004dc	52		 push	 edx
  004dd	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  004e0	0f b6 94 96 04
	01 00 00	 movzx	 edx, BYTE PTR [esi+edx*4+260]
  004e8	52		 push	 edx
  004e9	51		 push	 ecx
  004ea	6a 00		 push	 0
  004ec	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  004ef	0f b6 94 96 f0
	00 00 00	 movzx	 edx, BYTE PTR [esi+edx*4+240]
  004f7	52		 push	 edx
  004f8	6a 00		 push	 0
  004fa	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  004fd	0f b6 94 96 dc
	00 00 00	 movzx	 edx, BYTE PTR [esi+edx*4+220]
  00505	6a 00		 push	 0
  00507	52		 push	 edx
  00508	03 c7		 add	 eax, edi
  0050a	8b 94 86 c8 00
	00 00		 mov	 edx, DWORD PTR [esi+eax*4+200]
  00511	0f b6 83 46 01
	00 00		 movzx	 eax, BYTE PTR [ebx+326]
  00518	52		 push	 edx
  00519	0f b6 93 44 01
	00 00		 movzx	 edx, BYTE PTR [ebx+324]
  00520	50		 push	 eax
  00521	0f b6 83 49 01
	00 00		 movzx	 eax, BYTE PTR [ebx+329]
  00528	52		 push	 edx
  00529	50		 push	 eax
  0052a	51		 push	 ecx
  0052b	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 675  : 
; 676  : 				this->SendWindowsClose(aIndex);

  00530	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00533	83 c4 34	 add	 esp, 52			; 00000034H
  00536	51		 push	 ecx
  00537	8b ce		 mov	 ecx, esi
  00539	e8 00 00 00 00	 call	 ?SendWindowsClose@cWinQuestSystem@@QAEXH@Z ; cWinQuestSystem::SendWindowsClose
  0053e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00541	8b 45 f8	 mov	 eax, DWORD PTR _k$210896[ebp]
$LN25@RecvPacket:

; 587  : 	{
; 588  : 		for(int k = 0; k < 5; k++)

  00544	83 45 0c 04	 add	 DWORD PTR tv1658[ebp], 4
  00548	40		 inc	 eax
  00549	89 45 f8	 mov	 DWORD PTR _k$210896[ebp], eax
  0054c	83 f8 05	 cmp	 eax, 5
  0054f	0f 8c 9b fc ff
	ff		 jl	 $LL26@RecvPacket

; 677  : 			}		
; 678  : 		}
; 679  : 
; 680  : 		this->WinQ[aIndex].Start[i] = 0;

  00555	8b 7d e8	 mov	 edi, DWORD PTR tv1227[ebp]
  00558	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0055b	33 d2		 xor	 edx, edx
  0055d	66 89 94 7e 40
	d3 5f 00	 mov	 WORD PTR [esi+edi*2+6280000], dx
  00565	8b d1		 mov	 edx, ecx
  00567	69 d2 b8 00 00
	00		 imul	 edx, 184		; 000000b8H
  0056d	03 d6		 add	 edx, esi
  0056f	8d 84 80 b4 e9
	2f 00		 lea	 eax, DWORD PTR [eax+eax*4+3140020]
  00576	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]

; 681  : 
; 682  : 		for(int k=0;k<5;k++)
; 683  : 		{
; 684  : 			this->WinQ[aIndex].Count[i][k] = 0;

  00579	33 d2		 xor	 edx, edx
  0057b	0f b7 da	 movzx	 ebx, dx
  0057e	8b d3		 mov	 edx, ebx
  00580	c1 e3 10	 shl	 ebx, 16			; 00000010H
  00583	0b d3		 or	 edx, ebx
  00585	89 10		 mov	 DWORD PTR [eax], edx

; 685  : 		}
; 686  : 
; 687  : 		this->WinQ[aIndex].Num[i]++;
; 688  : 
; 689  : 		SendPacket(aIndex, 0);

  00587	6a 00		 push	 0
  00589	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0058c	51		 push	 ecx
  0058d	66 89 50 08	 mov	 WORD PTR [eax+8], dx
  00591	66 ff 84 7e 54
	d3 5f 00	 inc	 WORD PTR [esi+edi*2+6280020]
  00599	8b ce		 mov	 ecx, esi
  0059b	e8 00 00 00 00	 call	 ?SendPacket@cWinQuestSystem@@QAEXHE@Z ; cWinQuestSystem::SendPacket
$LN51@RecvPacket:
  005a0	5f		 pop	 edi
  005a1	5b		 pop	 ebx
$LN27@RecvPacket:
  005a2	5e		 pop	 esi

; 690  : 	}
; 691  : }

  005a3	8b e5		 mov	 esp, ebp
  005a5	5d		 pop	 ebp
  005a6	c2 08 00	 ret	 8
?RecvPacket@cWinQuestSystem@@QAEXHPAUCGSendQuestResult@@@Z ENDP ; cWinQuestSystem::RecvPacket
_TEXT	ENDS
PUBLIC	?MonsterDrop@cWinQuestSystem@@QAE_NHF@Z		; cWinQuestSystem::MonsterDrop
; Function compile flags: /Ogtp
;	COMDAT ?MonsterDrop@cWinQuestSystem@@QAE_NHF@Z
_TEXT	SEGMENT
tv229 = -20						; size = 4
tv334 = -16						; size = 4
tv429 = -12						; size = 4
_i$210937 = -8						; size = 4
tv427 = -4						; size = 4
_aIndex$ = 8						; size = 4
_ItemType$ = 12						; size = 2
?MonsterDrop@cWinQuestSystem@@QAE_NHF@Z PROC		; cWinQuestSystem::MonsterDrop, COMDAT
; _this$ = ecx

; 710  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 711  : 	if(!this->Enable) return true;

  00006	80 b9 a8 f0 89
	00 00		 cmp	 BYTE PTR [ecx+9040040], 0
  0000d	75 08		 jne	 SHORT $LN11@MonsterDro
  0000f	b0 01		 mov	 al, 1

; 737  : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
$LN11@MonsterDro:

; 712  : 
; 713  : 	for(int i=0; i < MAX_WIN_QUEST; i++)

  00017	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	6b c0 5c	 imul	 eax, 92			; 0000005cH
  0001d	56		 push	 esi
  0001e	8d 90 b4 e9 2f
	00		 lea	 edx, DWORD PTR [eax+3140020]
  00024	89 45 ec	 mov	 DWORD PTR tv229[ebp], eax
  00027	33 f6		 xor	 esi, esi
  00029	8d 84 41 40 d3
	5f 00		 lea	 eax, DWORD PTR [ecx+eax*2+6280000]
  00030	53		 push	 ebx
  00031	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$210937[ebp], 0
  00038	89 75 f0	 mov	 DWORD PTR tv334[ebp], esi
  0003b	89 55 fc	 mov	 DWORD PTR tv427[ebp], edx
  0003e	89 45 f4	 mov	 DWORD PTR tv429[ebp], eax
  00041	57		 push	 edi
$LL21@MonsterDro:

; 714  : 	{
; 715  : 		int n = this->WinQ[aIndex].Num[i];
; 716  : 
; 717  : 		if(this->WinQ[aIndex].Start[i] == 1)

  00042	66 83 38 01	 cmp	 WORD PTR [eax], 1
  00046	0f bf 50 14	 movsx	 edx, WORD PTR [eax+20]
  0004a	75 47		 jne	 SHORT $LN9@MonsterDro

; 718  : 		{
; 719  : 			for(int k = 0; k < 5; k++)

  0004c	03 d6		 add	 edx, esi
  0004e	33 c0		 xor	 eax, eax
  00050	69 d2 9d 00 00
	00		 imul	 edx, 157		; 0000009dH
  00056	8d 74 91 3c	 lea	 esi, DWORD PTR [ecx+edx*4+60]
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL20@MonsterDro:

; 720  : 			{
; 721  : 				if(this->Data[i][n].MissionType[k] == 2)	//2-Drop

  00060	83 3e 02	 cmp	 DWORD PTR [esi], 2
  00063	75 1f		 jne	 SHORT $LN5@MonsterDro

; 722  : 				{
; 723  : 					if(this->Data[i][n].MissionMain[k] == ItemType)

  00065	0f bf 5d 0c	 movsx	 ebx, WORD PTR _ItemType$[ebp]
  00069	8d 3c 02	 lea	 edi, DWORD PTR [edx+eax]
  0006c	39 5c b9 50	 cmp	 DWORD PTR [ecx+edi*4+80], ebx
  00070	75 12		 jne	 SHORT $LN5@MonsterDro

; 724  : 					{
; 725  : 						if(this->Data[i][n].MissionLvL[k] > this->WinQ[aIndex].Count[i][k])

  00072	8b 7d fc	 mov	 edi, DWORD PTR tv427[ebp]
  00075	03 f8		 add	 edi, eax
  00077	0f bf 3c 79	 movsx	 edi, WORD PTR [ecx+edi*2]
  0007b	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]
  0007e	39 7c 99 64	 cmp	 DWORD PTR [ecx+ebx*4+100], edi
  00082	7f 38		 jg	 SHORT $LN16@MonsterDro
$LN5@MonsterDro:

; 718  : 		{
; 719  : 			for(int k = 0; k < 5; k++)

  00084	40		 inc	 eax
  00085	83 c6 04	 add	 esi, 4
  00088	83 f8 05	 cmp	 eax, 5
  0008b	7c d3		 jl	 SHORT $LL20@MonsterDro
  0008d	8b 45 f4	 mov	 eax, DWORD PTR tv429[ebp]
  00090	8b 75 f0	 mov	 esi, DWORD PTR tv334[ebp]
$LN9@MonsterDro:

; 712  : 
; 713  : 	for(int i=0; i < MAX_WIN_QUEST; i++)

  00093	ff 45 f8	 inc	 DWORD PTR _i$210937[ebp]
  00096	83 45 fc 05	 add	 DWORD PTR tv427[ebp], 5
  0009a	81 c6 e8 03 00
	00		 add	 esi, 1000		; 000003e8H
  000a0	83 c0 02	 add	 eax, 2
  000a3	89 45 f4	 mov	 DWORD PTR tv429[ebp], eax
  000a6	89 75 f0	 mov	 DWORD PTR tv334[ebp], esi
  000a9	81 fe 10 27 00
	00		 cmp	 esi, 10000		; 00002710H
  000af	7c 91		 jl	 SHORT $LL21@MonsterDro

; 730  : 						}
; 731  : 					}
; 732  : 				}
; 733  : 			}
; 734  : 		}
; 735  : 	}
; 736  : 	return true;

  000b1	5f		 pop	 edi
  000b2	5b		 pop	 ebx
  000b3	b0 01		 mov	 al, 1
  000b5	5e		 pop	 esi

; 737  : }

  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
$LN16@MonsterDro:

; 726  : 						{
; 727  : 							this->WinQ[aIndex].Count[i][k]++;

  000bc	8b 55 f8	 mov	 edx, DWORD PTR _i$210937[ebp]
  000bf	8b 75 ec	 mov	 esi, DWORD PTR tv229[ebp]
  000c2	81 c2 24 95 09
	00		 add	 edx, 628004		; 00099524H
  000c8	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  000cb	03 f2		 add	 esi, edx
  000cd	03 f0		 add	 esi, eax
  000cf	66 ff 04 71	 inc	 WORD PTR [ecx+esi*2]
  000d3	8d 04 71	 lea	 eax, DWORD PTR [ecx+esi*2]

; 728  : 							this->SendInfoPacket(aIndex);

  000d6	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 ?SendInfoPacket@cWinQuestSystem@@QAEXH@Z ; cWinQuestSystem::SendInfoPacket
  000df	5f		 pop	 edi
  000e0	5b		 pop	 ebx

; 729  : 							return false;

  000e1	32 c0		 xor	 al, al
  000e3	5e		 pop	 esi

; 737  : }

  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 08 00	 ret	 8
?MonsterDrop@cWinQuestSystem@@QAE_NHF@Z ENDP		; cWinQuestSystem::MonsterDrop
_TEXT	ENDS
PUBLIC	?RecvQuestInfo@cWinQuestSystem@@QAEXPAUDGQuestUserInfo@@@Z ; cWinQuestSystem::RecvQuestInfo
; Function compile flags: /Ogtp
;	COMDAT ?RecvQuestInfo@cWinQuestSystem@@QAEXPAUDGQuestUserInfo@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_aIndex$ = -8						; size = 4
tv1614 = -4						; size = 4
tv1044 = 8						; size = 4
_Recv$ = 8						; size = 4
?RecvQuestInfo@cWinQuestSystem@@QAEXPAUDGQuestUserInfo@@@Z PROC ; cWinQuestSystem::RecvQuestInfo, COMDAT
; _this$ = ecx

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 846  : 	int aIndex = Recv->aIndex;

  00008	8b 75 08	 mov	 esi, DWORD PTR _Recv$[ebp]
  0000b	0f bf 46 04	 movsx	 eax, WORD PTR [esi+4]
  0000f	89 45 f8	 mov	 DWORD PTR _aIndex$[ebp], eax
  00012	69 c0 b8 00 00
	00		 imul	 eax, 184		; 000000b8H
  00018	57		 push	 edi
  00019	8d 3c 08	 lea	 edi, DWORD PTR [eax+ecx]
  0001c	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  0001f	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00022	89 45 08	 mov	 DWORD PTR tv1044[ebp], eax
  00025	8d 8f 54 d3 5f
	00		 lea	 ecx, DWORD PTR [edi+6280020]
  0002b	8d 46 3a	 lea	 eax, DWORD PTR [esi+58]
  0002e	8d 97 6a d3 5f
	00		 lea	 edx, DWORD PTR [edi+6280042]
  00034	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR tv1614[ebp], 10 ; 0000000aH
  0003b	eb 03 8d 49 00	 npad	 5
$LL19@RecvQuestI:

; 847  : 
; 848  : 	for(int i=0; i < MAX_WIN_QUEST; i++)
; 849  : 	{
; 850  : 		this->WinQ[aIndex].Start[i] = Recv->Start[i];

  00040	8b 5d 08	 mov	 ebx, DWORD PTR tv1044[ebp]
  00043	0f b7 5b ec	 movzx	 ebx, WORD PTR [ebx-20]
  00047	66 89 59 ec	 mov	 WORD PTR [ecx-20], bx

; 851  : 		this->WinQ[aIndex].Num[i] = Recv->Num[i];

  0004b	8b 5d 08	 mov	 ebx, DWORD PTR tv1044[ebp]
  0004e	0f b7 1b	 movzx	 ebx, WORD PTR [ebx]
  00051	66 89 19	 mov	 WORD PTR [ecx], bx

; 852  : 
; 853  : 		for(int k = 0; k < 5 ; k++)
; 854  : 		{
; 855  : 			this->WinQ[aIndex].Count[i][k] = Recv->Count[i][k];

  00054	0f b7 58 fe	 movzx	 ebx, WORD PTR [eax-2]
  00058	83 45 08 02	 add	 DWORD PTR tv1044[ebp], 2
  0005c	66 89 5a fe	 mov	 WORD PTR [edx-2], bx
  00060	0f b7 18	 movzx	 ebx, WORD PTR [eax]
  00063	66 89 1a	 mov	 WORD PTR [edx], bx
  00066	0f b7 58 02	 movzx	 ebx, WORD PTR [eax+2]
  0006a	66 89 5a 02	 mov	 WORD PTR [edx+2], bx
  0006e	0f b7 58 04	 movzx	 ebx, WORD PTR [eax+4]
  00072	66 89 5a 04	 mov	 WORD PTR [edx+4], bx
  00076	0f b7 58 06	 movzx	 ebx, WORD PTR [eax+6]
  0007a	66 89 5a 06	 mov	 WORD PTR [edx+6], bx
  0007e	83 c1 02	 add	 ecx, 2
  00081	83 c0 0a	 add	 eax, 10			; 0000000aH
  00084	83 c2 0a	 add	 edx, 10			; 0000000aH
  00087	ff 4d fc	 dec	 DWORD PTR tv1614[ebp]
  0008a	75 b4		 jne	 SHORT $LL19@RecvQuestI

; 856  : 		}
; 857  : 	}
; 858  : 
; 859  : 	this->WinQ[aIndex].Damage = Recv->Damage;	//

  0008c	8b 8e 9c 00 00
	00		 mov	 ecx, DWORD PTR [esi+156]
  00092	89 8f cc d3 5f
	00		 mov	 DWORD PTR [edi+6280140], ecx

; 860  : 	this->WinQ[aIndex].Defence = Recv->Defence;	//

  00098	8b 96 a0 00 00
	00		 mov	 edx, DWORD PTR [esi+160]
  0009e	89 97 d0 d3 5f
	00		 mov	 DWORD PTR [edi+6280144], edx

; 861  : 	this->WinQ[aIndex].Life = Recv->Life;	//<--NoWork

  000a4	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  000aa	89 87 d4 d3 5f
	00		 mov	 DWORD PTR [edi+6280148], eax

; 862  : 	this->WinQ[aIndex].SD = Recv->SD;//<--NoWork

  000b0	8b 8e a8 00 00
	00		 mov	 ecx, DWORD PTR [esi+168]
  000b6	89 8f d8 d3 5f
	00		 mov	 DWORD PTR [edi+6280152], ecx

; 863  : 	this->WinQ[aIndex].Crit = Recv->Crit;//

  000bc	8b 96 ac 00 00
	00		 mov	 edx, DWORD PTR [esi+172]
  000c2	89 97 dc d3 5f
	00		 mov	 DWORD PTR [edi+6280156], edx

; 864  : 	this->WinQ[aIndex].Exel = Recv->Exel;//

  000c8	8b 86 b0 00 00
	00		 mov	 eax, DWORD PTR [esi+176]
  000ce	89 87 e0 d3 5f
	00		 mov	 DWORD PTR [edi+6280160], eax

; 865  : 	this->WinQ[aIndex].Double = Recv->Double;//

  000d4	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]
  000da	89 8f e4 d3 5f
	00		 mov	 DWORD PTR [edi+6280164], ecx

; 866  : 	this->WinQ[aIndex].Ignore = Recv->Ignore;

  000e0	8b 96 b8 00 00
	00		 mov	 edx, DWORD PTR [esi+184]
  000e6	89 97 e8 d3 5f
	00		 mov	 DWORD PTR [edi+6280168], edx

; 867  : 	this->WinQ[aIndex].Ref = Recv->Ref;	//

  000ec	8b 86 bc 00 00
	00		 mov	 eax, DWORD PTR [esi+188]
  000f2	89 87 ec d3 5f
	00		 mov	 DWORD PTR [edi+6280172], eax

; 868  : 	this->WinQ[aIndex].Exp = Recv->Exp;

  000f8	8b 8e c0 00 00
	00		 mov	 ecx, DWORD PTR [esi+192]

; 869  : 	this->WinQ[aIndex].Drop = Recv->Drop;
; 870  : 
; 871  : 	this->SendPacket(aIndex,0);

  000fe	8b 45 f8	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00101	89 8f f0 d3 5f
	00		 mov	 DWORD PTR [edi+6280176], ecx
  00107	8b 96 c4 00 00
	00		 mov	 edx, DWORD PTR [esi+196]
  0010d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	6a 00		 push	 0
  00112	50		 push	 eax
  00113	89 97 f4 d3 5f
	00		 mov	 DWORD PTR [edi+6280180], edx
  00119	e8 00 00 00 00	 call	 ?SendPacket@cWinQuestSystem@@QAEXHE@Z ; cWinQuestSystem::SendPacket
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx

; 872  : }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
?RecvQuestInfo@cWinQuestSystem@@QAEXPAUDGQuestUserInfo@@@Z ENDP ; cWinQuestSystem::RecvQuestInfo
_TEXT	ENDS
PUBLIC	?NPCClicker@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@0@Z ; cWinQuestSystem::NPCClicker
; Function compile flags: /Ogtp
;	COMDAT ?NPCClicker@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpNpc$ = 8						; size = 4
_lpObj$ = 12						; size = 4
?NPCClicker@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; cWinQuestSystem::NPCClicker, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 164  : 	if(!this->Enable) return;

  00003	80 b9 a8 f0 89
	00 00		 cmp	 BYTE PTR [ecx+9040040], 0
  0000a	74 1f		 je	 SHORT $LN3@NPCClicker

; 165  : 
; 166  : 	if(lpNpc->Class != this->NPC) return;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  0000f	0f b7 90 b8 00
	00 00		 movzx	 edx, WORD PTR [eax+184]
  00016	3b 91 ac f0 89
	00		 cmp	 edx, DWORD PTR [ecx+9040044]
  0001c	75 0d		 jne	 SHORT $LN3@NPCClicker

; 167  : 
; 168  : 	this->SendPacket(lpObj->m_Index,1);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	6a 01		 push	 1
  00025	52		 push	 edx
  00026	e8 00 00 00 00	 call	 ?SendPacket@cWinQuestSystem@@QAEXHE@Z ; cWinQuestSystem::SendPacket
$LN3@NPCClicker:

; 169  : }

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?NPCClicker@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; cWinQuestSystem::NPCClicker
_TEXT	ENDS
PUBLIC	?MonsterKiller@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@0@Z ; cWinQuestSystem::MonsterKiller
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?MonsterKiller@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
tv562 = -20						; size = 4
_aIndex$ = -16						; size = 4
tv552 = -12						; size = 4
tv518 = -12						; size = 4
tv705 = -8						; size = 4
tv703 = -4						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?MonsterKiller@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; cWinQuestSystem::MonsterKiller, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 175  : 	if(!this->Enable) return;

  00009	80 be a8 f0 89
	00 00		 cmp	 BYTE PTR [esi+9040040], 0
  00010	0f 84 70 01 00
	00		 je	 $LN17@MonsterKil

; 176  : 
; 177  : 	int aIndex = lpTargetObj->m_Index;

  00016	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	89 45 f0	 mov	 DWORD PTR _aIndex$[ebp], eax
  0001e	6b c0 5c	 imul	 eax, 92			; 0000005cH
  00021	8d 88 b4 e9 2f
	00		 lea	 ecx, DWORD PTR [eax+3140020]
  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	89 4d fc	 mov	 DWORD PTR tv703[ebp], ecx
  0002c	33 ff		 xor	 edi, edi
  0002e	8d 8c 46 40 d3
	5f 00		 lea	 ecx, DWORD PTR [esi+eax*2+6280000]
  00035	89 7d ec	 mov	 DWORD PTR tv562[ebp], edi
  00038	89 4d f8	 mov	 DWORD PTR tv705[ebp], ecx
  0003b	eb 03 8d 49 00	 npad	 5
$LL34@MonsterKil:

; 180  : 	{
; 181  : 		int n = this->WinQ[aIndex].Num[i];
; 182  : 
; 183  : 		//Monsterr killer
; 184  : 		if(this->WinQ[aIndex].Start[i] == 1)

  00040	66 83 39 01	 cmp	 WORD PTR [ecx], 1
  00044	0f bf 41 14	 movsx	 eax, WORD PTR [ecx+20]
  00048	0f 85 11 01 00
	00		 jne	 $LN18@MonsterKil

; 185  : 		{
; 186  : 			for(int k = 0; k < 5; k++)

  0004e	03 f8		 add	 edi, eax
  00050	33 db		 xor	 ebx, ebx
  00052	69 ff 9d 00 00
	00		 imul	 edi, 157		; 0000009dH
  00058	8d 44 be 3c	 lea	 eax, DWORD PTR [esi+edi*4+60]
  0005c	89 45 f4	 mov	 DWORD PTR tv518[ebp], eax
  0005f	90		 npad	 1
$LL33@MonsterKil:

; 187  : 			{
; 188  : 				if(this->Data[i][n].MissionType[k] == 1)

  00060	83 38 01	 cmp	 DWORD PTR [eax], 1
  00063	75 3d		 jne	 SHORT $LN14@MonsterKil

; 189  : 				{
; 190  : 					if(this->Data[i][n].MissionMain[k] == lpObj->Class)

  00065	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00068	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  0006f	8d 14 1f	 lea	 edx, DWORD PTR [edi+ebx]
  00072	39 4c 96 50	 cmp	 DWORD PTR [esi+edx*4+80], ecx
  00076	75 2a		 jne	 SHORT $LN14@MonsterKil

; 191  : 					{
; 192  : 						if(this->Data[i][n].MissionLvL[k] > this->WinQ[aIndex].Count[i][k])

  00078	8b 55 fc	 mov	 edx, DWORD PTR tv703[ebp]
  0007b	03 d3		 add	 edx, ebx
  0007d	0f b7 0c 56	 movzx	 ecx, WORD PTR [esi+edx*2]
  00081	8d 04 56	 lea	 eax, DWORD PTR [esi+edx*2]
  00084	0f bf c9	 movsx	 ecx, cx
  00087	8d 14 1f	 lea	 edx, DWORD PTR [edi+ebx]
  0008a	39 4c 96 64	 cmp	 DWORD PTR [esi+edx*4+100], ecx
  0008e	7e 12		 jle	 SHORT $LN14@MonsterKil

; 193  : 						{
; 194  : 							this->WinQ[aIndex].Count[i][k]++;

  00090	0f b7 08	 movzx	 ecx, WORD PTR [eax]

; 195  : 							this->SendInfoPacket(aIndex);

  00093	8b 55 f0	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00096	41		 inc	 ecx
  00097	66 89 08	 mov	 WORD PTR [eax], cx
  0009a	52		 push	 edx
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?SendInfoPacket@cWinQuestSystem@@QAEXH@Z ; cWinQuestSystem::SendInfoPacket
$LN14@MonsterKil:

; 185  : 		{
; 186  : 			for(int k = 0; k < 5; k++)

  000a2	8b 45 f4	 mov	 eax, DWORD PTR tv518[ebp]
  000a5	43		 inc	 ebx
  000a6	83 c0 04	 add	 eax, 4
  000a9	89 45 f4	 mov	 DWORD PTR tv518[ebp], eax
  000ac	83 fb 05	 cmp	 ebx, 5
  000af	7c af		 jl	 SHORT $LL33@MonsterKil

; 196  : 						}
; 197  : 					}
; 198  : 				}
; 199  : 			}
; 200  : 		}
; 201  : 
; 202  : 		//Item Drop Rate
; 203  : 		if(this->WinQ[aIndex].Start[i] == 1)

  000b1	8b 45 f8	 mov	 eax, DWORD PTR tv705[ebp]
  000b4	66 83 38 01	 cmp	 WORD PTR [eax], 1
  000b8	0f 85 a1 00 00
	00		 jne	 $LN18@MonsterKil

; 204  : 		{
; 205  : 			for(int k = 0; k < 5; k++)

  000be	8d 44 be 3c	 lea	 eax, DWORD PTR [esi+edi*4+60]
  000c2	33 db		 xor	 ebx, ebx
  000c4	89 45 f4	 mov	 DWORD PTR tv552[ebp], eax
$LL8@MonsterKil:

; 206  : 			{
; 207  : 				if(this->Data[i][n].MissionType[k] == 2)

  000c7	83 38 02	 cmp	 DWORD PTR [eax], 2
  000ca	75 45		 jne	 SHORT $LN7@MonsterKil

; 208  : 				{
; 209  : 					if ( lpTargetObj->MapNumber == this->Data[i][n].MissionLuck[k] || this->Data[i][n].MissionLuck[k] == -1 )

  000cc	8b 55 0c	 mov	 edx, DWORD PTR _lpTargetObj$[ebp]
  000cf	8d 0c 1f	 lea	 ecx, DWORD PTR [edi+ebx]
  000d2	8b 44 8e 78	 mov	 eax, DWORD PTR [esi+ecx*4+120]
  000d6	0f b6 8a 49 01
	00 00		 movzx	 ecx, BYTE PTR [edx+329]
  000dd	3b c8		 cmp	 ecx, eax
  000df	74 05		 je	 SHORT $LN3@MonsterKil
  000e1	83 f8 ff	 cmp	 eax, -1
  000e4	75 2b		 jne	 SHORT $LN7@MonsterKil
$LN3@MonsterKil:

; 210  : 					{
; 211  : 						if ( (rand()%10000) < this->Data[i][n].MissionExl[k] )

  000e6	e8 00 00 00 00	 call	 _rand
  000eb	99		 cdq
  000ec	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  000f1	f7 f9		 idiv	 ecx
  000f3	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  000f6	3b 94 86 8c 00
	00 00		 cmp	 edx, DWORD PTR [esi+eax*4+140]
  000fd	7d 12		 jge	 SHORT $LN7@MonsterKil

; 212  : 						{
; 213  : 							if(this->Data[i][n].MissionLvL[k] > this->WinQ[aIndex].Count[i][k])

  000ff	8b 4d fc	 mov	 ecx, DWORD PTR tv703[ebp]
  00102	03 cb		 add	 ecx, ebx
  00104	0f bf 14 4e	 movsx	 edx, WORD PTR [esi+ecx*2]
  00108	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0010b	39 54 86 64	 cmp	 DWORD PTR [esi+eax*4+100], edx
  0010f	7f 11		 jg	 SHORT $LN26@MonsterKil
$LN7@MonsterKil:

; 204  : 		{
; 205  : 			for(int k = 0; k < 5; k++)

  00111	8b 45 f4	 mov	 eax, DWORD PTR tv552[ebp]
  00114	43		 inc	 ebx
  00115	83 c0 04	 add	 eax, 4
  00118	89 45 f4	 mov	 DWORD PTR tv552[ebp], eax
  0011b	83 fb 05	 cmp	 ebx, 5
  0011e	7c a7		 jl	 SHORT $LL8@MonsterKil

; 212  : 						{
; 213  : 							if(this->Data[i][n].MissionLvL[k] > this->WinQ[aIndex].Count[i][k])

  00120	eb 3d		 jmp	 SHORT $LN18@MonsterKil
$LN26@MonsterKil:

; 214  : 							{
; 215  : 								//CreateItemDr
; 216  : 								ItemSerialCreateSend(aIndex,lpObj->MapNumber,lpObj->X,lpObj->Y,this->Data[i][n].MissionMain[k],0,0,0,0,0,aIndex,0,0);

  00122	8b 4d f0	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00125	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00128	6a 00		 push	 0
  0012a	6a 00		 push	 0
  0012c	51		 push	 ecx
  0012d	6a 00		 push	 0
  0012f	6a 00		 push	 0
  00131	6a 00		 push	 0
  00133	6a 00		 push	 0
  00135	6a 00		 push	 0
  00137	03 fb		 add	 edi, ebx
  00139	8b 54 be 50	 mov	 edx, DWORD PTR [esi+edi*4+80]
  0013d	52		 push	 edx
  0013e	0f b6 90 46 01
	00 00		 movzx	 edx, BYTE PTR [eax+326]
  00145	52		 push	 edx
  00146	0f b6 90 44 01
	00 00		 movzx	 edx, BYTE PTR [eax+324]
  0014d	0f b6 80 49 01
	00 00		 movzx	 eax, BYTE PTR [eax+329]
  00154	52		 push	 edx
  00155	50		 push	 eax
  00156	51		 push	 ecx
  00157	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend
  0015c	83 c4 34	 add	 esp, 52			; 00000034H
$LN18@MonsterKil:

; 178  : 
; 179  : 	for(int i=0; i < MAX_WIN_QUEST; i++)

  0015f	8b 7d ec	 mov	 edi, DWORD PTR tv562[ebp]
  00162	8b 4d f8	 mov	 ecx, DWORD PTR tv705[ebp]
  00165	83 45 fc 05	 add	 DWORD PTR tv703[ebp], 5
  00169	81 c7 e8 03 00
	00		 add	 edi, 1000		; 000003e8H
  0016f	83 c1 02	 add	 ecx, 2
  00172	89 4d f8	 mov	 DWORD PTR tv705[ebp], ecx
  00175	89 7d ec	 mov	 DWORD PTR tv562[ebp], edi
  00178	81 ff 10 27 00
	00		 cmp	 edi, 10000		; 00002710H
  0017e	0f 8c bc fe ff
	ff		 jl	 $LL34@MonsterKil
  00184	5f		 pop	 edi
  00185	5b		 pop	 ebx
$LN17@MonsterKil:
  00186	5e		 pop	 esi

; 217  : 								break;
; 218  : 							}
; 219  : 						}
; 220  : 					}
; 221  : 				}
; 222  : 			}
; 223  : 		}
; 224  : 	}
; 225  : }

  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 08 00	 ret	 8
?MonsterKiller@cWinQuestSystem@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; cWinQuestSystem::MonsterKiller
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??__EgWinQuestSystem@@YAXXZ
text$yc	SEGMENT
??__EgWinQuestSystem@@YAXXZ PROC			; `dynamic initializer for 'gWinQuestSystem'', COMDAT

; 21   : cWinQuestSystem gWinQuestSystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWinQuestSystem@@3VcWinQuestSystem@@A ; gWinQuestSystem
  00005	e9 00 00 00 00	 jmp	 ??0cWinQuestSystem@@QAE@XZ ; cWinQuestSystem::cWinQuestSystem
??__EgWinQuestSystem@@YAXXZ ENDP			; `dynamic initializer for 'gWinQuestSystem''
text$yc	ENDS
PUBLIC	?gWinQuestSystem@@3VcWinQuestSystem@@A		; gWinQuestSystem
_BSS	SEGMENT
?gWinQuestSystem@@3VcWinQuestSystem@@A DB 089f0b0H DUP (?) ; gWinQuestSystem
_BSS	ENDS
CRT$XCU	SEGMENT
_gWinQuestSystem$initializer$ DD FLAT:??__EgWinQuestSystem@@YAXXZ
CRT$XCU	ENDS
END
