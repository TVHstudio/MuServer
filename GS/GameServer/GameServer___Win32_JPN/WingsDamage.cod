; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\WingsDamage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gWingsDamage@@3VcWingsDamage@@A		; gWingsDamage
_BSS	SEGMENT
?gWingsDamage@@3VcWingsDamage@@A DB 01928H DUP (?)	; gWingsDamage
_BSS	ENDS
PUBLIC	?set@PWMSG_HEAD2@@QAEXPAEEEH@Z			; PWMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z PROC			; PWMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 149  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 		lpBuf[0] = 0xC2;
; 151  : 		lpBuf[1] = SET_NUMBERH(size);

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00009	8b d1		 mov	 edx, ecx
  0000b	c1 ea 08	 shr	 edx, 8
  0000e	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 152  : 		lpBuf[2] = SET_NUMBERL(size);
; 153  : 		lpBuf[3] = head;
; 154  : 		lpBuf[4] = sub;

  00011	8a 55 10	 mov	 dl, BYTE PTR _sub$[ebp]
  00014	88 48 02	 mov	 BYTE PTR [eax+2], cl
  00017	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0001a	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H
  0001d	88 48 03	 mov	 BYTE PTR [eax+3], cl
  00020	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 155  : 	}

  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ENDP			; PWMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Init@cWingsDamage@@QAEXXZ			; cWingsDamage::Init
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\wingsdamage.cpp
;	COMDAT ?Init@cWingsDamage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@cWingsDamage@@QAEXXZ PROC				; cWingsDamage::Init, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : 	for (int i = 0; i < MAX_WINGS_ITEM; i++)

  0000a	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000d	ba 32 00 00 00	 mov	 edx, 50			; 00000032H
  00012	33 db		 xor	 ebx, ebx
$LL9@Init:

; 13   : 	{
; 14   : 		this->Data[i].Type = 0;

  00014	89 58 f8	 mov	 DWORD PTR [eax-8], ebx

; 15   : 		this->Data[i].Index = 0;

  00017	89 58 fc	 mov	 DWORD PTR [eax-4], ebx

; 16   : 		this->Data[i].IncreaseDamage = 0;

  0001a	89 18		 mov	 DWORD PTR [eax], ebx

; 17   : 		this->Data[i].IncreaseDefence = 0;

  0001c	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  0001f	83 c0 10	 add	 eax, 16			; 00000010H
  00022	4a		 dec	 edx
  00023	75 ef		 jne	 SHORT $LL9@Init

; 18   : 	}
; 19   : 
; 20   : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  00025	8d b1 0c 19 00
	00		 lea	 esi, DWORD PTR [ecx+6412]
  0002b	8d 81 34 03 00
	00		 lea	 eax, DWORD PTR [ecx+820]
  00031	8d 4a 07	 lea	 ecx, DWORD PTR [edx+7]
  00034	83 cf ff	 or	 edi, -1
  00037	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL6@Init:

; 21   : 	{
; 22   : 		for(int n = 0; n < MAX_WINGS_ITEM; n++)

  00040	ba 32 00 00 00	 mov	 edx, 50			; 00000032H
$LL3@Init:

; 23   : 		{
; 24   : 			this->m_Wing[i][n].Type = -1;

  00045	89 78 f8	 mov	 DWORD PTR [eax-8], edi

; 25   : 			this->m_Wing[i][n].Index = -1;

  00048	89 78 fc	 mov	 DWORD PTR [eax-4], edi

; 26   : 			this->m_Wing[i][n].AttackPercent = 0;

  0004b	89 18		 mov	 DWORD PTR [eax], ebx

; 27   : 			this->m_Wing[i][n].AbsurdPercent = 0;

  0004d	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00050	83 c0 10	 add	 eax, 16			; 00000010H
  00053	4a		 dec	 edx
  00054	75 ef		 jne	 SHORT $LL3@Init

; 28   : 		}
; 29   : 
; 30   : 		this->m_iWingCount[i] = 0;

  00056	89 1e		 mov	 DWORD PTR [esi], ebx
  00058	83 c6 04	 add	 esi, 4
  0005b	49		 dec	 ecx
  0005c	75 e2		 jne	 SHORT $LL6@Init

; 31   : 	}
; 32   : 
; 33   : 	this->m_bWingsCharacter = false;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	88 98 28 03 00
	00		 mov	 BYTE PTR [eax+808], bl
  00069	5b		 pop	 ebx

; 34   : };

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?Init@cWingsDamage@@QAEXXZ ENDP				; cWingsDamage::Init
_TEXT	ENDS
PUBLIC	??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_06CKGENIKG@Enable?$AA@			; `string'
PUBLIC	??_C@_0BP@OGFMMKFL@?4?4?2Data?2ZtData?2WingsDamage?4ini?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Load@cWingsDamage@@QAEXXZ			; cWingsDamage::Load
EXTRN	_fclose:PROC
EXTRN	_sscanf:PROC
EXTRN	?Zt_IsBadFileLine@@YA_NPADAAH@Z:PROC		; Zt_IsBadFileLine
EXTRN	_fgets:PROC
EXTRN	_feof:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKGENIKG@Enable?$AA@
CONST	SEGMENT
??_C@_06CKGENIKG@Enable?$AA@ DB 'Enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OGFMMKFL@?4?4?2Data?2ZtData?2WingsDamage?4ini?$AA@
CONST	SEGMENT
??_C@_0BP@OGFMMKFL@?4?4?2Data?2ZtData?2WingsDamage?4ini?$AA@ DB '..\Data\'
	DB	'ZtData\WingsDamage.ini', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@cWingsDamage@@QAEXXZ
_TEXT	SEGMENT
_file$ = -300						; size = 4
_Flag$ = -296						; size = 4
_n$202506 = -292					; size = 16
_n$202499 = -276					; size = 16
_Buff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?Load@cWingsDamage@@QAEXXZ PROC				; cWingsDamage::Load, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f1		 mov	 esi, ecx

; 38   : 	this->Init();

  00018	e8 00 00 00 00	 call	 ?Init@cWingsDamage@@QAEXXZ ; cWingsDamage::Init

; 39   : 
; 40   : 	this->Enable = GetPrivateProfileInt("ZtTeam","Enable",0,WingsDamage_DIR);

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OGFMMKFL@?4?4?2Data?2ZtData?2WingsDamage?4ini?$AA@
  00022	33 ff		 xor	 edi, edi
  00024	57		 push	 edi
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_06CKGENIKG@Enable?$AA@
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 41   : 	
; 42   : 	if(g_ZtLicense.CheckUser(eZtUB::Local) || 
; 43   : 	   g_ZtLicense.CheckUser(eZtUB::ulasevich) || 
; 44   : 	   g_ZtLicense.CheckUser(eZtUB::ulasevich2) ||
; 45   : 	   g_ZtLicense.CheckUser(eZtUB::Gredy) ||
; 46   : 	   g_ZtLicense.CheckUser(eZtUB::Gredy2) ||
; 47   : 	   g_ZtLicense.CheckUser(eZtUB::GredyLocal) ||
; 48   : 	   g_ZtLicense.CheckUser(eZtUB::SILVER1) ||
; 49   : 	   g_ZtLicense.CheckUser(eZtUB::SILVER2) ||
; 50   : 	   g_ZtLicense.CheckUser(eZtUB::SILVER_Local)
; 51   : 	   )

  00035	57		 push	 edi
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003b	89 86 20 03 00
	00		 mov	 DWORD PTR [esi+800], eax
  00041	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00046	84 c0		 test	 al, al
  00048	0f 85 80 00 00
	00		 jne	 $LN10@Load
  0004e	6a 17		 push	 23			; 00000017H
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00055	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0005a	84 c0		 test	 al, al
  0005c	75 70		 jne	 SHORT $LN10@Load
  0005e	6a 24		 push	 36			; 00000024H
  00060	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00065	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0006a	84 c0		 test	 al, al
  0006c	75 60		 jne	 SHORT $LN10@Load
  0006e	6a 20		 push	 32			; 00000020H
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00075	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0007a	84 c0		 test	 al, al
  0007c	75 50		 jne	 SHORT $LN10@Load
  0007e	6a 22		 push	 34			; 00000022H
  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00085	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0008a	84 c0		 test	 al, al
  0008c	75 40		 jne	 SHORT $LN10@Load
  0008e	6a 21		 push	 33			; 00000021H
  00090	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00095	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0009a	84 c0		 test	 al, al
  0009c	75 30		 jne	 SHORT $LN10@Load
  0009e	6a 07		 push	 7
  000a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000a5	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000aa	84 c0		 test	 al, al
  000ac	75 20		 jne	 SHORT $LN10@Load
  000ae	6a 08		 push	 8
  000b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000b5	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000ba	84 c0		 test	 al, al
  000bc	75 10		 jne	 SHORT $LN10@Load
  000be	6a 2b		 push	 43			; 0000002bH
  000c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000c5	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000ca	84 c0		 test	 al, al
  000cc	74 07		 je	 SHORT $LN11@Load
$LN10@Load:

; 52   : 	{
; 53   : 		this->m_bWingsCharacter = true;

  000ce	c6 86 28 03 00
	00 01		 mov	 BYTE PTR [esi+808], 1
$LN11@Load:

; 54   : 	}
; 55   : 
; 56   : 	FILE * file = fopen(WingsDamage_DIR,"r");

  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OGFMMKFL@?4?4?2Data?2ZtData?2WingsDamage?4ini?$AA@
  000df	e8 00 00 00 00	 call	 _fopen
  000e4	8b d8		 mov	 ebx, eax
  000e6	83 c4 08	 add	 esp, 8
  000e9	89 9d d4 fe ff
	ff		 mov	 DWORD PTR _file$[ebp], ebx

; 57   : 
; 58   : 	if(file == NULL)

  000ef	3b df		 cmp	 ebx, edi
  000f1	75 18		 jne	 SHORT $LN9@Load

; 59   : 	{
; 60   : 		MessageBoxA(0,WingsDamage_DIR,"LOAD FILE ERROR",0);

  000f3	57		 push	 edi
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OGFMMKFL@?4?4?2Data?2ZtData?2WingsDamage?4ini?$AA@
  000fe	57		 push	 edi
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 61   : 		this->Enable = false;

  00105	89 be 20 03 00
	00		 mov	 DWORD PTR [esi+800], edi
$LN9@Load:

; 62   : 	}
; 63   : 	
; 64   : 	char Buff[256];
; 65   : 	int Flag = 0;
; 66   : 
; 67   : 	this->Count = 0;
; 68   : 
; 69   : 	while(!feof(file))

  0010b	53		 push	 ebx
  0010c	89 bd d8 fe ff
	ff		 mov	 DWORD PTR _Flag$[ebp], edi
  00112	89 be 24 03 00
	00		 mov	 DWORD PTR [esi+804], edi
  00118	e8 00 00 00 00	 call	 _feof
  0011d	83 c4 04	 add	 esp, 4
  00120	85 c0		 test	 eax, eax
  00122	0f 85 7c 01 00
	00		 jne	 $LN7@Load
  00128	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL8@Load:

; 70   : 	{
; 71   : 		fgets(Buff,256,file);

  00130	53		 push	 ebx
  00131	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Buff$[ebp]
  00137	68 00 01 00 00	 push	 256			; 00000100H
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 _fgets

; 72   : 		if(Zt_IsBadFileLine(Buff, Flag))

  00142	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _Flag$[ebp]
  00148	51		 push	 ecx
  00149	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  0014f	52		 push	 edx
  00150	e8 00 00 00 00	 call	 ?Zt_IsBadFileLine@@YA_NPADAAH@Z ; Zt_IsBadFileLine
  00155	83 c4 14	 add	 esp, 20			; 00000014H
  00158	84 c0		 test	 al, al
  0015a	0f 85 33 01 00
	00		 jne	 $LN2@Load

; 73   : 			continue;
; 74   : 
; 75   : 		if(Flag == 1)

  00160	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR _Flag$[ebp]
  00166	83 ff 01	 cmp	 edi, 1
  00169	0f 85 8f 00 00
	00		 jne	 $LN5@Load

; 76   : 		{
; 77   : 			if(this->Count >= MAX_WINGS_ITEM)	

  0016f	83 be 24 03 00
	00 32		 cmp	 DWORD PTR [esi+804], 50	; 00000032H
  00176	0f 8d 17 01 00
	00		 jge	 $LN2@Load

; 78   : 				continue;
; 79   : 
; 80   : 			int n[4];
; 81   : 			sscanf(Buff, "%d %d %d %d", &n[0], &n[1], &n[2], &n[3]);

  0017c	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _n$202499[ebp+12]
  00182	50		 push	 eax
  00183	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _n$202499[ebp+8]
  00189	51		 push	 ecx
  0018a	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _n$202499[ebp+4]
  00190	52		 push	 edx
  00191	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _n$202499[ebp]
  00197	50		 push	 eax
  00198	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _Buff$[ebp]
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  001a3	51		 push	 ecx
  001a4	e8 00 00 00 00	 call	 _sscanf

; 82   : 			this->Data[this->Count].Type				= n[0];

  001a9	8b 96 24 03 00
	00		 mov	 edx, DWORD PTR [esi+804]
  001af	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _n$202499[ebp]
  001b5	03 d2		 add	 edx, edx
  001b7	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax

; 83   : 			this->Data[this->Count].Index				= n[1];

  001ba	8b 8e 24 03 00
	00		 mov	 ecx, DWORD PTR [esi+804]
  001c0	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _n$202499[ebp+4]
  001c6	03 c9		 add	 ecx, ecx
  001c8	89 54 ce 04	 mov	 DWORD PTR [esi+ecx*8+4], edx

; 84   : 			this->Data[this->Count].IncreaseDamage		= n[2];

  001cc	8b 86 24 03 00
	00		 mov	 eax, DWORD PTR [esi+804]
  001d2	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _n$202499[ebp+8]
  001d8	03 c0		 add	 eax, eax
  001da	89 4c c6 08	 mov	 DWORD PTR [esi+eax*8+8], ecx

; 85   : 			this->Data[this->Count].IncreaseDefence		= n[3];

  001de	8b 96 24 03 00
	00		 mov	 edx, DWORD PTR [esi+804]
  001e4	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _n$202499[ebp+12]
  001ea	03 d2		 add	 edx, edx
  001ec	83 c4 18	 add	 esp, 24			; 00000018H
  001ef	89 44 d6 0c	 mov	 DWORD PTR [esi+edx*8+12], eax

; 86   : 			this->Count++;

  001f3	ff 86 24 03 00
	00		 inc	 DWORD PTR [esi+804]
  001f9	e9 95 00 00 00	 jmp	 $LN2@Load
$LN5@Load:

; 87   : 		}
; 88   : 		else if(Flag >= 2 && Flag < (MAX_TYPE_PLAYER + 2))

  001fe	83 c7 fe	 add	 edi, -2			; fffffffeH
  00201	83 ff 06	 cmp	 edi, 6
  00204	0f 87 89 00 00
	00		 ja	 $LN2@Load

; 89   : 		{
; 90   : 			int iClass = Flag - 2;
; 91   : 			int iCount = this->m_iWingCount[iClass];

  0020a	8b 9c be 0c 19
	00 00		 mov	 ebx, DWORD PTR [esi+edi*4+6412]

; 92   : 
; 93   : 			if(this->m_iWingCount[iClass] >= MAX_WINGS_ITEM)

  00211	83 fb 32	 cmp	 ebx, 50			; 00000032H
  00214	7d 77		 jge	 SHORT $LN18@Load

; 94   : 			{
; 95   : 				continue;
; 96   : 			}
; 97   : 
; 98   : 			int n[4];
; 99   : 
; 100  : 			sscanf(Buff, "%d %d %d %d", &n[0], &n[1], &n[2], &n[3]);

  00216	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _n$202506[ebp+12]
  0021c	51		 push	 ecx
  0021d	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _n$202506[ebp+8]
  00223	52		 push	 edx
  00224	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _n$202506[ebp+4]
  0022a	50		 push	 eax
  0022b	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _n$202506[ebp]
  00231	51		 push	 ecx
  00232	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _Buff$[ebp]
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  0023d	52		 push	 edx
  0023e	e8 00 00 00 00	 call	 _sscanf

; 101  : 
; 102  : 			this->m_Wing[iClass][iCount].Type			= n[0];

  00243	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _n$202506[ebp]
  00249	8b cf		 mov	 ecx, edi
  0024b	6b c9 32	 imul	 ecx, 50			; 00000032H
  0024e	03 cb		 add	 ecx, ebx
  00250	8b c1		 mov	 eax, ecx
  00252	03 c0		 add	 eax, eax

; 103  : 			this->m_Wing[iClass][iCount].Index			= n[1];

  00254	83 c1 33	 add	 ecx, 51			; 00000033H
  00257	89 94 c6 2c 03
	00 00		 mov	 DWORD PTR [esi+eax*8+812], edx
  0025e	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _n$202506[ebp+4]
  00264	03 c9		 add	 ecx, ecx
  00266	89 14 ce	 mov	 DWORD PTR [esi+ecx*8], edx

; 104  : 			this->m_Wing[iClass][iCount].AttackPercent	= n[2];

  00269	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _n$202506[ebp+8]

; 105  : 			this->m_Wing[iClass][iCount].AbsurdPercent	= n[3];

  0026f	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _n$202506[ebp+12]
  00275	83 c4 18	 add	 esp, 24			; 00000018H
  00278	89 8c c6 34 03
	00 00		 mov	 DWORD PTR [esi+eax*8+820], ecx
  0027f	89 94 c6 38 03
	00 00		 mov	 DWORD PTR [esi+eax*8+824], edx

; 106  : 
; 107  : 			this->m_iWingCount[iClass]++;

  00286	ff 84 be 0c 19
	00 00		 inc	 DWORD PTR [esi+edi*4+6412]
$LN18@Load:
  0028d	8b 9d d4 fe ff
	ff		 mov	 ebx, DWORD PTR _file$[ebp]
$LN2@Load:

; 62   : 	}
; 63   : 	
; 64   : 	char Buff[256];
; 65   : 	int Flag = 0;
; 66   : 
; 67   : 	this->Count = 0;
; 68   : 
; 69   : 	while(!feof(file))

  00293	53		 push	 ebx
  00294	e8 00 00 00 00	 call	 _feof
  00299	83 c4 04	 add	 esp, 4
  0029c	85 c0		 test	 eax, eax
  0029e	0f 84 8c fe ff
	ff		 je	 $LL8@Load
$LN7@Load:

; 108  : 		}
; 109  : 	}
; 110  : 
; 111  : 	fclose(file);

  002a4	53		 push	 ebx
  002a5	e8 00 00 00 00	 call	 _fclose

; 112  : };

  002aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ad	83 c4 04	 add	 esp, 4
  002b0	5f		 pop	 edi
  002b1	5e		 pop	 esi
  002b2	33 cd		 xor	 ecx, ebp
  002b4	5b		 pop	 ebx
  002b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ba	8b e5		 mov	 esp, ebp
  002bc	5d		 pop	 ebp
  002bd	c3		 ret	 0
?Load@cWingsDamage@@QAEXXZ ENDP				; cWingsDamage::Load
_TEXT	ENDS
PUBLIC	?Attack@cWingsDamage@@QAEXHAAH@Z		; cWingsDamage::Attack
; Function compile flags: /Ogtp
;	COMDAT ?Attack@cWingsDamage@@QAEXHAAH@Z
_TEXT	SEGMENT
_Wing$ = 8						; size = 4
_Damage$ = 12						; size = 4
?Attack@cWingsDamage@@QAEXHAAH@Z PROC			; cWingsDamage::Attack, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 116  : 	if (!this->Enable)

  00003	83 b9 20 03 00
	00 00		 cmp	 DWORD PTR [ecx+800], 0
  0000a	74 49		 je	 SHORT $LN2@Attack

; 117  : 	{
; 118  : 		return;
; 119  : 	}
; 120  : 	for (int i = 0; i < this->Count; i++)

  0000c	53		 push	 ebx
  0000d	33 db		 xor	 ebx, ebx
  0000f	39 99 24 03 00
	00		 cmp	 DWORD PTR [ecx+804], ebx
  00015	7e 3d		 jle	 SHORT $LN10@Attack
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR _Damage$[ebp]
  0001c	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  0001f	90		 npad	 1
$LL4@Attack:

; 121  : 	{
; 122  : 		if ( Wing == ITEMGET(Data[i].Type,Data[i].Index) ) 

  00020	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  00023	c1 e0 09	 shl	 eax, 9
  00026	03 46 fc	 add	 eax, DWORD PTR [esi-4]
  00029	39 45 08	 cmp	 DWORD PTR _Wing$[ebp], eax
  0002c	75 18		 jne	 SHORT $LN3@Attack

; 123  : 		{
; 124  : 			Damage = Damage * Data[i].IncreaseDamage / 100;

  0002e	8b 17		 mov	 edx, DWORD PTR [edi]
  00030	0f af 16	 imul	 edx, DWORD PTR [esi]
  00033	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00038	f7 ea		 imul	 edx
  0003a	c1 fa 05	 sar	 edx, 5
  0003d	8b c2		 mov	 eax, edx
  0003f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00042	03 c2		 add	 eax, edx
  00044	89 07		 mov	 DWORD PTR [edi], eax
$LN3@Attack:

; 117  : 	{
; 118  : 		return;
; 119  : 	}
; 120  : 	for (int i = 0; i < this->Count; i++)

  00046	43		 inc	 ebx
  00047	83 c6 10	 add	 esi, 16			; 00000010H
  0004a	3b 99 24 03 00
	00		 cmp	 ebx, DWORD PTR [ecx+804]
  00050	7c ce		 jl	 SHORT $LL4@Attack
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
$LN10@Attack:
  00054	5b		 pop	 ebx
$LN2@Attack:

; 125  : 		}
; 126  : 	}
; 127  : };

  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?Attack@cWingsDamage@@QAEXHAAH@Z ENDP			; cWingsDamage::Attack
_TEXT	ENDS
PUBLIC	?Defence@cWingsDamage@@QAEXHAAH@Z		; cWingsDamage::Defence
; Function compile flags: /Ogtp
;	COMDAT ?Defence@cWingsDamage@@QAEXHAAH@Z
_TEXT	SEGMENT
_Wing$ = 8						; size = 4
_Damage$ = 12						; size = 4
?Defence@cWingsDamage@@QAEXHAAH@Z PROC			; cWingsDamage::Defence, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 131  : 	if (!this->Enable)

  00003	83 b9 20 03 00
	00 00		 cmp	 DWORD PTR [ecx+800], 0
  0000a	74 49		 je	 SHORT $LN2@Defence

; 132  : 	{
; 133  : 		return;
; 134  : 	}
; 135  : 	for (int i = 0; i < this->Count; i++)

  0000c	53		 push	 ebx
  0000d	33 db		 xor	 ebx, ebx
  0000f	39 99 24 03 00
	00		 cmp	 DWORD PTR [ecx+804], ebx
  00015	7e 3d		 jle	 SHORT $LN10@Defence
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR _Damage$[ebp]
  0001c	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
  0001f	90		 npad	 1
$LL4@Defence:

; 136  : 	{
; 137  : 		if ( Wing == ITEMGET(Data[i].Type,Data[i].Index) ) 

  00020	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00023	c1 e0 09	 shl	 eax, 9
  00026	03 46 f8	 add	 eax, DWORD PTR [esi-8]
  00029	39 45 08	 cmp	 DWORD PTR _Wing$[ebp], eax
  0002c	75 18		 jne	 SHORT $LN3@Defence

; 138  : 		{
; 139  : 			Damage = Damage * Data[i].IncreaseDefence / 100;

  0002e	8b 17		 mov	 edx, DWORD PTR [edi]
  00030	0f af 16	 imul	 edx, DWORD PTR [esi]
  00033	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00038	f7 ea		 imul	 edx
  0003a	c1 fa 05	 sar	 edx, 5
  0003d	8b c2		 mov	 eax, edx
  0003f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00042	03 c2		 add	 eax, edx
  00044	89 07		 mov	 DWORD PTR [edi], eax
$LN3@Defence:

; 132  : 	{
; 133  : 		return;
; 134  : 	}
; 135  : 	for (int i = 0; i < this->Count; i++)

  00046	43		 inc	 ebx
  00047	83 c6 10	 add	 esi, 16			; 00000010H
  0004a	3b 99 24 03 00
	00		 cmp	 ebx, DWORD PTR [ecx+804]
  00050	7c ce		 jl	 SHORT $LL4@Defence
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
$LN10@Defence:
  00054	5b		 pop	 ebx
$LN2@Defence:

; 140  : 		}
; 141  : 	}
; 142  : }

  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?Defence@cWingsDamage@@QAEXHAAH@Z ENDP			; cWingsDamage::Defence
_TEXT	ENDS
PUBLIC	?SetCharWingAttack@cWingsDamage@@QAEXHHHAAH@Z	; cWingsDamage::SetCharWingAttack
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?SetCharWingAttack@cWingsDamage@@QAEXHHHAAH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv424 = -4						; size = 4
_iDamagePercent$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_ItemType$ = 12						; size = 4
_ItemLevel$ = 16					; size = 4
_AttackDamage$ = 20					; size = 4
?SetCharWingAttack@cWingsDamage@@QAEXHHHAAH@Z PROC	; cWingsDamage::SetCharWingAttack, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 146  : 	if(this->m_bWingsCharacter)

  00006	80 b9 28 03 00
	00 00		 cmp	 BYTE PTR [ecx+808], 0
  0000d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00010	0f 85 c5 00 00
	00		 jne	 $LN12@SetCharWin

; 147  : 	{
; 148  : 		return;
; 149  : 	}
; 150  : 
; 151  : 	if(!OBJMAX_RANGE(aIndex))

  00016	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00019	85 c0		 test	 eax, eax
  0001b	0f 88 ba 00 00
	00		 js	 $LN12@SetCharWin
  00021	33 d2		 xor	 edx, edx
  00023	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00028	0f 9e c2	 setle	 dl
  0002b	85 d2		 test	 edx, edx
  0002d	0f 84 a8 00 00
	00		 je	 $LN12@SetCharWin

; 152  : 	{
; 153  : 		return;
; 154  : 	}
; 155  : 
; 156  : 	LPOBJ lpUser = &gObj[aIndex];
; 157  : 
; 158  : 	int iClass = lpUser->Class;
; 159  : 	int iCount = this->m_iWingCount[iClass];

  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00039	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003f	0f b7 84 10 b8
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+184]
  00047	53		 push	 ebx
  00048	56		 push	 esi
  00049	8d 91 30 03 00
	00		 lea	 edx, DWORD PTR [ecx+816]
  0004f	57		 push	 edi
  00050	8b bc 81 0c 19
	00 00		 mov	 edi, DWORD PTR [ecx+eax*4+6412]

; 160  : 	int iDamagePercent = 100;
; 161  : 
; 162  : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  00057	33 db		 xor	 ebx, ebx
  00059	c7 45 08 64 00
	00 00		 mov	 DWORD PTR _iDamagePercent$[ebp], 100 ; 00000064H
  00060	33 f6		 xor	 esi, esi
  00062	89 55 fc	 mov	 DWORD PTR tv424[ebp], edx
$LL9@SetCharWin:

; 163  : 	{
; 164  : 		if(iClass = i)

  00065	85 db		 test	 ebx, ebx
  00067	74 30		 je	 SHORT $LN8@SetCharWin

; 165  : 		{
; 166  : 			for(int n = 0; n < iCount; n++)

  00069	33 c0		 xor	 eax, eax
  0006b	85 ff		 test	 edi, edi
  0006d	7e 2a		 jle	 SHORT $LN8@SetCharWin
  0006f	90		 npad	 1
$LL5@SetCharWin:

; 167  : 			{
; 168  : 				if(ItemType == ITEMGET(this->m_Wing[i][n].Type, this->m_Wing[i][n].Index)) 

  00070	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00073	c1 e1 09	 shl	 ecx, 9
  00076	03 0a		 add	 ecx, DWORD PTR [edx]
  00078	39 4d 0c	 cmp	 DWORD PTR _ItemType$[ebp], ecx
  0007b	74 0a		 je	 SHORT $LN18@SetCharWin

; 165  : 		{
; 166  : 			for(int n = 0; n < iCount; n++)

  0007d	40		 inc	 eax
  0007e	83 c2 10	 add	 edx, 16			; 00000010H
  00081	3b c7		 cmp	 eax, edi
  00083	7c eb		 jl	 SHORT $LL5@SetCharWin

; 167  : 			{
; 168  : 				if(ItemType == ITEMGET(this->m_Wing[i][n].Type, this->m_Wing[i][n].Index)) 

  00085	eb 12		 jmp	 SHORT $LN8@SetCharWin
$LN18@SetCharWin:

; 169  : 				{
; 170  : 					iDamagePercent += this->m_Wing[i][n].AttackPercent;

  00087	8d 14 06	 lea	 edx, DWORD PTR [esi+eax]
  0008a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	03 d2		 add	 edx, edx
  0008f	8b 8c d0 34 03
	00 00		 mov	 ecx, DWORD PTR [eax+edx*8+820]
  00096	01 4d 08	 add	 DWORD PTR _iDamagePercent$[ebp], ecx
$LN8@SetCharWin:

; 160  : 	int iDamagePercent = 100;
; 161  : 
; 162  : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  00099	8b 55 fc	 mov	 edx, DWORD PTR tv424[ebp]
  0009c	81 c2 20 03 00
	00		 add	 edx, 800		; 00000320H
  000a2	83 c6 32	 add	 esi, 50			; 00000032H
  000a5	43		 inc	 ebx
  000a6	89 55 fc	 mov	 DWORD PTR tv424[ebp], edx
  000a9	81 fe 5e 01 00
	00		 cmp	 esi, 350		; 0000015eH
  000af	7c b4		 jl	 SHORT $LL9@SetCharWin

; 171  : 					break;
; 172  : 				}
; 173  : 			}
; 174  : 		}
; 175  : 	}
; 176  : 
; 177  : 	if(iDamagePercent <= 100)

  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _iDamagePercent$[ebp]
  000b4	83 f9 64	 cmp	 ecx, 100		; 00000064H
  000b7	7e 1f		 jle	 SHORT $LN22@SetCharWin

; 178  : 	{
; 179  : 		return;
; 180  : 	}
; 181  : 
; 182  : 	AttackDamage = AttackDamage * (ItemLevel * 2 + iDamagePercent) / 100;

  000b9	8b 55 10	 mov	 edx, DWORD PTR _ItemLevel$[ebp]
  000bc	8b 75 14	 mov	 esi, DWORD PTR _AttackDamage$[ebp]
  000bf	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c2	0f af 0e	 imul	 ecx, DWORD PTR [esi]
  000c5	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000ca	f7 e9		 imul	 ecx
  000cc	c1 fa 05	 sar	 edx, 5
  000cf	8b c2		 mov	 eax, edx
  000d1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d4	03 c2		 add	 eax, edx
  000d6	89 06		 mov	 DWORD PTR [esi], eax
$LN22@SetCharWin:
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
$LN12@SetCharWin:

; 183  : }

  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 10 00	 ret	 16			; 00000010H
?SetCharWingAttack@cWingsDamage@@QAEXHHHAAH@Z ENDP	; cWingsDamage::SetCharWingAttack
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?SetCharWingAbsurd@cWingsDamage@@QAEXHHHAAH@Z	; cWingsDamage::SetCharWingAbsurd
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetCharWingAbsurd@cWingsDamage@@QAEXHHHAAH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_iClass$ = -8						; size = 4
tv463 = -4						; size = 4
tv456 = 8						; size = 4
_i$202566 = 8						; size = 4
_aIndex$ = 8						; size = 4
_ItemType$ = 12						; size = 4
_ItemLevel$ = 16					; size = 4
_AttackDamage$ = 20					; size = 4
?SetCharWingAbsurd@cWingsDamage@@QAEXHHHAAH@Z PROC	; cWingsDamage::SetCharWingAbsurd, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 187  : 	if(this->m_bWingsCharacter)

  00006	80 b9 28 03 00
	00 00		 cmp	 BYTE PTR [ecx+808], 0
  0000d	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00010	0f 85 cc 00 00
	00		 jne	 $LN13@SetCharWin@2

; 188  : 	{
; 189  : 		return;
; 190  : 	}
; 191  : 
; 192  : 	if(!OBJMAX_RANGE(aIndex))

  00016	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00019	56		 push	 esi
  0001a	33 f6		 xor	 esi, esi
  0001c	3b c6		 cmp	 eax, esi
  0001e	0f 8c bd 00 00
	00		 jl	 $LN24@SetCharWin@2
  00024	33 d2		 xor	 edx, edx
  00026	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0002b	0f 9e c2	 setle	 dl
  0002e	3b d6		 cmp	 edx, esi
  00030	0f 84 ab 00 00
	00		 je	 $LN24@SetCharWin@2

; 198  : 
; 199  : 	int iClass = lpUser->Class;

  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00042	0f b7 84 10 b8
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+184]
  0004a	53		 push	 ebx

; 200  : 	int iCount = this->m_iWingCount[iClass];

  0004b	8b 9c 81 0c 19
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*4+6412]
  00052	8d 91 30 03 00
	00		 lea	 edx, DWORD PTR [ecx+816]
  00058	57		 push	 edi
  00059	89 45 f8	 mov	 DWORD PTR _iClass$[ebp], eax

; 201  : 	int iDefencePercent = 100;

  0005c	8d 7e 64	 lea	 edi, DWORD PTR [esi+100]

; 202  : 
; 203  : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  0005f	89 75 08	 mov	 DWORD PTR _i$202566[ebp], esi
  00062	89 55 fc	 mov	 DWORD PTR tv463[ebp], edx
  00065	eb 03		 jmp	 SHORT $LN10@SetCharWin@2
$LL22@SetCharWin@2:

; 193  : 	{
; 194  : 		return;
; 195  : 	}
; 196  : 
; 197  : 	LPOBJ lpUser = &gObj[aIndex];

  00067	8b 45 f8	 mov	 eax, DWORD PTR _iClass$[ebp]
$LN10@SetCharWin@2:

; 204  : 	{
; 205  : 		if(iClass == i)

  0006a	3b 45 08	 cmp	 eax, DWORD PTR _i$202566[ebp]
  0006d	75 2c		 jne	 SHORT $LN9@SetCharWin@2

; 206  : 		{
; 207  : 			for(int n = 0; n < iCount; n++)

  0006f	33 c0		 xor	 eax, eax
  00071	85 db		 test	 ebx, ebx
  00073	7e 26		 jle	 SHORT $LN9@SetCharWin@2
$LL6@SetCharWin@2:

; 208  : 			{
; 209  : 				if(ItemType == ITEMGET(this->m_Wing[i][n].Type, this->m_Wing[i][n].Index)) 

  00075	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00078	c1 e1 09	 shl	 ecx, 9
  0007b	03 0a		 add	 ecx, DWORD PTR [edx]
  0007d	39 4d 0c	 cmp	 DWORD PTR _ItemType$[ebp], ecx
  00080	74 0a		 je	 SHORT $LN19@SetCharWin@2

; 206  : 		{
; 207  : 			for(int n = 0; n < iCount; n++)

  00082	40		 inc	 eax
  00083	83 c2 10	 add	 edx, 16			; 00000010H
  00086	3b c3		 cmp	 eax, ebx
  00088	7c eb		 jl	 SHORT $LL6@SetCharWin@2

; 208  : 			{
; 209  : 				if(ItemType == ITEMGET(this->m_Wing[i][n].Type, this->m_Wing[i][n].Index)) 

  0008a	eb 0f		 jmp	 SHORT $LN9@SetCharWin@2
$LN19@SetCharWin@2:

; 210  : 				{
; 211  : 					iDefencePercent -= this->m_Wing[i][n].AbsurdPercent;

  0008c	8d 14 06	 lea	 edx, DWORD PTR [esi+eax]
  0008f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00092	03 d2		 add	 edx, edx
  00094	2b bc d0 38 03
	00 00		 sub	 edi, DWORD PTR [eax+edx*8+824]
$LN9@SetCharWin@2:

; 202  : 
; 203  : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  0009b	8b 55 fc	 mov	 edx, DWORD PTR tv463[ebp]
  0009e	ff 45 08	 inc	 DWORD PTR _i$202566[ebp]
  000a1	81 c2 20 03 00
	00		 add	 edx, 800		; 00000320H
  000a7	83 c6 32	 add	 esi, 50			; 00000032H
  000aa	89 55 fc	 mov	 DWORD PTR tv463[ebp], edx
  000ad	81 fe 5e 01 00
	00		 cmp	 esi, 350		; 0000015eH
  000b3	7c b2		 jl	 SHORT $LL22@SetCharWin@2

; 212  : 					break;
; 213  : 				}
; 214  : 			}
; 215  : 		}
; 216  : 	}
; 217  : 
; 218  : 	if(iDefencePercent >= 100)

  000b5	83 ff 64	 cmp	 edi, 100		; 00000064H
  000b8	7d 25		 jge	 SHORT $LN25@SetCharWin@2

; 219  : 	{
; 220  : 		return;
; 221  : 	}
; 222  : 
; 223  : 	int iDamage = AttackDamage * (iDefencePercent - (ItemLevel * 2)) / 100.0f;

  000ba	8b 4d 10	 mov	 ecx, DWORD PTR _ItemLevel$[ebp]
  000bd	8b 75 14	 mov	 esi, DWORD PTR _AttackDamage$[ebp]
  000c0	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c3	2b fa		 sub	 edi, edx
  000c5	0f af 3e	 imul	 edi, DWORD PTR [esi]
  000c8	89 7d 08	 mov	 DWORD PTR tv456[ebp], edi
  000cb	db 45 08	 fild	 DWORD PTR tv456[ebp]
  000ce	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  000d4	e8 00 00 00 00	 call	 __ftol2_sse

; 224  : 
; 225  : 	if(iDamage < 0)

  000d9	85 c0		 test	 eax, eax
  000db	78 02		 js	 SHORT $LN25@SetCharWin@2

; 226  : 	{
; 227  : 		return;
; 228  : 	}
; 229  : 
; 230  : 	AttackDamage = iDamage;

  000dd	89 06		 mov	 DWORD PTR [esi], eax
$LN25@SetCharWin@2:
  000df	5f		 pop	 edi
  000e0	5b		 pop	 ebx
$LN24@SetCharWin@2:
  000e1	5e		 pop	 esi
$LN13@SetCharWin@2:

; 231  : }

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 10 00	 ret	 16			; 00000010H
?SetCharWingAbsurd@cWingsDamage@@QAEXHHHAAH@Z ENDP	; cWingsDamage::SetCharWingAbsurd
_TEXT	ENDS
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?PlayerCalculator@cWingsDamage@@QAEXH@Z		; cWingsDamage::PlayerCalculator
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?PlayerCalculator@cWingsDamage@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$GSCopy$ = -616					; size = 4
_pMsg$ = -612						; size = 608
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?PlayerCalculator@cWingsDamage@@QAEXH@Z PROC		; cWingsDamage::PlayerCalculator, COMDAT
; _this$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 68 02 00
	00		 sub	 esp, 616		; 00000268H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00018	8b d9		 mov	 ebx, ecx

; 235  : 	if(!g_ZtLicense.CheckUser(eZtUB::Gredy) &&
; 236  : 	   !g_ZtLicense.CheckUser(eZtUB::Gredy2) &&
; 237  : 	   !g_ZtLicense.CheckUser(eZtUB::GredyLocal) &&
; 238  : 	   !g_ZtLicense.CheckUser(eZtUB::SILVER1) &&
; 239  : 	   !g_ZtLicense.CheckUser(eZtUB::SILVER2) &&
; 240  : 	   !g_ZtLicense.CheckUser(eZtUB::SILVER_Local))

  0001a	6a 20		 push	 32			; 00000020H
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense

; 273  : 	{
; 274  : 		return;
; 275  : 	}
; 276  : 	//for(int i = 0; i < MAX_TYPE_PLAYER; i++)
; 277  : 	{
; 278  : 		//if(iClass = i)
; 279  : 		{
; 280  : 			for(int n = 0; n < iCount; n++)

  00021	89 b5 98 fd ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], esi
  00027	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0002c	84 c0		 test	 al, al
  0002e	75 54		 jne	 SHORT $LN10@PlayerCalc

; 235  : 	if(!g_ZtLicense.CheckUser(eZtUB::Gredy) &&
; 236  : 	   !g_ZtLicense.CheckUser(eZtUB::Gredy2) &&
; 237  : 	   !g_ZtLicense.CheckUser(eZtUB::GredyLocal) &&
; 238  : 	   !g_ZtLicense.CheckUser(eZtUB::SILVER1) &&
; 239  : 	   !g_ZtLicense.CheckUser(eZtUB::SILVER2) &&
; 240  : 	   !g_ZtLicense.CheckUser(eZtUB::SILVER_Local))

  00030	6a 22		 push	 34			; 00000022H
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00037	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0003c	84 c0		 test	 al, al
  0003e	75 44		 jne	 SHORT $LN10@PlayerCalc
  00040	6a 21		 push	 33			; 00000021H
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00047	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0004c	84 c0		 test	 al, al
  0004e	75 34		 jne	 SHORT $LN10@PlayerCalc
  00050	6a 07		 push	 7
  00052	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00057	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0005c	84 c0		 test	 al, al
  0005e	75 24		 jne	 SHORT $LN10@PlayerCalc
  00060	6a 08		 push	 8
  00062	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00067	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0006c	84 c0		 test	 al, al
  0006e	75 14		 jne	 SHORT $LN10@PlayerCalc
  00070	6a 2b		 push	 43			; 0000002bH
  00072	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00077	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0007c	84 c0		 test	 al, al
  0007e	0f 84 d8 00 00
	00		 je	 $LN5@PlayerCalc
$LN10@PlayerCalc:

; 241  : 	{
; 242  : 		return;
; 243  : 	}
; 244  : 
; 245  : 	if(!OBJMAX_RANGE(aIndex))

  00084	85 f6		 test	 esi, esi
  00086	0f 88 d0 00 00
	00		 js	 $LN5@PlayerCalc
  0008c	33 c0		 xor	 eax, eax
  0008e	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00094	0f 9e c0	 setle	 al
  00097	85 c0		 test	 eax, eax
  00099	0f 84 bd 00 00
	00		 je	 $LN5@PlayerCalc

; 246  : 	{
; 247  : 		return;
; 248  : 	}
; 249  : 
; 250  : 	LPOBJ lpUser = &gObj[aIndex];

  0009f	8b c6		 mov	 eax, esi
  000a1	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  000a7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 251  : 
; 252  : 	if(lpUser->m_OfflineMode)

  000ad	80 b8 d4 28 00
	00 00		 cmp	 BYTE PTR [eax+10452], 0
  000b4	0f 85 a2 00 00
	00		 jne	 $LN5@PlayerCalc

; 253  : 	{
; 254  : 		return;
; 255  : 	}
; 256  : 
; 257  : 	if(lpUser->m_iLoadConfigNumber < 4)

  000ba	83 b8 d4 2a 00
	00 04		 cmp	 DWORD PTR [eax+10964], 4
  000c1	0f 8c 95 00 00
	00		 jl	 $LN5@PlayerCalc

; 258  : 	{
; 259  : 		return;
; 260  : 	}
; 261  : 
; 262  : 	CItem * Wing = &lpUser->pInventory[7];
; 263  : 
; 264  : 	int iClass = lpUser->Class;

  000c7	0f b7 b0 b8 00
	00 00		 movzx	 esi, WORD PTR [eax+184]
  000ce	57		 push	 edi

; 265  : 	int iCount = this->m_iWingCount[iClass];

  000cf	8b bc b3 0c 19
	00 00		 mov	 edi, DWORD PTR [ebx+esi*4+6412]

; 266  : 
; 267  : 	PMSG_WINGS_INFO pMsg;
; 268  : 	memset(&pMsg, 0, sizeof(pMsg));

  000d6	68 60 02 00 00	 push	 608			; 00000260H
  000db	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  000e1	6a 00		 push	 0
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _memset
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 269  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFA, 0xBF, sizeof(pMsg));

  000ec	c7 85 9c fd ff
	ff c2 02 60 fa	 mov	 DWORD PTR _pMsg$[ebp], -94371134 ; fa6002c2H
  000f6	c6 85 a0 fd ff
	ff bf		 mov	 BYTE PTR _pMsg$[ebp+4], 191 ; 000000bfH

; 270  : 
; 271  : 
; 272  : 	if(iClass < 0 || iClass > MAX_TYPE_PLAYER)

  000fd	83 fe 07	 cmp	 esi, 7
  00100	77 59		 ja	 SHORT $LN19@PlayerCalc

; 273  : 	{
; 274  : 		return;
; 275  : 	}
; 276  : 	//for(int i = 0; i < MAX_TYPE_PLAYER; i++)
; 277  : 	{
; 278  : 		//if(iClass = i)
; 279  : 		{
; 280  : 			for(int n = 0; n < iCount; n++)

  00102	85 ff		 test	 edi, edi
  00104	7e 3a		 jle	 SHORT $LN2@PlayerCalc
  00106	69 f6 20 03 00
	00		 imul	 esi, 800		; 00000320H
  0010c	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+12]
  00112	8d 84 1e 34 03
	00 00		 lea	 eax, DWORD PTR [esi+ebx+820]
  00119	8b d7		 mov	 edx, edi
  0011b	eb 03 8d 49 00	 npad	 5
$LL4@PlayerCalc:

; 281  : 			{
; 282  : 				pMsg.Wing[n].ItemType = ITEMGET(this->m_Wing[iClass][n].Type, this->m_Wing[iClass][n].Index);

  00120	8b 70 f8	 mov	 esi, DWORD PTR [eax-8]
  00123	c1 e6 09	 shl	 esi, 9
  00126	03 70 fc	 add	 esi, DWORD PTR [eax-4]
  00129	83 c0 10	 add	 eax, 16			; 00000010H
  0012c	89 71 fc	 mov	 DWORD PTR [ecx-4], esi

; 283  : 				pMsg.Wing[n].Damage = this->m_Wing[iClass][n].AttackPercent;

  0012f	8b 70 f0	 mov	 esi, DWORD PTR [eax-16]
  00132	89 31		 mov	 DWORD PTR [ecx], esi

; 284  : 				pMsg.Wing[n].Absord = this->m_Wing[iClass][n].AbsurdPercent;

  00134	8b 70 f4	 mov	 esi, DWORD PTR [eax-12]
  00137	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  0013a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0013d	4a		 dec	 edx
  0013e	75 e0		 jne	 SHORT $LL4@PlayerCalc
$LN2@PlayerCalc:

; 285  : 
; 286  : 				if(6660 == pMsg.Wing[n].ItemType)
; 287  : 				{
; 288  : 					//CItem * Darkhorse = &lpUser->pInventory[8];
; 289  : 
; 290  : 					//pMsg.Wing[n].Absord = Darkhorse->m_PetItem_Level * this->m_Wing[iClass][n].AbsurdPercent;
; 291  : 				}
; 292  : 				
; 293  : 			}
; 294  : 
; 295  : 			//break;
; 296  : 		}
; 297  : 	}
; 298  : 
; 299  : 	DataSend(aIndex, (LPBYTE)&pMsg, sizeof(pMsg));

  00140	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _aIndex$GSCopy$[ebp]
  00146	68 60 02 00 00	 push	 608			; 00000260H
  0014b	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00151	51		 push	 ecx
  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@PlayerCalc:
  0015b	5f		 pop	 edi
$LN5@PlayerCalc:

; 300  : 
; 301  : }

  0015c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015f	5e		 pop	 esi
  00160	33 cd		 xor	 ecx, ebp
  00162	5b		 pop	 ebx
  00163	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 04 00	 ret	 4
?PlayerCalculator@cWingsDamage@@QAEXH@Z ENDP		; cWingsDamage::PlayerCalculator
_TEXT	ENDS
PUBLIC	?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z	; cWingsDamage::SetCharHorseAttack
; Function compile flags: /Ogtp
;	COMDAT ?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_iClass$ = -8						; size = 4
_iDefencePercent$ = -4					; size = 4
tv423 = 8						; size = 4
_aIndex$ = 8						; size = 4
_ItemType$ = 12						; size = 4
_ItemLevel$ = 16					; size = 4
_AttackDamage$ = 20					; size = 4
?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z PROC	; cWingsDamage::SetCharHorseAttack, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 305  : 	if(this->m_bWingsCharacter)

  00006	80 b9 28 03 00
	00 00		 cmp	 BYTE PTR [ecx+808], 0
  0000d	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00010	0f 85 c0 00 00
	00		 jne	 $LN13@SetCharHor

; 306  : 	{
; 307  : 		return;
; 308  : 	}
; 309  : 
; 310  : 	if(!OBJMAX_RANGE(aIndex))

  00016	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00019	56		 push	 esi
  0001a	33 f6		 xor	 esi, esi
  0001c	3b c6		 cmp	 eax, esi
  0001e	0f 8c b1 00 00
	00		 jl	 $LN23@SetCharHor
  00024	33 d2		 xor	 edx, edx
  00026	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0002b	0f 9e c2	 setle	 dl
  0002e	3b d6		 cmp	 edx, esi
  00030	0f 84 9f 00 00
	00		 je	 $LN23@SetCharHor

; 316  : 
; 317  : 	int iClass = lpUser->Class;

  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003c	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00042	0f b7 84 10 b8
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+184]
  0004a	53		 push	 ebx
  0004b	8d 91 30 03 00
	00		 lea	 edx, DWORD PTR [ecx+816]
  00051	57		 push	 edi

; 318  : 	int iCount = this->m_iWingCount[iClass];

  00052	8b bc 81 0c 19
	00 00		 mov	 edi, DWORD PTR [ecx+eax*4+6412]
  00059	89 45 f8	 mov	 DWORD PTR _iClass$[ebp], eax

; 319  : 	int iDefencePercent = 0;

  0005c	89 75 fc	 mov	 DWORD PTR _iDefencePercent$[ebp], esi

; 320  : 
; 321  : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  0005f	33 db		 xor	 ebx, ebx
  00061	89 55 08	 mov	 DWORD PTR tv423[ebp], edx
  00064	eb 03		 jmp	 SHORT $LN10@SetCharHor
$LL22@SetCharHor:

; 311  : 	{
; 312  : 		return;
; 313  : 	}
; 314  : 
; 315  : 	LPOBJ lpUser = &gObj[aIndex];

  00066	8b 45 f8	 mov	 eax, DWORD PTR _iClass$[ebp]
$LN10@SetCharHor:

; 322  : 	{
; 323  : 		if(iClass == i)

  00069	3b c3		 cmp	 eax, ebx
  0006b	75 2f		 jne	 SHORT $LN9@SetCharHor

; 324  : 		{
; 325  : 			for(int n = 0; n < iCount; n++)

  0006d	33 c0		 xor	 eax, eax
  0006f	85 ff		 test	 edi, edi
  00071	7e 29		 jle	 SHORT $LN9@SetCharHor
$LL6@SetCharHor:

; 326  : 			{
; 327  : 				if(ItemType == ITEMGET(this->m_Wing[i][n].Type, this->m_Wing[i][n].Index)) 

  00073	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00076	c1 e1 09	 shl	 ecx, 9
  00079	03 0a		 add	 ecx, DWORD PTR [edx]
  0007b	39 4d 0c	 cmp	 DWORD PTR _ItemType$[ebp], ecx
  0007e	74 0a		 je	 SHORT $LN19@SetCharHor

; 324  : 		{
; 325  : 			for(int n = 0; n < iCount; n++)

  00080	40		 inc	 eax
  00081	83 c2 10	 add	 edx, 16			; 00000010H
  00084	3b c7		 cmp	 eax, edi
  00086	7c eb		 jl	 SHORT $LL6@SetCharHor

; 326  : 			{
; 327  : 				if(ItemType == ITEMGET(this->m_Wing[i][n].Type, this->m_Wing[i][n].Index)) 

  00088	eb 12		 jmp	 SHORT $LN9@SetCharHor
$LN19@SetCharHor:

; 328  : 				{
; 329  : 					iDefencePercent = this->m_Wing[i][n].AbsurdPercent;

  0008a	8d 14 06	 lea	 edx, DWORD PTR [esi+eax]
  0008d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00090	03 d2		 add	 edx, edx
  00092	8b 8c d0 38 03
	00 00		 mov	 ecx, DWORD PTR [eax+edx*8+824]
  00099	89 4d fc	 mov	 DWORD PTR _iDefencePercent$[ebp], ecx
$LN9@SetCharHor:

; 320  : 
; 321  : 	for(int i = 0; i < MAX_TYPE_PLAYER; i++)

  0009c	8b 55 08	 mov	 edx, DWORD PTR tv423[ebp]
  0009f	81 c2 20 03 00
	00		 add	 edx, 800		; 00000320H
  000a5	83 c6 32	 add	 esi, 50			; 00000032H
  000a8	43		 inc	 ebx
  000a9	89 55 08	 mov	 DWORD PTR tv423[ebp], edx
  000ac	81 fe 5e 01 00
	00		 cmp	 esi, 350		; 0000015eH
  000b2	7c b2		 jl	 SHORT $LL22@SetCharHor

; 330  : 					break;
; 331  : 				}
; 332  : 			}
; 333  : 		}
; 334  : 	}
; 335  : 
; 336  : 	if(iDefencePercent == 0)

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _iDefencePercent$[ebp]
  000b7	5f		 pop	 edi
  000b8	5b		 pop	 ebx
  000b9	85 c0		 test	 eax, eax
  000bb	74 18		 je	 SHORT $LN23@SetCharHor

; 337  : 	{
; 338  : 		return;
; 339  : 	}
; 340  : 
; 341  : 	int iDamage = 100 - ((ItemLevel + iDefencePercent) / 2 );

  000bd	03 45 10	 add	 eax, DWORD PTR _ItemLevel$[ebp]
  000c0	99		 cdq
  000c1	2b c2		 sub	 eax, edx
  000c3	8b c8		 mov	 ecx, eax
  000c5	d1 f9		 sar	 ecx, 1
  000c7	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  000cc	2b c1		 sub	 eax, ecx

; 342  : 
; 343  : 	if(iDamage < 0)

  000ce	78 05		 js	 SHORT $LN23@SetCharHor

; 344  : 	{
; 345  : 		return;
; 346  : 	}
; 347  : 
; 348  : 	AttackDamage = iDamage;

  000d0	8b 55 14	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  000d3	89 02		 mov	 DWORD PTR [edx], eax
$LN23@SetCharHor:
  000d5	5e		 pop	 esi
$LN13@SetCharHor:

; 349  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 10 00	 ret	 16			; 00000010H
?SetCharHorseAttack@cWingsDamage@@QAEXHHHAAH@Z ENDP	; cWingsDamage::SetCharHorseAttack
_TEXT	ENDS
END
