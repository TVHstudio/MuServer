; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\common\WzMemScript.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CWzMemScript@@6B@				; CWzMemScript::`vftable'
PUBLIC	??0CWzMemScript@@QAE@XZ				; CWzMemScript::CWzMemScript
PUBLIC	??_R4CWzMemScript@@6B@				; CWzMemScript::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWzMemScript@@@8			; CWzMemScript `RTTI Type Descriptor'
PUBLIC	??_R3CWzMemScript@@8				; CWzMemScript::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWzMemScript@@8				; CWzMemScript::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWzMemScript@@8			; CWzMemScript::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECWzMemScript@@UAEPAXI@Z:PROC		; CWzMemScript::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CWzMemScript@@8
; File e:\work\tranet_version\gs\common\wzmemscript.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CWzMemScript@@8 DD FLAT:??_R0?AVCWzMemScript@@@8 ; CWzMemScript::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWzMemScript@@8
rdata$r	ENDS
;	COMDAT ??_R2CWzMemScript@@8
rdata$r	SEGMENT
??_R2CWzMemScript@@8 DD FLAT:??_R1A@?0A@EA@CWzMemScript@@8 ; CWzMemScript::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWzMemScript@@8
rdata$r	SEGMENT
??_R3CWzMemScript@@8 DD 00H				; CWzMemScript::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWzMemScript@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWzMemScript@@@8
_DATA	SEGMENT
??_R0?AVCWzMemScript@@@8 DD FLAT:??_7type_info@@6B@	; CWzMemScript `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWzMemScript@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CWzMemScript@@6B@
rdata$r	SEGMENT
??_R4CWzMemScript@@6B@ DD 00H				; CWzMemScript::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWzMemScript@@@8
	DD	FLAT:??_R3CWzMemScript@@8
rdata$r	ENDS
;	COMDAT ??_7CWzMemScript@@6B@
CONST	SEGMENT
??_7CWzMemScript@@6B@ DD FLAT:??_R4CWzMemScript@@6B@	; CWzMemScript::`vftable'
	DD	FLAT:??_ECWzMemScript@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CWzMemScript@@QAE@XZ
_TEXT	SEGMENT
??0CWzMemScript@@QAE@XZ PROC				; CWzMemScript::CWzMemScript, COMDAT
; _this$ = ecx

; 5    : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWzMemScript@@6B@

; 6    : 	return;
; 7    : }

  00008	c3		 ret	 0
??0CWzMemScript@@QAE@XZ ENDP				; CWzMemScript::CWzMemScript
_TEXT	ENDS
PUBLIC	??1CWzMemScript@@UAE@XZ				; CWzMemScript::~CWzMemScript
; Function compile flags: /Ogtp
;	COMDAT ??1CWzMemScript@@UAE@XZ
_TEXT	SEGMENT
??1CWzMemScript@@UAE@XZ PROC				; CWzMemScript::~CWzMemScript, COMDAT
; _this$ = ecx

; 10   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CWzMemScript@@6B@

; 11   : 	return;
; 12   : }

  00006	c3		 ret	 0
??1CWzMemScript@@UAE@XZ ENDP				; CWzMemScript::~CWzMemScript
_TEXT	ENDS
PUBLIC	?GetC@CWzMemScript@@IAEHXZ			; CWzMemScript::GetC
; Function compile flags: /Ogtp
;	COMDAT ?GetC@CWzMemScript@@IAEHXZ
_TEXT	SEGMENT
?GetC@CWzMemScript@@IAEHXZ PROC				; CWzMemScript::GetC, COMDAT
; _this$ = ecx

; 23   : 	if ( this->m_iBufferCount >= this->m_iBufferSize )

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00006	7c 04		 jl	 SHORT $LN2@GetC

; 24   : 	{
; 25   : 		return -1;

  00008	83 c8 ff	 or	 eax, -1

; 30   : 	}
; 31   : }

  0000b	c3		 ret	 0
$LN2@GetC:

; 26   : 	}
; 27   : 	else
; 28   : 	{
; 29   : 		return this->m_pBuffer[ this->m_iBufferCount++ ];

  0000c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000f	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  00013	42		 inc	 edx
  00014	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 30   : 	}
; 31   : }

  00017	c3		 ret	 0
?GetC@CWzMemScript@@IAEHXZ ENDP				; CWzMemScript::GetC
_TEXT	ENDS
PUBLIC	?UnGetC@CWzMemScript@@IAEXH@Z			; CWzMemScript::UnGetC
; Function compile flags: /Ogtp
;	COMDAT ?UnGetC@CWzMemScript@@IAEXH@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 4
?UnGetC@CWzMemScript@@IAEXH@Z PROC			; CWzMemScript::UnGetC, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   : 	if ( this->m_iBufferCount <= 0)

  00003	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00006	85 c0		 test	 eax, eax
  00008	7e 0d		 jle	 SHORT $LN1@UnGetC

; 38   : 	{
; 39   : 		return;
; 40   : 	}
; 41   : 	else
; 42   : 	{
; 43   : 		this->m_iBufferCount--;
; 44   : 
; 45   : 		this->m_pBuffer [ this->m_iBufferCount ] = ch;

  0000a	8a 55 08	 mov	 dl, BYTE PTR _ch$[ebp]
  0000d	48		 dec	 eax
  0000e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
$LN1@UnGetC:

; 46   : 	}
; 47   : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?UnGetC@CWzMemScript@@IAEXH@Z ENDP			; CWzMemScript::UnGetC
_TEXT	ENDS
PUBLIC	?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z ; CWzMemScript::SetScriptParsingBuffer
; Function compile flags: /Ogtp
;	COMDAT ?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z PROC	; CWzMemScript::SetScriptParsingBuffer, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	this->m_pBuffer = buffer;

  00003	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]

; 53   : 	this->m_iBufferSize = size;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  00009	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000c	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 54   : 	this->m_iBufferCount = 0;

  0000f	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 55   : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z ENDP	; CWzMemScript::SetScriptParsingBuffer
_TEXT	ENDS
PUBLIC	?GetNumber@CWzMemScript@@QAEHXZ			; CWzMemScript::GetNumber
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetNumber@CWzMemScript@@QAEHXZ
_TEXT	SEGMENT
?GetNumber@CWzMemScript@@QAEHXZ PROC			; CWzMemScript::GetNumber, COMDAT
; _this$ = ecx

; 60   : 	return (int)this->TokenNumber;

  00000	d9 41 18	 fld	 DWORD PTR [ecx+24]
  00003	e9 00 00 00 00	 jmp	 __ftol2_sse
?GetNumber@CWzMemScript@@QAEHXZ ENDP			; CWzMemScript::GetNumber
_TEXT	ENDS
PUBLIC	?GetString@CWzMemScript@@QAEPADXZ		; CWzMemScript::GetString
; Function compile flags: /Ogtp
;	COMDAT ?GetString@CWzMemScript@@QAEPADXZ
_TEXT	SEGMENT
?GetString@CWzMemScript@@QAEPADXZ PROC			; CWzMemScript::GetString, COMDAT
; _this$ = ecx

; 65   : 	return &this->TokenString[0];

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]

; 66   : }

  00003	c3		 ret	 0
?GetString@CWzMemScript@@QAEPADXZ ENDP			; CWzMemScript::GetString
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ	; CWzMemScript::GetToken
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ PROC	; CWzMemScript::GetToken, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx
  00014	57		 push	 edi

; 70   : 	char ch;
; 71   : 	char* p;
; 72   : 	char TempString[100];
; 73   : 
; 74   : 	this->TokenString[0]=0;

  00015	8d 7e 1c	 lea	 edi, DWORD PTR [esi+28]
  00018	c6 07 00	 mov	 BYTE PTR [edi], 0
  0001b	eb 03 8d 49 00	 npad	 5
$LL30@GetToken:

; 75   : 
; 76   : 	do
; 77   : 	{
; 78   : 		if ( (ch=this->GetC ()) == (-1) )

  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  00027	8a d8		 mov	 bl, al
  00029	80 fb ff	 cmp	 bl, -1
  0002c	74 4d		 je	 SHORT $LN38@GetToken

; 81   : 		}
; 82   : 		else
; 83   : 		{	
; 84   : 			if (ch=='/')

  0002e	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00031	75 1b		 jne	 SHORT $LN29@GetToken

; 85   : 			{
; 86   : 				if((ch=this->GetC ()) == '/')

  00033	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  00038	8a d8		 mov	 bl, al
  0003a	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0003d	75 0f		 jne	 SHORT $LN29@GetToken
  0003f	90		 npad	 1
$LL23@GetToken:

; 87   : 				{
; 88   : 					while ( ((ch=this->GetC()) != ('\n')) )

  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  00047	8a d8		 mov	 bl, al
  00049	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  0004c	75 f2		 jne	 SHORT $LL23@GetToken
$LN29@GetToken:

; 89   : 					{
; 90   : 						continue;
; 91   : 					}
; 92   : 				}
; 93   : 			}
; 94   : 		}
; 95   : 	}
; 96   : 	while (isspace(ch) != 0);

  0004e	0f be c3	 movsx	 eax, bl
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _isspace
  00057	83 c4 04	 add	 esp, 4
  0005a	85 c0		 test	 eax, eax
  0005c	75 c2		 jne	 SHORT $LL30@GetToken

; 97   : 
; 98   : 	switch(ch)

  0005e	0f be c3	 movsx	 eax, bl
  00061	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00064	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00067	0f 87 06 01 00
	00		 ja	 $LN6@GetToken
  0006d	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN43@GetToken[ecx]
  00074	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN45@GetToken[ecx*4]
$LN38@GetToken:
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi

; 79   : 		{
; 80   : 			return END;

  0007d	b8 02 00 00 00	 mov	 eax, 2
  00082	5b		 pop	 ebx

; 185  : 		}
; 186  : 		break;
; 187  : 
; 188  : 	}
; 189  : 
; 190  : }

  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	33 cd		 xor	 ecx, ebp
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN19@GetToken:

; 99   : 	{
; 100  : 
; 101  : 	case 0x23:	// #
; 102  : 		return this->CurrentToken=COMMAND;

  00091	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  00096	e9 51 01 00 00	 jmp	 $LN44@GetToken
$LN18@GetToken:

; 103  : 		break;
; 104  : 	
; 105  : 	case 0x3B:	// ;
; 106  : 		return this->CurrentToken=SEMICOLON;

  0009b	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000a0	e9 47 01 00 00	 jmp	 $LN44@GetToken
$LN17@GetToken:

; 107  : 		break;
; 108  : 	
; 109  : 	case 0x2C:	// ,
; 110  : 
; 111  : 		return this->CurrentToken=COMMA;

  000a5	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000aa	e9 3d 01 00 00	 jmp	 $LN44@GetToken
$LN16@GetToken:

; 112  : 		break;
; 113  : 	
; 114  : 	case 0x7B:	// {
; 115  : 		return this->CurrentToken = LP;

  000af	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000b4	e9 33 01 00 00	 jmp	 $LN44@GetToken
$LN15@GetToken:

; 116  : 		break;
; 117  : 
; 118  : 	case 0x7D:	// }
; 119  : 		return this->CurrentToken = RP;

  000b9	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000be	e9 29 01 00 00	 jmp	 $LN44@GetToken
$LN14@GetToken:

; 120  : 		break;
; 121  : 
; 122  : 	case 0x2D:	//-
; 123  : 	case 0x2E:	//.
; 124  : 	case 0x30:	//0
; 125  : 	case 0x31:	//1
; 126  : 	case 0x32:	//2
; 127  : 	case 0x33:	//3
; 128  : 	case 0x34:	//4		
; 129  : 	case 0x35:	//5
; 130  : 	case 0x36:	//6
; 131  : 	case 0x37:	//7
; 132  : 	case 0x38:	//8
; 133  : 	case 0x39:	//9
; 134  : 		this->UnGetC (ch);

  000c3	50		 push	 eax
  000c4	8b ce		 mov	 ecx, esi
  000c6	e8 00 00 00 00	 call	 ?UnGetC@CWzMemScript@@IAEXH@Z ; CWzMemScript::UnGetC

; 135  : 		p = TempString;
; 136  : 		
; 137  : 		while (((ch=this->GetC()) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D))) 

  000cb	8b ce		 mov	 ecx, esi
  000cd	8d 7d 98	 lea	 edi, DWORD PTR _TempString$[ebp]
  000d0	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  000d5	8a d8		 mov	 bl, al
  000d7	80 fb ff	 cmp	 bl, -1
  000da	74 2f		 je	 SHORT $LN12@GetToken
  000dc	8d 64 24 00	 npad	 4
$LL13@GetToken:
  000e0	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  000e3	74 15		 je	 SHORT $LN11@GetToken
  000e5	0f be d3	 movsx	 edx, bl
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 _isdigit
  000ee	83 c4 04	 add	 esp, 4
  000f1	85 c0		 test	 eax, eax
  000f3	75 05		 jne	 SHORT $LN11@GetToken
  000f5	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  000f8	75 11		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:

; 138  : 		{
; 139  : 			*p = ch;

  000fa	88 1f		 mov	 BYTE PTR [edi], bl
  000fc	8b ce		 mov	 ecx, esi

; 140  : 			p++;

  000fe	47		 inc	 edi
  000ff	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  00104	8a d8		 mov	 bl, al
  00106	80 fb ff	 cmp	 bl, -1
  00109	75 d5		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 141  : 		}		
; 142  : 		*p = 0;
; 143  : 		this->TokenNumber = atof( TempString);

  0010b	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0010e	50		 push	 eax
  0010f	c6 07 00	 mov	 BYTE PTR [edi], 0
  00112	e8 00 00 00 00	 call	 _atof
  00117	d9 5e 18	 fstp	 DWORD PTR [esi+24]
  0011a	83 c4 04	 add	 esp, 4

; 144  : 		return this->CurrentToken  = NUMBER ;

  0011d	b8 01 00 00 00	 mov	 eax, 1
  00122	e9 c5 00 00 00	 jmp	 $LN44@GetToken
$LN10@GetToken:

; 145  : 		break;
; 146  : 
; 147  : 	case 0x22:	// "	
; 148  : 		p=&this->TokenString[0];
; 149  : 		
; 150  : 		while (((ch=this->GetC() ) != -1 ) && (ch != 0x22))

  00127	8b ce		 mov	 ecx, esi
  00129	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  0012e	3c ff		 cmp	 al, -1
  00130	74 12		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00132	3c 22		 cmp	 al, 34			; 00000022H
  00134	74 1d		 je	 SHORT $LN7@GetToken

; 151  : 		{
; 152  : 			*p = ch;

  00136	88 07		 mov	 BYTE PTR [edi], al
  00138	8b ce		 mov	 ecx, esi

; 153  : 			p++;

  0013a	47		 inc	 edi
  0013b	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  00140	3c ff		 cmp	 al, -1
  00142	75 ee		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 154  : 		}
; 155  : 		if (ch != 0x22 )

  00144	3c 22		 cmp	 al, 34			; 00000022H
  00146	74 0b		 je	 SHORT $LN7@GetToken

; 156  : 		{
; 157  : 			this->UnGetC(ch);

  00148	0f be c8	 movsx	 ecx, al
  0014b	51		 push	 ecx
  0014c	8b ce		 mov	 ecx, esi
  0014e	e8 00 00 00 00	 call	 ?UnGetC@CWzMemScript@@IAEXH@Z ; CWzMemScript::UnGetC
$LN7@GetToken:

; 158  : 		}
; 159  : 		*p = 0;

  00153	c6 07 00	 mov	 BYTE PTR [edi], 0
  00156	5f		 pop	 edi

; 160  : 		return this->CurrentToken = NAME;

  00157	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  00161	5e		 pop	 esi
  00162	33 c0		 xor	 eax, eax
  00164	5b		 pop	 ebx

; 185  : 		}
; 186  : 		break;
; 187  : 
; 188  : 	}
; 189  : 
; 190  : }

  00165	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00168	33 cd		 xor	 ecx, ebp
  0016a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c3		 ret	 0
$LN6@GetToken:

; 161  : 		break;
; 162  : 
; 163  : 	default:	
; 164  : 		if (isalpha(ch))

  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 _isalpha
  00179	83 c4 04	 add	 esp, 4
  0017c	85 c0		 test	 eax, eax
  0017e	74 67		 je	 SHORT $LN5@GetToken

; 165  : 		{
; 166  : 			p=&this->TokenString[0];
; 167  : 			*p=ch;

  00180	88 1f		 mov	 BYTE PTR [edi], bl

; 168  : 			p++;
; 169  : 
; 170  : 			while ( ((ch=this->GetC() ) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  00182	8b ce		 mov	 ecx, esi
  00184	47		 inc	 edi
  00185	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  0018a	8a d8		 mov	 bl, al
  0018c	80 fb ff	 cmp	 bl, -1
  0018f	74 2b		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  00191	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00194	74 15		 je	 SHORT $LN2@GetToken
  00196	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  00199	74 10		 je	 SHORT $LN2@GetToken
  0019b	0f be d3	 movsx	 edx, bl
  0019e	52		 push	 edx
  0019f	e8 00 00 00 00	 call	 _isalnum
  001a4	83 c4 04	 add	 esp, 4
  001a7	85 c0		 test	 eax, eax
  001a9	74 11		 je	 SHORT $LN3@GetToken
$LN2@GetToken:

; 171  : 			{
; 172  : 				*p=ch;

  001ab	88 1f		 mov	 BYTE PTR [edi], bl
  001ad	8b ce		 mov	 ecx, esi

; 173  : 				p++;

  001af	47		 inc	 edi
  001b0	e8 00 00 00 00	 call	 ?GetC@CWzMemScript@@IAEHXZ ; CWzMemScript::GetC
  001b5	8a d8		 mov	 bl, al
  001b7	80 fb ff	 cmp	 bl, -1
  001ba	75 d5		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 174  : 				
; 175  : 			}
; 176  : 
; 177  : 			this->UnGetC(ch);

  001bc	0f be c3	 movsx	 eax, bl
  001bf	50		 push	 eax
  001c0	8b ce		 mov	 ecx, esi
  001c2	e8 00 00 00 00	 call	 ?UnGetC@CWzMemScript@@IAEXH@Z ; CWzMemScript::UnGetC

; 178  : 			*p=0;

  001c7	c6 07 00	 mov	 BYTE PTR [edi], 0
  001ca	5f		 pop	 edi

; 179  : 			this->CurrentToken=NAME;

  001cb	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  001d5	5e		 pop	 esi

; 180  : 			return NAME;

  001d6	33 c0		 xor	 eax, eax
  001d8	5b		 pop	 ebx

; 185  : 		}
; 186  : 		break;
; 187  : 
; 188  : 	}
; 189  : 
; 190  : }

  001d9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001dc	33 cd		 xor	 ecx, ebp
  001de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e3	8b e5		 mov	 esp, ebp
  001e5	5d		 pop	 ebp
  001e6	c3		 ret	 0
$LN5@GetToken:

; 181  : 		}
; 182  : 		else
; 183  : 		{
; 184  : 			return this->CurrentToken = SMD_ERROR;

  001e7	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN44@GetToken:

; 185  : 		}
; 186  : 		break;
; 187  : 
; 188  : 	}
; 189  : 
; 190  : }

  001ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ef	5f		 pop	 edi
  001f0	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  001f6	5e		 pop	 esi
  001f7	33 cd		 xor	 ecx, ebp
  001f9	5b		 pop	 ebx
  001fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c3		 ret	 0
  00203	90		 npad	 1
$LN45@GetToken:
  00204	00 00 00 00	 DD	 $LN10@GetToken
  00208	00 00 00 00	 DD	 $LN19@GetToken
  0020c	00 00 00 00	 DD	 $LN17@GetToken
  00210	00 00 00 00	 DD	 $LN14@GetToken
  00214	00 00 00 00	 DD	 $LN18@GetToken
  00218	00 00 00 00	 DD	 $LN16@GetToken
  0021c	00 00 00 00	 DD	 $LN15@GetToken
  00220	00 00 00 00	 DD	 $LN6@GetToken
$LN43@GetToken:
  00224	00		 DB	 0
  00225	01		 DB	 1
  00226	07		 DB	 7
  00227	07		 DB	 7
  00228	07		 DB	 7
  00229	07		 DB	 7
  0022a	07		 DB	 7
  0022b	07		 DB	 7
  0022c	07		 DB	 7
  0022d	07		 DB	 7
  0022e	02		 DB	 2
  0022f	03		 DB	 3
  00230	03		 DB	 3
  00231	07		 DB	 7
  00232	03		 DB	 3
  00233	03		 DB	 3
  00234	03		 DB	 3
  00235	03		 DB	 3
  00236	03		 DB	 3
  00237	03		 DB	 3
  00238	03		 DB	 3
  00239	03		 DB	 3
  0023a	03		 DB	 3
  0023b	03		 DB	 3
  0023c	07		 DB	 7
  0023d	04		 DB	 4
  0023e	07		 DB	 7
  0023f	07		 DB	 7
  00240	07		 DB	 7
  00241	07		 DB	 7
  00242	07		 DB	 7
  00243	07		 DB	 7
  00244	07		 DB	 7
  00245	07		 DB	 7
  00246	07		 DB	 7
  00247	07		 DB	 7
  00248	07		 DB	 7
  00249	07		 DB	 7
  0024a	07		 DB	 7
  0024b	07		 DB	 7
  0024c	07		 DB	 7
  0024d	07		 DB	 7
  0024e	07		 DB	 7
  0024f	07		 DB	 7
  00250	07		 DB	 7
  00251	07		 DB	 7
  00252	07		 DB	 7
  00253	07		 DB	 7
  00254	07		 DB	 7
  00255	07		 DB	 7
  00256	07		 DB	 7
  00257	07		 DB	 7
  00258	07		 DB	 7
  00259	07		 DB	 7
  0025a	07		 DB	 7
  0025b	07		 DB	 7
  0025c	07		 DB	 7
  0025d	07		 DB	 7
  0025e	07		 DB	 7
  0025f	07		 DB	 7
  00260	07		 DB	 7
  00261	07		 DB	 7
  00262	07		 DB	 7
  00263	07		 DB	 7
  00264	07		 DB	 7
  00265	07		 DB	 7
  00266	07		 DB	 7
  00267	07		 DB	 7
  00268	07		 DB	 7
  00269	07		 DB	 7
  0026a	07		 DB	 7
  0026b	07		 DB	 7
  0026c	07		 DB	 7
  0026d	07		 DB	 7
  0026e	07		 DB	 7
  0026f	07		 DB	 7
  00270	07		 DB	 7
  00271	07		 DB	 7
  00272	07		 DB	 7
  00273	07		 DB	 7
  00274	07		 DB	 7
  00275	07		 DB	 7
  00276	07		 DB	 7
  00277	07		 DB	 7
  00278	07		 DB	 7
  00279	07		 DB	 7
  0027a	07		 DB	 7
  0027b	07		 DB	 7
  0027c	07		 DB	 7
  0027d	05		 DB	 5
  0027e	07		 DB	 7
  0027f	06		 DB	 6
?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ENDP	; CWzMemScript::GetToken
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCWzMemScript@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWzMemScript@@UAEPAXI@Z PROC			; CWzMemScript::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCWzMemScript@@UAEPAXI@Z ENDP			; CWzMemScript::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetBuffer@CWzMemScript@@QAEHPADH@Z		; CWzMemScript::SetBuffer
; Function compile flags: /Ogtp
;	COMDAT ?SetBuffer@CWzMemScript@@QAEHPADH@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_buffersize$ = 12					; size = 4
?SetBuffer@CWzMemScript@@QAEHPADH@Z PROC		; CWzMemScript::SetBuffer, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   : 	this->SetScriptParsingBuffer(buffer, buffersize);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _buffersize$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	e8 00 00 00 00	 call	 ?SetScriptParsingBuffer@CWzMemScript@@QAEXPADH@Z ; CWzMemScript::SetScriptParsingBuffer

; 17   : 	return 1;

  00010	b8 01 00 00 00	 mov	 eax, 1

; 18   : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?SetBuffer@CWzMemScript@@QAEHPADH@Z ENDP		; CWzMemScript::SetBuffer
_TEXT	ENDS
END
