; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ZtFunction.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ztGCConfigSend@@YAXH@Z				; ztGCConfigSend
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?gEventTimer@@3VcEventTimer@@A:BYTE		; gEventTimer
EXTRN	?gGENS@@3HA:DWORD				; gGENS
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\ztfunction.cpp
;	COMDAT ?ztGCConfigSend@@YAXH@Z
_TEXT	SEGMENT
_rSend$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?ztGCConfigSend@@YAXH@Z PROC				; ztGCConfigSend, COMDAT

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 32   : 	rSend.MaxStats = ZtConfig.Character.MaxStats;

  00010	56		 push	 esi

; 16   : 	ZT_GC_CONFIG_SEND rSend;
; 17   : 	LPOBJ lpObj =&gObj[aIndex];
; 18   : 	rSend.h.set((LPBYTE)&rSend, 0xFB, 15, sizeof(rSend));
; 19   : 	rSend.CharSwitch = (BYTE)ZtConfig.ZtCustom.SwitchChar;

  00011	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A

; 20   : 	rSend.sGENS = (BYTE)gGENS;

  00018	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?gGENS@@3HA

; 21   : 	rSend.HelperLevel = ZtConfig.ZtCustom.HelperClickerLevel;

  0001f	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ?ZtConfig@@3VcZtConfigs@@A+4
  00026	88 45 d8	 mov	 BYTE PTR _rSend$[ebp+4], al

; 22   : 	rSend.AutoParty =  ZtConfig.ZtCustom.AutoParty;

  00029	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+8
  00030	88 4d d9	 mov	 BYTE PTR _rSend$[ebp+5], cl

; 23   : 	rSend.Top100 = ZtConfig.ZtCustom.Top100;

  00033	0f b6 0d 09 00
	00 00		 movzx	 ecx, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+9
  0003a	88 45 dc	 mov	 BYTE PTR _rSend$[ebp+8], al

; 24   : 	rSend.EventTimer = gEventTimer.Enable;
; 25   : 	rSend.MoveTargetPosEffect = ZtConfig.ZtCustom.MoveTargetPosEffect;

  0003d	0f b6 05 0a 00
	00 00		 movzx	 eax, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+10
  00044	88 4d dd	 mov	 BYTE PTR _rSend$[ebp+9], cl

; 26   : 	rSend.CastleSiegeSkill = ZtConfig.Character.CastleSiegeSkillEnable;

  00047	0f b6 0d 6c 01
	00 00		 movzx	 ecx, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+364
  0004e	66 89 55 da	 mov	 WORD PTR _rSend$[ebp+6], dx
  00052	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?gEventTimer@@3VcEventTimer@@A
  00059	88 45 df	 mov	 BYTE PTR _rSend$[ebp+11], al

; 27   : 	rSend.AntiCheat = ZtConfig.ZtCustom.ClientAntiCheat;
; 28   : 	rSend.GensColorEnable = ZtConfig.Command.GensColorEnable;

  0005c	0f b6 05 f0 06
	00 00		 movzx	 eax, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+1776
  00063	88 4d e0	 mov	 BYTE PTR _rSend$[ebp+12], cl

; 29   : 	rSend.GensColorRed = ZtConfig.Command.GensColorRed;

  00066	0f b6 0d f1 06
	00 00		 movzx	 ecx, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+1777
  0006d	88 55 de	 mov	 BYTE PTR _rSend$[ebp+10], dl
  00070	0f b6 15 0b 00
	00 00		 movzx	 edx, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+11
  00077	88 45 e2	 mov	 BYTE PTR _rSend$[ebp+14], al

; 30   : 	rSend.GensColorGreen = ZtConfig.Command.GensColorGreen;
; 31   : 	rSend.GensColorBlue = ZtConfig.Command.GensColorBlue;

  0007a	0f b6 05 f3 06
	00 00		 movzx	 eax, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+1779
  00081	88 4d e3	 mov	 BYTE PTR _rSend$[ebp+15], cl

; 32   : 	rSend.MaxStats = ZtConfig.Character.MaxStats;

  00084	8b 0d 80 01 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+384
  0008a	88 55 e1	 mov	 BYTE PTR _rSend$[ebp+13], dl
  0008d	0f b6 15 f2 06
	00 00		 movzx	 edx, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+1778
  00094	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00097	88 45 e5	 mov	 BYTE PTR _rSend$[ebp+17], al
  0009a	89 4d e8	 mov	 DWORD PTR _rSend$[ebp+20], ecx

; 33   : 
; 34   : 	rSend.DLReflect = 0;
; 35   : 	rSend.MasterSkills = 1;

  0009d	b8 01 00 00 00	 mov	 eax, 1

; 36   : 	rSend.DivFireScreamSpeed = 1;
; 37   : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::Gredy2) || g_ZtLicense.CheckUser(eZtUB::GredyLocal))

  000a2	6a 20		 push	 32			; 00000020H
  000a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000a9	c7 45 d4 c1 28
	fb 0f		 mov	 DWORD PTR _rSend$[ebp], 268118209 ; 0ffb28c1H
  000b0	88 55 e4	 mov	 BYTE PTR _rSend$[ebp+16], dl
  000b3	66 c7 45 ec 00
	01		 mov	 WORD PTR _rSend$[ebp+24], 256 ; 00000100H
  000b9	89 45 f0	 mov	 DWORD PTR _rSend$[ebp+28], eax
  000bc	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000c1	84 c0		 test	 al, al
  000c3	75 20		 jne	 SHORT $LN3@ztGCConfig
  000c5	6a 22		 push	 34			; 00000022H
  000c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000cc	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000d1	84 c0		 test	 al, al
  000d3	75 10		 jne	 SHORT $LN3@ztGCConfig
  000d5	6a 21		 push	 33			; 00000021H
  000d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000dc	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000e1	84 c0		 test	 al, al
  000e3	74 1a		 je	 SHORT $LN4@ztGCConfig
$LN3@ztGCConfig:

; 38   : 	{
; 39   : 		rSend.DLReflect = ZtConfig.ZtCustom.DLReflect;

  000e5	8a 15 16 00 00
	00		 mov	 dl, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+22

; 40   : 		rSend.MasterSkills = ZtConfig.ZtCustom.MasterSkills;

  000eb	a0 17 00 00 00	 mov	 al, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+23

; 41   : 		rSend.DivFireScreamSpeed = ZtConfig.ZtCustom.DivFireScreamSpeed;

  000f0	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+24
  000f6	88 55 ec	 mov	 BYTE PTR _rSend$[ebp+24], dl
  000f9	88 45 ed	 mov	 BYTE PTR _rSend$[ebp+25], al
  000fc	89 4d f0	 mov	 DWORD PTR _rSend$[ebp+28], ecx
$LN4@ztGCConfig:

; 42   : 	}
; 43   : 
; 44   : 	if(g_ZtLicense.CheckUser(eZtUB::SILVER1) || g_ZtLicense.CheckUser(eZtUB::SILVER2))

  000ff	6a 07		 push	 7
  00101	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00106	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0010b	84 c0		 test	 al, al
  0010d	75 10		 jne	 SHORT $LN1@ztGCConfig
  0010f	6a 08		 push	 8
  00111	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00116	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0011b	84 c0		 test	 al, al
  0011d	74 09		 je	 SHORT $LN2@ztGCConfig
$LN1@ztGCConfig:

; 45   : 	{
; 46   : 		rSend.DivFireScreamSpeed = ZtConfig.ZtCustom.DivFireScreamSpeed;

  0011f	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+24
  00125	89 55 f0	 mov	 DWORD PTR _rSend$[ebp+28], edx
$LN2@ztGCConfig:

; 47   : 	}
; 48   : 
; 49   : 	rSend.MasterSkills = ZtConfig.ZtCustom.MasterSkills;

  00128	a0 17 00 00 00	 mov	 al, BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+23

; 50   : 
; 51   : 	rSend.MultiWarehouse = ZtConfig.ZtCustom.MultiWarehouse;

  0012d	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+32

; 52   : 	
; 53   : 	rSend.MaxLevel =  ZtConfig.ZtCustom.MaxLevel;

  00133	8b 15 24 00 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+36
  00139	88 45 ed	 mov	 BYTE PTR _rSend$[ebp+25], al

; 54   : 
; 55   : 	DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  0013c	6a 28		 push	 40			; 00000028H
  0013e	8d 45 d4	 lea	 eax, DWORD PTR _rSend$[ebp]
  00141	50		 push	 eax
  00142	56		 push	 esi
  00143	89 4d f4	 mov	 DWORD PTR _rSend$[ebp+32], ecx
  00146	89 55 f8	 mov	 DWORD PTR _rSend$[ebp+36], edx
  00149	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 56   : }

  0014e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
  00154	33 cd		 xor	 ecx, ebp
  00156	5e		 pop	 esi
  00157	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
?ztGCConfigSend@@YAXH@Z ENDP				; ztGCConfigSend
_TEXT	ENDS
PUBLIC	?ztCheckSimbol@@YA_NPADH@Z			; ztCheckSimbol
; Function compile flags: /Ogtp
;	COMDAT ?ztCheckSimbol@@YA_NPADH@Z
_TEXT	SEGMENT
_String$ = 8						; size = 4
_StrLen$ = 12						; size = 4
?ztCheckSimbol@@YA_NPADH@Z PROC				; ztCheckSimbol, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 62   : 	for(int i=0;i<StrLen;i++)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _StrLen$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	85 f6		 test	 esi, esi
  0000b	7e 28		 jle	 SHORT $LN67@ztCheckSim
  0000d	8b 55 08	 mov	 edx, DWORD PTR _String$[ebp]
$LL69@ztCheckSim:

; 63   : 	{
; 64   : 		if(String[i] == NULL)

  00010	8a 04 11	 mov	 al, BYTE PTR [ecx+edx]
  00013	84 c0		 test	 al, al
  00015	74 19		 je	 SHORT $LN68@ztCheckSim

; 65   : 			continue;
; 66   : 		
; 67   : 		switch(String[i])

  00017	0f be c0	 movsx	 eax, al
  0001a	83 c0 d0	 add	 eax, -48		; ffffffd0H
  0001d	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00020	77 18		 ja	 SHORT $LN1@ztCheckSim
  00022	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN74@ztCheckSim[eax]
  00029	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN75@ztCheckSim[eax*4]
$LN68@ztCheckSim:

; 62   : 	for(int i=0;i<StrLen;i++)

  00030	41		 inc	 ecx
  00031	3b ce		 cmp	 ecx, esi
  00033	7c db		 jl	 SHORT $LL69@ztCheckSim
$LN67@ztCheckSim:

; 132  : 		}
; 133  : 	}
; 134  : 	return true;

  00035	b0 01		 mov	 al, 1
  00037	5e		 pop	 esi

; 135  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN1@ztCheckSim:

; 68   : 		{
; 69   : 			case 'a': continue ; break;
; 70   : 			case 'b': continue ; break;
; 71   : 			case 'c': continue ; break;
; 72   : 			case 'd': continue ; break;
; 73   : 			case 'e': continue ; break;
; 74   : 			case 'f': continue ; break;
; 75   : 			case 'g': continue ; break;
; 76   : 			case 'h': continue ; break;
; 77   : 			case 'i': continue ; break;
; 78   : 			case 'j': continue ; break;
; 79   : 			case 'k': continue ; break;
; 80   : 			case 'l': continue ; break;
; 81   : 			case 'm': continue ; break;
; 82   : 			case 'n': continue ; break;
; 83   : 			case 'o': continue ; break;
; 84   : 			case 'p': continue ; break;
; 85   : 			case 'q': continue ; break;
; 86   : 			case 'r': continue ; break;
; 87   : 			case 's': continue ; break;
; 88   : 			case 't': continue ; break;
; 89   : 			case 'u': continue ; break;
; 90   : 			case 'v': continue ; break;
; 91   : 			case 'w': continue ; break;
; 92   : 			case 'x': continue ; break;
; 93   : 			case 'y': continue ; break;
; 94   : 			case 'z': continue ; break;
; 95   : 			case 'A': continue ; break;
; 96   : 			case 'B': continue ; break;
; 97   : 			case 'C': continue ; break;
; 98   : 			case 'D': continue ; break;
; 99   : 			case 'E': continue ; break;
; 100  : 			case 'F': continue ; break;
; 101  : 			case 'G': continue ; break;
; 102  : 			case 'H': continue ; break;
; 103  : 			case 'I': continue ; break;
; 104  : 			case 'J': continue ; break;
; 105  : 			case 'K': continue ; break;
; 106  : 			case 'L': continue ; break;
; 107  : 			case 'M': continue ; break;
; 108  : 			case 'N': continue ; break;
; 109  : 			case 'O': continue ; break;
; 110  : 			case 'P': continue ; break;
; 111  : 			case 'Q': continue ; break;
; 112  : 			case 'R': continue ; break;
; 113  : 			case 'S': continue ; break;
; 114  : 			case 'T': continue ; break;
; 115  : 			case 'U': continue ; break;
; 116  : 			case 'V': continue ; break;
; 117  : 			case 'W': continue ; break;
; 118  : 			case 'X': continue ; break;
; 119  : 			case 'Y': continue ; break;
; 120  : 			case 'Z': continue ; break;
; 121  : 			case '0': continue ; break;
; 122  : 			case '1': continue ; break;
; 123  : 			case '2': continue ; break;
; 124  : 			case '3': continue ; break;
; 125  : 			case '4': continue ; break;
; 126  : 			case '5': continue ; break;
; 127  : 			case '6': continue ; break;
; 128  : 			case '7': continue ; break;
; 129  : 			case '8': continue ; break;
; 130  : 			case '9': continue ; break;
; 131  : 			default: return false;

  0003a	32 c0		 xor	 al, al
  0003c	5e		 pop	 esi

; 135  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
  0003f	90		 npad	 1
$LN75@ztCheckSim:
  00040	00 00 00 00	 DD	 $LN68@ztCheckSim
  00044	00 00 00 00	 DD	 $LN1@ztCheckSim
$LN74@ztCheckSim:
  00048	00		 DB	 0
  00049	00		 DB	 0
  0004a	00		 DB	 0
  0004b	00		 DB	 0
  0004c	00		 DB	 0
  0004d	00		 DB	 0
  0004e	00		 DB	 0
  0004f	00		 DB	 0
  00050	00		 DB	 0
  00051	00		 DB	 0
  00052	01		 DB	 1
  00053	01		 DB	 1
  00054	01		 DB	 1
  00055	01		 DB	 1
  00056	01		 DB	 1
  00057	01		 DB	 1
  00058	01		 DB	 1
  00059	00		 DB	 0
  0005a	00		 DB	 0
  0005b	00		 DB	 0
  0005c	00		 DB	 0
  0005d	00		 DB	 0
  0005e	00		 DB	 0
  0005f	00		 DB	 0
  00060	00		 DB	 0
  00061	00		 DB	 0
  00062	00		 DB	 0
  00063	00		 DB	 0
  00064	00		 DB	 0
  00065	00		 DB	 0
  00066	00		 DB	 0
  00067	00		 DB	 0
  00068	00		 DB	 0
  00069	00		 DB	 0
  0006a	00		 DB	 0
  0006b	00		 DB	 0
  0006c	00		 DB	 0
  0006d	00		 DB	 0
  0006e	00		 DB	 0
  0006f	00		 DB	 0
  00070	00		 DB	 0
  00071	00		 DB	 0
  00072	00		 DB	 0
  00073	01		 DB	 1
  00074	01		 DB	 1
  00075	01		 DB	 1
  00076	01		 DB	 1
  00077	01		 DB	 1
  00078	01		 DB	 1
  00079	00		 DB	 0
  0007a	00		 DB	 0
  0007b	00		 DB	 0
  0007c	00		 DB	 0
  0007d	00		 DB	 0
  0007e	00		 DB	 0
  0007f	00		 DB	 0
  00080	00		 DB	 0
  00081	00		 DB	 0
  00082	00		 DB	 0
  00083	00		 DB	 0
  00084	00		 DB	 0
  00085	00		 DB	 0
  00086	00		 DB	 0
  00087	00		 DB	 0
  00088	00		 DB	 0
  00089	00		 DB	 0
  0008a	00		 DB	 0
  0008b	00		 DB	 0
  0008c	00		 DB	 0
  0008d	00		 DB	 0
  0008e	00		 DB	 0
  0008f	00		 DB	 0
  00090	00		 DB	 0
  00091	00		 DB	 0
  00092	00		 DB	 0
?ztCheckSimbol@@YA_NPADH@Z ENDP				; ztCheckSimbol
_TEXT	ENDS
PUBLIC	??_C@_07NBCGADJA@Unknown?$AA@			; `string'
PUBLIC	??_C@_07CCGFKIPK@Arkania?$AA@			; `string'
PUBLIC	?ztMapName@@YAPADH@Z				; ztMapName
EXTRN	?GetText@CZtText@@QAEPADH@Z:PROC		; CZtText::GetText
EXTRN	?g_ZtText@@3VCZtText@@A:BYTE			; g_ZtText
;	COMDAT ??_C@_07NBCGADJA@Unknown?$AA@
CONST	SEGMENT
??_C@_07NBCGADJA@Unknown?$AA@ DB 'Unknown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGFKIPK@Arkania?$AA@
CONST	SEGMENT
??_C@_07CCGFKIPK@Arkania?$AA@ DB 'Arkania', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ztMapName@@YAPADH@Z
_TEXT	SEGMENT
_MapNum$ = 8						; size = 4
?ztMapName@@YAPADH@Z PROC				; ztMapName, COMDAT

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 139  : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2) || g_ZtLicense.CheckUser(eZtUB::MU2Play))

  00004	6a 20		 push	 32			; 00000020H
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000b	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00010	8b 75 08	 mov	 esi, DWORD PTR _MapNum$[ebp]
  00013	84 c0		 test	 al, al
  00015	75 30		 jne	 SHORT $LN72@ztMapName
  00017	6a 21		 push	 33			; 00000021H
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00023	84 c0		 test	 al, al
  00025	75 20		 jne	 SHORT $LN72@ztMapName
  00027	6a 22		 push	 34			; 00000022H
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00033	84 c0		 test	 al, al
  00035	75 10		 jne	 SHORT $LN72@ztMapName
  00037	6a 36		 push	 54			; 00000036H
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00043	84 c0		 test	 al, al
  00045	74 0d		 je	 SHORT $LN71@ztMapName
$LN72@ztMapName:

; 140  : 	{
; 141  : 		if(MAP_INDEX_ELBELAND == MapNum)

  00047	83 fe 33	 cmp	 esi, 51			; 00000033H
  0004a	75 08		 jne	 SHORT $LN71@ztMapName

; 142  : 		{
; 143  : 			return  "Arkania";

  0004c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07CCGFKIPK@Arkania?$AA@
  00051	5e		 pop	 esi

; 222  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
$LN71@ztMapName:

; 144  : 		}
; 145  : 	}
; 146  : 
; 147  : 	switch(MapNum)

  00054	83 fe 51	 cmp	 esi, 81			; 00000051H
  00057	0f 87 cf 04 00
	00		 ja	 $LN69@ztMapName
  0005d	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN76@ztMapName[esi*4]
$LN68@ztMapName:

; 148  : 	{
; 149  : 	case MAP_INDEX_RORENCIA:			return g_ZtText.GetText(164); //Lorencia";

  00064	68 a4 00 00 00	 push	 164			; 000000a4H
  00069	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0006e	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00073	5e		 pop	 esi

; 222  : }

  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
$LN67@ztMapName:

; 150  : 	case MAP_INDEX_DUNGEON:				return g_ZtText.GetText(165); //Dungeon";

  00076	68 a5 00 00 00	 push	 165			; 000000a5H
  0007b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00080	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00085	5e		 pop	 esi

; 222  : }

  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN66@ztMapName:

; 151  : 	case MAP_INDEX_DEVIAS:				return g_ZtText.GetText(166); //Devias";

  00088	68 a6 00 00 00	 push	 166			; 000000a6H
  0008d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00092	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00097	5e		 pop	 esi

; 222  : }

  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN65@ztMapName:

; 152  : 	case MAP_INDEX_NORIA:				return g_ZtText.GetText(167); //Noria";

  0009a	68 a7 00 00 00	 push	 167			; 000000a7H
  0009f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000a4	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  000a9	5e		 pop	 esi

; 222  : }

  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN64@ztMapName:

; 153  : 	case MAP_INDEX_LOSTTOWER:			return g_ZtText.GetText(168); //LostTower";

  000ac	68 a8 00 00 00	 push	 168			; 000000a8H
  000b1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000b6	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  000bb	5e		 pop	 esi

; 222  : }

  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
$LN63@ztMapName:

; 154  : 	//MAP_INDEX_RESERVED = 0x5,
; 155  : 	case MAP_INDEX_BATTLESOCCER:		return g_ZtText.GetText(169); //Arena";

  000be	68 a9 00 00 00	 push	 169			; 000000a9H
  000c3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000c8	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  000cd	5e		 pop	 esi

; 222  : }

  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
$LN62@ztMapName:

; 156  : 	case MAP_INDEX_ATHLANSE:			return g_ZtText.GetText(170); //Atlans";

  000d0	68 aa 00 00 00	 push	 170			; 000000aaH
  000d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000da	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  000df	5e		 pop	 esi

; 222  : }

  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
$LN61@ztMapName:

; 157  : 	case MAP_INDEX_TARKAN:				return g_ZtText.GetText(171); //Tarkan";

  000e2	68 ab 00 00 00	 push	 171			; 000000abH
  000e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000ec	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  000f1	5e		 pop	 esi

; 222  : }

  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
$LN60@ztMapName:

; 158  : 	case MAP_INDEX_DEVILSQUARE:			return g_ZtText.GetText(172); //DevilSquare";

  000f4	68 ac 00 00 00	 push	 172			; 000000acH
  000f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  000fe	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00103	5e		 pop	 esi

; 222  : }

  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
$LN59@ztMapName:

; 159  : 	case MAP_INDEX_ICARUS:				return g_ZtText.GetText(173); //Icarus";

  00106	68 ad 00 00 00	 push	 173			; 000000adH
  0010b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00110	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00115	5e		 pop	 esi

; 222  : }

  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
$LN58@ztMapName:

; 160  : 	case MAP_INDEX_BLOODCASTLE1:		return g_ZtText.GetText(174); //Blood Castle 1";

  00118	68 ae 00 00 00	 push	 174			; 000000aeH
  0011d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00122	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00127	5e		 pop	 esi

; 222  : }

  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
$LN57@ztMapName:

; 161  : 	case MAP_INDEX_BLOODCASTLE2:		return g_ZtText.GetText(175); //Blood Castle 2";

  0012a	68 af 00 00 00	 push	 175			; 000000afH
  0012f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00134	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00139	5e		 pop	 esi

; 222  : }

  0013a	5d		 pop	 ebp
  0013b	c3		 ret	 0
$LN56@ztMapName:

; 162  : 	case MAP_INDEX_BLOODCASTLE3:		return g_ZtText.GetText(176); //Blood Castle 3";

  0013c	68 b0 00 00 00	 push	 176			; 000000b0H
  00141	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00146	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0014b	5e		 pop	 esi

; 222  : }

  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
$LN55@ztMapName:

; 163  : 	case MAP_INDEX_BLOODCASTLE4:		return g_ZtText.GetText(177); //Blood Castle 4";

  0014e	68 b1 00 00 00	 push	 177			; 000000b1H
  00153	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00158	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0015d	5e		 pop	 esi

; 222  : }

  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
$LN54@ztMapName:

; 164  : 	case MAP_INDEX_BLOODCASTLE5:		return g_ZtText.GetText(178); //Blood Castle 5";

  00160	68 b2 00 00 00	 push	 178			; 000000b2H
  00165	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0016a	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0016f	5e		 pop	 esi

; 222  : }

  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
$LN53@ztMapName:

; 165  : 	case MAP_INDEX_BLOODCASTLE6:		return g_ZtText.GetText(179); //Blood Castle 6";

  00172	68 b3 00 00 00	 push	 179			; 000000b3H
  00177	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0017c	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00181	5e		 pop	 esi

; 222  : }

  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
$LN52@ztMapName:

; 166  : 	case MAP_INDEX_BLOODCASTLE7:		return g_ZtText.GetText(180); //Blood Castle 7";

  00184	68 b4 00 00 00	 push	 180			; 000000b4H
  00189	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0018e	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00193	5e		 pop	 esi

; 222  : }

  00194	5d		 pop	 ebp
  00195	c3		 ret	 0
$LN51@ztMapName:

; 167  : 	case MAP_INDEX_CHAOSCASTLE1:		return g_ZtText.GetText(181); //Chaos Castle 1";

  00196	68 b5 00 00 00	 push	 181			; 000000b5H
  0019b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  001a0	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001a5	5e		 pop	 esi

; 222  : }

  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
$LN50@ztMapName:

; 168  : 	case MAP_INDEX_CHAOSCASTLE2:		return g_ZtText.GetText(182); //Chaos Castle 2";

  001a8	68 b6 00 00 00	 push	 182			; 000000b6H
  001ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  001b2	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001b7	5e		 pop	 esi

; 222  : }

  001b8	5d		 pop	 ebp
  001b9	c3		 ret	 0
$LN49@ztMapName:

; 169  : 	case MAP_INDEX_CHAOSCASTLE3:		return g_ZtText.GetText(183); //Chaos Castle 3";

  001ba	68 b7 00 00 00	 push	 183			; 000000b7H
  001bf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  001c4	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001c9	5e		 pop	 esi

; 222  : }

  001ca	5d		 pop	 ebp
  001cb	c3		 ret	 0
$LN48@ztMapName:

; 170  : 	case MAP_INDEX_CHAOSCASTLE4:		return g_ZtText.GetText(184); //Chaos Castle 4";

  001cc	68 b8 00 00 00	 push	 184			; 000000b8H
  001d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  001d6	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001db	5e		 pop	 esi

; 222  : }

  001dc	5d		 pop	 ebp
  001dd	c3		 ret	 0
$LN47@ztMapName:

; 171  : 	case MAP_INDEX_CHAOSCASTLE5:		return g_ZtText.GetText(185); //Chaos Castle 5";

  001de	68 b9 00 00 00	 push	 185			; 000000b9H
  001e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  001e8	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001ed	5e		 pop	 esi

; 222  : }

  001ee	5d		 pop	 ebp
  001ef	c3		 ret	 0
$LN46@ztMapName:

; 172  : 	case MAP_INDEX_CHAOSCASTLE6:		return g_ZtText.GetText(186); //Chaos Castle 6";

  001f0	68 ba 00 00 00	 push	 186			; 000000baH
  001f5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  001fa	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  001ff	5e		 pop	 esi

; 222  : }

  00200	5d		 pop	 ebp
  00201	c3		 ret	 0
$LN45@ztMapName:

; 173  : 	case MAP_INDEX_KALIMA1:				return g_ZtText.GetText(187); //Kalima 1";

  00202	68 bb 00 00 00	 push	 187			; 000000bbH
  00207	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0020c	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00211	5e		 pop	 esi

; 222  : }

  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
$LN44@ztMapName:

; 174  : 	case MAP_INDEX_KALIMA2:				return g_ZtText.GetText(188); //Kalima 2";

  00214	68 bc 00 00 00	 push	 188			; 000000bcH
  00219	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0021e	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00223	5e		 pop	 esi

; 222  : }

  00224	5d		 pop	 ebp
  00225	c3		 ret	 0
$LN43@ztMapName:

; 175  : 	case MAP_INDEX_KALIMA3:				return g_ZtText.GetText(189); //Kalima 3";

  00226	68 bd 00 00 00	 push	 189			; 000000bdH
  0022b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00230	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00235	5e		 pop	 esi

; 222  : }

  00236	5d		 pop	 ebp
  00237	c3		 ret	 0
$LN42@ztMapName:

; 176  : 	case MAP_INDEX_KALIMA4:				return g_ZtText.GetText(190); //Kalima 4";

  00238	68 be 00 00 00	 push	 190			; 000000beH
  0023d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00242	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00247	5e		 pop	 esi

; 222  : }

  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
$LN41@ztMapName:

; 177  : 	case MAP_INDEX_KALIMA5:				return g_ZtText.GetText(191); //Kalima 5";

  0024a	68 bf 00 00 00	 push	 191			; 000000bfH
  0024f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00254	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00259	5e		 pop	 esi

; 222  : }

  0025a	5d		 pop	 ebp
  0025b	c3		 ret	 0
$LN40@ztMapName:

; 178  : 	case MAP_INDEX_KALIMA6:				return g_ZtText.GetText(192); //Kalima 6";

  0025c	68 c0 00 00 00	 push	 192			; 000000c0H
  00261	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00266	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0026b	5e		 pop	 esi

; 222  : }

  0026c	5d		 pop	 ebp
  0026d	c3		 ret	 0
$LN39@ztMapName:

; 179  : 	case MAP_INDEX_CASTLESIEGE:			return g_ZtText.GetText(193); //Castle";

  0026e	68 c1 00 00 00	 push	 193			; 000000c1H
  00273	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00278	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0027d	5e		 pop	 esi

; 222  : }

  0027e	5d		 pop	 ebp
  0027f	c3		 ret	 0
$LN38@ztMapName:

; 180  : 	case MAP_INDEX_CASTLEHUNTZONE :		return g_ZtText.GetText(194); //Land Of Trial";

  00280	68 c2 00 00 00	 push	 194			; 000000c2H
  00285	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0028a	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0028f	5e		 pop	 esi

; 222  : }

  00290	5d		 pop	 ebp
  00291	c3		 ret	 0
$LN37@ztMapName:

; 181  : 	//case MAP_INDEX_DEVILSQUARE2:		return g_ZtText.GetText(164); //Blood Castle 7";
; 182  : 	case MAP_INDEX_AIDA:				return g_ZtText.GetText(195); //Aida";

  00292	68 c3 00 00 00	 push	 195			; 000000c3H
  00297	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0029c	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  002a1	5e		 pop	 esi

; 222  : }

  002a2	5d		 pop	 ebp
  002a3	c3		 ret	 0
$LN36@ztMapName:

; 183  : 	case MAP_INDEX_CRYWOLF_FIRSTZONE:	return g_ZtText.GetText(196); //Cry Wolf";

  002a4	68 c4 00 00 00	 push	 196			; 000000c4H
  002a9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  002ae	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  002b3	5e		 pop	 esi

; 222  : }

  002b4	5d		 pop	 ebp
  002b5	c3		 ret	 0
$LN35@ztMapName:

; 184  : 	case MAP_INDEX_CRYWOLF_SECONDZONE:	return g_ZtText.GetText(197); //Cry Wolf";

  002b6	68 c5 00 00 00	 push	 197			; 000000c5H
  002bb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  002c0	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  002c5	5e		 pop	 esi

; 222  : }

  002c6	5d		 pop	 ebp
  002c7	c3		 ret	 0
$LN34@ztMapName:

; 185  : 	case MAP_INDEX_KALIMA7:				return g_ZtText.GetText(198); //Kalima 7";

  002c8	68 c6 00 00 00	 push	 198			; 000000c6H
  002cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  002d2	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  002d7	5e		 pop	 esi

; 222  : }

  002d8	5d		 pop	 ebp
  002d9	c3		 ret	 0
$LN33@ztMapName:

; 186  : 	case MAP_INDEX_KANTURU1:			return g_ZtText.GetText(199); //Kanturu";

  002da	68 c7 00 00 00	 push	 199			; 000000c7H
  002df	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  002e4	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  002e9	5e		 pop	 esi

; 222  : }

  002ea	5d		 pop	 ebp
  002eb	c3		 ret	 0
$LN32@ztMapName:

; 187  : 	case MAP_INDEX_KANTURU2:			return g_ZtText.GetText(200); //Kanturu Relic";

  002ec	68 c8 00 00 00	 push	 200			; 000000c8H
  002f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  002f6	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  002fb	5e		 pop	 esi

; 222  : }

  002fc	5d		 pop	 ebp
  002fd	c3		 ret	 0
$LN31@ztMapName:

; 188  : 	case MAP_INDEX_KANTURU_BOSS:		return g_ZtText.GetText(201); //Kanturu Boss";

  002fe	68 c9 00 00 00	 push	 201			; 000000c9H
  00303	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00308	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0030d	5e		 pop	 esi

; 222  : }

  0030e	5d		 pop	 ebp
  0030f	c3		 ret	 0
$LN30@ztMapName:

; 189  : 	case MAP_INDEX_GM_SUMMONZONE:		return g_ZtText.GetText(245); //Blood Castle 7";

  00310	68 f5 00 00 00	 push	 245			; 000000f5H
  00315	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0031a	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0031f	5e		 pop	 esi

; 222  : }

  00320	5d		 pop	 ebp
  00321	c3		 ret	 0
$LN29@ztMapName:

; 190  : 	case MAP_INDEX_BALGASS_BARRACKS:	return g_ZtText.GetText(202); //Balgas Baraks";

  00322	68 ca 00 00 00	 push	 202			; 000000caH
  00327	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0032c	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00331	5e		 pop	 esi

; 222  : }

  00332	5d		 pop	 ebp
  00333	c3		 ret	 0
$LN28@ztMapName:

; 191  : 	case MAP_INDEX_BALGASS_REFUGEE:		return g_ZtText.GetText(203); //Balgas Refuge";

  00334	68 cb 00 00 00	 push	 203			; 000000cbH
  00339	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0033e	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00343	5e		 pop	 esi

; 222  : }

  00344	5d		 pop	 ebp
  00345	c3		 ret	 0
$LN27@ztMapName:

; 192  : 	case MAP_INDEX_ILLUSIONTEMPLE1:		return g_ZtText.GetText(204); //Illusion Temple 1";

  00346	68 cc 00 00 00	 push	 204			; 000000ccH
  0034b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00350	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00355	5e		 pop	 esi

; 222  : }

  00356	5d		 pop	 ebp
  00357	c3		 ret	 0
$LN26@ztMapName:

; 193  : 	case MAP_INDEX_ILLUSIONTEMPLE2:		return g_ZtText.GetText(205); //Illusion Temple 2";

  00358	68 cd 00 00 00	 push	 205			; 000000cdH
  0035d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00362	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00367	5e		 pop	 esi

; 222  : }

  00368	5d		 pop	 ebp
  00369	c3		 ret	 0
$LN25@ztMapName:

; 194  : 	case MAP_INDEX_ILLUSIONTEMPLE3:		return g_ZtText.GetText(206); //Illusion Temple 3";

  0036a	68 ce 00 00 00	 push	 206			; 000000ceH
  0036f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00374	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00379	5e		 pop	 esi

; 222  : }

  0037a	5d		 pop	 ebp
  0037b	c3		 ret	 0
$LN24@ztMapName:

; 195  : 	case MAP_INDEX_ILLUSIONTEMPLE4:		return g_ZtText.GetText(207); //Illusion Temple 4";

  0037c	68 cf 00 00 00	 push	 207			; 000000cfH
  00381	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00386	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0038b	5e		 pop	 esi

; 222  : }

  0038c	5d		 pop	 ebp
  0038d	c3		 ret	 0
$LN23@ztMapName:

; 196  : 	case MAP_INDEX_ILLUSIONTEMPLE5:		return g_ZtText.GetText(208); //Illusion Temple 5";

  0038e	68 d0 00 00 00	 push	 208			; 000000d0H
  00393	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00398	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0039d	5e		 pop	 esi

; 222  : }

  0039e	5d		 pop	 ebp
  0039f	c3		 ret	 0
$LN22@ztMapName:

; 197  : 	case MAP_INDEX_ILLUSIONTEMPLE6:		return g_ZtText.GetText(209); //Illusion Temple 6";

  003a0	68 d1 00 00 00	 push	 209			; 000000d1H
  003a5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  003aa	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  003af	5e		 pop	 esi

; 222  : }

  003b0	5d		 pop	 ebp
  003b1	c3		 ret	 0
$LN21@ztMapName:

; 198  : 	case MAP_INDEX_ELBELAND:			return g_ZtText.GetText(210); //Elblend";

  003b2	68 d2 00 00 00	 push	 210			; 000000d2H
  003b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  003bc	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  003c1	5e		 pop	 esi

; 222  : }

  003c2	5d		 pop	 ebp
  003c3	c3		 ret	 0
$LN20@ztMapName:

; 199  : 	case MAP_INDEX_BLOODCASTLE8:		return g_ZtText.GetText(211); //Blood Castle 8";

  003c4	68 d3 00 00 00	 push	 211			; 000000d3H
  003c9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  003ce	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  003d3	5e		 pop	 esi

; 222  : }

  003d4	5d		 pop	 ebp
  003d5	c3		 ret	 0
$LN19@ztMapName:

; 200  : 	case MAP_INDEX_CHAOSCASTLE7:		return g_ZtText.GetText(212); //Chaos Castle 7";

  003d6	68 d4 00 00 00	 push	 212			; 000000d4H
  003db	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  003e0	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  003e5	5e		 pop	 esi

; 222  : }

  003e6	5d		 pop	 ebp
  003e7	c3		 ret	 0
$LN18@ztMapName:

; 201  : 	case MAP_INDEX_DEVILSQUARE7:		return g_ZtText.GetText(213); //Devil Squere 7";

  003e8	68 d5 00 00 00	 push	 213			; 000000d5H
  003ed	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  003f2	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  003f7	5e		 pop	 esi

; 222  : }

  003f8	5d		 pop	 ebp
  003f9	c3		 ret	 0
$LN17@ztMapName:

; 202  : 	case MAP_INDEX_SWAMPOFCALMNESS:		return g_ZtText.GetText(214); //Swamp Of Calmness";

  003fa	68 d6 00 00 00	 push	 214			; 000000d6H
  003ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00404	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00409	5e		 pop	 esi

; 222  : }

  0040a	5d		 pop	 ebp
  0040b	c3		 ret	 0
$LN16@ztMapName:

; 203  : 	case MAP_INDEX_RAKLION:				return g_ZtText.GetText(215); //Raklion";

  0040c	68 d7 00 00 00	 push	 215			; 000000d7H
  00411	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00416	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0041b	5e		 pop	 esi

; 222  : }

  0041c	5d		 pop	 ebp
  0041d	c3		 ret	 0
$LN15@ztMapName:

; 204  : 	case MAP_INDEX_RAKLION_BOSS:		return g_ZtText.GetText(216); //Raklion Boss";

  0041e	68 d8 00 00 00	 push	 216			; 000000d8H
  00423	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00428	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0042d	5e		 pop	 esi

; 222  : }

  0042e	5d		 pop	 ebp
  0042f	c3		 ret	 0
$LN14@ztMapName:

; 205  : 	case MAP_INDEX_SANTATOWN:			return g_ZtText.GetText(217); //Santa Town";

  00430	68 d9 00 00 00	 push	 217			; 000000d9H
  00435	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0043a	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  0043f	5e		 pop	 esi

; 222  : }

  00440	5d		 pop	 ebp
  00441	c3		 ret	 0
$LN13@ztMapName:

; 206  : 	case MAP_INDEX_VULCAN:				return g_ZtText.GetText(218); //Vulcan";

  00442	68 da 00 00 00	 push	 218			; 000000daH
  00447	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0044c	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00451	5e		 pop	 esi

; 222  : }

  00452	5d		 pop	 ebp
  00453	c3		 ret	 0
$LN12@ztMapName:

; 207  : 	case MAP_INDEX_VULCANROOM:			return g_ZtText.GetText(219); //Vulcan Room";

  00454	68 db 00 00 00	 push	 219			; 000000dbH
  00459	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  0045e	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00463	5e		 pop	 esi

; 222  : }

  00464	5d		 pop	 ebp
  00465	c3		 ret	 0
$LN11@ztMapName:

; 208  : 	case MAP_INDEX_DOUBLE_GOER1:		return g_ZtText.GetText(220); //Double Goer 1";

  00466	68 dc 00 00 00	 push	 220			; 000000dcH
  0046b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00470	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00475	5e		 pop	 esi

; 222  : }

  00476	5d		 pop	 ebp
  00477	c3		 ret	 0
$LN10@ztMapName:

; 209  : 	case MAP_INDEX_DOUBLE_GOER2:		return g_ZtText.GetText(221); //Double Goer 2";

  00478	68 dd 00 00 00	 push	 221			; 000000ddH
  0047d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00482	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00487	5e		 pop	 esi

; 222  : }

  00488	5d		 pop	 ebp
  00489	c3		 ret	 0
$LN9@ztMapName:

; 210  : 	case MAP_INDEX_DOUBLE_GOER3:		return g_ZtText.GetText(222); //Double Goer 3";

  0048a	68 de 00 00 00	 push	 222			; 000000deH
  0048f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00494	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00499	5e		 pop	 esi

; 222  : }

  0049a	5d		 pop	 ebp
  0049b	c3		 ret	 0
$LN8@ztMapName:

; 211  : 	case MAP_INDEX_DOUBLE_GOER4:		return g_ZtText.GetText(223); //Double Goer 4";

  0049c	68 df 00 00 00	 push	 223			; 000000dfH
  004a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  004a6	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  004ab	5e		 pop	 esi

; 222  : }

  004ac	5d		 pop	 ebp
  004ad	c3		 ret	 0
$LN7@ztMapName:

; 212  : 	case MAP_INDEX_IMPERIAL1:			return g_ZtText.GetText(224); //Imperial 1";

  004ae	68 e0 00 00 00	 push	 224			; 000000e0H
  004b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  004b8	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  004bd	5e		 pop	 esi

; 222  : }

  004be	5d		 pop	 ebp
  004bf	c3		 ret	 0
$LN6@ztMapName:

; 213  : 	case MAP_INDEX_IMPERIAL2:			return g_ZtText.GetText(225); //Imperial 2";

  004c0	68 e1 00 00 00	 push	 225			; 000000e1H
  004c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  004ca	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  004cf	5e		 pop	 esi

; 222  : }

  004d0	5d		 pop	 ebp
  004d1	c3		 ret	 0
$LN5@ztMapName:

; 214  : 	case MAP_INDEX_IMPERIAL3:			return g_ZtText.GetText(226); //Imperial 3";

  004d2	68 e2 00 00 00	 push	 226			; 000000e2H
  004d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  004dc	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  004e1	5e		 pop	 esi

; 222  : }

  004e2	5d		 pop	 ebp
  004e3	c3		 ret	 0
$LN4@ztMapName:

; 215  : 	case MAP_INDEX_IMPERIAL4:			return g_ZtText.GetText(227); //Imperial 4";

  004e4	68 e3 00 00 00	 push	 227			; 000000e3H
  004e9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  004ee	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  004f3	5e		 pop	 esi

; 222  : }

  004f4	5d		 pop	 ebp
  004f5	c3		 ret	 0
$LN3@ztMapName:

; 216  : 	case 79: return g_ZtText.GetText(228); //Loren Market";

  004f6	68 e4 00 00 00	 push	 228			; 000000e4H
  004fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00500	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00505	5e		 pop	 esi

; 222  : }

  00506	5d		 pop	 ebp
  00507	c3		 ret	 0
$LN2@ztMapName:

; 217  : 	case 80: return g_ZtText.GetText(229); //Karutan";

  00508	68 e5 00 00 00	 push	 229			; 000000e5H
  0050d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00512	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00517	5e		 pop	 esi

; 222  : }

  00518	5d		 pop	 ebp
  00519	c3		 ret	 0
$LN1@ztMapName:

; 218  : 	case 81: return g_ZtText.GetText(230); //Karutan 2";

  0051a	68 e6 00 00 00	 push	 230			; 000000e6H
  0051f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtText@@3VCZtText@@A ; g_ZtText
  00524	e8 00 00 00 00	 call	 ?GetText@CZtText@@QAEPADH@Z ; CZtText::GetText
  00529	5e		 pop	 esi

; 222  : }

  0052a	5d		 pop	 ebp
  0052b	c3		 ret	 0
$LN69@ztMapName:

; 219  : 	}
; 220  : 
; 221  : 	return  "Unknown";

  0052c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07NBCGADJA@Unknown?$AA@
  00531	5e		 pop	 esi

; 222  : }

  00532	5d		 pop	 ebp
  00533	c3		 ret	 0
$LN76@ztMapName:
  00534	00 00 00 00	 DD	 $LN68@ztMapName
  00538	00 00 00 00	 DD	 $LN67@ztMapName
  0053c	00 00 00 00	 DD	 $LN66@ztMapName
  00540	00 00 00 00	 DD	 $LN65@ztMapName
  00544	00 00 00 00	 DD	 $LN64@ztMapName
  00548	00 00 00 00	 DD	 $LN69@ztMapName
  0054c	00 00 00 00	 DD	 $LN63@ztMapName
  00550	00 00 00 00	 DD	 $LN62@ztMapName
  00554	00 00 00 00	 DD	 $LN61@ztMapName
  00558	00 00 00 00	 DD	 $LN60@ztMapName
  0055c	00 00 00 00	 DD	 $LN59@ztMapName
  00560	00 00 00 00	 DD	 $LN58@ztMapName
  00564	00 00 00 00	 DD	 $LN57@ztMapName
  00568	00 00 00 00	 DD	 $LN56@ztMapName
  0056c	00 00 00 00	 DD	 $LN55@ztMapName
  00570	00 00 00 00	 DD	 $LN54@ztMapName
  00574	00 00 00 00	 DD	 $LN53@ztMapName
  00578	00 00 00 00	 DD	 $LN52@ztMapName
  0057c	00 00 00 00	 DD	 $LN51@ztMapName
  00580	00 00 00 00	 DD	 $LN50@ztMapName
  00584	00 00 00 00	 DD	 $LN49@ztMapName
  00588	00 00 00 00	 DD	 $LN48@ztMapName
  0058c	00 00 00 00	 DD	 $LN47@ztMapName
  00590	00 00 00 00	 DD	 $LN46@ztMapName
  00594	00 00 00 00	 DD	 $LN45@ztMapName
  00598	00 00 00 00	 DD	 $LN44@ztMapName
  0059c	00 00 00 00	 DD	 $LN43@ztMapName
  005a0	00 00 00 00	 DD	 $LN42@ztMapName
  005a4	00 00 00 00	 DD	 $LN41@ztMapName
  005a8	00 00 00 00	 DD	 $LN40@ztMapName
  005ac	00 00 00 00	 DD	 $LN39@ztMapName
  005b0	00 00 00 00	 DD	 $LN38@ztMapName
  005b4	00 00 00 00	 DD	 $LN69@ztMapName
  005b8	00 00 00 00	 DD	 $LN37@ztMapName
  005bc	00 00 00 00	 DD	 $LN36@ztMapName
  005c0	00 00 00 00	 DD	 $LN35@ztMapName
  005c4	00 00 00 00	 DD	 $LN34@ztMapName
  005c8	00 00 00 00	 DD	 $LN33@ztMapName
  005cc	00 00 00 00	 DD	 $LN32@ztMapName
  005d0	00 00 00 00	 DD	 $LN31@ztMapName
  005d4	00 00 00 00	 DD	 $LN30@ztMapName
  005d8	00 00 00 00	 DD	 $LN29@ztMapName
  005dc	00 00 00 00	 DD	 $LN28@ztMapName
  005e0	00 00 00 00	 DD	 $LN69@ztMapName
  005e4	00 00 00 00	 DD	 $LN69@ztMapName
  005e8	00 00 00 00	 DD	 $LN27@ztMapName
  005ec	00 00 00 00	 DD	 $LN26@ztMapName
  005f0	00 00 00 00	 DD	 $LN25@ztMapName
  005f4	00 00 00 00	 DD	 $LN24@ztMapName
  005f8	00 00 00 00	 DD	 $LN23@ztMapName
  005fc	00 00 00 00	 DD	 $LN22@ztMapName
  00600	00 00 00 00	 DD	 $LN21@ztMapName
  00604	00 00 00 00	 DD	 $LN20@ztMapName
  00608	00 00 00 00	 DD	 $LN19@ztMapName
  0060c	00 00 00 00	 DD	 $LN18@ztMapName
  00610	00 00 00 00	 DD	 $LN69@ztMapName
  00614	00 00 00 00	 DD	 $LN17@ztMapName
  00618	00 00 00 00	 DD	 $LN16@ztMapName
  0061c	00 00 00 00	 DD	 $LN15@ztMapName
  00620	00 00 00 00	 DD	 $LN69@ztMapName
  00624	00 00 00 00	 DD	 $LN69@ztMapName
  00628	00 00 00 00	 DD	 $LN69@ztMapName
  0062c	00 00 00 00	 DD	 $LN14@ztMapName
  00630	00 00 00 00	 DD	 $LN13@ztMapName
  00634	00 00 00 00	 DD	 $LN12@ztMapName
  00638	00 00 00 00	 DD	 $LN11@ztMapName
  0063c	00 00 00 00	 DD	 $LN10@ztMapName
  00640	00 00 00 00	 DD	 $LN9@ztMapName
  00644	00 00 00 00	 DD	 $LN8@ztMapName
  00648	00 00 00 00	 DD	 $LN7@ztMapName
  0064c	00 00 00 00	 DD	 $LN6@ztMapName
  00650	00 00 00 00	 DD	 $LN5@ztMapName
  00654	00 00 00 00	 DD	 $LN4@ztMapName
  00658	00 00 00 00	 DD	 $LN69@ztMapName
  0065c	00 00 00 00	 DD	 $LN69@ztMapName
  00660	00 00 00 00	 DD	 $LN69@ztMapName
  00664	00 00 00 00	 DD	 $LN69@ztMapName
  00668	00 00 00 00	 DD	 $LN69@ztMapName
  0066c	00 00 00 00	 DD	 $LN69@ztMapName
  00670	00 00 00 00	 DD	 $LN3@ztMapName
  00674	00 00 00 00	 DD	 $LN2@ztMapName
  00678	00 00 00 00	 DD	 $LN1@ztMapName
?ztMapName@@YAPADH@Z ENDP				; ztMapName
_TEXT	ENDS
PUBLIC	??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?CheckFile@@YA_NPAD@Z				; CheckFile
EXTRN	_fclose:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
CONST	SEGMENT
??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@ DB 'LOAD FILE ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckFile@@YA_NPAD@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
?CheckFile@@YA_NPAD@Z PROC				; CheckFile, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 233  : 	bool Result = true;
; 234  : 	FILE *file = fopen(File,"r");

  00005	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000d	56		 push	 esi
  0000e	b3 01		 mov	 bl, 1
  00010	e8 00 00 00 00	 call	 _fopen
  00015	83 c4 08	 add	 esp, 8

; 235  : 	if (file == NULL)

  00018	85 c0		 test	 eax, eax
  0001a	75 18		 jne	 SHORT $LN2@CheckFile

; 236  : 	{
; 237  : 		Result = false;
; 238  : 		MessageBoxA(0,File,"LOAD FILE ERROR",0);

  0001c	6a 00		 push	 0
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PIOFNAIM@LOAD?5FILE?5ERROR?$AA@
  00023	56		 push	 esi
  00024	6a 00		 push	 0
  00026	32 db		 xor	 bl, bl
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  0002e	5e		 pop	 esi

; 243  : 	}
; 244  : 	
; 245  : 	return Result;

  0002f	8a c3		 mov	 al, bl
  00031	5b		 pop	 ebx

; 246  : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN2@CheckFile:

; 239  : 	}
; 240  : 	else
; 241  : 	{
; 242  : 		fclose(file);

  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _fclose
  0003a	83 c4 04	 add	 esp, 4
  0003d	5e		 pop	 esi

; 243  : 	}
; 244  : 	
; 245  : 	return Result;

  0003e	8a c3		 mov	 al, bl
  00040	5b		 pop	 ebx

; 246  : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?CheckFile@@YA_NPAD@Z ENDP				; CheckFile
_TEXT	ENDS
PUBLIC	?CheckOptionItem@@YA_NHHH@Z			; CheckOptionItem
; Function compile flags: /Ogtp
;	COMDAT ?CheckOptionItem@@YA_NHHH@Z
_TEXT	SEGMENT
_Item1$ = 8						; size = 4
_Item2$ = 12						; size = 4
_iType$ = 16						; size = 4
?CheckOptionItem@@YA_NHHH@Z PROC			; CheckOptionItem, COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 320  : 	if(iType)

  00003	83 7d 10 00	 cmp	 DWORD PTR _iType$[ebp], 0
  00007	74 0b		 je	 SHORT $LN8@CheckOptio

; 321  : 	{
; 322  : 		if(Item1 == Item2)

  00009	8b 45 08	 mov	 eax, DWORD PTR _Item1$[ebp]
  0000c	3b 45 0c	 cmp	 eax, DWORD PTR _Item2$[ebp]
  0000f	0f 94 c0	 sete	 al

; 344  : 		}
; 345  : 	}
; 346  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
$LN8@CheckOptio:

; 323  : 		{
; 324  : 			return true;
; 325  : 		}
; 326  : 		else
; 327  : 		{
; 328  : 			return false;
; 329  : 		}
; 330  : 	}
; 331  : 	else
; 332  : 	{
; 333  : 		if(Item1 && Item2)

  00014	83 7d 08 00	 cmp	 DWORD PTR _Item1$[ebp], 0
  00018	74 0a		 je	 SHORT $LN11@CheckOptio
  0001a	83 7d 0c 00	 cmp	 DWORD PTR _Item2$[ebp], 0
  0001e	74 0a		 je	 SHORT $LN2@CheckOptio
$LN12@CheckOptio:

; 334  : 		{
; 335  : 			return true;

  00020	b0 01		 mov	 al, 1

; 344  : 		}
; 345  : 	}
; 346  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN11@CheckOptio:

; 336  : 		}
; 337  : 		else if(!Item1 && !Item2)

  00024	83 7d 0c 00	 cmp	 DWORD PTR _Item2$[ebp], 0

; 338  : 		{
; 339  : 			return true;

  00028	74 f6		 je	 SHORT $LN12@CheckOptio
$LN2@CheckOptio:

; 340  : 		}
; 341  : 		else
; 342  : 		{
; 343  : 			return false;

  0002a	32 c0		 xor	 al, al

; 344  : 		}
; 345  : 	}
; 346  : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?CheckOptionItem@@YA_NHHH@Z ENDP			; CheckOptionItem
_TEXT	ENDS
PUBLIC	?CheckAndFixMinNumber@@YAXAAHH@Z		; CheckAndFixMinNumber
; Function compile flags: /Ogtp
;	COMDAT ?CheckAndFixMinNumber@@YAXAAHH@Z
_TEXT	SEGMENT
_Number$ = 8						; size = 4
_MinNumber$ = 12					; size = 4
?CheckAndFixMinNumber@@YAXAAHH@Z PROC			; CheckAndFixMinNumber, COMDAT

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 350  : 	if(Number < MinNumber)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _MinNumber$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _Number$[ebp]
  00009	39 01		 cmp	 DWORD PTR [ecx], eax
  0000b	7d 02		 jge	 SHORT $LN1@CheckAndFi

; 351  : 	{
; 352  : 		Number = MinNumber;

  0000d	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@CheckAndFi:

; 353  : 	}
; 354  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?CheckAndFixMinNumber@@YAXAAHH@Z ENDP			; CheckAndFixMinNumber
_TEXT	ENDS
PUBLIC	?CheckAndFixNumber@@YAXAAHHH@Z			; CheckAndFixNumber
; Function compile flags: /Ogtp
;	COMDAT ?CheckAndFixNumber@@YAXAAHHH@Z
_TEXT	SEGMENT
_Number$ = 8						; size = 4
_MinNumber$ = 12					; size = 4
_MaxNumber$ = 16					; size = 4
?CheckAndFixNumber@@YAXAAHHH@Z PROC			; CheckAndFixNumber, COMDAT

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 358  : 	if(Number < MinNumber)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _MinNumber$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _Number$[ebp]
  00009	39 08		 cmp	 DWORD PTR [eax], ecx
  0000b	7d 02		 jge	 SHORT $LN2@CheckAndFi@2

; 359  : 	{
; 360  : 		Number = MinNumber;

  0000d	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@CheckAndFi@2:

; 361  : 	}
; 362  : 	if(Number > MaxNumber)

  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _MaxNumber$[ebp]
  00012	39 08		 cmp	 DWORD PTR [eax], ecx
  00014	7e 02		 jle	 SHORT $LN1@CheckAndFi@2

; 363  : 	{
; 364  : 		Number = MaxNumber;

  00016	89 08		 mov	 DWORD PTR [eax], ecx
$LN1@CheckAndFi@2:

; 365  : 	}
; 366  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?CheckAndFixNumber@@YAXAAHHH@Z ENDP			; CheckAndFixNumber
_TEXT	ENDS
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	3d 0e 00 07 80	 cmp	 eax, -2147024882	; 8007000eH
  0000b	75 05		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$LN6@AtlThrowIm:
$LN2@AtlThrowIm:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN7@AtlThrowIm:
$LN5@AtlThrowIm:
  00018	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
EXTRN	__mktime64:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
_atm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 183  : #pragma warning (push)
; 184  : #pragma warning (disable: 4127)  // conditional expression constant
; 185  : 
; 186  : 	ATLENSURE( nYear >= 1900 );

  00010	8b 55 08	 mov	 edx, DWORD PTR _nYear$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	81 fa 6c 07 00
	00		 cmp	 edx, 1900		; 0000076cH
  0001c	7d 0a		 jge	 SHORT $LN66@CTime
  0001e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00023	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN86@CTime:
$LN66@CTime:

; 187  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00028	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  0002b	48		 dec	 eax
  0002c	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0002f	76 0a		 jbe	 SHORT $LN56@CTime
  00031	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00036	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN87@CTime:
$LN56@CTime:
  0003b	53		 push	 ebx

; 188  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0003c	8b 5d 10	 mov	 ebx, DWORD PTR _nDay$[ebp]
  0003f	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00042	57		 push	 edi
  00043	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  00046	76 0a		 jbe	 SHORT $LN46@CTime
  00048	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0004d	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN88@CTime:
$LN46@CTime:

; 189  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  00052	8b 7d 14	 mov	 edi, DWORD PTR _nHour$[ebp]
  00055	83 ff 17	 cmp	 edi, 23			; 00000017H
  00058	76 0a		 jbe	 SHORT $LN36@CTime
  0005a	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0005f	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN89@CTime:
$LN36@CTime:

; 190  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  00064	8b 4d 18	 mov	 ecx, DWORD PTR _nMin$[ebp]
  00067	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  0006a	76 0a		 jbe	 SHORT $LN26@CTime
  0006c	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00071	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN90@CTime:
$LN26@CTime:

; 191  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00076	8b 45 1c	 mov	 eax, DWORD PTR _nSec$[ebp]
  00079	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  0007c	76 0a		 jbe	 SHORT $LN16@CTime
  0007e	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00083	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN91@CTime:
$LN16@CTime:

; 192  : 
; 193  : #pragma warning (pop)
; 194  : 
; 195  : 	struct tm atm;
; 196  : 
; 197  : 	atm.tm_sec = nSec;
; 198  : 	atm.tm_min = nMin;
; 199  : 	atm.tm_hour = nHour;
; 200  : 	atm.tm_mday = nDay;
; 201  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 202  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  00088	81 c2 94 f8 ff
	ff		 add	 edx, -1900		; fffff894H
  0008e	89 45 d8	 mov	 DWORD PTR _atm$[ebp], eax
  00091	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  00094	89 55 ec	 mov	 DWORD PTR _atm$[ebp+20], edx
  00097	89 4d dc	 mov	 DWORD PTR _atm$[ebp+4], ecx

; 203  : 	atm.tm_isdst = nDST;

  0009a	8b 4d 20	 mov	 ecx, DWORD PTR _nDST$[ebp]

; 204  : 
; 205  : 	m_time = _mktime64(&atm);

  0009d	8d 55 d8	 lea	 edx, DWORD PTR _atm$[ebp]
  000a0	48		 dec	 eax
  000a1	52		 push	 edx
  000a2	89 7d e0	 mov	 DWORD PTR _atm$[ebp+8], edi
  000a5	89 5d e4	 mov	 DWORD PTR _atm$[ebp+12], ebx
  000a8	89 45 e8	 mov	 DWORD PTR _atm$[ebp+16], eax
  000ab	89 4d f8	 mov	 DWORD PTR _atm$[ebp+32], ecx
  000ae	e8 00 00 00 00	 call	 __mktime64
  000b3	83 c4 04	 add	 esp, 4
  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 206  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 207  : 	if(m_time == -1)

  000b8	23 c2		 and	 eax, edx
  000ba	5f		 pop	 edi
  000bb	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000be	5b		 pop	 ebx
  000bf	83 f8 ff	 cmp	 eax, -1
  000c2	75 0a		 jne	 SHORT $LN1@CTime

; 208  : 	{
; 209  : 		AtlThrow(E_INVALIDARG);

  000c4	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000c9	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN92@CTime:
$LN1@CTime:

; 210  : 	}
; 211  : }

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	8b c6		 mov	 eax, esi
  000d3	33 cd		 xor	 ecx, ebp
  000d5	5e		 pop	 esi
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 1c 00	 ret	 28			; 0000001cH
$LN85@CTime:
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	??_C@_0BC@FFOHHNEG@?$CFd?4?$CFd?4?$CFd?5?$CFd?3?$CFd?3?$CFd?$AA@ ; `string'
PUBLIC	?StrToCTime@@YA?AVCTime@ATL@@PBD@Z		; StrToCTime
EXTRN	_sscanf:PROC
;	COMDAT ??_C@_0BC@FFOHHNEG@?$CFd?4?$CFd?4?$CFd?5?$CFd?3?$CFd?3?$CFd?$AA@
; File e:\work\tranet_version\gs\gameserver\ztfunction.cpp
CONST	SEGMENT
??_C@_0BC@FFOHHNEG@?$CFd?4?$CFd?4?$CFd?5?$CFd?3?$CFd?3?$CFd?$AA@ DB '%d.%'
	DB	'd.%d %d:%d:%d', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?StrToCTime@@YA?AVCTime@ATL@@PBD@Z
_TEXT	SEGMENT
_year$ = -24						; size = 4
_month$ = -20						; size = 4
_day$ = -16						; size = 4
_hh$ = -12						; size = 4
_mm$ = -8						; size = 4
_ss$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?StrToCTime@@YA?AVCTime@ATL@@PBD@Z PROC			; StrToCTime, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 226  : 	int year, month, day, hh, mm, ss;
; 227  : 	sscanf(str, "%d.%d.%d %d:%d:%d", &day, &month, &year, &hh, &mm, &ss);

  00007	8d 45 fc	 lea	 eax, DWORD PTR _ss$[ebp]
  0000a	50		 push	 eax
  0000b	8d 4d f8	 lea	 ecx, DWORD PTR _mm$[ebp]
  0000e	51		 push	 ecx
  0000f	8d 55 f4	 lea	 edx, DWORD PTR _hh$[ebp]
  00012	52		 push	 edx
  00013	8d 45 e8	 lea	 eax, DWORD PTR _year$[ebp]
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  0001a	8d 4d ec	 lea	 ecx, DWORD PTR _month$[ebp]
  0001d	51		 push	 ecx
  0001e	8d 55 f0	 lea	 edx, DWORD PTR _day$[ebp]
  00021	52		 push	 edx
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FFOHHNEG@?$CFd?4?$CFd?4?$CFd?5?$CFd?3?$CFd?3?$CFd?$AA@
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _sscanf

; 228  : 	return CTime(year, month, day, hh, mm, ss);

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _ss$[ebp]
  00030	8b 55 f8	 mov	 edx, DWORD PTR _mm$[ebp]
  00033	8b 45 f4	 mov	 eax, DWORD PTR _hh$[ebp]
  00036	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00039	83 c4 20	 add	 esp, 32			; 00000020H
  0003c	6a ff		 push	 -1
  0003e	51		 push	 ecx
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _day$[ebp]
  00042	52		 push	 edx
  00043	8b 55 ec	 mov	 edx, DWORD PTR _month$[ebp]
  00046	50		 push	 eax
  00047	8b 45 e8	 mov	 eax, DWORD PTR _year$[ebp]
  0004a	51		 push	 ecx
  0004b	52		 push	 edx
  0004c	50		 push	 eax
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime
  00054	8b c6		 mov	 eax, esi
  00056	5e		 pop	 esi

; 229  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?StrToCTime@@YA?AVCTime@ATL@@PBD@Z ENDP			; StrToCTime
_TEXT	ENDS
END
