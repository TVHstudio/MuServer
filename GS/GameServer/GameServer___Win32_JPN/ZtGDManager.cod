; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ZtGDManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0CZtGDManager@@QAE@XZ				; CZtGDManager::CZtGDManager
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\ztgdmanager.cpp
;	COMDAT ??0CZtGDManager@@QAE@XZ
_TEXT	SEGMENT
??0CZtGDManager@@QAE@XZ PROC				; CZtGDManager::CZtGDManager, COMDAT
; _this$ = ecx

; 20   : {

  00000	8b c1		 mov	 eax, ecx

; 21   : }

  00002	c3		 ret	 0
??0CZtGDManager@@QAE@XZ ENDP				; CZtGDManager::CZtGDManager
_TEXT	ENDS
PUBLIC	??1CZtGDManager@@QAE@XZ				; CZtGDManager::~CZtGDManager
; Function compile flags: /Ogtp
;	COMDAT ??1CZtGDManager@@QAE@XZ
_TEXT	SEGMENT
??1CZtGDManager@@QAE@XZ PROC				; CZtGDManager::~CZtGDManager, COMDAT
; _this$ = ecx

; 25   : }

  00000	c3		 ret	 0
??1CZtGDManager@@QAE@XZ ENDP				; CZtGDManager::~CZtGDManager
_TEXT	ENDS
PUBLIC	?DB_Start@CZtGDManager@@QAEXXZ			; CZtGDManager::DB_Start
EXTRN	?GDReqAllPlayer@OfflineMode@@QAEXXZ:PROC	; OfflineMode::GDReqAllPlayer
EXTRN	?g_OfflineMode@@3VOfflineMode@@A:BYTE		; g_OfflineMode
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
; Function compile flags: /Ogtp
;	COMDAT ?DB_Start@CZtGDManager@@QAEXXZ
_TEXT	SEGMENT
?DB_Start@CZtGDManager@@QAEXXZ PROC			; CZtGDManager::DB_Start, COMDAT
; _this$ = ecx

; 68   : 	//PMSG_REQ_SERVERINFO_ZT pMsg;
; 69   : 	//pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x08, sizeof(pMsg));
; 70   : 	//cDBSMng.Send((char*)&pMsg, pMsg.h.size);
; 71   : 	
; 72   : 	if(g_ZtLicense.user.RestoreOffMode)

  00000	80 3d ea 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+234, 0
  00007	74 0a		 je	 SHORT $LN1@DB_Start

; 73   : 	{
; 74   : 		g_OfflineMode.GDReqAllPlayer();

  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_OfflineMode@@3VOfflineMode@@A ; g_OfflineMode
  0000e	e9 00 00 00 00	 jmp	 ?GDReqAllPlayer@OfflineMode@@QAEXXZ ; OfflineMode::GDReqAllPlayer
$LN1@DB_Start:

; 75   : 	}
; 76   : }

  00013	c3		 ret	 0
?DB_Start@CZtGDManager@@QAEXXZ ENDP			; CZtGDManager::DB_Start
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_PartySearchLoad@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_PartySearchLoad
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GD_PartySearchLoad@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_PartySearchLoad@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_PartySearchLoad, COMDAT
; _this$ = ecx

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 201  : 	LPOBJ lpUser = &gObj[aIndex];

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 202  : 	PMSG_REQ_PARTYSEARCH_LOAD pMsg;
; 203  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x00, sizeof(pMsg));
; 204  : 	pMsg.aIndex = aIndex;

  00021	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00024	32 d2		 xor	 dl, dl
  00026	c7 45 e8 c1 14
	ea 00		 mov	 DWORD PTR _pMsg$[ebp], 15340737 ; 00ea14c1H

; 205  : 	pMsg.Name[10] = 0;

  0002d	88 55 fa	 mov	 BYTE PTR _pMsg$[ebp+18], dl

; 206  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00030	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00033	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00036	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]

; 207  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00039	6a 14		 push	 20			; 00000014H
  0003b	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0003e	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00041	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]
  00045	51		 push	 ecx
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004b	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+16], ax
  0004f	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 208  : }

  00054	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00057	33 cd		 xor	 ecx, ebp
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?GD_PartySearchLoad@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_PartySearchLoad
_TEXT	ENDS
PUBLIC	?DG_PartySearchLoad@CZtGDManager@@QAEXPAUPMSG_ANS_PARTYSEARCH_LOAD@@@Z ; CZtGDManager::DG_PartySearchLoad
EXTRN	?LoadBinary@PartySearch@@QAEXHPAE@Z:PROC	; PartySearch::LoadBinary
EXTRN	?g_PartySearch@@3VPartySearch@@A:BYTE		; g_PartySearch
; Function compile flags: /Ogtp
;	COMDAT ?DG_PartySearchLoad@CZtGDManager@@QAEXPAUPMSG_ANS_PARTYSEARCH_LOAD@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DG_PartySearchLoad@CZtGDManager@@QAEXPAUPMSG_ANS_PARTYSEARCH_LOAD@@@Z PROC ; CZtGDManager::DG_PartySearchLoad, COMDAT
; _this$ = ecx

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 212  : 	int aIndex = aRecv->aIndex;

  00003	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00006	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 213  : 	if(!OBJMAX_RANGE(aIndex))

  00009	85 c0		 test	 eax, eax
  0000b	78 1d		 js	 SHORT $LN2@DG_PartySe
  0000d	33 c9		 xor	 ecx, ecx
  0000f	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00014	0f 9e c1	 setle	 cl
  00017	85 c9		 test	 ecx, ecx
  00019	74 0f		 je	 SHORT $LN2@DG_PartySe

; 214  : 	{
; 215  : 		return;
; 216  : 	}
; 217  : 	g_PartySearch.LoadBinary(aIndex,aRecv->btPartySearch);

  0001b	83 c2 09	 add	 edx, 9
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PartySearch@@3VPartySearch@@A ; g_PartySearch
  00025	e8 00 00 00 00	 call	 ?LoadBinary@PartySearch@@QAEXHPAE@Z ; PartySearch::LoadBinary
$LN2@DG_PartySe:

; 218  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?DG_PartySearchLoad@CZtGDManager@@QAEXPAUPMSG_ANS_PARTYSEARCH_LOAD@@@Z ENDP ; CZtGDManager::DG_PartySearchLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_PartySearchSave@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_PartySearchSave
EXTRN	?SaveBinary@PartySearch@@QAEXHPAE@Z:PROC	; PartySearch::SaveBinary
; Function compile flags: /Ogtp
;	COMDAT ?GD_PartySearchSave@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -32						; size = 26
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_PartySearchSave@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_PartySearchSave, COMDAT
; _this$ = ecx

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 222  : 	LPOBJ lpUser = &gObj[aIndex];

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 223  : 	PMSG_REQ_PARTYSEARCH_SAVE pMsg;
; 224  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x01, sizeof(pMsg));

  00021	c7 45 e0 c1 1a
	ea 01		 mov	 DWORD PTR _pMsg$[ebp], 32119489 ; 01ea1ac1H

; 225  : 	pMsg.Name[10] = 0;

  00028	c6 45 ee 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 226  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  0002c	8b 50 77	 mov	 edx, DWORD PTR [eax+119]
  0002f	89 55 e4	 mov	 DWORD PTR _pMsg$[ebp+4], edx
  00032	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00035	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00038	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]

; 227  : 	g_PartySearch.SaveBinary(aIndex, pMsg.btPartySearch);

  0003c	8d 55 ef	 lea	 edx, DWORD PTR _pMsg$[ebp+15]
  0003f	52		 push	 edx
  00040	51		 push	 ecx
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PartySearch@@3VPartySearch@@A ; g_PartySearch
  00046	66 89 45 ec	 mov	 WORD PTR _pMsg$[ebp+12], ax
  0004a	e8 00 00 00 00	 call	 ?SaveBinary@PartySearch@@QAEXHPAE@Z ; PartySearch::SaveBinary

; 228  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0004f	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00053	50		 push	 eax
  00054	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00057	51		 push	 ecx
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005d	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 229  : }

  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	33 cd		 xor	 ecx, ebp
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?GD_PartySearchSave@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_PartySearchSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_ZtBuffLoad@CZtGDManager@@QAEXH@Z		; CZtGDManager::GD_ZtBuffLoad
; Function compile flags: /Ogtp
;	COMDAT ?GD_ZtBuffLoad@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_ZtBuffLoad@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_ZtBuffLoad, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 234  : 	LPOBJ lpUser = &gObj[aIndex];

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 235  : 	PMSG_REQ_ZTBUFF_LOAD pMsg;
; 236  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x02, sizeof(pMsg));
; 237  : 	pMsg.aIndex = aIndex;

  00021	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00024	c7 45 e8 c1 14
	ea 02		 mov	 DWORD PTR _pMsg$[ebp], 48895169 ; 02ea14c1H

; 238  : 	pMsg.Name[10] = 0;

  0002b	c6 45 fa 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 239  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  0002f	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00032	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00035	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]

; 240  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00038	6a 14		 push	 20			; 00000014H
  0003a	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0003d	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00040	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]
  00044	51		 push	 ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004a	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+16], ax
  0004e	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 241  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?GD_ZtBuffLoad@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_ZtBuffLoad
_TEXT	ENDS
PUBLIC	?DG_ZtBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZTBUFF_LOAD@@@Z ; CZtGDManager::DG_ZtBuffLoad
EXTRN	?UserConnect@BufferSystem@@QAEXH@Z:PROC		; BufferSystem::UserConnect
EXTRN	?g_BufferSystem@@3VBufferSystem@@A:BYTE		; g_BufferSystem
; Function compile flags: /Ogtp
;	COMDAT ?DG_ZtBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZTBUFF_LOAD@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DG_ZtBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZTBUFF_LOAD@@@Z PROC ; CZtGDManager::DG_ZtBuffLoad, COMDAT
; _this$ = ecx

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  : 	if(!aRecv->bResult)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00006	80 79 08 00	 cmp	 BYTE PTR [ecx+8], 0
  0000a	74 67		 je	 SHORT $LN3@DG_ZtBuffL

; 246  : 	{
; 247  : 		return;
; 248  : 	}
; 249  : 
; 250  : 	int aIndex = aRecv->aIndex;

  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 251  : 
; 252  : 	if(!OBJMAX_RANGE(aIndex))

  0000f	85 d2		 test	 edx, edx
  00011	78 60		 js	 SHORT $LN3@DG_ZtBuffL
  00013	33 c0		 xor	 eax, eax
  00015	81 fa 97 3a 00
	00		 cmp	 edx, 14999		; 00003a97H
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	74 51		 je	 SHORT $LN3@DG_ZtBuffL

; 253  : 	{
; 254  : 		return;
; 255  : 	}
; 256  : 
; 257  : 	LPOBJ lpUser = &gObj[aIndex];

  00022	8b c2		 mov	 eax, edx
  00024	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	56		 push	 esi

; 258  : 
; 259  : 	lpUser->ExpBuffTime = aRecv->ExpBuffTime;

  00031	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00034	89 b0 90 28 00
	00		 mov	 DWORD PTR [eax+10384], esi

; 260  : 	lpUser->DamageBuffTime = aRecv->DamageBuffTime;

  0003a	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  0003d	89 b0 94 28 00
	00		 mov	 DWORD PTR [eax+10388], esi

; 261  : 	lpUser->DefenceBuffTime = aRecv->DefenceBuffTime;

  00043	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  00046	89 b0 98 28 00
	00		 mov	 DWORD PTR [eax+10392], esi

; 262  : 	lpUser->BattleBuffTime = aRecv->BattleBuffTime;

  0004c	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0004f	89 b0 9c 28 00
	00		 mov	 DWORD PTR [eax+10396], esi

; 263  : 	lpUser->DropBuffTime = aRecv->DropBuffTime;

  00055	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]
  00058	89 b0 a0 28 00
	00		 mov	 DWORD PTR [eax+10400], esi

; 264  : 	lpUser->DoubleBuffTime = aRecv->DoubleBuffTime;

  0005e	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00061	89 88 a4 28 00
	00		 mov	 DWORD PTR [eax+10404], ecx

; 265  : 
; 266  : 	g_BufferSystem.UserConnect(aIndex);

  00067	52		 push	 edx
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BufferSystem@@3VBufferSystem@@A ; g_BufferSystem
  0006d	e8 00 00 00 00	 call	 ?UserConnect@BufferSystem@@QAEXH@Z ; BufferSystem::UserConnect
  00072	5e		 pop	 esi
$LN3@DG_ZtBuffL:

; 267  : }

  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?DG_ZtBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZTBUFF_LOAD@@@Z ENDP ; CZtGDManager::DG_ZtBuffLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_ZtBuffSave@CZtGDManager@@QAEXH@Z		; CZtGDManager::GD_ZtBuffSave
; Function compile flags: /Ogtp
;	COMDAT ?GD_ZtBuffSave@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_ZtBuffSave@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_ZtBuffSave, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 271  : 	if(!OBJMAX_RANGE(aIndex))

  00013	85 c0		 test	 eax, eax
  00015	78 7f		 js	 SHORT $LN2@GD_ZtBuffS
  00017	33 c9		 xor	 ecx, ecx
  00019	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0001e	0f 9e c1	 setle	 cl
  00021	85 c9		 test	 ecx, ecx
  00023	74 71		 je	 SHORT $LN2@GD_ZtBuffS

; 272  : 	{
; 273  : 		return;
; 274  : 	}
; 275  : 
; 276  : 	PMSG_REQ_ZTBUFF_SAVE pMsg;
; 277  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x03, sizeof(pMsg));
; 278  : 
; 279  : 	LPOBJ lpUser = &gObj[aIndex];

  00025	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00031	c7 45 d4 c1 28
	ea 03		 mov	 DWORD PTR _pMsg$[ebp], 65677505 ; 03ea28c1H

; 280  : 
; 281  : 	pMsg.Name[10] = 0;

  00038	c6 45 e2 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 282  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  0003c	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  0003f	89 4d d8	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00042	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00045	89 55 dc	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00048	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  0004c	66 89 4d e0	 mov	 WORD PTR _pMsg$[ebp+12], cx

; 283  : 
; 284  : 	pMsg.ExpBuffTime = lpUser->ExpBuffTime;

  00050	8b 90 90 28 00
	00		 mov	 edx, DWORD PTR [eax+10384]
  00056	89 55 e4	 mov	 DWORD PTR _pMsg$[ebp+16], edx

; 285  : 	pMsg.DamageBuffTime = lpUser->DamageBuffTime;

  00059	8b 88 94 28 00
	00		 mov	 ecx, DWORD PTR [eax+10388]
  0005f	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 286  : 	pMsg.DefenceBuffTime = lpUser->DefenceBuffTime;

  00062	8b 90 98 28 00
	00		 mov	 edx, DWORD PTR [eax+10392]
  00068	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+24], edx

; 287  : 	pMsg.BattleBuffTime = lpUser->BattleBuffTime;

  0006b	8b 88 9c 28 00
	00		 mov	 ecx, DWORD PTR [eax+10396]
  00071	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 288  : 	pMsg.DropBuffTime = lpUser->DropBuffTime;

  00074	8b 90 a0 28 00
	00		 mov	 edx, DWORD PTR [eax+10400]

; 289  : 	pMsg.DoubleBuffTime = lpUser->DoubleBuffTime;
; 290  : 
; 291  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0007a	6a 28		 push	 40			; 00000028H
  0007c	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0007f	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+32], edx
  00082	8b 80 a4 28 00
	00		 mov	 eax, DWORD PTR [eax+10404]
  00088	51		 push	 ecx
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0008e	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+36], eax
  00091	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_ZtBuffS:

; 292  : }

  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
?GD_ZtBuffSave@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_ZtBuffSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_BMQuestLoad@CZtGDManager@@QAEXH@Z		; CZtGDManager::GD_BMQuestLoad
; Function compile flags: /Ogtp
;	COMDAT ?GD_BMQuestLoad@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_BMQuestLoad@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_BMQuestLoad, COMDAT
; _this$ = ecx

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 297  : 	LPOBJ lpUser = &gObj[aIndex];

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 298  : 	PMSG_REQ_BMQUEST_LOAD pMsg;
; 299  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x04, sizeof(pMsg));
; 300  : 	pMsg.aIndex = aIndex;

  00021	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00024	c7 45 e8 c1 14
	ea 04		 mov	 DWORD PTR _pMsg$[ebp], 82449601 ; 04ea14c1H

; 301  : 	pMsg.Name[10] = 0;

  0002b	c6 45 fa 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 302  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  0002f	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00032	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00035	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]

; 303  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00038	6a 14		 push	 20			; 00000014H
  0003a	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0003d	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00040	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]
  00044	51		 push	 ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004a	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+16], ax
  0004e	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 304  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?GD_BMQuestLoad@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_BMQuestLoad
_TEXT	ENDS
PUBLIC	?DG_BMQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_BMQUEST_LOAD@@@Z ; CZtGDManager::DG_BMQuestLoad
; Function compile flags: /Ogtp
;	COMDAT ?DG_BMQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_BMQUEST_LOAD@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DG_BMQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_BMQUEST_LOAD@@@Z PROC ; CZtGDManager::DG_BMQuestLoad, COMDAT
; _this$ = ecx

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 308  : 	if(!aRecv->bResult)

  00003	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00006	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  0000a	74 73		 je	 SHORT $LN3@DG_BMQuest

; 309  : 	{
; 310  : 		return;
; 311  : 	}
; 312  : 
; 313  : 	int aIndex = aRecv->aIndex;

  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 314  : 
; 315  : 	if(!OBJMAX_RANGE(aIndex))

  0000f	85 c9		 test	 ecx, ecx
  00011	78 6c		 js	 SHORT $LN3@DG_BMQuest
  00013	33 d2		 xor	 edx, edx
  00015	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  0001b	0f 9e c2	 setle	 dl
  0001e	85 d2		 test	 edx, edx
  00020	74 5d		 je	 SHORT $LN3@DG_BMQuest

; 316  : 	{
; 317  : 		return;
; 318  : 	}
; 319  : 
; 320  : 	LPOBJ lpUser = &gObj[aIndex];
; 321  : 
; 322  : 	lpUser->BMQuest_num = aRecv->BMQuest_num;

  00022	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00025	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0002b	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00031	89 91 a8 28 00
	00		 mov	 DWORD PTR [ecx+10408], edx

; 323  : 	lpUser->BMQuest_kill = aRecv->BMQuest_kill;

  00037	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0003a	89 91 ac 28 00
	00		 mov	 DWORD PTR [ecx+10412], edx

; 324  : 	lpUser->BMQuest_start = aRecv->BMQuest_start;

  00040	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00043	89 91 b0 28 00
	00		 mov	 DWORD PTR [ecx+10416], edx

; 325  : 	lpUser->BMDamageReflect = aRecv->BMDamageReflect;

  00049	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0004c	89 91 b4 28 00
	00		 mov	 DWORD PTR [ecx+10420], edx

; 326  : 	lpUser->BMDamage = aRecv->BMDamage;

  00052	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00055	89 91 b8 28 00
	00		 mov	 DWORD PTR [ecx+10424], edx

; 327  : 	lpUser->BMDefense = aRecv->BMDefense;

  0005b	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  0005e	89 91 bc 28 00
	00		 mov	 DWORD PTR [ecx+10428], edx

; 328  : 	lpUser->BMCriticalDamage = aRecv->BMCriticalDamage;

  00064	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00067	89 91 c0 28 00
	00		 mov	 DWORD PTR [ecx+10432], edx

; 329  : 	lpUser->BMExcelentDamage = aRecv->BMExcelentDamage;

  0006d	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00070	89 91 c4 28 00
	00		 mov	 DWORD PTR [ecx+10436], edx

; 330  : 	lpUser->BMLife = aRecv->BMLife;

  00076	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00079	89 81 c8 28 00
	00		 mov	 DWORD PTR [ecx+10440], eax
$LN3@DG_BMQuest:

; 331  : }

  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?DG_BMQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_BMQUEST_LOAD@@@Z ENDP ; CZtGDManager::DG_BMQuestLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_BMQuestSave@CZtGDManager@@QAEXH@Z		; CZtGDManager::GD_BMQuestSave
; Function compile flags: /Ogtp
;	COMDAT ?GD_BMQuestSave@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -56						; size = 52
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_BMQuestSave@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_BMQuestSave, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 335  : 	if(!OBJMAX_RANGE(aIndex))

  00013	85 c0		 test	 eax, eax
  00015	0f 88 9e 00 00
	00		 js	 $LN2@GD_BMQuest
  0001b	33 c9		 xor	 ecx, ecx
  0001d	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00022	0f 9e c1	 setle	 cl
  00025	85 c9		 test	 ecx, ecx
  00027	0f 84 8c 00 00
	00		 je	 $LN2@GD_BMQuest

; 336  : 	{
; 337  : 		return;
; 338  : 	}
; 339  : 
; 340  : 	PMSG_REQ_BMQUEST_SAVE pMsg;
; 341  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x05, sizeof(pMsg));
; 342  : 
; 343  : 	LPOBJ lpUser = &gObj[aIndex];

  0002d	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00033	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00039	c7 45 c8 c1 34
	ea 05		 mov	 DWORD PTR _pMsg$[ebp], 99235009 ; 05ea34c1H

; 344  : 
; 345  : 	pMsg.Name[10] = 0;

  00040	c6 45 d6 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 346  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00044	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00047	89 4d cc	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  0004a	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  0004d	89 55 d0	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00050	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  00054	66 89 4d d4	 mov	 WORD PTR _pMsg$[ebp+12], cx

; 347  : 
; 348  : 	pMsg.BMQuest_num = lpUser->BMQuest_num;

  00058	8b 90 a8 28 00
	00		 mov	 edx, DWORD PTR [eax+10408]
  0005e	89 55 d8	 mov	 DWORD PTR _pMsg$[ebp+16], edx

; 349  : 	pMsg.BMQuest_kill = lpUser->BMQuest_kill;

  00061	8b 88 ac 28 00
	00		 mov	 ecx, DWORD PTR [eax+10412]
  00067	89 4d dc	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 350  : 	pMsg.BMQuest_start = lpUser->BMQuest_start;

  0006a	8b 90 b0 28 00
	00		 mov	 edx, DWORD PTR [eax+10416]
  00070	89 55 e0	 mov	 DWORD PTR _pMsg$[ebp+24], edx

; 351  : 	pMsg.BMDamageReflect = lpUser->BMDamageReflect;

  00073	8b 88 b4 28 00
	00		 mov	 ecx, DWORD PTR [eax+10420]
  00079	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 352  : 	pMsg.BMDamage = lpUser->BMDamage;

  0007c	8b 90 b8 28 00
	00		 mov	 edx, DWORD PTR [eax+10424]
  00082	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+32], edx

; 353  : 	pMsg.BMDefense = lpUser->BMDefense;

  00085	8b 88 bc 28 00
	00		 mov	 ecx, DWORD PTR [eax+10428]
  0008b	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+36], ecx

; 354  : 	pMsg.BMCriticalDamage = lpUser->BMCriticalDamage;

  0008e	8b 90 c0 28 00
	00		 mov	 edx, DWORD PTR [eax+10432]
  00094	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+40], edx

; 355  : 	pMsg.BMExcelentDamage = lpUser->BMExcelentDamage;

  00097	8b 88 c4 28 00
	00		 mov	 ecx, DWORD PTR [eax+10436]
  0009d	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+44], ecx

; 356  : 	pMsg.BMLife = lpUser->BMLife;

  000a0	8b 90 c8 28 00
	00		 mov	 edx, DWORD PTR [eax+10440]

; 357  : 
; 358  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  000a6	6a 34		 push	 52			; 00000034H
  000a8	8d 45 c8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000ab	50		 push	 eax
  000ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000b1	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+48], edx
  000b4	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_BMQuest:

; 359  : }

  000b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bc	33 cd		 xor	 ecx, ebp
  000be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 04 00	 ret	 4
?GD_BMQuestSave@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_BMQuestSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_MonsterQuestLoad@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_MonsterQuestLoad
; Function compile flags: /Ogtp
;	COMDAT ?GD_MonsterQuestLoad@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_MonsterQuestLoad@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_MonsterQuestLoad, COMDAT
; _this$ = ecx

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 364  : 	LPOBJ lpUser = &gObj[aIndex];

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 365  : 	PMSG_REQ_MONSTERQUEST_LOAD pMsg;
; 366  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x06, sizeof(pMsg));
; 367  : 	pMsg.aIndex = aIndex;

  00021	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00024	c7 45 e8 c1 14
	ea 06		 mov	 DWORD PTR _pMsg$[ebp], 116004033 ; 06ea14c1H

; 368  : 	pMsg.Name[10] = 0;

  0002b	c6 45 fa 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 369  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  0002f	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00032	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00035	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]

; 370  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00038	6a 14		 push	 20			; 00000014H
  0003a	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0003d	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00040	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]
  00044	51		 push	 ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004a	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+16], ax
  0004e	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 371  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?GD_MonsterQuestLoad@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_MonsterQuestLoad
_TEXT	ENDS
PUBLIC	?DG_MonsterQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_MONSTERQUEST_LOAD@@@Z ; CZtGDManager::DG_MonsterQuestLoad
EXTRN	?GCConnectUser@MonsterQuest@@QAEXH@Z:PROC	; MonsterQuest::GCConnectUser
EXTRN	?gMonsterQuest@@3VMonsterQuest@@A:BYTE		; gMonsterQuest
; Function compile flags: /Ogtp
;	COMDAT ?DG_MonsterQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_MONSTERQUEST_LOAD@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DG_MonsterQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_MONSTERQUEST_LOAD@@@Z PROC ; CZtGDManager::DG_MonsterQuestLoad, COMDAT
; _this$ = ecx

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 375  : 	if(!aRecv->bResult)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00006	80 79 08 00	 cmp	 BYTE PTR [ecx+8], 0
  0000a	74 69		 je	 SHORT $LN3@DG_Monster

; 376  : 	{
; 377  : 		return;
; 378  : 	}
; 379  : 
; 380  : 	int aIndex = aRecv->aIndex;

  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 381  : 
; 382  : 	if(!OBJMAX_RANGE(aIndex))

  0000f	85 d2		 test	 edx, edx
  00011	78 62		 js	 SHORT $LN3@DG_Monster
  00013	33 c0		 xor	 eax, eax
  00015	81 fa 97 3a 00
	00		 cmp	 edx, 14999		; 00003a97H
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	74 53		 je	 SHORT $LN3@DG_Monster

; 383  : 	{
; 384  : 		return;
; 385  : 	}
; 386  : 
; 387  : 	LPOBJ lpUser = &gObj[aIndex];

  00022	8b c2		 mov	 eax, edx
  00024	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	56		 push	 esi

; 388  : 
; 389  : 	lpUser->m_MonsterQuest.QuestNumber = aRecv->QuestNum;

  00031	66 8b 71 0a	 mov	 si, WORD PTR [ecx+10]
  00035	66 89 b0 28 28
	00 00		 mov	 WORD PTR [eax+10280], si

; 390  : 	lpUser->m_MonsterQuest.KillCount[0] = aRecv->QuestKill_1;

  0003c	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  0003f	89 b0 2c 28 00
	00		 mov	 DWORD PTR [eax+10284], esi

; 391  : 	lpUser->m_MonsterQuest.KillCount[1] = aRecv->QuestKill_2;

  00045	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  00048	89 b0 30 28 00
	00		 mov	 DWORD PTR [eax+10288], esi

; 392  : 	lpUser->m_MonsterQuest.KillCount[2] = aRecv->QuestKill_3;

  0004e	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  00051	89 b0 34 28 00
	00		 mov	 DWORD PTR [eax+10292], esi

; 393  : 	lpUser->m_MonsterQuest.KillCount[3] = aRecv->QuestKill_4;

  00057	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0005a	89 b0 38 28 00
	00		 mov	 DWORD PTR [eax+10296], esi

; 394  : 	lpUser->m_MonsterQuest.KillCount[4] = aRecv->QuestKill_5;

  00060	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00063	89 88 3c 28 00
	00		 mov	 DWORD PTR [eax+10300], ecx

; 395  : 
; 396  : 	gMonsterQuest.GCConnectUser(aIndex);

  00069	52		 push	 edx
  0006a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMonsterQuest@@3VMonsterQuest@@A ; gMonsterQuest
  0006f	e8 00 00 00 00	 call	 ?GCConnectUser@MonsterQuest@@QAEXH@Z ; MonsterQuest::GCConnectUser
  00074	5e		 pop	 esi
$LN3@DG_Monster:

; 397  : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?DG_MonsterQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_MONSTERQUEST_LOAD@@@Z ENDP ; CZtGDManager::DG_MonsterQuestLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_MonsterQuestSave@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_MonsterQuestSave
; Function compile flags: /Ogtp
;	COMDAT ?GD_MonsterQuestSave@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_MonsterQuestSave@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_MonsterQuestSave, COMDAT
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 401  : 	if(!OBJMAX_RANGE(aIndex))

  00013	85 c0		 test	 eax, eax
  00015	0f 88 81 00 00
	00		 js	 $LN2@GD_Monster@2
  0001b	33 c9		 xor	 ecx, ecx
  0001d	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00022	0f 9e c1	 setle	 cl
  00025	85 c9		 test	 ecx, ecx
  00027	74 73		 je	 SHORT $LN2@GD_Monster@2

; 402  : 	{
; 403  : 		return;
; 404  : 	}
; 405  : 
; 406  : 	PMSG_REQ_MONSTERQUEST_SAVE pMsg;
; 407  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x07, sizeof(pMsg));
; 408  : 
; 409  : 	LPOBJ lpUser = &gObj[aIndex];

  00029	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00035	c7 45 d4 c1 28
	ea 07		 mov	 DWORD PTR _pMsg$[ebp], 132786369 ; 07ea28c1H

; 410  : 
; 411  : 	pMsg.Name[10] = 0;

  0003c	c6 45 e2 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 412  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00040	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00043	89 4d d8	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00046	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00049	89 55 dc	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  0004c	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  00050	66 89 4d e0	 mov	 WORD PTR _pMsg$[ebp+12], cx

; 413  : 
; 414  : 	pMsg.QuestNum = lpUser->m_MonsterQuest.QuestNumber;

  00054	66 8b 90 28 28
	00 00		 mov	 dx, WORD PTR [eax+10280]
  0005b	66 89 55 e4	 mov	 WORD PTR _pMsg$[ebp+16], dx

; 415  : 	pMsg.QuestKill_1 = lpUser->m_MonsterQuest.KillCount[0];

  0005f	8b 88 2c 28 00
	00		 mov	 ecx, DWORD PTR [eax+10284]
  00065	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 416  : 	pMsg.QuestKill_2 = lpUser->m_MonsterQuest.KillCount[1];

  00068	8b 90 30 28 00
	00		 mov	 edx, DWORD PTR [eax+10288]
  0006e	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+24], edx

; 417  : 	pMsg.QuestKill_3 = lpUser->m_MonsterQuest.KillCount[2];

  00071	8b 88 34 28 00
	00		 mov	 ecx, DWORD PTR [eax+10292]
  00077	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 418  : 	pMsg.QuestKill_4 = lpUser->m_MonsterQuest.KillCount[3];

  0007a	8b 90 38 28 00
	00		 mov	 edx, DWORD PTR [eax+10296]

; 419  : 	pMsg.QuestKill_5 = lpUser->m_MonsterQuest.KillCount[4];
; 420  : 
; 421  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00080	6a 28		 push	 40			; 00000028H
  00082	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00085	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+32], edx
  00088	8b 80 3c 28 00
	00		 mov	 eax, DWORD PTR [eax+10300]
  0008e	51		 push	 ecx
  0008f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00094	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+36], eax
  00097	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_Monster@2:

; 422  : }

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009f	33 cd		 xor	 ecx, ebp
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
?GD_MonsterQuestSave@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_MonsterQuestSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_RageSystemLoad@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_RageSystemLoad
; Function compile flags: /Ogtp
;	COMDAT ?GD_RageSystemLoad@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_RageSystemLoad@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_RageSystemLoad, COMDAT
; _this$ = ecx

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 427  : 	LPOBJ lpUser = &gObj[aIndex];

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 428  : 	PMSG_REQ_RAGESYSTEM_LOAD pMsg;
; 429  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x08, sizeof(pMsg));
; 430  : 	pMsg.aIndex = aIndex;

  00021	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 431  : 
; 432  : 	pMsg.AccountID[10] = 0;

  00024	32 c9		 xor	 cl, cl
  00026	88 4d ee	 mov	 BYTE PTR _pMsg$[ebp+18], cl
  00029	c7 45 dc c1 20
	ea 08		 mov	 DWORD PTR _pMsg$[ebp], 149561537 ; 08ea20c1H

; 433  : 	memcpy(pMsg.AccountID, lpUser->AccountID, sizeof(pMsg.AccountID)-1);

  00030	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00033	89 55 e4	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00036	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00039	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  0003c	66 8b 50 74	 mov	 dx, WORD PTR [eax+116]

; 434  : 
; 435  : 	pMsg.Name[10] = 0;

  00040	88 4d f9	 mov	 BYTE PTR _pMsg$[ebp+29], cl
  00043	66 89 55 ec	 mov	 WORD PTR _pMsg$[ebp+16], dx

; 436  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00047	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  0004a	89 4d ef	 mov	 DWORD PTR _pMsg$[ebp+19], ecx
  0004d	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]

; 437  : 
; 438  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00050	6a 20		 push	 32			; 00000020H
  00052	8d 4d dc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00055	89 55 f3	 mov	 DWORD PTR _pMsg$[ebp+23], edx
  00058	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]
  0005c	51		 push	 ecx
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00062	66 89 45 f7	 mov	 WORD PTR _pMsg$[ebp+27], ax
  00066	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 439  : }

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
?GD_RageSystemLoad@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_RageSystemLoad
_TEXT	ENDS
PUBLIC	?DG_RageSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_RAGESYSTEM_LOAD@@@Z ; CZtGDManager::DG_RageSystemLoad
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?SendUser@cSystemOfRage@@QAEXH@Z:PROC		; cSystemOfRage::SendUser
EXTRN	?ConfigSend@cSystemOfRage@@QAEXH@Z:PROC		; cSystemOfRage::ConfigSend
EXTRN	?gSystemOfRage@@3VcSystemOfRage@@A:BYTE		; gSystemOfRage
; Function compile flags: /Ogtp
;	COMDAT ?DG_RageSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_RAGESYSTEM_LOAD@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DG_RageSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_RAGESYSTEM_LOAD@@@Z PROC ; CZtGDManager::DG_RageSystemLoad, COMDAT
; _this$ = ecx

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 443  : 	int aIndex = aRecv->aIndex;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00006	56		 push	 esi
  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]

; 444  : 
; 445  : 	if(!OBJMAX_RANGE(aIndex))

  0000a	85 f6		 test	 esi, esi
  0000c	0f 88 c7 01 00
	00		 js	 $LN3@DG_RageSys
  00012	33 c0		 xor	 eax, eax
  00014	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 b4 01 00
	00		 je	 $LN3@DG_RageSys

; 446  : 	{
; 447  : 		return;
; 448  : 	}
; 449  : 
; 450  : 	if(!aRecv->bResult)

  00025	80 79 08 00	 cmp	 BYTE PTR [ecx+8], 0
  00029	0f 84 aa 01 00
	00		 je	 $LN3@DG_RageSys

; 451  : 	{
; 452  : 		return;
; 453  : 	}
; 454  : 
; 455  : 	//gSystemOfRage.NewDBLoad(aIndex,aRecv->btRage);
; 456  : 
; 457  : 	gSystemOfRage.rUser[aIndex].LoadInfo = 1;

  0002f	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00032	c1 e0 05	 shl	 eax, 5
  00035	c7 80 30 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+48], 1

; 458  : 
; 459  : 	gSystemOfRage.rUser[aIndex].rLevel = aRecv->rLevel;

  0003f	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  00043	89 90 34 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+52], edx

; 460  : 	gSystemOfRage.rUser[aIndex].rPoints = aRecv->rPoints;

  00049	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  0004d	89 90 38 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+56], edx

; 461  : 	gSystemOfRage.rUser[aIndex].rExperience = aRecv->rExperience;

  00053	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00056	89 90 3c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+60], edx

; 462  : 	gSystemOfRage.rUser[aIndex].Damage = aRecv->Damage;

  0005c	0f b6 51 14	 movzx	 edx, BYTE PTR [ecx+20]
  00060	89 90 44 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+68], edx

; 463  : 	gSystemOfRage.rUser[aIndex].FreePoints = aRecv->FreePoints;

  00066	0f b6 51 15	 movzx	 edx, BYTE PTR [ecx+21]
  0006a	89 90 48 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+72], edx

; 464  : 	gSystemOfRage.rUser[aIndex].SummonPet = aRecv->SummonPet;

  00070	0f b6 51 16	 movzx	 edx, BYTE PTR [ecx+22]
  00074	89 90 4c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+76], edx

; 465  : 	gSystemOfRage.rUser[aIndex].WingsDamagePlus = aRecv->WingsDamagePlus;

  0007a	0f b6 51 17	 movzx	 edx, BYTE PTR [ecx+23]
  0007e	89 90 50 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+80], edx

; 466  : 	gSystemOfRage.rUser[aIndex].FinalMana = aRecv->FinalMana;

  00084	0f b6 51 18	 movzx	 edx, BYTE PTR [ecx+24]
  00088	89 90 54 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+84], edx

; 467  : 	gSystemOfRage.rUser[aIndex].IgnoreDefence = aRecv->IgnoreDefence;

  0008e	0f b6 51 19	 movzx	 edx, BYTE PTR [ecx+25]
  00092	89 90 58 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+88], edx

; 468  : 	gSystemOfRage.rUser[aIndex].ResetLevel = aRecv->ResetLevel;

  00098	0f b6 51 1a	 movzx	 edx, BYTE PTR [ecx+26]
  0009c	89 90 5c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+92], edx

; 469  : 	gSystemOfRage.rUser[aIndex].Teleport = aRecv->Teleport;

  000a2	0f b6 51 1b	 movzx	 edx, BYTE PTR [ecx+27]
  000a6	89 90 60 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+96], edx

; 470  : 	gSystemOfRage.rUser[aIndex].CriticalDamageRate = aRecv->CriticalDamageRate;

  000ac	0f b6 51 1c	 movzx	 edx, BYTE PTR [ecx+28]
  000b0	89 90 64 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+100], edx

; 471  : 	gSystemOfRage.rUser[aIndex].AbsordDamage = aRecv->AbsordDamage;

  000b6	0f b6 51 1d	 movzx	 edx, BYTE PTR [ecx+29]
  000ba	89 90 68 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+104], edx

; 472  : 	gSystemOfRage.rUser[aIndex].PetDamageBonus = aRecv->PetDamageBonus;

  000c0	0f b6 51 1e	 movzx	 edx, BYTE PTR [ecx+30]
  000c4	89 90 6c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+108], edx

; 473  : 	gSystemOfRage.rUser[aIndex].FinalLife = aRecv->FinalLife;

  000ca	0f b6 51 1f	 movzx	 edx, BYTE PTR [ecx+31]
  000ce	89 90 70 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+112], edx

; 474  : 	gSystemOfRage.rUser[aIndex].Strength = aRecv->Strength;

  000d4	0f b6 51 20	 movzx	 edx, BYTE PTR [ecx+32]
  000d8	89 90 74 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+116], edx

; 475  : 	gSystemOfRage.rUser[aIndex].DefenceRate = aRecv->DefenceRate;

  000de	0f b6 51 21	 movzx	 edx, BYTE PTR [ecx+33]
  000e2	89 90 78 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+120], edx

; 476  : 	gSystemOfRage.rUser[aIndex].FireDamage = aRecv->FireDamage;

  000e8	0f b6 51 22	 movzx	 edx, BYTE PTR [ecx+34]
  000ec	89 90 7c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+124], edx

; 477  : 	gSystemOfRage.rUser[aIndex].Energy = aRecv->Energy;

  000f2	0f b6 51 23	 movzx	 edx, BYTE PTR [ecx+35]
  000f6	89 90 80 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+128], edx

; 478  : 	gSystemOfRage.rUser[aIndex].Agility = aRecv->Agility;

  000fc	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  00100	89 90 84 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+132], edx

; 479  : 	gSystemOfRage.rUser[aIndex].DoubleDamage = aRecv->DoubleDamage;

  00106	0f b6 51 25	 movzx	 edx, BYTE PTR [ecx+37]
  0010a	89 90 88 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+136], edx

; 480  : 	gSystemOfRage.rUser[aIndex].FinalSD = aRecv->FinalSD;

  00110	0f b6 51 26	 movzx	 edx, BYTE PTR [ecx+38]
  00114	89 90 8c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+140], edx

; 481  : 	gSystemOfRage.rUser[aIndex].FinalDefence = aRecv->FinalDefence;

  0011a	0f b6 51 27	 movzx	 edx, BYTE PTR [ecx+39]
  0011e	89 90 90 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+144], edx

; 482  : 	gSystemOfRage.rUser[aIndex].ZenDrop = aRecv->ZenDrop;

  00124	0f b6 51 28	 movzx	 edx, BYTE PTR [ecx+40]
  00128	89 90 94 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+148], edx

; 483  : 	gSystemOfRage.rUser[aIndex].GuildBonus = aRecv->GuildBonus;

  0012e	0f b6 51 29	 movzx	 edx, BYTE PTR [ecx+41]
  00132	89 90 98 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+152], edx

; 484  : 	gSystemOfRage.rUser[aIndex].ReflectDamage = aRecv->ReflectDamage;

  00138	0f b6 51 2a	 movzx	 edx, BYTE PTR [ecx+42]
  0013c	89 90 9c 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+156], edx

; 485  : 	gSystemOfRage.rUser[aIndex].ExellentDamageRate = aRecv->ExellentDamageRate;

  00142	0f b6 51 2b	 movzx	 edx, BYTE PTR [ecx+43]
  00146	89 90 a0 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+160], edx

; 486  : 	gSystemOfRage.rUser[aIndex].PvPBonusPlus = aRecv->PvPBonusPlus;

  0014c	0f b6 51 2c	 movzx	 edx, BYTE PTR [ecx+44]
  00150	89 90 a4 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+164], edx

; 487  : 	gSystemOfRage.rUser[aIndex].MinDefence = aRecv->MinDefence;

  00156	0f b6 51 2d	 movzx	 edx, BYTE PTR [ecx+45]
  0015a	89 90 a8 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+168], edx

; 488  : 	gSystemOfRage.rUser[aIndex].Experience = aRecv->Experience;

  00160	0f b6 51 2e	 movzx	 edx, BYTE PTR [ecx+46]
  00164	89 90 ac 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+172], edx

; 489  : 	gSystemOfRage.rUser[aIndex].StartSD = aRecv->StartSD;

  0016a	0f b6 51 2f	 movzx	 edx, BYTE PTR [ecx+47]
  0016e	89 90 b0 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+176], edx

; 490  : 	gSystemOfRage.rUser[aIndex].PartyBonus = aRecv->PartyBonus;

  00174	0f b6 51 30	 movzx	 edx, BYTE PTR [ecx+48]
  00178	89 90 b4 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+180], edx

; 491  : 	gSystemOfRage.rUser[aIndex].IceDamage = aRecv->IceDamage;

  0017e	0f b6 51 31	 movzx	 edx, BYTE PTR [ecx+49]
  00182	89 90 b8 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+184], edx

; 492  : 	gSystemOfRage.rUser[aIndex].DistanceAttack = aRecv->DistanceAttack;

  00188	0f b6 51 32	 movzx	 edx, BYTE PTR [ecx+50]
  0018c	89 90 bc 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+188], edx

; 493  : 	gSystemOfRage.rUser[aIndex].AttackRate = aRecv->AttackRate;

  00192	0f b6 51 33	 movzx	 edx, BYTE PTR [ecx+51]
  00196	89 90 c0 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+192], edx

; 494  : 	gSystemOfRage.rUser[aIndex].WeaponBonus = aRecv->WeaponBonus;

  0019c	0f b6 51 34	 movzx	 edx, BYTE PTR [ecx+52]
  001a0	89 90 c4 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+196], edx

; 495  : 	gSystemOfRage.rUser[aIndex].ExellentDamage = aRecv->ExellentDamage;

  001a6	0f b6 51 35	 movzx	 edx, BYTE PTR [ecx+53]
  001aa	89 90 c8 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+200], edx

; 496  : 	gSystemOfRage.rUser[aIndex].CriticalDamage = aRecv->CriticalDamage;

  001b0	0f b6 49 36	 movzx	 ecx, BYTE PTR [ecx+54]
  001b4	89 88 cc 00 00
	00		 mov	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+204], ecx

; 497  : 
; 498  : 	gSystemOfRage.ConfigSend(aIndex);

  001ba	56		 push	 esi
  001bb	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  001c0	e8 00 00 00 00	 call	 ?ConfigSend@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::ConfigSend

; 499  : 	gSystemOfRage.SendUser(aIndex);

  001c5	56		 push	 esi
  001c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  001cb	e8 00 00 00 00	 call	 ?SendUser@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::SendUser

; 500  : 	gObjCalCharacter(aIndex);

  001d0	56		 push	 esi
  001d1	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  001d6	83 c4 04	 add	 esp, 4
$LN3@DG_RageSys:
  001d9	5e		 pop	 esi

; 501  : }

  001da	5d		 pop	 ebp
  001db	c2 04 00	 ret	 4
?DG_RageSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_RAGESYSTEM_LOAD@@@Z ENDP ; CZtGDManager::DG_RageSystemLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_RageSystemSave@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_RageSystemSave
; Function compile flags: /Ogtp
;	COMDAT ?GD_RageSystemSave@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_RageSystemSave@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_RageSystemSave, COMDAT
; _this$ = ecx

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 505  : 	if(!gSystemOfRage.rUser[aIndex].LoadInfo)

  00013	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00016	c1 e0 05	 shl	 eax, 5
  00019	33 d2		 xor	 edx, edx
  0001b	39 90 30 00 00
	00		 cmp	 DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+48], edx
  00021	0f 84 cf 01 00
	00		 je	 $LN2@GD_RageSys@2

; 506  : 	{
; 507  : 		return;
; 508  : 	}
; 509  : 
; 510  : 	LPOBJ lpUser = &gObj[aIndex];

  00027	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0002d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 511  : 	PMSG_REQ_RAGESYSTEM_SAVE pMsg;
; 512  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x09, sizeof(pMsg));
; 513  : 
; 514  : 	pMsg.Name[10] = 0;

  00033	88 55 cd	 mov	 BYTE PTR _pMsg$[ebp+25], dl
  00036	c7 45 b4 c1 48
	ea 09		 mov	 DWORD PTR _pMsg$[ebp], 166348993 ; 09ea48c1H
  0003d	56		 push	 esi

; 515  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  0003e	8b 71 77	 mov	 esi, DWORD PTR [ecx+119]
  00041	89 75 c3	 mov	 DWORD PTR _pMsg$[ebp+15], esi
  00044	8b 71 7b	 mov	 esi, DWORD PTR [ecx+123]
  00047	89 75 c7	 mov	 DWORD PTR _pMsg$[ebp+19], esi
  0004a	66 8b 71 7f	 mov	 si, WORD PTR [ecx+127]

; 516  : 	pMsg.AccountID[10] = 0;

  0004e	88 55 c2	 mov	 BYTE PTR _pMsg$[ebp+14], dl
  00051	66 89 75 cb	 mov	 WORD PTR _pMsg$[ebp+23], si

; 517  : 	memcpy(pMsg.AccountID, lpUser->AccountID, sizeof(pMsg.AccountID)-1);

  00055	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00058	89 55 b8	 mov	 DWORD PTR _pMsg$[ebp+4], edx
  0005b	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0005e	89 55 bc	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00061	0f b7 49 74	 movzx	 ecx, WORD PTR [ecx+116]

; 518  : 
; 519  : 	//gSystemOfRage.NewDBSave(aIndex, pMsg.btRage);
; 520  : 
; 521  : 	pMsg.rLevel = gSystemOfRage.rUser[aIndex].rLevel;

  00065	66 8b 90 34 00
	00 00		 mov	 dx, WORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+52]
  0006c	66 89 4d c0	 mov	 WORD PTR _pMsg$[ebp+12], cx

; 522  : 	pMsg.rPoints = gSystemOfRage.rUser[aIndex].rPoints;

  00070	0f b7 88 38 00
	00 00		 movzx	 ecx, WORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+56]
  00077	66 89 55 ce	 mov	 WORD PTR _pMsg$[ebp+26], dx

; 523  : 	pMsg.rExperience = gSystemOfRage.rUser[aIndex].rExperience;

  0007b	8b 90 3c 00 00
	00		 mov	 edx, DWORD PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+60]
  00081	66 89 4d d0	 mov	 WORD PTR _pMsg$[ebp+28], cx

; 524  : 	pMsg.Damage = gSystemOfRage.rUser[aIndex].Damage;

  00085	0f b6 88 44 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+68]
  0008c	89 55 d4	 mov	 DWORD PTR _pMsg$[ebp+32], edx

; 525  : 	pMsg.FreePoints = gSystemOfRage.rUser[aIndex].FreePoints;

  0008f	0f b6 90 48 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+72]
  00096	88 4d d8	 mov	 BYTE PTR _pMsg$[ebp+36], cl

; 526  : 	pMsg.SummonPet = gSystemOfRage.rUser[aIndex].SummonPet;

  00099	0f b6 88 4c 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+76]
  000a0	88 55 d9	 mov	 BYTE PTR _pMsg$[ebp+37], dl

; 527  : 	pMsg.WingsDamagePlus = gSystemOfRage.rUser[aIndex].WingsDamagePlus;

  000a3	0f b6 90 50 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+80]
  000aa	88 4d da	 mov	 BYTE PTR _pMsg$[ebp+38], cl

; 528  : 	pMsg.FinalMana = gSystemOfRage.rUser[aIndex].FinalMana;

  000ad	0f b6 88 54 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+84]
  000b4	88 55 db	 mov	 BYTE PTR _pMsg$[ebp+39], dl

; 529  : 	pMsg.IgnoreDefence = gSystemOfRage.rUser[aIndex].IgnoreDefence;

  000b7	0f b6 90 58 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+88]
  000be	88 4d dc	 mov	 BYTE PTR _pMsg$[ebp+40], cl

; 530  : 	pMsg.ResetLevel = gSystemOfRage.rUser[aIndex].ResetLevel;

  000c1	0f b6 88 5c 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+92]
  000c8	88 55 dd	 mov	 BYTE PTR _pMsg$[ebp+41], dl

; 531  : 	pMsg.Teleport = gSystemOfRage.rUser[aIndex].Teleport;

  000cb	0f b6 90 60 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+96]
  000d2	88 4d de	 mov	 BYTE PTR _pMsg$[ebp+42], cl

; 532  : 	pMsg.CriticalDamageRate = gSystemOfRage.rUser[aIndex].CriticalDamageRate;

  000d5	0f b6 88 64 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+100]
  000dc	88 55 df	 mov	 BYTE PTR _pMsg$[ebp+43], dl

; 533  : 	pMsg.AbsordDamage = gSystemOfRage.rUser[aIndex].AbsordDamage;

  000df	0f b6 90 68 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+104]
  000e6	88 4d e0	 mov	 BYTE PTR _pMsg$[ebp+44], cl

; 534  : 	pMsg.PetDamageBonus = gSystemOfRage.rUser[aIndex].PetDamageBonus;

  000e9	0f b6 88 6c 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+108]
  000f0	88 55 e1	 mov	 BYTE PTR _pMsg$[ebp+45], dl

; 535  : 	pMsg.FinalLife = gSystemOfRage.rUser[aIndex].FinalLife;

  000f3	0f b6 90 70 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+112]
  000fa	88 4d e2	 mov	 BYTE PTR _pMsg$[ebp+46], cl

; 536  : 	pMsg.Strength = gSystemOfRage.rUser[aIndex].Strength;

  000fd	0f b6 88 74 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+116]
  00104	88 55 e3	 mov	 BYTE PTR _pMsg$[ebp+47], dl

; 537  : 	pMsg.DefenceRate = gSystemOfRage.rUser[aIndex].DefenceRate;

  00107	0f b6 90 78 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+120]
  0010e	88 4d e4	 mov	 BYTE PTR _pMsg$[ebp+48], cl

; 538  : 	pMsg.FireDamage = gSystemOfRage.rUser[aIndex].FireDamage;

  00111	0f b6 88 7c 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+124]
  00118	88 55 e5	 mov	 BYTE PTR _pMsg$[ebp+49], dl

; 539  : 	pMsg.Energy = gSystemOfRage.rUser[aIndex].Energy;

  0011b	0f b6 90 80 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+128]
  00122	88 4d e6	 mov	 BYTE PTR _pMsg$[ebp+50], cl

; 540  : 	pMsg.Agility = gSystemOfRage.rUser[aIndex].Agility;

  00125	0f b6 88 84 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+132]
  0012c	88 55 e7	 mov	 BYTE PTR _pMsg$[ebp+51], dl

; 541  : 	pMsg.DoubleDamage = gSystemOfRage.rUser[aIndex].DoubleDamage;

  0012f	0f b6 90 88 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+136]
  00136	88 4d e8	 mov	 BYTE PTR _pMsg$[ebp+52], cl

; 542  : 	pMsg.FinalSD = gSystemOfRage.rUser[aIndex].FinalSD;

  00139	0f b6 88 8c 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+140]
  00140	88 55 e9	 mov	 BYTE PTR _pMsg$[ebp+53], dl

; 543  : 	pMsg.FinalDefence = gSystemOfRage.rUser[aIndex].FinalDefence;

  00143	0f b6 90 90 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+144]
  0014a	88 4d ea	 mov	 BYTE PTR _pMsg$[ebp+54], cl

; 544  : 	pMsg.ZenDrop = gSystemOfRage.rUser[aIndex].ZenDrop;

  0014d	0f b6 88 94 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+148]
  00154	88 55 eb	 mov	 BYTE PTR _pMsg$[ebp+55], dl

; 545  : 	pMsg.GuildBonus = gSystemOfRage.rUser[aIndex].GuildBonus;

  00157	0f b6 90 98 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+152]
  0015e	88 4d ec	 mov	 BYTE PTR _pMsg$[ebp+56], cl

; 546  : 	pMsg.ReflectDamage = gSystemOfRage.rUser[aIndex].ReflectDamage;

  00161	0f b6 88 9c 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+156]
  00168	88 55 ed	 mov	 BYTE PTR _pMsg$[ebp+57], dl

; 547  : 	pMsg.ExellentDamageRate = gSystemOfRage.rUser[aIndex].ExellentDamageRate;

  0016b	0f b6 90 a0 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+160]
  00172	88 4d ee	 mov	 BYTE PTR _pMsg$[ebp+58], cl

; 548  : 	pMsg.PvPBonusPlus = gSystemOfRage.rUser[aIndex].PvPBonusPlus;

  00175	0f b6 88 a4 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+164]
  0017c	88 55 ef	 mov	 BYTE PTR _pMsg$[ebp+59], dl

; 549  : 	pMsg.MinDefence = gSystemOfRage.rUser[aIndex].MinDefence;

  0017f	0f b6 90 a8 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+168]
  00186	88 4d f0	 mov	 BYTE PTR _pMsg$[ebp+60], cl

; 550  : 	pMsg.Experience = gSystemOfRage.rUser[aIndex].Experience;

  00189	0f b6 88 ac 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+172]
  00190	88 55 f1	 mov	 BYTE PTR _pMsg$[ebp+61], dl

; 551  : 	pMsg.StartSD = gSystemOfRage.rUser[aIndex].StartSD;

  00193	0f b6 90 b0 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+176]
  0019a	88 4d f2	 mov	 BYTE PTR _pMsg$[ebp+62], cl

; 552  : 	pMsg.PartyBonus = gSystemOfRage.rUser[aIndex].PartyBonus;

  0019d	0f b6 88 b4 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+180]
  001a4	88 55 f3	 mov	 BYTE PTR _pMsg$[ebp+63], dl

; 553  : 	pMsg.IceDamage = gSystemOfRage.rUser[aIndex].IceDamage;

  001a7	0f b6 90 b8 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+184]
  001ae	88 4d f4	 mov	 BYTE PTR _pMsg$[ebp+64], cl

; 554  : 	pMsg.DistanceAttack = gSystemOfRage.rUser[aIndex].DistanceAttack;

  001b1	0f b6 88 bc 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+188]
  001b8	88 4d f6	 mov	 BYTE PTR _pMsg$[ebp+66], cl

; 555  : 	pMsg.AttackRate = gSystemOfRage.rUser[aIndex].AttackRate;
; 556  : 	pMsg.WeaponBonus = gSystemOfRage.rUser[aIndex].WeaponBonus;

  001bb	0f b6 88 c4 00
	00 00		 movzx	 ecx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+196]
  001c2	88 55 f5	 mov	 BYTE PTR _pMsg$[ebp+65], dl
  001c5	0f b6 90 c0 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+192]
  001cc	88 4d f8	 mov	 BYTE PTR _pMsg$[ebp+68], cl
  001cf	88 55 f7	 mov	 BYTE PTR _pMsg$[ebp+67], dl

; 557  : 	pMsg.ExellentDamage = gSystemOfRage.rUser[aIndex].ExellentDamage;

  001d2	0f b6 90 c8 00
	00 00		 movzx	 edx, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+200]

; 558  : 	pMsg.CriticalDamage = gSystemOfRage.rUser[aIndex].CriticalDamage;

  001d9	8a 80 cc 00 00
	00		 mov	 al, BYTE PTR ?gSystemOfRage@@3VcSystemOfRage@@A[eax+204]

; 559  : 
; 560  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  001df	6a 48		 push	 72			; 00000048H
  001e1	8d 4d b4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  001e4	51		 push	 ecx
  001e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  001ea	88 55 f9	 mov	 BYTE PTR _pMsg$[ebp+69], dl
  001ed	88 45 fa	 mov	 BYTE PTR _pMsg$[ebp+70], al
  001f0	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  001f5	5e		 pop	 esi
$LN2@GD_RageSys@2:

; 561  : }

  001f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f9	33 cd		 xor	 ecx, ebp
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	8b e5		 mov	 esp, ebp
  00202	5d		 pop	 ebp
  00203	c2 04 00	 ret	 4
?GD_RageSystemSave@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_RageSystemSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_CreateonBankLoad@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_CreateonBankLoad
; Function compile flags: /Ogtp
;	COMDAT ?GD_CreateonBankLoad@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_CreateonBankLoad@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_CreateonBankLoad, COMDAT
; _this$ = ecx

; 565  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 566  : 	LPOBJ lpUser = &gObj[aIndex];

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 567  : 	PMSG_REQ_CREATEON_LOAD pMsg;
; 568  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x0A, sizeof(pMsg));
; 569  : 	pMsg.aIndex = aIndex;

  00021	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00024	c7 45 e8 c1 14
	ea 0a		 mov	 DWORD PTR _pMsg$[ebp], 183112897 ; 0aea14c1H

; 570  : 
; 571  : 	pMsg.szName[10] = 0;

  0002b	c6 45 fa 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 572  : 	memcpy(pMsg.szName, lpUser->Name, sizeof(pMsg.szName)-1);

  0002f	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00032	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00035	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]

; 573  : 
; 574  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00038	6a 14		 push	 20			; 00000014H
  0003a	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0003d	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00040	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]
  00044	51		 push	 ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004a	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+16], ax
  0004e	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 575  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?GD_CreateonBankLoad@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_CreateonBankLoad
_TEXT	ENDS
PUBLIC	?DG_CreateonBankLoad@CZtGDManager@@QAEXPAUPMSG_ANS_CREATEON_LOAD@@@Z ; CZtGDManager::DG_CreateonBankLoad
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
; Function compile flags: /Ogtp
;	COMDAT ?DG_CreateonBankLoad@CZtGDManager@@QAEXPAUPMSG_ANS_CREATEON_LOAD@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DG_CreateonBankLoad@CZtGDManager@@QAEXPAUPMSG_ANS_CREATEON_LOAD@@@Z PROC ; CZtGDManager::DG_CreateonBankLoad, COMDAT
; _this$ = ecx

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 579  : 	int aIndex = aRecv->aIndex;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 580  : 
; 581  : 	if(!OBJMAX_RANGE(aIndex))

  00009	85 d2		 test	 edx, edx
  0000b	78 5e		 js	 SHORT $LN2@DG_Createo
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa 97 3a 00
	00		 cmp	 edx, 14999		; 00003a97H
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 4f		 je	 SHORT $LN2@DG_Createo

; 582  : 	{
; 583  : 		return;
; 584  : 	}
; 585  : 
; 586  : 	LPOBJ lpUser = &gObj[aIndex];

  0001c	8b c2		 mov	 eax, edx
  0001e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00024	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002a	56		 push	 esi

; 587  : 
; 588  : 	lpUser->CreateonBank = aRecv->iCreateon;

  0002b	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0002e	89 b0 f4 27 00
	00		 mov	 DWORD PTR [eax+10228], esi

; 589  : 
; 590  : 	lpUser->GuardianBank = aRecv->iGuardian;

  00034	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00037	89 b0 f8 27 00
	00		 mov	 DWORD PTR [eax+10232], esi

; 591  : 	lpUser->HarmonyBank = aRecv->iHarmony;

  0003d	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  00040	89 b0 fc 27 00
	00		 mov	 DWORD PTR [eax+10236], esi

; 592  : 	lpUser->LowStoneBank = aRecv->iLowStone;

  00046	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  00049	89 b0 00 28 00
	00		 mov	 DWORD PTR [eax+10240], esi

; 593  : 	lpUser->HighStoneBank = aRecv->iHighStone;

  0004f	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00052	89 b0 04 28 00
	00		 mov	 DWORD PTR [eax+10244], esi

; 594  : 	lpUser->GemStoneBank = aRecv->iGemStone;

  00058	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]

; 595  : 	//
; 596  : 
; 597  : 	ZtUserDataSend(aIndex);

  0005b	52		 push	 edx
  0005c	89 88 08 28 00
	00		 mov	 DWORD PTR [eax+10248], ecx
  00062	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  00067	83 c4 04	 add	 esp, 4
  0006a	5e		 pop	 esi
$LN2@DG_Createo:

; 598  : }

  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
?DG_CreateonBankLoad@CZtGDManager@@QAEXPAUPMSG_ANS_CREATEON_LOAD@@@Z ENDP ; CZtGDManager::DG_CreateonBankLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_CreateonBankSave@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_CreateonBankSave
; Function compile flags: /Ogtp
;	COMDAT ?GD_CreateonBankSave@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_CreateonBankSave@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_CreateonBankSave, COMDAT
; _this$ = ecx

; 601  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 602  : 	if(!OBJMAX_RANGE(aIndex))

  00013	85 c0		 test	 eax, eax
  00015	78 7f		 js	 SHORT $LN2@GD_Createo
  00017	33 c9		 xor	 ecx, ecx
  00019	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0001e	0f 9e c1	 setle	 cl
  00021	85 c9		 test	 ecx, ecx
  00023	74 71		 je	 SHORT $LN2@GD_Createo

; 603  : 	{
; 604  : 		return;
; 605  : 	}
; 606  : 
; 607  : 	LPOBJ lpUser = &gObj[aIndex];

  00025	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 608  : 
; 609  : 	PMSG_REQ_CREATEON_SAVE pMsg;
; 610  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x0B, sizeof(pMsg));

  00031	c7 45 d4 c1 28
	ea 0b		 mov	 DWORD PTR _pMsg$[ebp], 199895233 ; 0bea28c1H

; 611  : 
; 612  : 	pMsg.szName[10] = 0;

  00038	c6 45 e2 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 613  : 	memcpy(pMsg.szName, lpUser->Name, sizeof(pMsg.szName)-1);

  0003c	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  0003f	89 4d d8	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00042	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00045	89 55 dc	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00048	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  0004c	66 89 4d e0	 mov	 WORD PTR _pMsg$[ebp+12], cx

; 614  : 
; 615  : 	pMsg.iCreateon = lpUser->CreateonBank;

  00050	8b 90 f4 27 00
	00		 mov	 edx, DWORD PTR [eax+10228]
  00056	89 55 e4	 mov	 DWORD PTR _pMsg$[ebp+16], edx

; 616  : 
; 617  : 	pMsg.iGuardian = lpUser->GuardianBank;

  00059	8b 88 f8 27 00
	00		 mov	 ecx, DWORD PTR [eax+10232]
  0005f	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+20], ecx

; 618  : 	pMsg.iHarmony = lpUser->HarmonyBank;

  00062	8b 90 fc 27 00
	00		 mov	 edx, DWORD PTR [eax+10236]
  00068	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+24], edx

; 619  : 	pMsg.iLowStone = lpUser->LowStoneBank;

  0006b	8b 88 00 28 00
	00		 mov	 ecx, DWORD PTR [eax+10240]
  00071	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 620  : 	pMsg.iHighStone = lpUser->HighStoneBank;

  00074	8b 90 04 28 00
	00		 mov	 edx, DWORD PTR [eax+10244]

; 621  : 	pMsg.iGemStone = lpUser->GemStoneBank;
; 622  : 
; 623  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0007a	6a 28		 push	 40			; 00000028H
  0007c	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0007f	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+32], edx
  00082	8b 80 08 28 00
	00		 mov	 eax, DWORD PTR [eax+10248]
  00088	51		 push	 ecx
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0008e	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+36], eax
  00091	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_Createo:

; 624  : }

  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
?GD_CreateonBankSave@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_CreateonBankSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z		; CZtGDManager::GD_OfflineAfk
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
; Function compile flags: /Ogtp
;	COMDAT ?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 17
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_ConnectType$ = 12					; size = 1
_OfflineType$ = 16					; size = 1
?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z PROC		; CZtGDManager::GD_OfflineAfk, COMDAT
; _this$ = ecx

; 628  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]

; 629  : 	if(!g_ZtLicense.CheckUser(bassreflexive))

  00014	6a 35		 push	 53			; 00000035H
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001b	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00020	84 c0		 test	 al, al
  00022	74 69		 je	 SHORT $LN3@GD_Offline

; 630  : 	{
; 631  : 		return;
; 632  : 	}
; 633  : 
; 634  : 	if(!OBJMAX_RANGE(aIndex))

  00024	85 f6		 test	 esi, esi
  00026	78 65		 js	 SHORT $LN3@GD_Offline
  00028	33 c0		 xor	 eax, eax
  0002a	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00030	0f 9e c0	 setle	 al
  00033	85 c0		 test	 eax, eax
  00035	74 56		 je	 SHORT $LN3@GD_Offline

; 635  : 	{
; 636  : 		return;
; 637  : 	}
; 638  : 
; 639  : 	PMSG_REQ_OFFLINE_AFK pMsg = { 0 };

  00037	33 c0		 xor	 eax, eax

; 640  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x0F, sizeof(pMsg));
; 641  : 	pMsg.Name[10] = 0;
; 642  : 	memcpy(pMsg.Name, gObj[aIndex].Name, sizeof(pMsg.Name)-1);

  00039	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0003f	89 45 f5	 mov	 DWORD PTR _pMsg$[ebp+13], eax
  00042	89 45 e9	 mov	 DWORD PTR _pMsg$[ebp+1], eax
  00045	89 45 ed	 mov	 DWORD PTR _pMsg$[ebp+5], eax
  00048	89 45 f1	 mov	 DWORD PTR _pMsg$[ebp+9], eax
  0004b	88 45 f6	 mov	 BYTE PTR _pMsg$[ebp+14], al
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00053	8d 44 06 77	 lea	 eax, DWORD PTR [esi+eax+119]
  00057	c7 45 e8 c1 11
	ea 0f		 mov	 DWORD PTR _pMsg$[ebp], 266998209 ; 0fea11c1H
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00063	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 643  : 	pMsg.ConnectType = ConnectType;

  00066	8a 4d 0c	 mov	 cl, BYTE PTR _ConnectType$[ebp]
  00069	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  0006c	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]

; 644  : 	pMsg.OfflineType = OfflineType;

  00070	8a 55 10	 mov	 dl, BYTE PTR _OfflineType$[ebp]
  00073	66 89 45 f4	 mov	 WORD PTR _pMsg$[ebp+12], ax

; 645  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00077	6a 11		 push	 17			; 00000011H
  00079	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0007c	88 4d f7	 mov	 BYTE PTR _pMsg$[ebp+15], cl
  0007f	50		 push	 eax
  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00085	88 55 f8	 mov	 BYTE PTR _pMsg$[ebp+16], dl
  00088	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@GD_Offline:

; 646  : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	5e		 pop	 esi
  00093	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?GD_OfflineAfk@CZtGDManager@@QAEXHEE@Z ENDP		; CZtGDManager::GD_OfflineAfk
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_VoteBuffLoad@CZtGDManager@@QAEXH@Z		; CZtGDManager::GD_VoteBuffLoad
; Function compile flags: /Ogtp
;	COMDAT ?GD_VoteBuffLoad@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_VoteBuffLoad@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_VoteBuffLoad, COMDAT
; _this$ = ecx

; 650  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 651  : 	LPOBJ lpUser = &gObj[aIndex];

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 652  : 	PMSG_REQ_VOTEBUFF_LOAD pMsg;
; 653  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x10, sizeof(pMsg));
; 654  : 	pMsg.aIndex = aIndex;

  00021	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00024	c7 45 e8 c1 14
	ea 10		 mov	 DWORD PTR _pMsg$[ebp], 283776193 ; 10ea14c1H

; 655  : 
; 656  : 	pMsg.szName[10] = 0;

  0002b	c6 45 fa 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 657  : 	memcpy(pMsg.szName, lpUser->Name, sizeof(pMsg.szName)-1);

  0002f	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  00032	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00035	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]

; 658  : 
; 659  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00038	6a 14		 push	 20			; 00000014H
  0003a	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0003d	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00040	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]
  00044	51		 push	 ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004a	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+16], ax
  0004e	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 660  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?GD_VoteBuffLoad@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_VoteBuffLoad
_TEXT	ENDS
PUBLIC	?DG_VoteBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_VOTEBUFF_LOAD@@@Z ; CZtGDManager::DG_VoteBuffLoad
EXTRN	?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjApplyBuffEffectDuration
; Function compile flags: /Ogtp
;	COMDAT ?DG_VoteBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_VOTEBUFF_LOAD@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DG_VoteBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_VOTEBUFF_LOAD@@@Z PROC ; CZtGDManager::DG_VoteBuffLoad, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 664  : 	int aIndex = aRecv->aIndex;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 665  : 
; 666  : 	if(!OBJMAX_RANGE(aIndex))

  00009	85 c0		 test	 eax, eax
  0000b	78 6c		 js	 SHORT $LN1@DG_VoteBuf
  0000d	33 d2		 xor	 edx, edx
  0000f	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00014	0f 9e c2	 setle	 dl
  00017	85 d2		 test	 edx, edx
  00019	74 5e		 je	 SHORT $LN1@DG_VoteBuf

; 667  : 	{
; 668  : 		return;
; 669  : 	}
; 670  : 
; 671  : 	LPOBJ lpUser = &gObj[aIndex];

  0001b	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00021	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	56		 push	 esi
  00028	8b f0		 mov	 esi, eax

; 672  : 
; 673  : 	lpUser->MT_BuffTime = aRecv->MTBuffTime;

  0002a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002d	89 86 dc 2a 00
	00		 mov	 DWORD PTR [esi+10972], eax

; 674  : 	lpUser->QT_BuffTime = aRecv->QTBuffTime;

  00033	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00036	89 8e e0 2a 00
	00		 mov	 DWORD PTR [esi+10976], ecx

; 675  : 
; 676  : 	if(lpUser->MT_BuffTime > 0)

  0003c	85 c0		 test	 eax, eax
  0003e	7e 17		 jle	 SHORT $LN2@DG_VoteBuf

; 677  : 	{
; 678  : 		gObjApplyBuffEffectDuration(lpUser, AT_MMOTOP_BUFF, 0, 0, 0, 0, lpUser->MT_BuffTime);

  00040	50		 push	 eax
  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	6a 00		 push	 0
  00049	68 c2 00 00 00	 push	 194			; 000000c2H
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00054	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@DG_VoteBuf:

; 679  : 	}
; 680  : 
; 681  : 	if(lpUser->QT_BuffTime > 0)

  00057	8b 86 e0 2a 00
	00		 mov	 eax, DWORD PTR [esi+10976]
  0005d	85 c0		 test	 eax, eax
  0005f	7e 17		 jle	 SHORT $LN8@DG_VoteBuf

; 682  : 	{
; 683  : 		gObjApplyBuffEffectDuration(lpUser, AT_QTOP_BUFF, 0, 0, 0, 0, lpUser->QT_BuffTime);

  00061	50		 push	 eax
  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	6a 00		 push	 0
  00068	6a 00		 push	 0
  0006a	68 c3 00 00 00	 push	 195			; 000000c3H
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 ?gObjApplyBuffEffectDuration@@YAEPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjApplyBuffEffectDuration
  00075	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN8@DG_VoteBuf:
  00078	5e		 pop	 esi
$LN1@DG_VoteBuf:

; 684  : 	}
; 685  : }

  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?DG_VoteBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_VOTEBUFF_LOAD@@@Z ENDP ; CZtGDManager::DG_VoteBuffLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_VoteBuffSave@CZtGDManager@@QAEXH@Z		; CZtGDManager::GD_VoteBuffSave
; Function compile flags: /Ogtp
;	COMDAT ?GD_VoteBuffSave@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_VoteBuffSave@CZtGDManager@@QAEXH@Z PROC		; CZtGDManager::GD_VoteBuffSave, COMDAT
; _this$ = ecx

; 688  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 689  : 	if(!OBJMAX_RANGE(aIndex))

  00013	85 c0		 test	 eax, eax
  00015	78 5b		 js	 SHORT $LN2@GD_VoteBuf
  00017	33 c9		 xor	 ecx, ecx
  00019	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0001e	0f 9e c1	 setle	 cl
  00021	85 c9		 test	 ecx, ecx
  00023	74 4d		 je	 SHORT $LN2@GD_VoteBuf

; 690  : 	{
; 691  : 		return;
; 692  : 	}
; 693  : 
; 694  : 	LPOBJ lpUser = &gObj[aIndex];

  00025	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 695  : 
; 696  : 	PMSG_REQ_VOTEBUFF_SAVE pMsg;
; 697  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x11, sizeof(pMsg));

  00031	c7 45 e4 c1 18
	ea 11		 mov	 DWORD PTR _pMsg$[ebp], 300554433 ; 11ea18c1H

; 698  : 
; 699  : 	pMsg.szName[10] = 0;

  00038	c6 45 f2 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 700  : 	memcpy(pMsg.szName, lpUser->Name, sizeof(pMsg.szName)-1);

  0003c	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  0003f	89 4d e8	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00042	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  00045	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00048	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  0004c	66 89 4d f0	 mov	 WORD PTR _pMsg$[ebp+12], cx

; 701  : 
; 702  : 	pMsg.MTBuffTime = lpUser->MT_BuffTime;

  00050	8b 90 dc 2a 00
	00		 mov	 edx, DWORD PTR [eax+10972]

; 703  : 	pMsg.QTBuffTime = lpUser->QT_BuffTime;
; 704  : 
; 705  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  00056	6a 18		 push	 24			; 00000018H
  00058	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0005b	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+16], edx
  0005e	8b 80 e0 2a 00
	00		 mov	 eax, DWORD PTR [eax+10976]
  00064	51		 push	 ecx
  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0006a	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+20], eax
  0006d	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_VoteBuf:

; 706  : }

  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?GD_VoteBuffSave@CZtGDManager@@QAEXH@Z ENDP		; CZtGDManager::GD_VoteBuffSave
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_ZtQuestSystemLoad@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_ZtQuestSystemLoad
EXTRN	?g_ZtWinQuestSystem@@3VZtWinQuestSystem@@A:BYTE	; g_ZtWinQuestSystem
; Function compile flags: /Ogtp
;	COMDAT ?GD_ZtQuestSystemLoad@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_ZtQuestSystemLoad@CZtGDManager@@QAEXH@Z PROC	; CZtGDManager::GD_ZtQuestSystemLoad, COMDAT
; _this$ = ecx

; 710  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 711  : 	if(!g_ZtWinQuestSystem.Enable)

  00010	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtWinQuestSystem@@3VZtWinQuestSystem@@A, 0
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0001a	74 44		 je	 SHORT $LN2@GD_ZtQuest

; 712  : 	{
; 713  : 		return;
; 714  : 	}
; 715  : 
; 716  : 	LPOBJ lpUser = &gObj[aIndex];

  0001c	8b c1		 mov	 eax, ecx
  0001e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00024	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 717  : 	PMSG_REQ_ZtQuestSystem_LOAD pMsg;
; 718  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x14, sizeof(pMsg));
; 719  : 	pMsg.aIndex = aIndex;

  0002a	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  0002d	c7 45 e8 c1 14
	ea 14		 mov	 DWORD PTR _pMsg$[ebp], 350885057 ; 14ea14c1H

; 720  : 	pMsg.Name[10] = 0;

  00034	c6 45 fa 00	 mov	 BYTE PTR _pMsg$[ebp+18], 0

; 721  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00038	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  0003b	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  0003e	8b 48 7b	 mov	 ecx, DWORD PTR [eax+123]
  00041	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  00044	66 8b 40 7f	 mov	 ax, WORD PTR [eax+127]
  00048	ba 14 00 00 00	 mov	 edx, 20			; 00000014H

; 722  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  0004d	52		 push	 edx
  0004e	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00051	51		 push	 ecx
  00052	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00057	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+16], ax
  0005b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN2@GD_ZtQuest:

; 723  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	33 cd		 xor	 ecx, ebp
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?GD_ZtQuestSystemLoad@CZtGDManager@@QAEXH@Z ENDP	; CZtGDManager::GD_ZtQuestSystemLoad
_TEXT	ENDS
PUBLIC	?DG_ZtQuestSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZtQuestSystem_LOAD@@@Z ; CZtGDManager::DG_ZtQuestSystemLoad
EXTRN	?UserConnect@ZtWinQuestSystem@@QAEXH@Z:PROC	; ZtWinQuestSystem::UserConnect
; Function compile flags: /Ogtp
;	COMDAT ?DG_ZtQuestSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZtQuestSystem_LOAD@@@Z
_TEXT	SEGMENT
_aIndex$ = -8						; size = 4
tv863 = -4						; size = 4
_aRecv$ = 8						; size = 4
?DG_ZtQuestSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZtQuestSystem_LOAD@@@Z PROC ; CZtGDManager::DG_ZtQuestSystemLoad, COMDAT
; _this$ = ecx

; 726  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 727  : 	if(!aRecv->bResult)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _aRecv$[ebp]
  0000a	80 7b 08 00	 cmp	 BYTE PTR [ebx+8], 0
  0000e	0f 84 ac 00 00
	00		 je	 $LN9@DG_ZtQuest@2

; 728  : 	{
; 729  : 		return;
; 730  : 	}
; 731  : 
; 732  : 	int aIndex = aRecv->aIndex;

  00014	57		 push	 edi
  00015	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00018	89 7d f8	 mov	 DWORD PTR _aIndex$[ebp], edi

; 733  : 
; 734  : 	if(!OBJMAX_RANGE(aIndex))

  0001b	85 ff		 test	 edi, edi
  0001d	0f 88 9c 00 00
	00		 js	 $LN24@DG_ZtQuest@2
  00023	33 c0		 xor	 eax, eax
  00025	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  0002b	0f 9e c0	 setle	 al
  0002e	85 c0		 test	 eax, eax
  00030	0f 84 89 00 00
	00		 je	 $LN24@DG_ZtQuest@2

; 735  : 	{
; 736  : 		return;
; 737  : 	}
; 738  : 
; 739  : 	LPOBJ lpUser = &gObj[aIndex];

  00036	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0003c	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00042	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00045	56		 push	 esi
  00046	89 45 fc	 mov	 DWORD PTR tv863[ebp], eax

; 740  : 
; 741  : 	for(int a = 0; a < EW_MAX_ACT; a++)

  00049	33 f6		 xor	 esi, esi
  0004b	8d 97 f0 2a 00
	00		 lea	 edx, DWORD PTR [edi+10992]
  00051	8d 8f f8 2a 00
	00		 lea	 ecx, DWORD PTR [edi+11000]
  00057	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  0005a	eb 07		 jmp	 SHORT $LN6@DG_ZtQuest@2
  0005c	8d 64 24 00	 npad	 4
$LL23@DG_ZtQuest@2:

; 735  : 	{
; 736  : 		return;
; 737  : 	}
; 738  : 
; 739  : 	LPOBJ lpUser = &gObj[aIndex];

  00060	8b 5d 08	 mov	 ebx, DWORD PTR _aRecv$[ebp]
$LN6@DG_ZtQuest@2:

; 742  : 	{
; 743  : 		lpUser->ZtWQuestStart[a] = aRecv->ZtWQuestStart[a];

  00063	8a 5c 33 09	 mov	 bl, BYTE PTR [ebx+esi+9]
  00067	88 9c 37 ec 2a
	00 00		 mov	 BYTE PTR [edi+esi+10988], bl

; 744  : 		lpUser->ZtWQuestNum[a] = aRecv->ZtWQuestNum[a];

  0006e	8b 5d fc	 mov	 ebx, DWORD PTR tv863[ebp]
  00071	0f b7 1b	 movzx	 ebx, WORD PTR [ebx]
  00074	66 89 1a	 mov	 WORD PTR [edx], bx

; 745  : 		for(int m = 0; m < EW_MAX_MISSION; m++)
; 746  : 		{
; 747  : 			lpUser->ZtWQuestCount[a][m] = aRecv->ZtWQuestCount[a][m];

  00077	0f b7 58 fe	 movzx	 ebx, WORD PTR [eax-2]
  0007b	83 45 fc 02	 add	 DWORD PTR tv863[ebp], 2
  0007f	66 89 59 fe	 mov	 WORD PTR [ecx-2], bx
  00083	0f b7 18	 movzx	 ebx, WORD PTR [eax]
  00086	66 89 19	 mov	 WORD PTR [ecx], bx
  00089	0f b7 58 02	 movzx	 ebx, WORD PTR [eax+2]
  0008d	66 89 59 02	 mov	 WORD PTR [ecx+2], bx
  00091	0f b7 58 04	 movzx	 ebx, WORD PTR [eax+4]
  00095	66 89 59 04	 mov	 WORD PTR [ecx+4], bx
  00099	0f b7 58 06	 movzx	 ebx, WORD PTR [eax+6]
  0009d	66 89 59 06	 mov	 WORD PTR [ecx+6], bx
  000a1	46		 inc	 esi
  000a2	83 c2 02	 add	 edx, 2
  000a5	83 c0 0a	 add	 eax, 10			; 0000000aH
  000a8	83 c1 0a	 add	 ecx, 10			; 0000000aH
  000ab	83 fe 03	 cmp	 esi, 3
  000ae	7c b0		 jl	 SHORT $LL23@DG_ZtQuest@2

; 748  : 		}
; 749  : 	}
; 750  : 
; 751  : 	g_ZtWinQuestSystem.UserConnect(aIndex);

  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  000b3	51		 push	 ecx
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtWinQuestSystem@@3VZtWinQuestSystem@@A ; g_ZtWinQuestSystem
  000b9	e8 00 00 00 00	 call	 ?UserConnect@ZtWinQuestSystem@@QAEXH@Z ; ZtWinQuestSystem::UserConnect
  000be	5e		 pop	 esi
$LN24@DG_ZtQuest@2:
  000bf	5f		 pop	 edi
$LN9@DG_ZtQuest@2:
  000c0	5b		 pop	 ebx

; 752  : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
?DG_ZtQuestSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZtQuestSystem_LOAD@@@Z ENDP ; CZtGDManager::DG_ZtQuestSystemLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GD_ZtQuestSystemSave@CZtGDManager@@QAEXH@Z	; CZtGDManager::GD_ZtQuestSystemSave
; Function compile flags: /Ogtp
;	COMDAT ?GD_ZtQuestSystemSave@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -60						; size = 54
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GD_ZtQuestSystemSave@CZtGDManager@@QAEXH@Z PROC	; CZtGDManager::GD_ZtQuestSystemSave, COMDAT
; _this$ = ecx

; 755  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 756  : 	if(!g_ZtWinQuestSystem.Enable)

  00010	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtWinQuestSystem@@3VZtWinQuestSystem@@A, 0
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0001b	0f 84 bc 00 00
	00		 je	 $LN9@GD_ZtQuest@3

; 757  : 	{
; 758  : 		return;
; 759  : 	}
; 760  : 
; 761  : 	if(!OBJMAX_RANGE(aIndex))

  00021	85 ff		 test	 edi, edi
  00023	0f 88 b4 00 00
	00		 js	 $LN9@GD_ZtQuest@3
  00029	33 c0		 xor	 eax, eax
  0002b	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  00031	0f 9e c0	 setle	 al
  00034	85 c0		 test	 eax, eax
  00036	0f 84 a1 00 00
	00		 je	 $LN9@GD_ZtQuest@3

; 762  : 	{
; 763  : 		return;
; 764  : 	}
; 765  : 
; 766  : 	PMSG_REQ_ZtQuestSystem_SAVE pMsg;
; 767  : 	pMsg.h.set((LPBYTE)&pMsg, 0xEA, 0x15, sizeof(pMsg));
; 768  : 
; 769  : 	LPOBJ lpUser = &gObj[aIndex];

  0003c	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  00042	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00048	c7 45 c4 c1 36
	ea 15		 mov	 DWORD PTR _pMsg$[ebp], 367670977 ; 15ea36c1H

; 770  : 
; 771  : 	pMsg.Name[10] = 0;

  0004f	c6 45 d2 00	 mov	 BYTE PTR _pMsg$[ebp+14], 0

; 772  : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name)-1);

  00053	8b 47 77	 mov	 eax, DWORD PTR [edi+119]
  00056	89 45 c8	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  00059	8b 4f 7b	 mov	 ecx, DWORD PTR [edi+123]
  0005c	89 4d cc	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  0005f	66 8b 57 7f	 mov	 dx, WORD PTR [edi+127]
  00063	53		 push	 ebx
  00064	56		 push	 esi
  00065	66 89 55 d0	 mov	 WORD PTR _pMsg$[ebp+12], dx

; 773  : 
; 774  : 	for(int a = 0; a < EW_MAX_ACT; a++)

  00069	33 f6		 xor	 esi, esi
  0006b	8d 4d de	 lea	 ecx, DWORD PTR _pMsg$[ebp+26]
  0006e	8d 97 f0 2a 00
	00		 lea	 edx, DWORD PTR [edi+10992]
  00074	8d 87 f8 2a 00
	00		 lea	 eax, DWORD PTR [edi+11000]
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL6@GD_ZtQuest@3:

; 775  : 	{
; 776  : 		pMsg.ZtWQuestStart[a] = lpUser->ZtWQuestStart[a];

  00080	8a 9c 37 ec 2a
	00 00		 mov	 bl, BYTE PTR [edi+esi+10988]
  00087	88 5c 35 d3	 mov	 BYTE PTR _pMsg$[ebp+esi+15], bl

; 777  : 		pMsg.ZtWQuestNum[a] = lpUser->ZtWQuestNum[a];

  0008b	0f b7 1a	 movzx	 ebx, WORD PTR [edx]
  0008e	66 89 5c 75 d6	 mov	 WORD PTR _pMsg$[ebp+esi*2+18], bx

; 778  : 		for(int m = 0; m < EW_MAX_MISSION; m++)
; 779  : 		{
; 780  : 			pMsg.ZtWQuestCount[a][m] = lpUser->ZtWQuestCount[a][m];

  00093	0f b7 58 fe	 movzx	 ebx, WORD PTR [eax-2]
  00097	66 89 59 fe	 mov	 WORD PTR [ecx-2], bx
  0009b	0f b7 18	 movzx	 ebx, WORD PTR [eax]
  0009e	66 89 19	 mov	 WORD PTR [ecx], bx
  000a1	0f b7 58 02	 movzx	 ebx, WORD PTR [eax+2]
  000a5	66 89 59 02	 mov	 WORD PTR [ecx+2], bx
  000a9	0f b7 58 04	 movzx	 ebx, WORD PTR [eax+4]
  000ad	66 89 59 04	 mov	 WORD PTR [ecx+4], bx
  000b1	0f b7 58 06	 movzx	 ebx, WORD PTR [eax+6]
  000b5	66 89 59 06	 mov	 WORD PTR [ecx+6], bx
  000b9	46		 inc	 esi
  000ba	83 c2 02	 add	 edx, 2
  000bd	83 c0 0a	 add	 eax, 10			; 0000000aH
  000c0	83 c1 0a	 add	 ecx, 10			; 0000000aH
  000c3	83 fe 03	 cmp	 esi, 3
  000c6	7c b8		 jl	 SHORT $LL6@GD_ZtQuest@3

; 781  : 		}
; 782  : 	}
; 783  : 
; 784  : 	cDBSMng.Send((char*)&pMsg, pMsg.h.size);

  000c8	0f b6 45 c5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000cc	50		 push	 eax
  000cd	8d 4d c4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000d0	51		 push	 ecx
  000d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000d6	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
$LN9@GD_ZtQuest@3:

; 785  : }

  000dd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e0	33 cd		 xor	 ecx, ebp
  000e2	5f		 pop	 edi
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 04 00	 ret	 4
?GD_ZtQuestSystemSave@CZtGDManager@@QAEXH@Z ENDP	; CZtGDManager::GD_ZtQuestSystemSave
_TEXT	ENDS
PUBLIC	?Protocol@CZtGDManager@@QAEXEPAE@Z		; CZtGDManager::Protocol
EXTRN	?DGPlayerLoad@CAchievements@@QAEXPAUPMSG_DGANS_ACH_LOAD@@@Z:PROC ; CAchievements::DGPlayerLoad
EXTRN	?g_Achievements@@3VCAchievements@@A:BYTE	; g_Achievements
; Function compile flags: /Ogtp
;	COMDAT ?Protocol@CZtGDManager@@QAEXEPAE@Z
_TEXT	SEGMENT
_protoNum$ = 8						; size = 1
_aRecv$ = 12						; size = 4
?Protocol@CZtGDManager@@QAEXEPAE@Z PROC			; CZtGDManager::Protocol, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 29   : 	switch(protoNum)

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _protoNum$[ebp]
  00007	83 f8 13	 cmp	 eax, 19			; 00000013H
  0000a	0f 87 84 00 00
	00		 ja	 $LN10@Protocol
  00010	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN14@Protocol[eax]
  00017	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN15@Protocol[eax*4]
$LN9@Protocol:

; 30   : 	{
; 31   : 	case 0x00:
; 32   : 		this->DG_PartySearchLoad((PMSG_ANS_PARTYSEARCH_LOAD *)aRecv);

  0001e	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ?DG_PartySearchLoad@CZtGDManager@@QAEXPAUPMSG_ANS_PARTYSEARCH_LOAD@@@Z ; CZtGDManager::DG_PartySearchLoad

; 60   : 		break;
; 61   : #endif
; 62   : 	}
; 63   : }

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
$LN8@Protocol:

; 33   : 		break;
; 34   : 	case 0x02:
; 35   : 		this->DG_ZtBuffLoad((PMSG_ANS_ZTBUFF_LOAD *)aRecv);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?DG_ZtBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZTBUFF_LOAD@@@Z ; CZtGDManager::DG_ZtBuffLoad

; 60   : 		break;
; 61   : #endif
; 62   : 	}
; 63   : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN7@Protocol:

; 36   : 		break;
; 37   : 	case 0x04:
; 38   : 		this->DG_BMQuestLoad((PMSG_ANS_BMQUEST_LOAD *)aRecv);

  00038	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ?DG_BMQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_BMQUEST_LOAD@@@Z ; CZtGDManager::DG_BMQuestLoad

; 60   : 		break;
; 61   : #endif
; 62   : 	}
; 63   : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
$LN6@Protocol:

; 39   : 		break;
; 40   : 	case 0x06:
; 41   : 		this->DG_MonsterQuestLoad((PMSG_ANS_MONSTERQUEST_LOAD *)aRecv);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?DG_MonsterQuestLoad@CZtGDManager@@QAEXPAUPMSG_ANS_MONSTERQUEST_LOAD@@@Z ; CZtGDManager::DG_MonsterQuestLoad

; 60   : 		break;
; 61   : #endif
; 62   : 	}
; 63   : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN5@Protocol:

; 42   : 		break;
; 43   : 	case 0x08:
; 44   : 		this->DG_RageSystemLoad((PMSG_ANS_RAGESYSTEM_LOAD *)aRecv);

  00052	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 ?DG_RageSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_RAGESYSTEM_LOAD@@@Z ; CZtGDManager::DG_RageSystemLoad

; 60   : 		break;
; 61   : #endif
; 62   : 	}
; 63   : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN4@Protocol:

; 45   : 		break;
; 46   : 	case 0x0A:
; 47   : 		this->DG_CreateonBankLoad((PMSG_ANS_CREATEON_LOAD *)aRecv);

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?DG_CreateonBankLoad@CZtGDManager@@QAEXPAUPMSG_ANS_CREATEON_LOAD@@@Z ; CZtGDManager::DG_CreateonBankLoad

; 60   : 		break;
; 61   : #endif
; 62   : 	}
; 63   : }

  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
$LN3@Protocol:

; 48   : 		break;
; 49   : 	case 0x0C:
; 50   : #if(SYSTEM_ACHIEVEMENTS)
; 51   : 		g_Achievements.DGPlayerLoad((PMSG_DGANS_ACH_LOAD*)aRecv);

  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0006f	51		 push	 ecx
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Achievements@@3VCAchievements@@A ; g_Achievements
  00075	e8 00 00 00 00	 call	 ?DGPlayerLoad@CAchievements@@QAEXPAUPMSG_DGANS_ACH_LOAD@@@Z ; CAchievements::DGPlayerLoad

; 60   : 		break;
; 61   : #endif
; 62   : 	}
; 63   : }

  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
$LN2@Protocol:

; 52   : #endif
; 53   : 		break;
; 54   : 	case 0x0D:
; 55   : 		this->DG_VoteBuffLoad((PMSG_ANS_VOTEBUFF_LOAD *)aRecv);

  0007e	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 ?DG_VoteBuffLoad@CZtGDManager@@QAEXPAUPMSG_ANS_VOTEBUFF_LOAD@@@Z ; CZtGDManager::DG_VoteBuffLoad

; 60   : 		break;
; 61   : #endif
; 62   : 	}
; 63   : }

  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
$LN1@Protocol:

; 56   : 		break;
; 57   : #if(CUSTOM_ZT_QUEST_SYSTEM==TRUE)
; 58   : 	case 0x13:
; 59   : 		this->DG_ZtQuestSystemLoad((PMSG_ANS_ZtQuestSystem_LOAD *)aRecv);

  0008b	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?DG_ZtQuestSystemLoad@CZtGDManager@@QAEXPAUPMSG_ANS_ZtQuestSystem_LOAD@@@Z ; CZtGDManager::DG_ZtQuestSystemLoad
$LN10@Protocol:

; 60   : 		break;
; 61   : #endif
; 62   : 	}
; 63   : }

  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
$LN15@Protocol:
  00098	00 00 00 00	 DD	 $LN9@Protocol
  0009c	00 00 00 00	 DD	 $LN8@Protocol
  000a0	00 00 00 00	 DD	 $LN7@Protocol
  000a4	00 00 00 00	 DD	 $LN6@Protocol
  000a8	00 00 00 00	 DD	 $LN5@Protocol
  000ac	00 00 00 00	 DD	 $LN4@Protocol
  000b0	00 00 00 00	 DD	 $LN3@Protocol
  000b4	00 00 00 00	 DD	 $LN2@Protocol
  000b8	00 00 00 00	 DD	 $LN1@Protocol
  000bc	00 00 00 00	 DD	 $LN10@Protocol
$LN14@Protocol:
  000c0	00		 DB	 0
  000c1	09		 DB	 9
  000c2	01		 DB	 1
  000c3	09		 DB	 9
  000c4	02		 DB	 2
  000c5	09		 DB	 9
  000c6	03		 DB	 3
  000c7	09		 DB	 9
  000c8	04		 DB	 4
  000c9	09		 DB	 9
  000ca	05		 DB	 5
  000cb	09		 DB	 9
  000cc	06		 DB	 6
  000cd	07		 DB	 7
  000ce	09		 DB	 9
  000cf	09		 DB	 9
  000d0	09		 DB	 9
  000d1	09		 DB	 9
  000d2	09		 DB	 9
  000d3	08		 DB	 8
?Protocol@CZtGDManager@@QAEXEPAE@Z ENDP			; CZtGDManager::Protocol
_TEXT	ENDS
PUBLIC	?DB_Load@CZtGDManager@@QAEXH@Z			; CZtGDManager::DB_Load
EXTRN	?GDPlayerLoad@CAchievements@@QAEXH@Z:PROC	; CAchievements::GDPlayerLoad
EXTRN	?GetCustom@CZtLicense@@QAEHXZ:PROC		; CZtLicense::GetCustom
; Function compile flags: /Ogtp
;	COMDAT ?DB_Load@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?DB_Load@CZtGDManager@@QAEXH@Z PROC			; CZtGDManager::DB_Load, COMDAT
; _this$ = ecx

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 81   : 	if(!OBJMAX_RANGE(aIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	0f 88 b4 01 00
	00		 js	 $LN12@DB_Load
  00012	33 c0		 xor	 eax, eax
  00014	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 a1 01 00
	00		 je	 $LN12@DB_Load

; 82   : 	{
; 83   : 		return;
; 84   : 	}
; 85   : 
; 86   : 	if(g_ZtLicense.user.PartySearch)

  00025	80 3d d5 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+213, 0
  0002c	74 06		 je	 SHORT $LN10@DB_Load

; 87   : 	{
; 88   : 		this->GD_PartySearchLoad(aIndex);

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?GD_PartySearchLoad@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_PartySearchLoad
$LN10@DB_Load:

; 89   : 	}
; 90   : 
; 91   : 	if(g_ZtLicense.user.NpcBuffer)

  00034	80 3d dd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+221, 0
  0003b	74 08		 je	 SHORT $LN9@DB_Load

; 92   : 	{
; 93   : 		this->GD_ZtBuffLoad(aIndex);

  0003d	56		 push	 esi
  0003e	8b cf		 mov	 ecx, edi
  00040	e8 00 00 00 00	 call	 ?GD_ZtBuffLoad@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_ZtBuffLoad
$LN9@DB_Load:

; 94   : 	}
; 95   : 
; 96   : 	if(g_ZtLicense.user.BMQuest)

  00045	80 3d de 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+222, 0
  0004c	74 08		 je	 SHORT $LN8@DB_Load

; 97   : 	{
; 98   : 		this->GD_BMQuestLoad(aIndex);

  0004e	56		 push	 esi
  0004f	8b cf		 mov	 ecx, edi
  00051	e8 00 00 00 00	 call	 ?GD_BMQuestLoad@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_BMQuestLoad
$LN8@DB_Load:

; 99   : 	}
; 100  : 
; 101  : 	if(g_ZtLicense.user.MonsterQuest)

  00056	80 3d d0 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+208, 0
  0005d	74 08		 je	 SHORT $LN7@DB_Load

; 102  : 	{
; 103  : 		this->GD_MonsterQuestLoad(aIndex);

  0005f	56		 push	 esi
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?GD_MonsterQuestLoad@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_MonsterQuestLoad
$LN7@DB_Load:

; 104  : 	}
; 105  : 
; 106  : 	if(g_ZtLicense.user.Rage)

  00067	80 3d cd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, 0
  0006e	74 08		 je	 SHORT $LN6@DB_Load

; 107  : 	{
; 108  : 		this->GD_RageSystemLoad(aIndex);

  00070	56		 push	 esi
  00071	8b cf		 mov	 ecx, edi
  00073	e8 00 00 00 00	 call	 ?GD_RageSystemLoad@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_RageSystemLoad
$LN6@DB_Load:

; 109  : 	}
; 110  : 
; 111  : #if(ADD_JEWELBANK_CREATEON)
; 112  : 	if(/*g_ZtLicense.CheckUser(eZtUB::Local) || */g_ZtLicense.CheckUser(SILVER1) || g_ZtLicense.CheckUser(SILVER2) ||
; 113  : 		g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2) ||
; 114  : 		g_ZtLicense.CheckUser(eZtUB::mu4you) || g_ZtLicense.CheckUser(eZtUB::Escalate) || g_ZtLicense.CheckUser(eZtUB::MedoniAndrei) ||
; 115  : 	    g_ZtLicense.CheckUser(eZtUB::Escalate) || g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2) ||
; 116  : 		g_ZtLicense.CheckUser(eZtUB::eternalmu) || g_ZtLicense.CheckUser(eZtUB::NSGames) || g_ZtLicense.GetCustom())

  00078	6a 07		 push	 7
  0007a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0007f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00084	84 c0		 test	 al, al
  00086	0f 85 de 00 00
	00		 jne	 $LN4@DB_Load
  0008c	6a 08		 push	 8
  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00093	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00098	84 c0		 test	 al, al
  0009a	0f 85 ca 00 00
	00		 jne	 $LN4@DB_Load
  000a0	6a 20		 push	 32			; 00000020H
  000a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000a7	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000ac	84 c0		 test	 al, al
  000ae	0f 85 b6 00 00
	00		 jne	 $LN4@DB_Load
  000b4	6a 21		 push	 33			; 00000021H
  000b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000bb	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000c0	84 c0		 test	 al, al
  000c2	0f 85 a2 00 00
	00		 jne	 $LN4@DB_Load
  000c8	6a 22		 push	 34			; 00000022H
  000ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000cf	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000d4	84 c0		 test	 al, al
  000d6	0f 85 8e 00 00
	00		 jne	 $LN4@DB_Load
  000dc	6a 4e		 push	 78			; 0000004eH
  000de	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000e3	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000e8	84 c0		 test	 al, al
  000ea	75 7e		 jne	 SHORT $LN4@DB_Load
  000ec	6a 40		 push	 64			; 00000040H
  000ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000f3	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000f8	84 c0		 test	 al, al
  000fa	75 6e		 jne	 SHORT $LN4@DB_Load
  000fc	6a 32		 push	 50			; 00000032H
  000fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00103	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00108	84 c0		 test	 al, al
  0010a	75 5e		 jne	 SHORT $LN4@DB_Load
  0010c	6a 40		 push	 64			; 00000040H
  0010e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00113	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00118	84 c0		 test	 al, al
  0011a	75 4e		 jne	 SHORT $LN4@DB_Load
  0011c	6a 30		 push	 48			; 00000030H
  0011e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00123	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00128	84 c0		 test	 al, al
  0012a	75 3e		 jne	 SHORT $LN4@DB_Load
  0012c	6a 31		 push	 49			; 00000031H
  0012e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00133	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00138	84 c0		 test	 al, al
  0013a	75 2e		 jne	 SHORT $LN4@DB_Load
  0013c	6a 4f		 push	 79			; 0000004fH
  0013e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00143	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00148	84 c0		 test	 al, al
  0014a	75 1e		 jne	 SHORT $LN4@DB_Load
  0014c	6a 51		 push	 81			; 00000051H
  0014e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00153	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00158	84 c0		 test	 al, al
  0015a	75 0e		 jne	 SHORT $LN4@DB_Load
  0015c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00161	e8 00 00 00 00	 call	 ?GetCustom@CZtLicense@@QAEHXZ ; CZtLicense::GetCustom
  00166	85 c0		 test	 eax, eax
  00168	74 08		 je	 SHORT $LN5@DB_Load
$LN4@DB_Load:

; 117  : 	{
; 118  : 		this->GD_CreateonBankLoad(aIndex);

  0016a	56		 push	 esi
  0016b	8b cf		 mov	 ecx, edi
  0016d	e8 00 00 00 00	 call	 ?GD_CreateonBankLoad@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_CreateonBankLoad
$LN5@DB_Load:

; 119  : 	}
; 120  : #endif
; 121  : #if(SYSTEM_ACHIEVEMENTS)
; 122  : 	if(g_ZtLicense.user.bAchievements)

  00172	80 3d ed 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+237, 0
  00179	74 0b		 je	 SHORT $LN3@DB_Load

; 123  : 	{
; 124  : 		g_Achievements.GDPlayerLoad(aIndex);

  0017b	56		 push	 esi
  0017c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Achievements@@3VCAchievements@@A ; g_Achievements
  00181	e8 00 00 00 00	 call	 ?GDPlayerLoad@CAchievements@@QAEXH@Z ; CAchievements::GDPlayerLoad
$LN3@DB_Load:

; 125  : 	}
; 126  : #endif
; 127  : 
; 128  : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2))

  00186	6a 20		 push	 32			; 00000020H
  00188	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0018d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00192	84 c0		 test	 al, al
  00194	75 20		 jne	 SHORT $LN1@DB_Load
  00196	6a 21		 push	 33			; 00000021H
  00198	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0019d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001a2	84 c0		 test	 al, al
  001a4	75 10		 jne	 SHORT $LN1@DB_Load
  001a6	6a 22		 push	 34			; 00000022H
  001a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001ad	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001b2	84 c0		 test	 al, al
  001b4	74 08		 je	 SHORT $LN2@DB_Load
$LN1@DB_Load:

; 129  : 	{
; 130  : 		this->GD_VoteBuffLoad(aIndex);

  001b6	56		 push	 esi
  001b7	8b cf		 mov	 ecx, edi
  001b9	e8 00 00 00 00	 call	 ?GD_VoteBuffLoad@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_VoteBuffLoad
$LN2@DB_Load:

; 131  : 	}
; 132  : 
; 133  : #if(CUSTOM_ZT_QUEST_SYSTEM==TRUE)
; 134  : 	this->GD_ZtQuestSystemLoad(aIndex);

  001be	56		 push	 esi
  001bf	8b cf		 mov	 ecx, edi
  001c1	e8 00 00 00 00	 call	 ?GD_ZtQuestSystemLoad@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_ZtQuestSystemLoad
$LN12@DB_Load:
  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi

; 135  : #endif
; 136  : }

  001c8	5d		 pop	 ebp
  001c9	c2 04 00	 ret	 4
?DB_Load@CZtGDManager@@QAEXH@Z ENDP			; CZtGDManager::DB_Load
_TEXT	ENDS
PUBLIC	?DB_Save@CZtGDManager@@QAEXH@Z			; CZtGDManager::DB_Save
EXTRN	?GDPlayerSave@CAchievements@@QAEXH@Z:PROC	; CAchievements::GDPlayerSave
; Function compile flags: /Ogtp
;	COMDAT ?DB_Save@CZtGDManager@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?DB_Save@CZtGDManager@@QAEXH@Z PROC			; CZtGDManager::DB_Save, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 140  : 	if(!OBJMAX_RANGE(aIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	0f 88 a6 01 00
	00		 js	 $LN12@DB_Save
  00012	33 c0		 xor	 eax, eax
  00014	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 93 01 00
	00		 je	 $LN12@DB_Save

; 141  : 	{
; 142  : 		return;
; 143  : 	}
; 144  : 
; 145  : 	if(g_ZtLicense.user.PartySearch)

  00025	80 3d d5 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+213, 0
  0002c	74 06		 je	 SHORT $LN10@DB_Save

; 146  : 	{
; 147  : 		this->GD_PartySearchSave(aIndex);

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?GD_PartySearchSave@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_PartySearchSave
$LN10@DB_Save:

; 148  : 	}
; 149  : 
; 150  : 	if(g_ZtLicense.user.NpcBuffer)

  00034	80 3d dd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+221, 0
  0003b	74 08		 je	 SHORT $LN9@DB_Save

; 151  : 	{
; 152  : 		this->GD_ZtBuffSave(aIndex);

  0003d	56		 push	 esi
  0003e	8b cf		 mov	 ecx, edi
  00040	e8 00 00 00 00	 call	 ?GD_ZtBuffSave@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_ZtBuffSave
$LN9@DB_Save:

; 153  : 	}
; 154  : 
; 155  : 	if(g_ZtLicense.user.BMQuest)

  00045	80 3d de 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+222, 0
  0004c	74 08		 je	 SHORT $LN8@DB_Save

; 156  : 	{
; 157  : 		this->GD_BMQuestSave(aIndex);

  0004e	56		 push	 esi
  0004f	8b cf		 mov	 ecx, edi
  00051	e8 00 00 00 00	 call	 ?GD_BMQuestSave@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_BMQuestSave
$LN8@DB_Save:

; 158  : 	}
; 159  : 
; 160  : 	if(g_ZtLicense.user.MonsterQuest)

  00056	80 3d d0 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+208, 0
  0005d	74 08		 je	 SHORT $LN7@DB_Save

; 161  : 	{
; 162  : 		this->GD_MonsterQuestSave(aIndex);

  0005f	56		 push	 esi
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?GD_MonsterQuestSave@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_MonsterQuestSave
$LN7@DB_Save:

; 163  : 	}
; 164  : 
; 165  : 	if(g_ZtLicense.user.Rage)

  00067	80 3d cd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, 0
  0006e	74 08		 je	 SHORT $LN6@DB_Save

; 166  : 	{
; 167  : 		this->GD_RageSystemSave(aIndex);

  00070	56		 push	 esi
  00071	8b cf		 mov	 ecx, edi
  00073	e8 00 00 00 00	 call	 ?GD_RageSystemSave@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_RageSystemSave
$LN6@DB_Save:

; 168  : 	}
; 169  : 
; 170  : #if(ADD_JEWELBANK_CREATEON)
; 171  : 	if(/*g_ZtLicense.CheckUser(eZtUB::Local) || */g_ZtLicense.CheckUser(SILVER1) || g_ZtLicense.CheckUser(SILVER2) ||
; 172  : 		g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2) ||
; 173  : 		g_ZtLicense.CheckUser(eZtUB::mu4you) || g_ZtLicense.CheckUser(eZtUB::Escalate) || g_ZtLicense.CheckUser(eZtUB::MedoniAndrei) ||
; 174  : 	    g_ZtLicense.CheckUser(eZtUB::Escalate) || g_ZtLicense.CheckUser(eZtUB::Artem) || g_ZtLicense.CheckUser(eZtUB::Artem2) ||
; 175  : 		g_ZtLicense.CheckUser(eZtUB::eternalmu) || g_ZtLicense.CheckUser(eZtUB::NSGames))

  00078	6a 07		 push	 7
  0007a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0007f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00084	84 c0		 test	 al, al
  00086	0f 85 d0 00 00
	00		 jne	 $LN4@DB_Save
  0008c	6a 08		 push	 8
  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00093	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00098	84 c0		 test	 al, al
  0009a	0f 85 bc 00 00
	00		 jne	 $LN4@DB_Save
  000a0	6a 20		 push	 32			; 00000020H
  000a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000a7	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000ac	84 c0		 test	 al, al
  000ae	0f 85 a8 00 00
	00		 jne	 $LN4@DB_Save
  000b4	6a 21		 push	 33			; 00000021H
  000b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000bb	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000c0	84 c0		 test	 al, al
  000c2	0f 85 94 00 00
	00		 jne	 $LN4@DB_Save
  000c8	6a 22		 push	 34			; 00000022H
  000ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000cf	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000d4	84 c0		 test	 al, al
  000d6	0f 85 80 00 00
	00		 jne	 $LN4@DB_Save
  000dc	6a 4e		 push	 78			; 0000004eH
  000de	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000e3	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000e8	84 c0		 test	 al, al
  000ea	75 70		 jne	 SHORT $LN4@DB_Save
  000ec	6a 40		 push	 64			; 00000040H
  000ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000f3	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000f8	84 c0		 test	 al, al
  000fa	75 60		 jne	 SHORT $LN4@DB_Save
  000fc	6a 32		 push	 50			; 00000032H
  000fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00103	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00108	84 c0		 test	 al, al
  0010a	75 50		 jne	 SHORT $LN4@DB_Save
  0010c	6a 40		 push	 64			; 00000040H
  0010e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00113	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00118	84 c0		 test	 al, al
  0011a	75 40		 jne	 SHORT $LN4@DB_Save
  0011c	6a 30		 push	 48			; 00000030H
  0011e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00123	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00128	84 c0		 test	 al, al
  0012a	75 30		 jne	 SHORT $LN4@DB_Save
  0012c	6a 31		 push	 49			; 00000031H
  0012e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00133	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00138	84 c0		 test	 al, al
  0013a	75 20		 jne	 SHORT $LN4@DB_Save
  0013c	6a 4f		 push	 79			; 0000004fH
  0013e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00143	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00148	84 c0		 test	 al, al
  0014a	75 10		 jne	 SHORT $LN4@DB_Save
  0014c	6a 51		 push	 81			; 00000051H
  0014e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00153	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00158	84 c0		 test	 al, al
  0015a	74 08		 je	 SHORT $LN5@DB_Save
$LN4@DB_Save:

; 176  : 	{
; 177  : 		this->GD_CreateonBankSave(aIndex);

  0015c	56		 push	 esi
  0015d	8b cf		 mov	 ecx, edi
  0015f	e8 00 00 00 00	 call	 ?GD_CreateonBankSave@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_CreateonBankSave
$LN5@DB_Save:

; 178  : 	}
; 179  : #endif
; 180  : 
; 181  : #if(SYSTEM_ACHIEVEMENTS)
; 182  : 	if(g_ZtLicense.user.bAchievements)

  00164	80 3d ed 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+237, 0
  0016b	74 0b		 je	 SHORT $LN3@DB_Save

; 183  : 	{
; 184  : 		g_Achievements.GDPlayerSave(aIndex);

  0016d	56		 push	 esi
  0016e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Achievements@@3VCAchievements@@A ; g_Achievements
  00173	e8 00 00 00 00	 call	 ?GDPlayerSave@CAchievements@@QAEXH@Z ; CAchievements::GDPlayerSave
$LN3@DB_Save:

; 185  : 	}
; 186  : #endif
; 187  : 
; 188  : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2))

  00178	6a 20		 push	 32			; 00000020H
  0017a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0017f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00184	84 c0		 test	 al, al
  00186	75 20		 jne	 SHORT $LN1@DB_Save
  00188	6a 21		 push	 33			; 00000021H
  0018a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0018f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00194	84 c0		 test	 al, al
  00196	75 10		 jne	 SHORT $LN1@DB_Save
  00198	6a 22		 push	 34			; 00000022H
  0019a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0019f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001a4	84 c0		 test	 al, al
  001a6	74 08		 je	 SHORT $LN2@DB_Save
$LN1@DB_Save:

; 189  : 	{
; 190  : 		this->GD_VoteBuffSave(aIndex);

  001a8	56		 push	 esi
  001a9	8b cf		 mov	 ecx, edi
  001ab	e8 00 00 00 00	 call	 ?GD_VoteBuffSave@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_VoteBuffSave
$LN2@DB_Save:

; 191  : 	}
; 192  : 
; 193  : #if(CUSTOM_ZT_QUEST_SYSTEM==TRUE)
; 194  : 	this->GD_ZtQuestSystemSave(aIndex);

  001b0	56		 push	 esi
  001b1	8b cf		 mov	 ecx, edi
  001b3	e8 00 00 00 00	 call	 ?GD_ZtQuestSystemSave@CZtGDManager@@QAEXH@Z ; CZtGDManager::GD_ZtQuestSystemSave
$LN12@DB_Save:
  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi

; 195  : #endif
; 196  : }

  001ba	5d		 pop	 ebp
  001bb	c2 04 00	 ret	 4
?DB_Save@CZtGDManager@@QAEXH@Z ENDP			; CZtGDManager::DB_Save
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ZtGDManager@@YAXXZ
text$yc	SEGMENT
??__Eg_ZtGDManager@@YAXXZ PROC				; `dynamic initializer for 'g_ZtGDManager'', COMDAT

; 17   : CZtGDManager g_ZtGDManager;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fg_ZtGDManager@@YAXXZ ; `dynamic atexit destructor for 'g_ZtGDManager''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Eg_ZtGDManager@@YAXXZ ENDP				; `dynamic initializer for 'g_ZtGDManager''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ZtGDManager@@YAXXZ
text$yd	SEGMENT
??__Fg_ZtGDManager@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ZtGDManager'', COMDAT
  00000	c3		 ret	 0
??__Fg_ZtGDManager@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ZtGDManager''
text$yd	ENDS
PUBLIC	?g_ZtGDManager@@3VCZtGDManager@@A		; g_ZtGDManager
_BSS	SEGMENT
?g_ZtGDManager@@3VCZtGDManager@@A DB 01H DUP (?)	; g_ZtGDManager
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ZtGDManager$initializer$ DD FLAT:??__Eg_ZtGDManager@@YAXXZ
CRT$XCU	ENDS
END
