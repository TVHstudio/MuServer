; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ZtTeleport.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PWMSG_HEAD2@@QAEXPAEEEH@Z			; PWMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z PROC			; PWMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 149  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 		lpBuf[0] = 0xC2;
; 151  : 		lpBuf[1] = SET_NUMBERH(size);

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00009	8b d1		 mov	 edx, ecx
  0000b	c1 ea 08	 shr	 edx, 8
  0000e	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 152  : 		lpBuf[2] = SET_NUMBERL(size);
; 153  : 		lpBuf[3] = head;
; 154  : 		lpBuf[4] = sub;

  00011	8a 55 10	 mov	 dl, BYTE PTR _sub$[ebp]
  00014	88 48 02	 mov	 BYTE PTR [eax+2], cl
  00017	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0001a	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H
  0001d	88 48 03	 mov	 BYTE PTR [eax+3], cl
  00020	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 155  : 	}

  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ENDP			; PWMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??1ZtTeleport@@QAE@XZ				; ZtTeleport::~ZtTeleport
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\ztteleport.cpp
;	COMDAT ??1ZtTeleport@@QAE@XZ
_TEXT	SEGMENT
??1ZtTeleport@@QAE@XZ PROC				; ZtTeleport::~ZtTeleport, COMDAT
; _this$ = ecx

; 24   : }

  00000	c3		 ret	 0
??1ZtTeleport@@QAE@XZ ENDP				; ZtTeleport::~ZtTeleport
_TEXT	ENDS
PUBLIC	?Init@ZtTeleport@@QAEXXZ			; ZtTeleport::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@ZtTeleport@@QAEXXZ
_TEXT	SEGMENT
?Init@ZtTeleport@@QAEXXZ PROC				; ZtTeleport::Init, COMDAT
; _this$ = ecx

; 28   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 29   : 	ZeroMemory(this->data, sizeof(this->data));

  00004	68 f0 00 00 00	 push	 240			; 000000f0H
  00009	33 db		 xor	 ebx, ebx
  0000b	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0000e	53		 push	 ebx
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 30   : 	this->Enable = 0;

  00018	88 1e		 mov	 BYTE PTR [esi], bl

; 31   : 	this->NPC_Class = 0;

  0001a	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 32   : 	this->NPC_Map = 0;

  0001d	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 33   : 	this->NPC_X = 0;

  00020	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 34   : 	this->NPC_Y = 0;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 35   : 	this->iLoadedCount = 0;

  00026	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 36   : }

  0002b	c3		 ret	 0
?Init@ZtTeleport@@QAEXXZ ENDP				; ZtTeleport::Init
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Read@ZtTeleport@@QAEXPAD@Z			; ZtTeleport::Read
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@ZtTeleport@@QAEXPAD@Z
_TEXT	SEGMENT
tv417 = -8						; size = 8
tv441 = -4						; size = 4
tv439 = -4						; size = 4
tv433 = -4						; size = 4
tv431 = -4						; size = 4
tv425 = -4						; size = 4
tv423 = -4						; size = 4
tv415 = -4						; size = 4
tv409 = -4						; size = 4
tv407 = -4						; size = 4
tv401 = -4						; size = 4
tv399 = -4						; size = 4
tv393 = -4						; size = 4
tv391 = -4						; size = 4
tv385 = -4						; size = 4
tv383 = -4						; size = 4
tv377 = -4						; size = 4
tv375 = -4						; size = 4
tv369 = -4						; size = 4
tv367 = -4						; size = 4
tv361 = -4						; size = 4
tv359 = -4						; size = 4
_File$ = 8						; size = 4
tv436 = 10						; size = 2
tv428 = 10						; size = 2
tv420 = 10						; size = 2
tv412 = 10						; size = 2
tv404 = 10						; size = 2
tv396 = 10						; size = 2
tv388 = 10						; size = 2
tv380 = 10						; size = 2
tv372 = 10						; size = 2
tv364 = 10						; size = 2
tv356 = 10						; size = 2
?Read@ZtTeleport@@QAEXPAD@Z PROC			; ZtTeleport::Read, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi

; 58   : 	SMDFile = fopen(File, "r");

  00008	8b 7d 08	 mov	 edi, DWORD PTR _File$[ebp]
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00010	57		 push	 edi
  00011	8b f1		 mov	 esi, ecx
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 59   : 
; 60   : 	if( SMDFile == NULL )

  00020	85 c0		 test	 eax, eax
  00022	75 22		 jne	 SHORT $LN12@Read

; 61   : 	{
; 62   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), File);

  00024	57		 push	 edi
  00025	68 c6 01 00 00	 push	 454			; 000001c6H
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003b	83 c4 08	 add	 esp, 8
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 147  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
$LN12@Read:

; 63   : 		return;
; 64   : 	}
; 65   : 
; 66   : 	int Token;
; 67   : 	int type = -1;
; 68   : 
; 69   : 	while ( true )
; 70   : 	{
; 71   : 	    Token = GetToken();

  00046	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 
; 73   :         if( Token == END )

  0004b	83 f8 02	 cmp	 eax, 2
  0004e	0f 84 45 03 00
	00		 je	 $LN24@Read
  00054	53		 push	 ebx
  00055	bb 01 00 00 00	 mov	 ebx, 1
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL11@Read:

; 74   : 		{
; 75   :             break;
; 76   : 		}
; 77   : 
; 78   : 		//if(this->iLoadedCount >= MAXZTTELEPORT)
; 79   : 		//{
; 80   : 		//	break;
; 81   : 		//}
; 82   : 
; 83   : 		type = (int)TokenNumber;

  00060	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00066	e8 00 00 00 00	 call	 __ftol2_sse
  0006b	8b f8		 mov	 edi, eax
  0006d	8d 49 00	 npad	 3
$LL8@Read:

; 84   : 
; 85   : 		while ( true )
; 86   : 		{
; 87   : 			if ( type == 0 )

  00070	85 ff		 test	 edi, edi
  00072	0f 85 a6 00 00
	00		 jne	 $LN6@Read

; 88   : 			{
; 89   : 				Token = GetToken();

  00078	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 
; 91   : 				if ( strcmp("end", TokenString) == 0 )

  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00082	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL25@Read:
  00087	8a 10		 mov	 dl, BYTE PTR [eax]
  00089	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0008b	75 1a		 jne	 SHORT $LN26@Read
  0008d	84 d2		 test	 dl, dl
  0008f	74 12		 je	 SHORT $LN27@Read
  00091	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00094	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00097	75 0e		 jne	 SHORT $LN26@Read
  00099	83 c0 02	 add	 eax, 2
  0009c	83 c1 02	 add	 ecx, 2
  0009f	84 d2		 test	 dl, dl
  000a1	75 e4		 jne	 SHORT $LL25@Read
$LN27@Read:
  000a3	33 c0		 xor	 eax, eax
  000a5	eb 05		 jmp	 SHORT $LN28@Read
$LN26@Read:
  000a7	1b c0		 sbb	 eax, eax
  000a9	83 d8 ff	 sbb	 eax, -1
$LN28@Read:
  000ac	85 c0		 test	 eax, eax
  000ae	0f 84 d6 02 00
	00		 je	 $LN21@Read

; 92   : 				{
; 93   : 					break;
; 94   : 				}
; 95   : 
; 96   : 				this->Enable = TokenNumber;

  000b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ba	d9 ee		 fldz
  000bc	da e9		 fucompp
  000be	df e0		 fnstsw	 ax
  000c0	f6 c4 44	 test	 ah, 68			; 00000044H
  000c3	7b 04		 jnp	 SHORT $LN15@Read
  000c5	8a c3		 mov	 al, bl
  000c7	eb 02		 jmp	 SHORT $LN16@Read
$LN15@Read:
  000c9	32 c0		 xor	 al, al
$LN16@Read:
  000cb	88 06		 mov	 BYTE PTR [esi], al

; 97   : 				Token = GetToken();

  000cd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 98   : 				this->NPC_Class = TokenNumber;

  000d2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d8	e8 00 00 00 00	 call	 __ftol2_sse
  000dd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 99   : 				Token = GetToken();

  000e0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 100  : 				this->NPC_Map = TokenNumber;

  000e5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000eb	e8 00 00 00 00	 call	 __ftol2_sse
  000f0	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 101  : 				Token = GetToken();

  000f3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 102  : 				this->NPC_X = TokenNumber;

  000f8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fe	e8 00 00 00 00	 call	 __ftol2_sse
  00103	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 103  : 				Token = GetToken();

  00106	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 104  : 				this->NPC_Y = TokenNumber;

  0010b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00111	e8 00 00 00 00	 call	 __ftol2_sse
  00116	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00119	e9 52 ff ff ff	 jmp	 $LL8@Read
$LN6@Read:

; 105  : 			}
; 106  : 			else if( type == 1 )

  0011e	3b fb		 cmp	 edi, ebx
  00120	0f 85 4a ff ff
	ff		 jne	 $LL8@Read

; 107  : 			{
; 108  : 				Token = GetToken();

  00126	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 109  : 
; 110  : 				if ( strcmp("end", TokenString) == 0 )

  0012b	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00130	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL29@Read:
  00135	8a 10		 mov	 dl, BYTE PTR [eax]
  00137	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00139	75 1a		 jne	 SHORT $LN30@Read
  0013b	84 d2		 test	 dl, dl
  0013d	74 12		 je	 SHORT $LN31@Read
  0013f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00142	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00145	75 0e		 jne	 SHORT $LN30@Read
  00147	83 c0 02	 add	 eax, 2
  0014a	83 c1 02	 add	 ecx, 2
  0014d	84 d2		 test	 dl, dl
  0014f	75 e4		 jne	 SHORT $LL29@Read
$LN31@Read:
  00151	33 c0		 xor	 eax, eax
  00153	eb 05		 jmp	 SHORT $LN32@Read
$LN30@Read:
  00155	1b c0		 sbb	 eax, eax
  00157	83 d8 ff	 sbb	 eax, -1
$LN32@Read:
  0015a	85 c0		 test	 eax, eax
  0015c	0f 84 28 02 00
	00		 je	 $LN21@Read

; 111  : 				{
; 112  : 					break;
; 113  : 				}
; 114  : 
; 115  : 				this->data[this->iLoadedCount].map = TokenNumber;

  00162	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00168	d9 7d 0a	 fnstcw	 WORD PTR tv356[ebp]
  0016b	0f b7 45 0a	 movzx	 eax, WORD PTR tv356[ebp]
  0016f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00174	89 45 fc	 mov	 DWORD PTR tv359[ebp], eax
  00177	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0017a	03 c3		 add	 eax, ebx
  0017c	d9 6d fc	 fldcw	 WORD PTR tv359[ebp]
  0017f	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00182	db 5d fc	 fistp	 DWORD PTR tv361[ebp]
  00185	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv361[ebp]
  00189	88 0c d6	 mov	 BYTE PTR [esi+edx*8], cl
  0018c	d9 6d 0a	 fldcw	 WORD PTR tv356[ebp]

; 116  : 				Token = GetToken();

  0018f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 				this->data[this->iLoadedCount].x = TokenNumber;

  00194	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0019a	d9 7d 0a	 fnstcw	 WORD PTR tv364[ebp]
  0019d	0f b7 45 0a	 movzx	 eax, WORD PTR tv364[ebp]
  001a1	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001a6	89 45 fc	 mov	 DWORD PTR tv367[ebp], eax
  001a9	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001ac	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  001af	d9 6d fc	 fldcw	 WORD PTR tv367[ebp]
  001b2	db 5d fc	 fistp	 DWORD PTR tv369[ebp]
  001b5	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv369[ebp]
  001b9	88 4c d6 19	 mov	 BYTE PTR [esi+edx*8+25], cl
  001bd	d9 6d 0a	 fldcw	 WORD PTR tv364[ebp]

; 118  : 				Token = GetToken();

  001c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 119  : 				this->data[this->iLoadedCount].y = TokenNumber;

  001c5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001cb	d9 7d 0a	 fnstcw	 WORD PTR tv372[ebp]
  001ce	0f b7 45 0a	 movzx	 eax, WORD PTR tv372[ebp]
  001d2	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001d7	89 45 fc	 mov	 DWORD PTR tv375[ebp], eax
  001da	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001dd	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  001e0	d9 6d fc	 fldcw	 WORD PTR tv375[ebp]
  001e3	db 5d fc	 fistp	 DWORD PTR tv377[ebp]
  001e6	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv377[ebp]
  001ea	88 4c d6 1a	 mov	 BYTE PTR [esi+edx*8+26], cl
  001ee	d9 6d 0a	 fldcw	 WORD PTR tv372[ebp]

; 120  : 				Token = GetToken();

  001f1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 121  : 				this->data[this->iLoadedCount].level = TokenNumber;

  001f6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001fc	d9 7d 0a	 fnstcw	 WORD PTR tv380[ebp]
  001ff	0f b7 45 0a	 movzx	 eax, WORD PTR tv380[ebp]
  00203	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00208	89 45 fc	 mov	 DWORD PTR tv383[ebp], eax
  0020b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0020e	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00211	d9 6d fc	 fldcw	 WORD PTR tv383[ebp]
  00214	db 5d fc	 fistp	 DWORD PTR tv385[ebp]
  00217	0f b7 4d fc	 movzx	 ecx, WORD PTR tv385[ebp]
  0021b	66 89 4c d6 1c	 mov	 WORD PTR [esi+edx*8+28], cx
  00220	d9 6d 0a	 fldcw	 WORD PTR tv380[ebp]

; 122  : 				Token = GetToken();

  00223	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 				this->data[this->iLoadedCount].reset = TokenNumber;

  00228	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0022e	d9 7d 0a	 fnstcw	 WORD PTR tv388[ebp]
  00231	0f b7 45 0a	 movzx	 eax, WORD PTR tv388[ebp]
  00235	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0023a	89 45 fc	 mov	 DWORD PTR tv391[ebp], eax
  0023d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00240	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00243	d9 6d fc	 fldcw	 WORD PTR tv391[ebp]
  00246	db 5d fc	 fistp	 DWORD PTR tv393[ebp]
  00249	0f b7 4d fc	 movzx	 ecx, WORD PTR tv393[ebp]
  0024d	66 89 4c d6 1e	 mov	 WORD PTR [esi+edx*8+30], cx
  00252	d9 6d 0a	 fldcw	 WORD PTR tv388[ebp]

; 124  : 				Token = GetToken();

  00255	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 125  : 				this->data[this->iLoadedCount].grand = TokenNumber;

  0025a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00260	d9 7d 0a	 fnstcw	 WORD PTR tv396[ebp]
  00263	0f b7 45 0a	 movzx	 eax, WORD PTR tv396[ebp]
  00267	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0026c	89 45 fc	 mov	 DWORD PTR tv399[ebp], eax
  0026f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00272	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00275	d9 6d fc	 fldcw	 WORD PTR tv399[ebp]
  00278	db 5d fc	 fistp	 DWORD PTR tv401[ebp]
  0027b	0f b7 4d fc	 movzx	 ecx, WORD PTR tv401[ebp]
  0027f	66 89 4c d6 20	 mov	 WORD PTR [esi+edx*8+32], cx
  00284	d9 6d 0a	 fldcw	 WORD PTR tv396[ebp]

; 126  : 				Token = GetToken();

  00287	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 127  : 				this->data[this->iLoadedCount].premium = TokenNumber;

  0028c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00292	d9 7d 0a	 fnstcw	 WORD PTR tv404[ebp]
  00295	0f b7 45 0a	 movzx	 eax, WORD PTR tv404[ebp]
  00299	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0029e	89 45 fc	 mov	 DWORD PTR tv407[ebp], eax
  002a1	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  002a4	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  002a7	d9 6d fc	 fldcw	 WORD PTR tv407[ebp]
  002aa	db 5d fc	 fistp	 DWORD PTR tv409[ebp]
  002ad	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv409[ebp]
  002b1	88 4c d6 22	 mov	 BYTE PTR [esi+edx*8+34], cl
  002b5	d9 6d 0a	 fldcw	 WORD PTR tv404[ebp]

; 128  : 				Token = GetToken();

  002b8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 129  : 				this->data[this->iLoadedCount].zen = TokenNumber;

  002bd	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c3	d9 7d 0a	 fnstcw	 WORD PTR tv412[ebp]
  002c6	0f b7 45 0a	 movzx	 eax, WORD PTR tv412[ebp]
  002ca	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002cf	89 45 fc	 mov	 DWORD PTR tv415[ebp], eax
  002d2	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  002d5	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  002d8	d9 6d fc	 fldcw	 WORD PTR tv415[ebp]
  002db	df 7d f8	 fistp	 QWORD PTR tv417[ebp]
  002de	8b 4d f8	 mov	 ecx, DWORD PTR tv417[ebp]
  002e1	89 4c d6 24	 mov	 DWORD PTR [esi+edx*8+36], ecx
  002e5	d9 6d 0a	 fldcw	 WORD PTR tv412[ebp]

; 130  : 				Token = GetToken();

  002e8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 131  : 				this->data[this->iLoadedCount].bonus = TokenNumber;

  002ed	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002f3	d9 7d 0a	 fnstcw	 WORD PTR tv420[ebp]
  002f6	0f b7 45 0a	 movzx	 eax, WORD PTR tv420[ebp]
  002fa	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002ff	89 45 fc	 mov	 DWORD PTR tv423[ebp], eax
  00302	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00305	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00308	d9 6d fc	 fldcw	 WORD PTR tv423[ebp]
  0030b	db 5d fc	 fistp	 DWORD PTR tv425[ebp]
  0030e	0f b7 4d fc	 movzx	 ecx, WORD PTR tv425[ebp]
  00312	66 89 4c d6 28	 mov	 WORD PTR [esi+edx*8+40], cx
  00317	d9 6d 0a	 fldcw	 WORD PTR tv420[ebp]

; 132  : 				Token = GetToken();

  0031a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 133  : 				this->data[this->iLoadedCount].credit = TokenNumber;

  0031f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00325	d9 7d 0a	 fnstcw	 WORD PTR tv428[ebp]
  00328	0f b7 45 0a	 movzx	 eax, WORD PTR tv428[ebp]
  0032c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00331	89 45 fc	 mov	 DWORD PTR tv431[ebp], eax
  00334	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00337	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0033a	d9 6d fc	 fldcw	 WORD PTR tv431[ebp]
  0033d	db 5d fc	 fistp	 DWORD PTR tv433[ebp]
  00340	0f b7 4d fc	 movzx	 ecx, WORD PTR tv433[ebp]
  00344	66 89 4c d6 2a	 mov	 WORD PTR [esi+edx*8+42], cx
  00349	d9 6d 0a	 fldcw	 WORD PTR tv428[ebp]

; 134  : 				Token = GetToken();

  0034c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 135  : 				this->data[this->iLoadedCount].Master = TokenNumber;

  00351	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00357	d9 7d 0a	 fnstcw	 WORD PTR tv436[ebp]
  0035a	0f b7 45 0a	 movzx	 eax, WORD PTR tv436[ebp]
  0035e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00363	89 45 fc	 mov	 DWORD PTR tv439[ebp], eax
  00366	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00369	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0036c	d9 6d fc	 fldcw	 WORD PTR tv439[ebp]
  0036f	db 5d fc	 fistp	 DWORD PTR tv441[ebp]
  00372	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv441[ebp]
  00376	88 4c d6 2c	 mov	 BYTE PTR [esi+edx*8+44], cl

; 136  : 
; 137  : 				this->iLoadedCount++;

  0037a	01 5e 14	 add	 DWORD PTR [esi+20], ebx

; 138  : 				if(this->iLoadedCount >= MAXZTTELEPORT)

  0037d	83 7e 14 0a	 cmp	 DWORD PTR [esi+20], 10	; 0000000aH
  00381	d9 6d 0a	 fldcw	 WORD PTR tv436[ebp]

; 139  : 				{
; 140  : 					break;
; 141  : 				}
; 142  : 			}
; 143  : 		}

  00384	0f 8c e6 fc ff
	ff		 jl	 $LL8@Read
$LN21@Read:

; 63   : 		return;
; 64   : 	}
; 65   : 
; 66   : 	int Token;
; 67   : 	int type = -1;
; 68   : 
; 69   : 	while ( true )
; 70   : 	{
; 71   : 	    Token = GetToken();

  0038a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 
; 73   :         if( Token == END )

  0038f	83 f8 02	 cmp	 eax, 2
  00392	0f 85 c8 fc ff
	ff		 jne	 $LL11@Read
  00398	5b		 pop	 ebx
$LN24@Read:

; 144  :     }
; 145  : 
; 146  : 	fclose(SMDFile);

  00399	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0039e	50		 push	 eax
  0039f	e8 00 00 00 00	 call	 _fclose
  003a4	83 c4 04	 add	 esp, 4
  003a7	5f		 pop	 edi
  003a8	5e		 pop	 esi

; 147  : }

  003a9	8b e5		 mov	 esp, ebp
  003ab	5d		 pop	 ebp
  003ac	c2 04 00	 ret	 4
?Read@ZtTeleport@@QAEXPAD@Z ENDP			; ZtTeleport::Read
_TEXT	ENDS
PUBLIC	?Timer@ZtTeleport@@QAEXXZ			; ZtTeleport::Timer
; Function compile flags: /Ogtp
;	COMDAT ?Timer@ZtTeleport@@QAEXXZ
_TEXT	SEGMENT
?Timer@ZtTeleport@@QAEXXZ PROC				; ZtTeleport::Timer, COMDAT
; _this$ = ecx

; 180  : #if(ENABLR_DEN_DEV)
; 181  : 	if(g_ZtLicense.CheckUser(eZtUB::eternalmu))
; 182  : 	{
; 183  : 		for (int aUserIndex = OBJ_STARTUSERINDZT; aUserIndex < OBJMAX; aUserIndex++)
; 184  : 		{
; 185  : 			if(OBJMAX_RANGE(aUserIndex) == 0)
; 186  : 			{
; 187  : 				continue;
; 188  : 			}
; 189  : 
; 190  : 			LPOBJ lpUser = &gObj[aUserIndex];
; 191  : 
; 192  : 			if(lpUser->Connected < PLAYER_PLAYING)
; 193  : 			{
; 194  : 				continue;
; 195  : 			}
; 196  : 		
; 197  : 			for(int i = 0; i < this->iLoadedCount; i++)
; 198  : 			{
; 199  : 				if(this->data[i].map == lpUser->MapNumber)
; 200  : 				{
; 201  : 					if(this->data[i].level > lpUser->Level)
; 202  : 					{
; 203  : 						gObjTeleport(aUserIndex, 0, 123, 123);
; 204  : 					}
; 205  : 					else if(this->data[i].reset > lpUser->Reset)
; 206  : 					{
; 207  : 						gObjTeleport(aUserIndex, 0, 123, 123);
; 208  : 					}
; 209  : 					else if(this->data[i].grand > lpUser->GReset)
; 210  : 					{
; 211  : 						gObjTeleport(aUserIndex, 0, 123, 123);
; 212  : 					}
; 213  : 					else if(this->data[i].Master)
; 214  : 					{
; 215  : 						if(!lpUser->ChangeUP3rd)
; 216  : 						{
; 217  : 							gObjTeleport(aUserIndex, 0, 123, 123);
; 218  : 						}
; 219  : 					}
; 220  : 				}
; 221  : 			}
; 222  : 		}
; 223  : 	}
; 224  : #endif
; 225  : }

  00000	c3		 ret	 0
?Timer@ZtTeleport@@QAEXXZ ENDP				; ZtTeleport::Timer
_TEXT	ENDS
PUBLIC	?Check@ZtTeleport@@QAE_NH@Z			; ZtTeleport::Check
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?Check@ZtTeleport@@QAE_NH@Z
_TEXT	SEGMENT
_aUserIndex$ = 8					; size = 4
?Check@ZtTeleport@@QAE_NH@Z PROC			; ZtTeleport::Check, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 230  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 0e		 js	 SHORT $LN15@Check
  0000a	33 d2		 xor	 edx, edx
  0000c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00011	0f 9e c2	 setle	 dl
  00014	85 d2		 test	 edx, edx
  00016	75 06		 jne	 SHORT $LN7@Check
$LN15@Check:

; 231  : 	{
; 232  : 		return false;

  00018	32 c0		 xor	 al, al

; 256  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN7@Check:

; 233  : 	}
; 234  : 
; 235  : 	LPOBJ lpUser = &gObj[aUserIndex];

  0001e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00024	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002a	57		 push	 edi
  0002b	8b f8		 mov	 edi, eax

; 236  : 
; 237  : 	if(!lpUser)
; 238  : 	{
; 239  : 		return false;

  0002d	74 06		 je	 SHORT $LN18@Check

; 240  : 	}
; 241  : 
; 242  : 	if(lpUser->Connected < PLAYER_PLAYING)

  0002f	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  00033	7d 07		 jge	 SHORT $LN5@Check
$LN18@Check:

; 243  : 	{
; 244  : 		return false;

  00035	32 c0		 xor	 al, al
  00037	5f		 pop	 edi

; 256  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN5@Check:
  0003c	56		 push	 esi
  0003d	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]

; 245  : 	}
; 246  : 
; 247  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00040	33 c0		 xor	 eax, eax
  00042	85 f6		 test	 esi, esi
  00044	7e 16		 jle	 SHORT $LN2@Check
  00046	8a 97 49 01 00
	00		 mov	 dl, BYTE PTR [edi+329]
  0004c	83 c1 18	 add	 ecx, 24			; 00000018H
  0004f	90		 npad	 1
$LL4@Check:

; 248  : 	{
; 249  : 		if(this->data[i].map == lpUser->MapNumber)

  00050	38 11		 cmp	 BYTE PTR [ecx], dl
  00052	74 10		 je	 SHORT $LN13@Check

; 245  : 	}
; 246  : 
; 247  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00054	40		 inc	 eax
  00055	83 c1 18	 add	 ecx, 24			; 00000018H
  00058	3b c6		 cmp	 eax, esi
  0005a	7c f4		 jl	 SHORT $LL4@Check
$LN2@Check:
  0005c	5e		 pop	 esi

; 252  : 		}
; 253  : 	}
; 254  : 
; 255  : 	return true;

  0005d	b0 01		 mov	 al, 1
  0005f	5f		 pop	 edi

; 256  : }

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN13@Check:
  00064	5e		 pop	 esi

; 250  : 		{
; 251  : 			return false;

  00065	32 c0		 xor	 al, al
  00067	5f		 pop	 edi

; 256  : }

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?Check@ZtTeleport@@QAE_NH@Z ENDP			; ZtTeleport::Check
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GCWindows@ZtTeleport@@QAEXH@Z			; ZtTeleport::GCWindows
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Ogtp
;	COMDAT ?GCWindows@ZtTeleport@@QAEXH@Z
_TEXT	SEGMENT
tv1306 = -384						; size = 4
tv1352 = -380						; size = 4
tv1348 = -380						; size = 4
_lpUser$ = -376						; size = 4
_pMsg$ = -372						; size = 368
__$ArrayPad$ = -4					; size = 4
_aUserIndex$ = 8					; size = 4
?GCWindows@ZtTeleport@@QAEXH@Z PROC			; ZtTeleport::GCWindows, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx

; 261  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00019	85 c0		 test	 eax, eax
  0001b	0f 88 ec 01 00
	00		 js	 $LN15@GCWindows
  00021	33 c9		 xor	 ecx, ecx
  00023	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00028	0f 9e c1	 setle	 cl
  0002b	85 c9		 test	 ecx, ecx
  0002d	0f 84 da 01 00
	00		 je	 $LN15@GCWindows

; 262  : 	{
; 263  : 		return;
; 264  : 	}
; 265  : 
; 266  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00033	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00039	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003f	57		 push	 edi
  00040	8b f8		 mov	 edi, eax

; 267  : 
; 268  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00042	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  00046	89 bd 88 fe ff
	ff		 mov	 DWORD PTR _lpUser$[ebp], edi
  0004c	0f 8c ba 01 00
	00		 jl	 $LN23@GCWindows

; 269  : 	{
; 270  : 		return;
; 271  : 	}
; 272  : 
; 273  : 	PMSG_GC_TELEPORTWIN pMsg;
; 274  : 	ZeroMemory(&pMsg, sizeof(pMsg));

  00052	53		 push	 ebx
  00053	68 70 01 00 00	 push	 368			; 00000170H
  00058	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0005e	6a 00		 push	 0
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _memset
  00066	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 275  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFA, 0x0F, sizeof(pMsg));
; 276  : 
; 277  : 	pMsg.count = this->iLoadedCount;

  00069	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	bb 01 00 00 00	 mov	 ebx, 1
  00074	c7 85 8c fe ff
	ff c2 01 70 fa	 mov	 DWORD PTR _pMsg$[ebp], -93322814 ; fa7001c2H
  0007e	c6 85 90 fe ff
	ff 0f		 mov	 BYTE PTR _pMsg$[ebp+4], 15 ; 0000000fH
  00085	88 8d 91 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], cl

; 278  : 	
; 279  : 
; 280  : 	for(int i = 0; i < this->iLoadedCount; i++)

  0008b	85 c0		 test	 eax, eax
  0008d	0f 8e 61 01 00
	00		 jle	 $LN10@GCWindows

; 269  : 	{
; 270  : 		return;
; 271  : 	}
; 272  : 
; 273  : 	PMSG_GC_TELEPORTWIN pMsg;
; 274  : 	ZeroMemory(&pMsg, sizeof(pMsg));

  00093	8d 8d 96 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+10]
  00099	8d 56 19	 lea	 edx, DWORD PTR [esi+25]
  0009c	89 85 80 fe ff
	ff		 mov	 DWORD PTR tv1306[ebp], eax
$LL12@GCWindows:

; 281  : 	{
; 282  : 		pMsg.tdata[i].result = 1;
; 283  : 		pMsg.tdata[i].map = this->data[i].map;

  000a2	0f b6 42 ff	 movzx	 eax, BYTE PTR [edx-1]
  000a6	88 41 ff	 mov	 BYTE PTR [ecx-1], al

; 284  : 		pMsg.tdata[i].x = this->data[i].x;

  000a9	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000ac	88 01		 mov	 BYTE PTR [ecx], al

; 285  : 		pMsg.tdata[i].y = this->data[i].y;

  000ae	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]

; 286  : 		pMsg.tdata[i].level = this->data[i].level;

  000b2	0f b7 72 03	 movzx	 esi, WORD PTR [edx+3]
  000b6	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 287  : 		pMsg.tdata[i].reset = this->data[i].reset;
; 288  : 		pMsg.tdata[i].grand = this->data[i].grand;

  000b9	0f b7 42 07	 movzx	 eax, WORD PTR [edx+7]
  000bd	0f b7 7a 05	 movzx	 edi, WORD PTR [edx+5]
  000c1	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 289  : 		pMsg.tdata[i].premium = this->data[i].premium;

  000c5	0f b6 42 09	 movzx	 eax, BYTE PTR [edx+9]
  000c9	88 41 0d	 mov	 BYTE PTR [ecx+13], al

; 290  : 		pMsg.tdata[i].zen = this->data[i].zen;

  000cc	8b 42 0b	 mov	 eax, DWORD PTR [edx+11]
  000cf	89 41 12	 mov	 DWORD PTR [ecx+18], eax

; 291  : 		pMsg.tdata[i].bonus = this->data[i].bonus;

  000d2	0f b7 42 0f	 movzx	 eax, WORD PTR [edx+15]
  000d6	66 89 41 18	 mov	 WORD PTR [ecx+24], ax

; 292  : 		pMsg.tdata[i].credit = this->data[i].credit;

  000da	0f b7 42 11	 movzx	 eax, WORD PTR [edx+17]
  000de	66 89 41 1c	 mov	 WORD PTR [ecx+28], ax

; 293  : 		pMsg.tdata[i].Master = this->data[i].Master;

  000e2	0f b6 42 13	 movzx	 eax, BYTE PTR [edx+19]
  000e6	88 41 1f	 mov	 BYTE PTR [ecx+31], al

; 294  : 
; 295  : 		pMsg.tdata[i].ok_level = 1;
; 296  : 		pMsg.tdata[i].ok_reset = 1;
; 297  : 		pMsg.tdata[i].ok_grand = 1;
; 298  : 		pMsg.tdata[i].ok_premium = 1;
; 299  : 		pMsg.tdata[i].ok_zen = 1;
; 300  : 		pMsg.tdata[i].ok_bonus = 1;
; 301  : 		pMsg.tdata[i].ok_credit = 1;
; 302  : 		pMsg.tdata[i].ok_Master = 1;
; 303  : 
; 304  : 		if(this->data[i].level > lpUser->Level)

  000e9	8b c6		 mov	 eax, esi
  000eb	66 89 71 02	 mov	 WORD PTR [ecx+2], si
  000ef	8b b5 88 fe ff
	ff		 mov	 esi, DWORD PTR _lpUser$[ebp]
  000f5	88 59 fe	 mov	 BYTE PTR [ecx-2], bl
  000f8	66 89 79 06	 mov	 WORD PTR [ecx+6], di
  000fc	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000ff	88 59 08	 mov	 BYTE PTR [ecx+8], bl
  00102	88 59 0c	 mov	 BYTE PTR [ecx+12], bl
  00105	88 59 0e	 mov	 BYTE PTR [ecx+14], bl
  00108	88 59 16	 mov	 BYTE PTR [ecx+22], bl
  0010b	88 59 1a	 mov	 BYTE PTR [ecx+26], bl
  0010e	88 59 1e	 mov	 BYTE PTR [ecx+30], bl
  00111	88 59 20	 mov	 BYTE PTR [ecx+32], bl
  00114	0f bf b6 be 00
	00 00		 movsx	 esi, WORD PTR [esi+190]
  0011b	3b c6		 cmp	 eax, esi
  0011d	7e 08		 jle	 SHORT $LN9@GCWindows

; 305  : 		{
; 306  : 			pMsg.tdata[i].result = 0;

  0011f	c6 41 fe 00	 mov	 BYTE PTR [ecx-2], 0

; 307  : 			pMsg.tdata[i].ok_level = 0;

  00123	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
$LN9@GCWindows:

; 308  : 		}
; 309  : 		if(this->data[i].reset > lpUser->Reset)

  00127	8b b5 88 fe ff
	ff		 mov	 esi, DWORD PTR _lpUser$[ebp]
  0012d	8b c7		 mov	 eax, edi
  0012f	3b 86 90 22 00
	00		 cmp	 eax, DWORD PTR [esi+8848]
  00135	7e 08		 jle	 SHORT $LN8@GCWindows

; 310  : 		{
; 311  : 			pMsg.tdata[i].result = 0;

  00137	c6 41 fe 00	 mov	 BYTE PTR [ecx-2], 0

; 312  : 			pMsg.tdata[i].ok_reset = 0;

  0013b	c6 41 08 00	 mov	 BYTE PTR [ecx+8], 0
$LN8@GCWindows:

; 313  : 		}
; 314  : 		if(this->data[i].grand > lpUser->GReset)

  0013f	0f b7 42 07	 movzx	 eax, WORD PTR [edx+7]
  00143	3b 86 94 22 00
	00		 cmp	 eax, DWORD PTR [esi+8852]
  00149	7e 08		 jle	 SHORT $LN7@GCWindows

; 315  : 		{
; 316  : 			pMsg.tdata[i].result = 0;

  0014b	c6 41 fe 00	 mov	 BYTE PTR [ecx-2], 0

; 317  : 			pMsg.tdata[i].ok_grand = 0;

  0014f	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN7@GCWindows:

; 318  : 		}
; 319  : 		if(this->data[i].premium > 0 && lpUser->PremiumTime == 0)

  00153	80 7a 09 00	 cmp	 BYTE PTR [edx+9], 0
  00157	76 11		 jbe	 SHORT $LN6@GCWindows
  00159	83 be b8 22 00
	00 00		 cmp	 DWORD PTR [esi+8888], 0
  00160	75 08		 jne	 SHORT $LN6@GCWindows

; 320  : 		{
; 321  : 			pMsg.tdata[i].result = 0;

  00162	c6 41 fe 00	 mov	 BYTE PTR [ecx-2], 0

; 322  : 			pMsg.tdata[i].ok_premium = 0;

  00166	c6 41 0e 00	 mov	 BYTE PTR [ecx+14], 0
$LN6@GCWindows:

; 323  : 		}
; 324  : #if(LICENSE_MUEVIL)
; 325  : 		if(this->data[i].premium > lpUser->PremiumTimeType)
; 326  : 		{
; 327  : 			pMsg.tdata[i].result = 0;
; 328  : 			pMsg.tdata[i].ok_premium = 0;
; 329  : 		}
; 330  : #endif
; 331  : 		if(this->data[i].zen > lpUser->Money)

  0016a	8b 42 0b	 mov	 eax, DWORD PTR [edx+11]
  0016d	3b 86 f0 00 00
	00		 cmp	 eax, DWORD PTR [esi+240]
  00173	76 08		 jbe	 SHORT $LN5@GCWindows

; 332  : 		{
; 333  : 			pMsg.tdata[i].result = 0;

  00175	c6 41 fe 00	 mov	 BYTE PTR [ecx-2], 0

; 334  : 			pMsg.tdata[i].ok_zen = 0;

  00179	c6 41 16 00	 mov	 BYTE PTR [ecx+22], 0
$LN5@GCWindows:

; 335  : 		}
; 336  : 		if(this->data[i].bonus > lpUser->GameShop.WCoinC)

  0017d	0f b7 42 0f	 movzx	 eax, WORD PTR [edx+15]
  00181	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv1352[ebp], eax
  00187	db 85 84 fe ff
	ff		 fild	 DWORD PTR tv1352[ebp]
  0018d	dc 9e 00 23 00
	00		 fcomp	 QWORD PTR [esi+8960]
  00193	df e0		 fnstsw	 ax
  00195	f6 c4 41	 test	 ah, 65			; 00000041H
  00198	75 08		 jne	 SHORT $LN4@GCWindows

; 337  : 		{
; 338  : 			pMsg.tdata[i].result = 0;

  0019a	c6 41 fe 00	 mov	 BYTE PTR [ecx-2], 0

; 339  : 			pMsg.tdata[i].ok_bonus = 0;

  0019e	c6 41 1a 00	 mov	 BYTE PTR [ecx+26], 0
$LN4@GCWindows:

; 340  : 		}
; 341  : 		if(this->data[i].credit > lpUser->ZtCred)

  001a2	0f b7 42 11	 movzx	 eax, WORD PTR [edx+17]
  001a6	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv1348[ebp], eax
  001ac	db 85 84 fe ff
	ff		 fild	 DWORD PTR tv1348[ebp]
  001b2	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  001b8	de d9		 fcompp
  001ba	df e0		 fnstsw	 ax
  001bc	f6 c4 05	 test	 ah, 5
  001bf	7a 08		 jp	 SHORT $LN3@GCWindows

; 342  : 		{
; 343  : 			pMsg.tdata[i].result = 0;

  001c1	c6 41 fe 00	 mov	 BYTE PTR [ecx-2], 0

; 344  : 			pMsg.tdata[i].ok_credit = 0;

  001c5	c6 41 1e 00	 mov	 BYTE PTR [ecx+30], 0
$LN3@GCWindows:

; 345  : 		}
; 346  : 		if(this->data[i].Master)

  001c9	80 7a 13 00	 cmp	 BYTE PTR [edx+19], 0
  001cd	74 11		 je	 SHORT $LN11@GCWindows

; 347  : 		{
; 348  : 			if(!lpUser->ChangeUP3rd)

  001cf	80 be bc 00 00
	00 00		 cmp	 BYTE PTR [esi+188], 0
  001d6	75 08		 jne	 SHORT $LN11@GCWindows

; 349  : 			{
; 350  : 				pMsg.tdata[i].result = 0;

  001d8	c6 41 fe 00	 mov	 BYTE PTR [ecx-2], 0

; 351  : 				pMsg.tdata[i].ok_Master = 0;

  001dc	c6 41 20 00	 mov	 BYTE PTR [ecx+32], 0
$LN11@GCWindows:

; 278  : 	
; 279  : 
; 280  : 	for(int i = 0; i < this->iLoadedCount; i++)

  001e0	83 c2 18	 add	 edx, 24			; 00000018H
  001e3	83 c1 24	 add	 ecx, 36			; 00000024H
  001e6	29 9d 80 fe ff
	ff		 sub	 DWORD PTR tv1306[ebp], ebx
  001ec	0f 85 b0 fe ff
	ff		 jne	 $LL12@GCWindows
  001f2	8b fe		 mov	 edi, esi
$LN10@GCWindows:

; 352  : 			}
; 353  : 		}
; 354  : 	}
; 355  : 
; 356  : 	DataSend(lpUser->m_Index, (LPBYTE)&pMsg, sizeof(pMsg));

  001f4	8b 17		 mov	 edx, DWORD PTR [edi]
  001f6	68 70 01 00 00	 push	 368			; 00000170H
  001fb	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00201	51		 push	 ecx
  00202	52		 push	 edx
  00203	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00208	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020b	5b		 pop	 ebx
$LN23@GCWindows:
  0020c	5f		 pop	 edi
$LN15@GCWindows:

; 357  : }

  0020d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00210	33 cd		 xor	 ecx, ebp
  00212	5e		 pop	 esi
  00213	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00218	8b e5		 mov	 esp, ebp
  0021a	5d		 pop	 ebp
  0021b	c2 04 00	 ret	 4
?GCWindows@ZtTeleport@@QAEXH@Z ENDP			; ZtTeleport::GCWindows
_TEXT	ENDS
PUBLIC	?CGResult@ZtTeleport@@QAEXPAUPMSG_CG_TELEPORTWINRES@@H@Z ; ZtTeleport::CGResult
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
; Function compile flags: /Ogtp
;	COMDAT ?CGResult@ZtTeleport@@QAEXPAUPMSG_CG_TELEPORTWINRES@@H@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
tv380 = 12						; size = 4
tv376 = 12						; size = 4
tv371 = 12						; size = 4
tv369 = 12						; size = 4
_aUserIndex$ = 12					; size = 4
?CGResult@ZtTeleport@@QAEXPAUPMSG_CG_TELEPORTWINRES@@H@Z PROC ; ZtTeleport::CGResult, COMDAT
; _this$ = ecx

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 362  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _aUserIndex$[ebp]
  00007	85 db		 test	 ebx, ebx
  00009	0f 88 53 01 00
	00		 js	 $LN12@CGResult
  0000f	33 c0		 xor	 eax, eax
  00011	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 40 01 00
	00		 je	 $LN12@CGResult

; 363  : 	{
; 364  : 		return;
; 365  : 	}
; 366  : 
; 367  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00022	56		 push	 esi
  00023	8b f3		 mov	 esi, ebx
  00025	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0002b	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 368  : 
; 369  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00031	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00035	0f 8c 26 01 00
	00		 jl	 $LN20@CGResult

; 370  : 	{
; 371  : 		return;
; 372  : 	}
; 373  : 
; 374  : 	int i = aRecv->result;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0003e	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]

; 375  : 
; 376  : 	if(i < 0 || i > this->iLoadedCount)

  00042	85 c0		 test	 eax, eax
  00044	0f 88 17 01 00
	00		 js	 $LN20@CGResult
  0004a	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  0004d	0f 8f 0e 01 00
	00		 jg	 $LN20@CGResult

; 377  : 	{
; 378  : 		return;
; 379  : 	}
; 380  : 
; 381  : 	if(this->data[i].level > lpUser->Level)

  00053	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00056	0f b7 44 d1 1c	 movzx	 eax, WORD PTR [ecx+edx*8+28]
  0005b	57		 push	 edi
  0005c	8d 3c d1	 lea	 edi, DWORD PTR [ecx+edx*8]
  0005f	0f bf 8e be 00
	00 00		 movsx	 ecx, WORD PTR [esi+190]
  00066	3b c1		 cmp	 eax, ecx
  00068	0f 8f f2 00 00
	00		 jg	 $LN21@CGResult

; 382  : 	{
; 383  : 		return;
; 384  : 	}
; 385  : 	if(this->data[i].reset > lpUser->Reset)

  0006e	0f b7 57 1e	 movzx	 edx, WORD PTR [edi+30]
  00072	3b 96 90 22 00
	00		 cmp	 edx, DWORD PTR [esi+8848]
  00078	0f 8f e2 00 00
	00		 jg	 $LN21@CGResult

; 386  : 	{
; 387  : 		return;
; 388  : 	}
; 389  : 	if(this->data[i].grand > lpUser->GReset)

  0007e	0f b7 47 20	 movzx	 eax, WORD PTR [edi+32]
  00082	3b 86 94 22 00
	00		 cmp	 eax, DWORD PTR [esi+8852]
  00088	0f 8f d2 00 00
	00		 jg	 $LN21@CGResult

; 390  : 	{
; 391  : 		return;
; 392  : 	}
; 393  : 	if(this->data[i].premium > 0)

  0008e	80 7f 22 00	 cmp	 BYTE PTR [edi+34], 0
  00092	76 0d		 jbe	 SHORT $LN7@CGResult

; 394  : 	{
; 395  : 		#if(LICENSE_MUEVIL)
; 396  : 		if(this->data[i].premium > lpUser->PremiumTimeType)
; 397  : 		{
; 398  : 			return;
; 399  : 		}
; 400  : 		#endif
; 401  : 		if(lpUser->PremiumTime <= 0)

  00094	83 be b8 22 00
	00 00		 cmp	 DWORD PTR [esi+8888], 0
  0009b	0f 8e bf 00 00
	00		 jle	 $LN21@CGResult
$LN7@CGResult:

; 402  : 		{
; 403  : 			return;
; 404  : 		}		
; 405  : 	}
; 406  : 	if(this->data[i].zen > lpUser->Money)

  000a1	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  000a4	8b 96 f0 00 00
	00		 mov	 edx, DWORD PTR [esi+240]
  000aa	3b ca		 cmp	 ecx, edx
  000ac	0f 87 ae 00 00
	00		 ja	 $LN21@CGResult

; 407  : 	{
; 408  : 		return;
; 409  : 	}
; 410  : 	if(this->data[i].bonus > lpUser->GameShop.WCoinC)

  000b2	0f b7 47 28	 movzx	 eax, WORD PTR [edi+40]
  000b6	89 45 0c	 mov	 DWORD PTR tv380[ebp], eax
  000b9	db 45 0c	 fild	 DWORD PTR tv380[ebp]
  000bc	dc 9e 00 23 00
	00		 fcomp	 QWORD PTR [esi+8960]
  000c2	df e0		 fnstsw	 ax
  000c4	f6 c4 41	 test	 ah, 65			; 00000041H
  000c7	0f 84 93 00 00
	00		 je	 $LN21@CGResult

; 411  : 	{
; 412  : 		return;
; 413  : 	}
; 414  : 	if(this->data[i].credit > lpUser->ZtCred)

  000cd	0f b7 47 2a	 movzx	 eax, WORD PTR [edi+42]
  000d1	89 45 0c	 mov	 DWORD PTR tv376[ebp], eax
  000d4	db 45 0c	 fild	 DWORD PTR tv376[ebp]
  000d7	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  000dd	de d9		 fcompp
  000df	df e0		 fnstsw	 ax
  000e1	f6 c4 05	 test	 ah, 5
  000e4	7b 7a		 jnp	 SHORT $LN21@CGResult

; 415  : 	{
; 416  : 		return;
; 417  : 	}
; 418  : 	// ----
; 419  : 	if(this->data[i].zen > 0)

  000e6	85 c9		 test	 ecx, ecx
  000e8	74 14		 je	 SHORT $LN3@CGResult

; 420  : 	{
; 421  : 		lpUser->Money -= this->data[i].zen;

  000ea	8b c2		 mov	 eax, edx
  000ec	2b c1		 sub	 eax, ecx

; 422  : 		GCMoneySend(aUserIndex, lpUser->Money);

  000ee	50		 push	 eax
  000ef	53		 push	 ebx
  000f0	89 86 f0 00 00
	00		 mov	 DWORD PTR [esi+240], eax
  000f6	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  000fb	83 c4 08	 add	 esp, 8
$LN3@CGResult:

; 423  : 	}
; 424  : 	if(this->data[i].bonus > 0)

  000fe	0f b7 47 28	 movzx	 eax, WORD PTR [edi+40]
  00102	66 85 c0	 test	 ax, ax
  00105	74 1b		 je	 SHORT $LN2@CGResult

; 425  : 	{
; 426  : 		lpUser->GameShop.WCoinC -= this->data[i].bonus;

  00107	89 45 0c	 mov	 DWORD PTR tv371[ebp], eax
  0010a	db 45 0c	 fild	 DWORD PTR tv371[ebp]

; 427  : 		ZtUserDataSend(aUserIndex);

  0010d	53		 push	 ebx
  0010e	dc ae 00 23 00
	00		 fsubr	 QWORD PTR [esi+8960]
  00114	dd 9e 00 23 00
	00		 fstp	 QWORD PTR [esi+8960]
  0011a	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  0011f	83 c4 04	 add	 esp, 4
$LN2@CGResult:

; 428  : 	}
; 429  : 	if(this->data[i].credit > 0)

  00122	0f b7 47 2a	 movzx	 eax, WORD PTR [edi+42]
  00126	66 85 c0	 test	 ax, ax
  00129	74 1d		 je	 SHORT $LN1@CGResult

; 430  : 	{
; 431  : 		lpUser->ZtCred -= this->data[i].credit;

  0012b	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  00131	89 45 0c	 mov	 DWORD PTR tv369[ebp], eax
  00134	db 45 0c	 fild	 DWORD PTR tv369[ebp]

; 432  : 		ZtUserDataSend(aUserIndex);

  00137	53		 push	 ebx
  00138	de e9		 fsubp	 ST(1), ST(0)
  0013a	d9 9e a8 22 00
	00		 fstp	 DWORD PTR [esi+8872]
  00140	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  00145	83 c4 04	 add	 esp, 4
$LN1@CGResult:

; 433  : 	}
; 434  : 
; 435  : 	gObjTeleport(aUserIndex, this->data[i].map, this->data[i].x, this->data[i].y);

  00148	0f b6 47 1a	 movzx	 eax, BYTE PTR [edi+26]
  0014c	0f b6 4f 19	 movzx	 ecx, BYTE PTR [edi+25]
  00150	0f b6 57 18	 movzx	 edx, BYTE PTR [edi+24]
  00154	50		 push	 eax
  00155	51		 push	 ecx
  00156	52		 push	 edx
  00157	53		 push	 ebx
  00158	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  0015d	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@CGResult:
  00160	5f		 pop	 edi
$LN20@CGResult:
  00161	5e		 pop	 esi
$LN12@CGResult:
  00162	5b		 pop	 ebx

; 436  : }

  00163	5d		 pop	 ebp
  00164	c2 08 00	 ret	 8
?CGResult@ZtTeleport@@QAEXPAUPMSG_CG_TELEPORTWINRES@@H@Z ENDP ; ZtTeleport::CGResult
_TEXT	ENDS
PUBLIC	??0ZtTeleport@@QAE@XZ				; ZtTeleport::ZtTeleport
; Function compile flags: /Ogtp
;	COMDAT ??0ZtTeleport@@QAE@XZ
_TEXT	SEGMENT
??0ZtTeleport@@QAE@XZ PROC				; ZtTeleport::ZtTeleport, COMDAT
; _this$ = ecx

; 17   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 18   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@ZtTeleport@@QAEXXZ ; ZtTeleport::Init

; 19   : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0ZtTeleport@@QAE@XZ ENDP				; ZtTeleport::ZtTeleport
_TEXT	ENDS
PUBLIC	??_C@_0BG@NFNJOLJC@ZtData?2ZtTeleport?4ini?$AA@	; `string'
PUBLIC	?Load@ZtTeleport@@QAEXXZ			; ZtTeleport::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?GetCustom@CZtLicense@@QAEHXZ:PROC		; CZtLicense::GetCustom
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
;	COMDAT ??_C@_0BG@NFNJOLJC@ZtData?2ZtTeleport?4ini?$AA@
CONST	SEGMENT
??_C@_0BG@NFNJOLJC@ZtData?2ZtTeleport?4ini?$AA@ DB 'ZtData\ZtTeleport.ini'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@ZtTeleport@@QAEXXZ
_TEXT	SEGMENT
?Load@ZtTeleport@@QAEXXZ PROC				; ZtTeleport::Load, COMDAT
; _this$ = ecx

; 40   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 41   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@ZtTeleport@@QAEXXZ ; ZtTeleport::Init

; 42   : 
; 43   : 	if( THINNAKORN_MAC == 1 || 
; 44   : 		g_ZtLicense.CheckUser(Artem) || 
; 45   : 		g_ZtLicense.CheckUser(eZtUB::Artem2) || 
; 46   : 		g_ZtLicense.CheckUser(eZtUB::Local) ||
; 47   : 		g_ZtLicense.CheckUser(eZtUB::MedoniAndrei) ||
; 48   : 		g_ZtLicense.CheckUser(eZtUB::GloryMU) ||
; 49   : 		g_ZtLicense.GetCustom())

  00008	6a 30		 push	 48			; 00000030H
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00014	84 c0		 test	 al, al
  00016	75 4e		 jne	 SHORT $LN1@Load
  00018	6a 31		 push	 49			; 00000031H
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00024	84 c0		 test	 al, al
  00026	75 3e		 jne	 SHORT $LN1@Load
  00028	6a 00		 push	 0
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00034	84 c0		 test	 al, al
  00036	75 2e		 jne	 SHORT $LN1@Load
  00038	6a 32		 push	 50			; 00000032H
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00044	84 c0		 test	 al, al
  00046	75 1e		 jne	 SHORT $LN1@Load
  00048	6a 46		 push	 70			; 00000046H
  0004a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0004f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00054	84 c0		 test	 al, al
  00056	75 0e		 jne	 SHORT $LN1@Load
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0005d	e8 00 00 00 00	 call	 ?GetCustom@CZtLicense@@QAEHXZ ; CZtLicense::GetCustom
  00062	85 c0		 test	 eax, eax
  00064	74 17		 je	 SHORT $LN2@Load
$LN1@Load:

; 50   : 	{
; 51   : 		this->Read(gDirPath.GetNewPath("ZtData\\ZtTeleport.ini"));

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NFNJOLJC@ZtData?2ZtTeleport?4ini?$AA@
  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00070	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00075	50		 push	 eax
  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?Read@ZtTeleport@@QAEXPAD@Z ; ZtTeleport::Read
$LN2@Load:
  0007d	5e		 pop	 esi

; 52   : 	}
; 53   : }

  0007e	c3		 ret	 0
?Load@ZtTeleport@@QAEXXZ ENDP				; ZtTeleport::Load
_TEXT	ENDS
PUBLIC	?Dialog@ZtTeleport@@QAE_NHH@Z			; ZtTeleport::Dialog
EXTRN	?gObjIsConnectedZt@@YA_NH@Z:PROC		; gObjIsConnectedZt
; Function compile flags: /Ogtp
;	COMDAT ?Dialog@ZtTeleport@@QAE_NHH@Z
_TEXT	SEGMENT
_aUserIndex$ = 8					; size = 4
_aNpcIndex$ = 12					; size = 4
?Dialog@ZtTeleport@@QAE_NHH@Z PROC			; ZtTeleport::Dialog, COMDAT
; _this$ = ecx

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 152  : 	if(!this->Enable)

  00006	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00009	75 07		 jne	 SHORT $LN3@Dialog

; 153  : 	{
; 154  :  		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 175  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
$LN3@Dialog:
  00012	57		 push	 edi

; 155  : 	}
; 156  : 
; 157  : 	if(!gObjIsConnectedZt(aUserIndex))

  00013	8b 7d 08	 mov	 edi, DWORD PTR _aUserIndex$[ebp]
  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 ?gObjIsConnectedZt@@YA_NH@Z ; gObjIsConnectedZt
  0001c	83 c4 04	 add	 esp, 4
  0001f	84 c0		 test	 al, al

; 158  : 	{
; 159  : 		return false;

  00021	74 4f		 je	 SHORT $LN1@Dialog

; 160  : 	}
; 161  : 
; 162  : 	LPOBJ lpUser = &gObj[aUserIndex];
; 163  : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  00023	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  00026	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 164  : 
; 165  : 	if(		lpNpc->Class		== this->NPC_Class 
; 166  : 		&&	lpNpc->MapNumber	== this->NPC_Map
; 167  : 		&&	lpNpc->X			== this->NPC_X
; 168  : 		&&	lpNpc->Y			== this->NPC_Y )

  00032	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00039	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0003c	75 34		 jne	 SHORT $LN1@Dialog
  0003e	0f b6 90 49 01
	00 00		 movzx	 edx, BYTE PTR [eax+329]
  00045	3b 56 08	 cmp	 edx, DWORD PTR [esi+8]
  00048	75 28		 jne	 SHORT $LN1@Dialog
  0004a	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00051	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  00054	75 1c		 jne	 SHORT $LN1@Dialog
  00056	0f bf 90 46 01
	00 00		 movsx	 edx, WORD PTR [eax+326]
  0005d	3b 56 10	 cmp	 edx, DWORD PTR [esi+16]
  00060	75 10		 jne	 SHORT $LN1@Dialog

; 169  : 	{
; 170  : 		this->GCWindows(aUserIndex);

  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?GCWindows@ZtTeleport@@QAEXH@Z ; ZtTeleport::GCWindows
  0006a	5f		 pop	 edi

; 171  : 		return true;

  0006b	b0 01		 mov	 al, 1
  0006d	5e		 pop	 esi

; 175  : }

  0006e	5d		 pop	 ebp
  0006f	c2 08 00	 ret	 8
$LN1@Dialog:
  00072	5f		 pop	 edi

; 172  : 	}
; 173  : 	// ----
; 174  : 	return false;

  00073	32 c0		 xor	 al, al
  00075	5e		 pop	 esi

; 175  : }

  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
?Dialog@ZtTeleport@@QAE_NHH@Z ENDP			; ZtTeleport::Dialog
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ZtTeleport@@YAXXZ
text$yc	SEGMENT
??__Eg_ZtTeleport@@YAXXZ PROC				; `dynamic initializer for 'g_ZtTeleport'', COMDAT

; 13   : ZtTeleport g_ZtTeleport;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtTeleport@@3VZtTeleport@@A ; g_ZtTeleport
  00005	e8 00 00 00 00	 call	 ??0ZtTeleport@@QAE@XZ	; ZtTeleport::ZtTeleport
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ZtTeleport@@YAXXZ ; `dynamic atexit destructor for 'g_ZtTeleport''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ZtTeleport@@YAXXZ ENDP				; `dynamic initializer for 'g_ZtTeleport''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ZtTeleport@@YAXXZ
text$yd	SEGMENT
??__Fg_ZtTeleport@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ZtTeleport'', COMDAT
  00000	c3		 ret	 0
??__Fg_ZtTeleport@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ZtTeleport''
text$yd	ENDS
PUBLIC	?g_ZtTeleport@@3VZtTeleport@@A			; g_ZtTeleport
_BSS	SEGMENT
?g_ZtTeleport@@3VZtTeleport@@A DB 0108H DUP (?)		; g_ZtTeleport
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ZtTeleport$initializer$ DD FLAT:??__Eg_ZtTeleport@@YAXXZ
CRT$XCU	ENDS
END
