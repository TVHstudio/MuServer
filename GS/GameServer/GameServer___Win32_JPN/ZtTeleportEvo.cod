; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ZtTeleportEvo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PWMSG_HEAD2@@QAEXPAEEEH@Z			; PWMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PWMSG_HEAD2@@QAEXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z PROC			; PWMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 149  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 		lpBuf[0] = 0xC2;
; 151  : 		lpBuf[1] = SET_NUMBERH(size);

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00009	8b d1		 mov	 edx, ecx
  0000b	c1 ea 08	 shr	 edx, 8
  0000e	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 152  : 		lpBuf[2] = SET_NUMBERL(size);
; 153  : 		lpBuf[3] = head;
; 154  : 		lpBuf[4] = sub;

  00011	8a 55 10	 mov	 dl, BYTE PTR _sub$[ebp]
  00014	88 48 02	 mov	 BYTE PTR [eax+2], cl
  00017	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  0001a	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H
  0001d	88 48 03	 mov	 BYTE PTR [eax+3], cl
  00020	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 155  : 	}

  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
?set@PWMSG_HEAD2@@QAEXPAEEEH@Z ENDP			; PWMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??1ZtTeleportEvo@@QAE@XZ			; ZtTeleportEvo::~ZtTeleportEvo
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\ztteleportevo.cpp
;	COMDAT ??1ZtTeleportEvo@@QAE@XZ
_TEXT	SEGMENT
??1ZtTeleportEvo@@QAE@XZ PROC				; ZtTeleportEvo::~ZtTeleportEvo, COMDAT
; _this$ = ecx

; 25   : }

  00000	c3		 ret	 0
??1ZtTeleportEvo@@QAE@XZ ENDP				; ZtTeleportEvo::~ZtTeleportEvo
_TEXT	ENDS
PUBLIC	?Init@ZtTeleportEvo@@QAEXXZ			; ZtTeleportEvo::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@ZtTeleportEvo@@QAEXXZ
_TEXT	SEGMENT
?Init@ZtTeleportEvo@@QAEXXZ PROC			; ZtTeleportEvo::Init, COMDAT
; _this$ = ecx

; 29   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 30   : 	ZeroMemory(this->data, sizeof(this->data));

  00004	68 40 01 00 00	 push	 320			; 00000140H
  00009	33 db		 xor	 ebx, ebx
  0000b	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0000e	53		 push	 ebx
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : 	this->Enable = 0;

  00018	88 1e		 mov	 BYTE PTR [esi], bl

; 32   : 	this->NPC_Class = 0;

  0001a	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 33   : 	this->NPC_Map = 0;

  0001d	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 34   : 	this->NPC_X = 0;

  00020	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 35   : 	this->NPC_Y = 0;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 36   : 	this->iLoadedCount = 0;

  00026	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 37   : }

  0002b	c3		 ret	 0
?Init@ZtTeleportEvo@@QAEXXZ ENDP			; ZtTeleportEvo::Init
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Read@ZtTeleportEvo@@QAEXPAD@Z			; ZtTeleportEvo::Read
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Read@ZtTeleportEvo@@QAEXPAD@Z
_TEXT	SEGMENT
tv438 = -8						; size = 8
tv470 = -4						; size = 4
tv468 = -4						; size = 4
tv462 = -4						; size = 4
tv460 = -4						; size = 4
tv454 = -4						; size = 4
tv452 = -4						; size = 4
tv446 = -4						; size = 4
tv444 = -4						; size = 4
tv436 = -4						; size = 4
tv430 = -4						; size = 4
tv428 = -4						; size = 4
tv422 = -4						; size = 4
tv420 = -4						; size = 4
tv286 = -4						; size = 4
tv271 = -4						; size = 4
tv261 = -4						; size = 4
tv256 = -4						; size = 4
tv236 = -4						; size = 4
tv229 = -4						; size = 4
tv208 = -4						; size = 4
tv201 = -4						; size = 4
tv180 = -4						; size = 4
tv173 = -4						; size = 4
tv152 = -4						; size = 4
tv150 = -4						; size = 4
tv145 = -4						; size = 4
tv131 = -4						; size = 4
tv128 = -4						; size = 4
tv73 = -4						; size = 4
_File$ = 8						; size = 4
tv465 = 10						; size = 2
tv457 = 10						; size = 2
tv449 = 10						; size = 2
tv441 = 10						; size = 2
tv433 = 10						; size = 2
tv425 = 10						; size = 2
tv417 = 10						; size = 2
tv226 = 10						; size = 2
tv218 = 10						; size = 2
tv190 = 10						; size = 2
tv181 = 10						; size = 2
tv162 = 10						; size = 2
tv141 = 10						; size = 2
tv89 = 10						; size = 2
tv85 = 10						; size = 2
?Read@ZtTeleportEvo@@QAEXPAD@Z PROC			; ZtTeleportEvo::Read, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi

; 53   : 	SMDFile = fopen(File, "r");

  00008	8b 7d 08	 mov	 edi, DWORD PTR _File$[ebp]
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00010	57		 push	 edi
  00011	8b f1		 mov	 esi, ecx
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 54   : 
; 55   : 	if( SMDFile == NULL )

  00020	85 c0		 test	 eax, eax
  00022	75 22		 jne	 SHORT $LN12@Read

; 56   : 	{
; 57   : 		LogAdd(lMsg.Get(MSGGET(1, 198)), File);

  00024	57		 push	 edi
  00025	68 c6 01 00 00	 push	 454			; 000001c6H
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003b	83 c4 08	 add	 esp, 8
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 149  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
$LN12@Read:

; 58   : 		return;
; 59   : 	}
; 60   : 
; 61   : 	int Token;
; 62   : 	int type = -1;
; 63   : 
; 64   : 	while ( true )
; 65   : 	{
; 66   : 	    Token = GetToken();

  00046	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 67   : 
; 68   :         if( Token == END )

  0004b	83 f8 02	 cmp	 eax, 2
  0004e	0f 84 0c 04 00
	00		 je	 $LN24@Read
  00054	53		 push	 ebx
  00055	bb 01 00 00 00	 mov	 ebx, 1
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL11@Read:

; 69   : 		{
; 70   :             break;
; 71   : 		}
; 72   : 
; 73   : 		//if(this->iLoadedCount >= MAXZTTELEPORT)
; 74   : 		//{
; 75   : 		//	break;
; 76   : 		//}
; 77   : 
; 78   : 		type = (int)TokenNumber;

  00060	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00066	e8 00 00 00 00	 call	 __ftol2_sse
  0006b	8b f8		 mov	 edi, eax
  0006d	8d 49 00	 npad	 3
$LL8@Read:

; 79   : 
; 80   : 		while ( true )
; 81   : 		{
; 82   : 			if ( type == 0 )

  00070	85 ff		 test	 edi, edi
  00072	0f 85 a6 00 00
	00		 jne	 $LN6@Read

; 83   : 			{
; 84   : 				Token = GetToken();

  00078	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 
; 86   : 				if ( strcmp("end", TokenString) == 0 )

  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00082	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL25@Read:
  00087	8a 10		 mov	 dl, BYTE PTR [eax]
  00089	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0008b	75 1a		 jne	 SHORT $LN26@Read
  0008d	84 d2		 test	 dl, dl
  0008f	74 12		 je	 SHORT $LN27@Read
  00091	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00094	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00097	75 0e		 jne	 SHORT $LN26@Read
  00099	83 c0 02	 add	 eax, 2
  0009c	83 c1 02	 add	 ecx, 2
  0009f	84 d2		 test	 dl, dl
  000a1	75 e4		 jne	 SHORT $LL25@Read
$LN27@Read:
  000a3	33 c0		 xor	 eax, eax
  000a5	eb 05		 jmp	 SHORT $LN28@Read
$LN26@Read:
  000a7	1b c0		 sbb	 eax, eax
  000a9	83 d8 ff	 sbb	 eax, -1
$LN28@Read:
  000ac	85 c0		 test	 eax, eax
  000ae	0f 84 9d 03 00
	00		 je	 $LN21@Read

; 87   : 				{
; 88   : 					break;
; 89   : 				}
; 90   : 
; 91   : 				this->Enable = TokenNumber;

  000b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ba	d9 ee		 fldz
  000bc	da e9		 fucompp
  000be	df e0		 fnstsw	 ax
  000c0	f6 c4 44	 test	 ah, 68			; 00000044H
  000c3	7b 04		 jnp	 SHORT $LN15@Read
  000c5	8a c3		 mov	 al, bl
  000c7	eb 02		 jmp	 SHORT $LN16@Read
$LN15@Read:
  000c9	32 c0		 xor	 al, al
$LN16@Read:
  000cb	88 06		 mov	 BYTE PTR [esi], al

; 92   : 				Token = GetToken();

  000cd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 93   : 				this->NPC_Class = TokenNumber;

  000d2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d8	e8 00 00 00 00	 call	 __ftol2_sse
  000dd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 94   : 				Token = GetToken();

  000e0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 95   : 				this->NPC_Map = TokenNumber;

  000e5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000eb	e8 00 00 00 00	 call	 __ftol2_sse
  000f0	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 96   : 				Token = GetToken();

  000f3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 				this->NPC_X = TokenNumber;

  000f8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fe	e8 00 00 00 00	 call	 __ftol2_sse
  00103	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 98   : 				Token = GetToken();

  00106	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 99   : 				this->NPC_Y = TokenNumber;

  0010b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00111	e8 00 00 00 00	 call	 __ftol2_sse
  00116	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00119	e9 52 ff ff ff	 jmp	 $LL8@Read
$LN6@Read:

; 100  : 			}
; 101  : 			else if( type == 1 )

  0011e	3b fb		 cmp	 edi, ebx
  00120	0f 85 4a ff ff
	ff		 jne	 $LL8@Read

; 102  : 			{
; 103  : 				Token = GetToken();

  00126	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 104  : 
; 105  : 				if ( strcmp("end", TokenString) == 0 )

  0012b	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00130	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL29@Read:
  00135	8a 10		 mov	 dl, BYTE PTR [eax]
  00137	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00139	75 1a		 jne	 SHORT $LN30@Read
  0013b	84 d2		 test	 dl, dl
  0013d	74 12		 je	 SHORT $LN31@Read
  0013f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00142	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00145	75 0e		 jne	 SHORT $LN30@Read
  00147	83 c0 02	 add	 eax, 2
  0014a	83 c1 02	 add	 ecx, 2
  0014d	84 d2		 test	 dl, dl
  0014f	75 e4		 jne	 SHORT $LL29@Read
$LN31@Read:
  00151	33 c0		 xor	 eax, eax
  00153	eb 05		 jmp	 SHORT $LN32@Read
$LN30@Read:
  00155	1b c0		 sbb	 eax, eax
  00157	83 d8 ff	 sbb	 eax, -1
$LN32@Read:
  0015a	85 c0		 test	 eax, eax
  0015c	0f 84 ef 02 00
	00		 je	 $LN21@Read

; 106  : 				{
; 107  : 					break;
; 108  : 				}
; 109  : 
; 110  : 				this->data[this->iLoadedCount].map = TokenNumber;

  00162	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00168	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0016b	d9 7d 0a	 fnstcw	 WORD PTR tv226[ebp]
  0016e	c1 e1 05	 shl	 ecx, 5
  00171	0f b7 45 0a	 movzx	 eax, WORD PTR tv226[ebp]
  00175	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0017a	89 45 fc	 mov	 DWORD PTR tv256[ebp], eax
  0017d	d9 6d fc	 fldcw	 WORD PTR tv256[ebp]
  00180	db 5d fc	 fistp	 DWORD PTR tv271[ebp]
  00183	0f b6 45 fc	 movzx	 eax, BYTE PTR tv271[ebp]
  00187	88 44 31 18	 mov	 BYTE PTR [ecx+esi+24], al
  0018b	d9 6d 0a	 fldcw	 WORD PTR tv226[ebp]

; 111  : 				Token = GetToken();

  0018e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 112  : 				this->data[this->iLoadedCount].x = TokenNumber;

  00193	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00199	d9 7d 0a	 fnstcw	 WORD PTR tv181[ebp]
  0019c	0f b7 45 0a	 movzx	 eax, WORD PTR tv181[ebp]
  001a0	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001a5	89 45 fc	 mov	 DWORD PTR tv261[ebp], eax
  001a8	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001ab	c1 e0 05	 shl	 eax, 5
  001ae	d9 6d fc	 fldcw	 WORD PTR tv261[ebp]
  001b1	db 5d fc	 fistp	 DWORD PTR tv150[ebp]
  001b4	0f b6 55 fc	 movzx	 edx, BYTE PTR tv150[ebp]
  001b8	88 54 30 19	 mov	 BYTE PTR [eax+esi+25], dl
  001bc	d9 6d 0a	 fldcw	 WORD PTR tv181[ebp]

; 113  : 				Token = GetToken();

  001bf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 				this->data[this->iLoadedCount].y = TokenNumber;

  001c4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001c7	c1 e2 05	 shl	 edx, 5
  001ca	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001d0	d9 7d 0a	 fnstcw	 WORD PTR tv141[ebp]
  001d3	0f b7 45 0a	 movzx	 eax, WORD PTR tv141[ebp]
  001d7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001dc	89 45 fc	 mov	 DWORD PTR tv131[ebp], eax
  001df	d9 6d fc	 fldcw	 WORD PTR tv131[ebp]
  001e2	db 5d fc	 fistp	 DWORD PTR tv128[ebp]
  001e5	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv128[ebp]
  001e9	88 4c 32 1a	 mov	 BYTE PTR [edx+esi+26], cl
  001ed	d9 6d 0a	 fldcw	 WORD PTR tv141[ebp]

; 115  : 				Token = GetToken();

  001f0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 116  : 				this->data[this->iLoadedCount].min_level = TokenNumber;

  001f5	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001f8	c1 e1 05	 shl	 ecx, 5
  001fb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00201	d9 7d 0a	 fnstcw	 WORD PTR tv89[ebp]
  00204	0f b7 45 0a	 movzx	 eax, WORD PTR tv89[ebp]
  00208	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0020d	89 45 fc	 mov	 DWORD PTR tv236[ebp], eax
  00210	d9 6d fc	 fldcw	 WORD PTR tv236[ebp]
  00213	db 5d fc	 fistp	 DWORD PTR tv229[ebp]
  00216	0f b7 45 fc	 movzx	 eax, WORD PTR tv229[ebp]
  0021a	66 89 44 31 1c	 mov	 WORD PTR [ecx+esi+28], ax
  0021f	d9 6d 0a	 fldcw	 WORD PTR tv89[ebp]

; 117  : 				Token = GetToken();

  00222	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 118  : 				this->data[this->iLoadedCount].max_level = TokenNumber;

  00227	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0022d	d9 7d 0a	 fnstcw	 WORD PTR tv218[ebp]
  00230	0f b7 45 0a	 movzx	 eax, WORD PTR tv218[ebp]
  00234	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00239	89 45 fc	 mov	 DWORD PTR tv208[ebp], eax
  0023c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0023f	c1 e0 05	 shl	 eax, 5
  00242	d9 6d fc	 fldcw	 WORD PTR tv208[ebp]
  00245	db 5d fc	 fistp	 DWORD PTR tv201[ebp]
  00248	0f b7 55 fc	 movzx	 edx, WORD PTR tv201[ebp]
  0024c	66 89 54 30 1e	 mov	 WORD PTR [eax+esi+30], dx
  00251	d9 6d 0a	 fldcw	 WORD PTR tv218[ebp]

; 119  : 				Token = GetToken();

  00254	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 120  : 				this->data[this->iLoadedCount].min_reset = TokenNumber;

  00259	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0025c	03 d3		 add	 edx, ebx
  0025e	c1 e2 05	 shl	 edx, 5
  00261	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00267	d9 7d 0a	 fnstcw	 WORD PTR tv190[ebp]
  0026a	0f b7 45 0a	 movzx	 eax, WORD PTR tv190[ebp]
  0026e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00273	89 45 fc	 mov	 DWORD PTR tv180[ebp], eax
  00276	d9 6d fc	 fldcw	 WORD PTR tv180[ebp]
  00279	db 5d fc	 fistp	 DWORD PTR tv173[ebp]
  0027c	0f b7 4d fc	 movzx	 ecx, WORD PTR tv173[ebp]
  00280	66 89 0c 32	 mov	 WORD PTR [edx+esi], cx
  00284	d9 6d 0a	 fldcw	 WORD PTR tv190[ebp]

; 121  : 				Token = GetToken();

  00287	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 				this->data[this->iLoadedCount].max_reset = TokenNumber;

  0028c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00292	d9 7d 0a	 fnstcw	 WORD PTR tv162[ebp]
  00295	0f b7 45 0a	 movzx	 eax, WORD PTR tv162[ebp]
  00299	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0029c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002a1	89 45 fc	 mov	 DWORD PTR tv152[ebp], eax
  002a4	c1 e1 05	 shl	 ecx, 5
  002a7	d9 6d fc	 fldcw	 WORD PTR tv152[ebp]
  002aa	db 5d fc	 fistp	 DWORD PTR tv145[ebp]
  002ad	0f b7 45 fc	 movzx	 eax, WORD PTR tv145[ebp]
  002b1	66 89 44 31 22	 mov	 WORD PTR [ecx+esi+34], ax
  002b6	d9 6d 0a	 fldcw	 WORD PTR tv162[ebp]

; 123  : 				Token = GetToken();

  002b9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 124  : 				this->data[this->iLoadedCount].min_grand = TokenNumber;

  002be	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c4	d9 7d 0a	 fnstcw	 WORD PTR tv85[ebp]
  002c7	0f b7 45 0a	 movzx	 eax, WORD PTR tv85[ebp]
  002cb	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002d0	89 45 fc	 mov	 DWORD PTR tv73[ebp], eax
  002d3	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  002d6	c1 e0 05	 shl	 eax, 5
  002d9	d9 6d fc	 fldcw	 WORD PTR tv73[ebp]
  002dc	db 5d fc	 fistp	 DWORD PTR tv286[ebp]
  002df	0f b7 55 fc	 movzx	 edx, WORD PTR tv286[ebp]
  002e3	66 89 54 30 24	 mov	 WORD PTR [eax+esi+36], dx
  002e8	d9 6d 0a	 fldcw	 WORD PTR tv85[ebp]

; 125  : 				Token = GetToken();

  002eb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 126  : 				this->data[this->iLoadedCount].max_grand = TokenNumber;

  002f0	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  002f3	c1 e2 05	 shl	 edx, 5
  002f6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002fc	d9 7d 0a	 fnstcw	 WORD PTR tv417[ebp]
  002ff	0f b7 45 0a	 movzx	 eax, WORD PTR tv417[ebp]
  00303	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00308	89 45 fc	 mov	 DWORD PTR tv420[ebp], eax
  0030b	d9 6d fc	 fldcw	 WORD PTR tv420[ebp]
  0030e	db 5d fc	 fistp	 DWORD PTR tv422[ebp]
  00311	0f b7 4d fc	 movzx	 ecx, WORD PTR tv422[ebp]
  00315	66 89 4c 32 26	 mov	 WORD PTR [edx+esi+38], cx
  0031a	d9 6d 0a	 fldcw	 WORD PTR tv417[ebp]

; 127  : 				Token = GetToken();

  0031d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 128  : 				this->data[this->iLoadedCount].premium = TokenNumber;

  00322	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00325	c1 e1 05	 shl	 ecx, 5
  00328	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0032e	d9 7d 0a	 fnstcw	 WORD PTR tv425[ebp]
  00331	0f b7 45 0a	 movzx	 eax, WORD PTR tv425[ebp]
  00335	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0033a	89 45 fc	 mov	 DWORD PTR tv428[ebp], eax
  0033d	d9 6d fc	 fldcw	 WORD PTR tv428[ebp]
  00340	db 5d fc	 fistp	 DWORD PTR tv430[ebp]
  00343	0f b6 45 fc	 movzx	 eax, BYTE PTR tv430[ebp]
  00347	88 44 31 28	 mov	 BYTE PTR [ecx+esi+40], al
  0034b	d9 6d 0a	 fldcw	 WORD PTR tv425[ebp]

; 129  : 				Token = GetToken();

  0034e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 130  : 				this->data[this->iLoadedCount].zen = TokenNumber;

  00353	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00359	d9 7d 0a	 fnstcw	 WORD PTR tv433[ebp]
  0035c	0f b7 45 0a	 movzx	 eax, WORD PTR tv433[ebp]
  00360	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00365	89 45 fc	 mov	 DWORD PTR tv436[ebp], eax
  00368	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0036b	c1 e0 05	 shl	 eax, 5
  0036e	d9 6d fc	 fldcw	 WORD PTR tv436[ebp]
  00371	df 7d f8	 fistp	 QWORD PTR tv438[ebp]
  00374	8b 55 f8	 mov	 edx, DWORD PTR tv438[ebp]
  00377	89 54 30 2c	 mov	 DWORD PTR [eax+esi+44], edx
  0037b	d9 6d 0a	 fldcw	 WORD PTR tv433[ebp]

; 131  : 				Token = GetToken();

  0037e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 132  : 				this->data[this->iLoadedCount].bonus = TokenNumber;

  00383	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00386	c1 e2 05	 shl	 edx, 5
  00389	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0038f	d9 7d 0a	 fnstcw	 WORD PTR tv441[ebp]
  00392	0f b7 45 0a	 movzx	 eax, WORD PTR tv441[ebp]
  00396	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0039b	89 45 fc	 mov	 DWORD PTR tv444[ebp], eax
  0039e	d9 6d fc	 fldcw	 WORD PTR tv444[ebp]
  003a1	db 5d fc	 fistp	 DWORD PTR tv446[ebp]
  003a4	0f b7 4d fc	 movzx	 ecx, WORD PTR tv446[ebp]
  003a8	66 89 4c 32 30	 mov	 WORD PTR [edx+esi+48], cx
  003ad	d9 6d 0a	 fldcw	 WORD PTR tv441[ebp]

; 133  : 				Token = GetToken();

  003b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 134  : 				this->data[this->iLoadedCount].credit = TokenNumber;

  003b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003bb	d9 7d 0a	 fnstcw	 WORD PTR tv449[ebp]
  003be	0f b7 45 0a	 movzx	 eax, WORD PTR tv449[ebp]
  003c2	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003c7	89 45 fc	 mov	 DWORD PTR tv452[ebp], eax
  003ca	d9 6d fc	 fldcw	 WORD PTR tv452[ebp]
  003cd	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  003d0	c1 e1 05	 shl	 ecx, 5
  003d3	db 5d fc	 fistp	 DWORD PTR tv454[ebp]
  003d6	0f b7 45 fc	 movzx	 eax, WORD PTR tv454[ebp]
  003da	66 89 44 31 32	 mov	 WORD PTR [ecx+esi+50], ax
  003df	d9 6d 0a	 fldcw	 WORD PTR tv449[ebp]

; 135  : 				Token = GetToken();

  003e2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 136  : 				this->data[this->iLoadedCount].Master = TokenNumber;

  003e7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003ed	d9 7d 0a	 fnstcw	 WORD PTR tv457[ebp]
  003f0	0f b7 45 0a	 movzx	 eax, WORD PTR tv457[ebp]
  003f4	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  003f9	89 45 fc	 mov	 DWORD PTR tv460[ebp], eax
  003fc	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  003ff	c1 e0 05	 shl	 eax, 5
  00402	d9 6d fc	 fldcw	 WORD PTR tv460[ebp]
  00405	db 5d fc	 fistp	 DWORD PTR tv462[ebp]
  00408	0f b6 55 fc	 movzx	 edx, BYTE PTR tv462[ebp]
  0040c	88 54 30 34	 mov	 BYTE PTR [eax+esi+52], dl
  00410	d9 6d 0a	 fldcw	 WORD PTR tv457[ebp]

; 137  : 				Token = GetToken();

  00413	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 138  : 				this->data[this->iLoadedCount].EmptyInv = TokenNumber;

  00418	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0041b	c1 e2 05	 shl	 edx, 5
  0041e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00424	d9 7d 0a	 fnstcw	 WORD PTR tv465[ebp]
  00427	0f b7 45 0a	 movzx	 eax, WORD PTR tv465[ebp]
  0042b	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00430	89 45 fc	 mov	 DWORD PTR tv468[ebp], eax
  00433	d9 6d fc	 fldcw	 WORD PTR tv468[ebp]
  00436	db 5d fc	 fistp	 DWORD PTR tv470[ebp]
  00439	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv470[ebp]
  0043d	88 4c 32 35	 mov	 BYTE PTR [edx+esi+53], cl

; 139  : 				this->iLoadedCount++;

  00441	01 5e 14	 add	 DWORD PTR [esi+20], ebx

; 140  : 				if(this->iLoadedCount >= MAXZTTELEPORT)

  00444	83 7e 14 0a	 cmp	 DWORD PTR [esi+20], 10	; 0000000aH
  00448	d9 6d 0a	 fldcw	 WORD PTR tv465[ebp]

; 141  : 				{
; 142  : 					break;
; 143  : 				}
; 144  : 			}
; 145  : 		}

  0044b	0f 8c 1f fc ff
	ff		 jl	 $LL8@Read
$LN21@Read:

; 58   : 		return;
; 59   : 	}
; 60   : 
; 61   : 	int Token;
; 62   : 	int type = -1;
; 63   : 
; 64   : 	while ( true )
; 65   : 	{
; 66   : 	    Token = GetToken();

  00451	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 67   : 
; 68   :         if( Token == END )

  00456	83 f8 02	 cmp	 eax, 2
  00459	0f 85 01 fc ff
	ff		 jne	 $LL11@Read
  0045f	5b		 pop	 ebx
$LN24@Read:

; 146  :     }
; 147  : 
; 148  : 	fclose(SMDFile);

  00460	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00465	50		 push	 eax
  00466	e8 00 00 00 00	 call	 _fclose
  0046b	83 c4 04	 add	 esp, 4
  0046e	5f		 pop	 edi
  0046f	5e		 pop	 esi

; 149  : }

  00470	8b e5		 mov	 esp, ebp
  00472	5d		 pop	 ebp
  00473	c2 04 00	 ret	 4
?Read@ZtTeleportEvo@@QAEXPAD@Z ENDP			; ZtTeleportEvo::Read
_TEXT	ENDS
PUBLIC	?Timer@ZtTeleportEvo@@QAEXXZ			; ZtTeleportEvo::Timer
; Function compile flags: /Ogtp
;	COMDAT ?Timer@ZtTeleportEvo@@QAEXXZ
_TEXT	SEGMENT
?Timer@ZtTeleportEvo@@QAEXXZ PROC			; ZtTeleportEvo::Timer, COMDAT
; _this$ = ecx

; 182  : 	
; 183  : }

  00000	c3		 ret	 0
?Timer@ZtTeleportEvo@@QAEXXZ ENDP			; ZtTeleportEvo::Timer
_TEXT	ENDS
PUBLIC	?Check@ZtTeleportEvo@@QAE_NH@Z			; ZtTeleportEvo::Check
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?Check@ZtTeleportEvo@@QAE_NH@Z
_TEXT	SEGMENT
_aUserIndex$ = 8					; size = 4
?Check@ZtTeleportEvo@@QAE_NH@Z PROC			; ZtTeleportEvo::Check, COMDAT
; _this$ = ecx

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 188  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 0e		 js	 SHORT $LN15@Check
  0000a	33 d2		 xor	 edx, edx
  0000c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00011	0f 9e c2	 setle	 dl
  00014	85 d2		 test	 edx, edx
  00016	75 06		 jne	 SHORT $LN7@Check
$LN15@Check:

; 189  : 	{
; 190  : 		return false;

  00018	32 c0		 xor	 al, al

; 214  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN7@Check:

; 191  : 	}
; 192  : 
; 193  : 	LPOBJ lpUser = &gObj[aUserIndex];

  0001e	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00024	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002a	57		 push	 edi
  0002b	8b f8		 mov	 edi, eax

; 194  : 
; 195  : 	if(!lpUser)
; 196  : 	{
; 197  : 		return false;

  0002d	74 06		 je	 SHORT $LN18@Check

; 198  : 	}
; 199  : 
; 200  : 	if(lpUser->Connected < PLAYER_PLAYING)

  0002f	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  00033	7d 07		 jge	 SHORT $LN5@Check
$LN18@Check:

; 201  : 	{
; 202  : 		return false;

  00035	32 c0		 xor	 al, al
  00037	5f		 pop	 edi

; 214  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN5@Check:
  0003c	56		 push	 esi
  0003d	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]

; 203  : 	}
; 204  : 
; 205  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00040	33 c0		 xor	 eax, eax
  00042	85 f6		 test	 esi, esi
  00044	7e 16		 jle	 SHORT $LN2@Check
  00046	8a 97 49 01 00
	00		 mov	 dl, BYTE PTR [edi+329]
  0004c	83 c1 18	 add	 ecx, 24			; 00000018H
  0004f	90		 npad	 1
$LL4@Check:

; 206  : 	{
; 207  : 		if(this->data[i].map == lpUser->MapNumber)

  00050	38 11		 cmp	 BYTE PTR [ecx], dl
  00052	74 10		 je	 SHORT $LN13@Check

; 203  : 	}
; 204  : 
; 205  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00054	40		 inc	 eax
  00055	83 c1 20	 add	 ecx, 32			; 00000020H
  00058	3b c6		 cmp	 eax, esi
  0005a	7c f4		 jl	 SHORT $LL4@Check
$LN2@Check:
  0005c	5e		 pop	 esi

; 210  : 		}
; 211  : 	}
; 212  : 
; 213  : 	return true;

  0005d	b0 01		 mov	 al, 1
  0005f	5f		 pop	 edi

; 214  : }

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN13@Check:
  00064	5e		 pop	 esi

; 208  : 		{
; 209  : 			return false;

  00065	32 c0		 xor	 al, al
  00067	5f		 pop	 edi

; 214  : }

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?Check@ZtTeleportEvo@@QAE_NH@Z ENDP			; ZtTeleportEvo::Check
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GCWindows@ZtTeleportEvo@@QAEXH@Z		; ZtTeleportEvo::GCWindows
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Ogtp
;	COMDAT ?GCWindows@ZtTeleportEvo@@QAEXH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -468					; size = 4
_i$210502 = -464					; size = 4
_lpUser$ = -460						; size = 4
tv1762 = -456						; size = 4
tv1758 = -456						; size = 4
tv734 = -456						; size = 4
_pMsg$ = -452						; size = 448
__$ArrayPad$ = -4					; size = 4
_aUserIndex$ = 8					; size = 4
?GCWindows@ZtTeleportEvo@@QAEXH@Z PROC			; ZtTeleportEvo::GCWindows, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 01 00
	00		 sub	 esp, 468		; 000001d4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _aUserIndex$[ebp]
  00016	57		 push	 edi
  00017	8b f9		 mov	 edi, ecx

; 236  : 	
; 237  : 
; 238  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00019	89 bd 2c fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0001f	85 c0		 test	 eax, eax
  00021	0f 88 96 02 00
	00		 js	 $LN23@GCWindows

; 219  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00027	33 c9		 xor	 ecx, ecx
  00029	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  0002e	0f 9e c1	 setle	 cl
  00031	85 c9		 test	 ecx, ecx
  00033	0f 84 84 02 00
	00		 je	 $LN23@GCWindows

; 220  : 	{
; 221  : 		return;
; 222  : 	}
; 223  : 
; 224  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00039	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00045	56		 push	 esi
  00046	8b f0		 mov	 esi, eax

; 225  : 
; 226  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00048	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  0004c	89 b5 34 fe ff
	ff		 mov	 DWORD PTR _lpUser$[ebp], esi
  00052	0f 8c 64 02 00
	00		 jl	 $LN36@GCWindows

; 227  : 	{
; 228  : 		return;
; 229  : 	}
; 230  : 
; 231  : 	PMSG_GC_TELEPORTWINEVO pMsg;
; 232  : 	ZeroMemory(&pMsg, sizeof(pMsg));

  00058	53		 push	 ebx
  00059	68 c0 01 00 00	 push	 448			; 000001c0H
  0005e	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00064	6a 00		 push	 0
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _memset

; 233  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFA, 0x12, sizeof(pMsg));
; 234  : 
; 235  : 	pMsg.count = this->iLoadedCount;

  0006c	8a 4f 14	 mov	 cl, BYTE PTR [edi+20]
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 236  : 	
; 237  : 
; 238  : 	for(int i = 0; i < this->iLoadedCount; i++)

  00072	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
  00076	bb 01 00 00 00	 mov	 ebx, 1
  0007b	c7 85 3c fe ff
	ff c2 01 c0 fa	 mov	 DWORD PTR _pMsg$[ebp], -88079934 ; fac001c2H
  00085	c6 85 40 fe ff
	ff 12		 mov	 BYTE PTR _pMsg$[ebp+4], 18 ; 00000012H
  0008c	88 8d 41 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], cl
  00092	c7 85 30 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$210502[ebp], 0
  0009c	0f 8e 02 02 00
	00		 jle	 $LN18@GCWindows

; 227  : 	{
; 228  : 		return;
; 229  : 	}
; 230  : 
; 231  : 	PMSG_GC_TELEPORTWINEVO pMsg;
; 232  : 	ZeroMemory(&pMsg, sizeof(pMsg));

  000a2	8d b5 46 fe ff
	ff		 lea	 esi, DWORD PTR _pMsg$[ebp+10]
  000a8	83 c7 19	 add	 edi, 25			; 00000019H
  000ab	eb 03 8d 49 00	 npad	 5
$LL20@GCWindows:

; 239  : 	{
; 240  : 		pMsg.tdata[i].result = 1;
; 241  : 		pMsg.tdata[i].map = this->data[i].map;

  000b0	0f b6 57 ff	 movzx	 edx, BYTE PTR [edi-1]
  000b4	88 56 ff	 mov	 BYTE PTR [esi-1], dl

; 242  : 		pMsg.tdata[i].x = this->data[i].x;
; 243  : 		pMsg.tdata[i].y = this->data[i].y;
; 244  : 		pMsg.tdata[i].min_level = this->data[i].min_level;
; 245  : 		pMsg.tdata[i].max_level = this->data[i].max_level;
; 246  : 		pMsg.tdata[i].min_reset = this->data[i].min_reset;

  000b7	0f b7 57 07	 movzx	 edx, WORD PTR [edi+7]
  000bb	66 89 56 08	 mov	 WORD PTR [esi+8], dx

; 247  : 		pMsg.tdata[i].max_reset = this->data[i].max_reset;

  000bf	0f b7 57 09	 movzx	 edx, WORD PTR [edi+9]
  000c3	66 89 56 0a	 mov	 WORD PTR [esi+10], dx

; 248  : 		pMsg.tdata[i].min_grand = this->data[i].min_grand;

  000c7	0f b7 57 0b	 movzx	 edx, WORD PTR [edi+11]
  000cb	66 89 56 0e	 mov	 WORD PTR [esi+14], dx

; 249  : 		pMsg.tdata[i].max_grand = this->data[i].max_grand;

  000cf	0f b7 57 0d	 movzx	 edx, WORD PTR [edi+13]
  000d3	8a 07		 mov	 al, BYTE PTR [edi]
  000d5	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000d8	66 89 56 10	 mov	 WORD PTR [esi+16], dx

; 250  : 		pMsg.tdata[i].premium = this->data[i].premium;

  000dc	0f b6 57 0f	 movzx	 edx, BYTE PTR [edi+15]
  000e0	88 56 13	 mov	 BYTE PTR [esi+19], dl

; 251  : 		pMsg.tdata[i].zen = this->data[i].zen;

  000e3	8b 57 13	 mov	 edx, DWORD PTR [edi+19]
  000e6	89 56 16	 mov	 DWORD PTR [esi+22], edx

; 252  : 		pMsg.tdata[i].bonus = this->data[i].bonus;

  000e9	0f b7 57 17	 movzx	 edx, WORD PTR [edi+23]
  000ed	66 89 56 1c	 mov	 WORD PTR [esi+28], dx

; 253  : 		pMsg.tdata[i].credit = this->data[i].credit;

  000f1	0f b7 57 19	 movzx	 edx, WORD PTR [edi+25]
  000f5	66 89 56 20	 mov	 WORD PTR [esi+32], dx

; 254  : 		pMsg.tdata[i].Master = this->data[i].Master;

  000f9	0f b6 57 1b	 movzx	 edx, BYTE PTR [edi+27]
  000fd	88 56 23	 mov	 BYTE PTR [esi+35], dl

; 255  : 		pMsg.tdata[i].EmptyInv = this->data[i].EmptyInv;

  00100	0f b6 57 1c	 movzx	 edx, BYTE PTR [edi+28]
  00104	88 06		 mov	 BYTE PTR [esi], al
  00106	0f b7 47 03	 movzx	 eax, WORD PTR [edi+3]
  0010a	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  0010d	0f b7 4f 05	 movzx	 ecx, WORD PTR [edi+5]
  00111	88 56 25	 mov	 BYTE PTR [esi+37], dl

; 256  : 
; 257  : 		pMsg.tdata[i].ok_level = 1;
; 258  : 		pMsg.tdata[i].ok_reset = 1;
; 259  : 		pMsg.tdata[i].ok_grand = 1;
; 260  : 		pMsg.tdata[i].ok_premium = 1;
; 261  : 		pMsg.tdata[i].ok_zen = 1;
; 262  : 		pMsg.tdata[i].ok_bonus = 1;
; 263  : 		pMsg.tdata[i].ok_credit = 1;
; 264  : 		pMsg.tdata[i].ok_Master = 1;
; 265  : 		pMsg.tdata[i].ok_EmptyInv = 1;
; 266  : 
; 267  : 		if(this->data[i].min_level > lpUser->Level || lpUser->Level > this->data[i].max_level )

  00114	8b 95 34 fe ff
	ff		 mov	 edx, DWORD PTR _lpUser$[ebp]
  0011a	88 5e fe	 mov	 BYTE PTR [esi-2], bl
  0011d	66 89 46 02	 mov	 WORD PTR [esi+2], ax
  00121	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00125	88 5e 06	 mov	 BYTE PTR [esi+6], bl
  00128	88 5e 0c	 mov	 BYTE PTR [esi+12], bl
  0012b	88 5e 12	 mov	 BYTE PTR [esi+18], bl
  0012e	88 5e 14	 mov	 BYTE PTR [esi+20], bl
  00131	88 5e 1a	 mov	 BYTE PTR [esi+26], bl
  00134	88 5e 1e	 mov	 BYTE PTR [esi+30], bl
  00137	88 5e 22	 mov	 BYTE PTR [esi+34], bl
  0013a	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  0013d	88 5e 26	 mov	 BYTE PTR [esi+38], bl
  00140	0f bf 92 be 00
	00 00		 movsx	 edx, WORD PTR [edx+190]
  00147	3b c2		 cmp	 eax, edx
  00149	7f 04		 jg	 SHORT $LN16@GCWindows
  0014b	3b d1		 cmp	 edx, ecx
  0014d	7e 08		 jle	 SHORT $LN17@GCWindows
$LN16@GCWindows:

; 268  : 		{
; 269  : 			pMsg.tdata[i].result = 0;

  0014f	c6 46 fe 00	 mov	 BYTE PTR [esi-2], 0

; 270  : 			pMsg.tdata[i].ok_level = 0;

  00153	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0
$LN17@GCWindows:

; 271  : 		}
; 272  : 		if(this->data[i].min_reset > lpUser->Reset || lpUser->Reset > this->data[i].max_reset )

  00157	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0015d	0f b7 57 07	 movzx	 edx, WORD PTR [edi+7]
  00161	8b 81 90 22 00
	00		 mov	 eax, DWORD PTR [ecx+8848]
  00167	3b d0		 cmp	 edx, eax
  00169	7f 08		 jg	 SHORT $LN14@GCWindows
  0016b	0f b7 57 09	 movzx	 edx, WORD PTR [edi+9]
  0016f	3b c2		 cmp	 eax, edx
  00171	7e 08		 jle	 SHORT $LN15@GCWindows
$LN14@GCWindows:

; 273  : 		{
; 274  : 			pMsg.tdata[i].result = 0;

  00173	c6 46 fe 00	 mov	 BYTE PTR [esi-2], 0

; 275  : 			pMsg.tdata[i].ok_reset = 0;

  00177	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
$LN15@GCWindows:

; 276  : 		}
; 277  : 		if(this->data[i].min_grand > lpUser->GReset || lpUser->GReset > this->data[i].max_grand )

  0017b	0f b7 57 0b	 movzx	 edx, WORD PTR [edi+11]
  0017f	8b 81 94 22 00
	00		 mov	 eax, DWORD PTR [ecx+8852]
  00185	3b d0		 cmp	 edx, eax
  00187	7f 08		 jg	 SHORT $LN12@GCWindows
  00189	0f b7 57 0d	 movzx	 edx, WORD PTR [edi+13]
  0018d	3b c2		 cmp	 eax, edx
  0018f	7e 08		 jle	 SHORT $LN13@GCWindows
$LN12@GCWindows:

; 278  : 		{
; 279  : 			pMsg.tdata[i].result = 0;

  00191	c6 46 fe 00	 mov	 BYTE PTR [esi-2], 0

; 280  : 			pMsg.tdata[i].ok_grand = 0;

  00195	c6 46 12 00	 mov	 BYTE PTR [esi+18], 0
$LN13@GCWindows:

; 281  : 		}
; 282  : 		if(this->data[i].premium > 0 && lpUser->PremiumTime == 0)

  00199	80 7f 0f 00	 cmp	 BYTE PTR [edi+15], 0
  0019d	76 11		 jbe	 SHORT $LN33@GCWindows
  0019f	83 b9 b8 22 00
	00 00		 cmp	 DWORD PTR [ecx+8888], 0
  001a6	75 08		 jne	 SHORT $LN33@GCWindows

; 283  : 		{
; 284  : 			pMsg.tdata[i].result = 0;

  001a8	c6 46 fe 00	 mov	 BYTE PTR [esi-2], 0

; 285  : 			pMsg.tdata[i].ok_premium = 0;

  001ac	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
$LN33@GCWindows:

; 286  : 		}
; 287  : #if(LICENSE_MUEVIL)
; 288  : 		if(this->data[i].premium > lpUser->PremiumTimeType)
; 289  : 		{
; 290  : 			pMsg.tdata[i].result = 0;
; 291  : 			pMsg.tdata[i].ok_premium = 0;
; 292  : 		}
; 293  : #endif
; 294  : 		if(this->data[i].zen > lpUser->Money)

  001b0	8b 47 13	 mov	 eax, DWORD PTR [edi+19]
  001b3	3b 81 f0 00 00
	00		 cmp	 eax, DWORD PTR [ecx+240]
  001b9	76 08		 jbe	 SHORT $LN10@GCWindows

; 295  : 		{
; 296  : 			pMsg.tdata[i].result = 0;

  001bb	c6 46 fe 00	 mov	 BYTE PTR [esi-2], 0

; 297  : 			pMsg.tdata[i].ok_zen = 0;

  001bf	c6 46 1a 00	 mov	 BYTE PTR [esi+26], 0
$LN10@GCWindows:

; 298  : 		}
; 299  : 		if(this->data[i].bonus > lpUser->GameShop.WCoinC)

  001c3	0f b7 47 17	 movzx	 eax, WORD PTR [edi+23]
  001c7	89 85 38 fe ff
	ff		 mov	 DWORD PTR tv1762[ebp], eax
  001cd	db 85 38 fe ff
	ff		 fild	 DWORD PTR tv1762[ebp]
  001d3	dc 99 00 23 00
	00		 fcomp	 QWORD PTR [ecx+8960]
  001d9	df e0		 fnstsw	 ax
  001db	f6 c4 41	 test	 ah, 65			; 00000041H
  001de	75 08		 jne	 SHORT $LN9@GCWindows

; 300  : 		{
; 301  : 			pMsg.tdata[i].result = 0;

  001e0	c6 46 fe 00	 mov	 BYTE PTR [esi-2], 0

; 302  : 			pMsg.tdata[i].ok_bonus = 0;

  001e4	c6 46 1e 00	 mov	 BYTE PTR [esi+30], 0
$LN9@GCWindows:

; 303  : 		}
; 304  : 		if(this->data[i].credit > lpUser->ZtCred)

  001e8	0f b7 57 19	 movzx	 edx, WORD PTR [edi+25]
  001ec	89 95 38 fe ff
	ff		 mov	 DWORD PTR tv1758[ebp], edx
  001f2	db 85 38 fe ff
	ff		 fild	 DWORD PTR tv1758[ebp]
  001f8	d9 81 a8 22 00
	00		 fld	 DWORD PTR [ecx+8872]
  001fe	de d9		 fcompp
  00200	df e0		 fnstsw	 ax
  00202	f6 c4 05	 test	 ah, 5
  00205	7a 08		 jp	 SHORT $LN8@GCWindows

; 305  : 		{
; 306  : 			pMsg.tdata[i].result = 0;

  00207	c6 46 fe 00	 mov	 BYTE PTR [esi-2], 0

; 307  : 			pMsg.tdata[i].ok_credit = 0;

  0020b	c6 46 22 00	 mov	 BYTE PTR [esi+34], 0
$LN8@GCWindows:

; 308  : 		}
; 309  : 		if(this->data[i].Master)

  0020f	80 7f 1b 00	 cmp	 BYTE PTR [edi+27], 0
  00213	74 11		 je	 SHORT $LN6@GCWindows

; 310  : 		{
; 311  : 			if(!lpUser->ChangeUP3rd)

  00215	80 b9 bc 00 00
	00 00		 cmp	 BYTE PTR [ecx+188], 0
  0021c	75 08		 jne	 SHORT $LN6@GCWindows

; 312  : 			{
; 313  : 				pMsg.tdata[i].result = 0;

  0021e	c6 46 fe 00	 mov	 BYTE PTR [esi-2], 0

; 314  : 				pMsg.tdata[i].ok_Master = 0;

  00222	c6 46 24 00	 mov	 BYTE PTR [esi+36], 0
$LN6@GCWindows:

; 315  : 			}
; 316  : 		}
; 317  : 		if(this->data[i].EmptyInv)

  00226	80 7f 1c 00	 cmp	 BYTE PTR [edi+28], 0
  0022a	74 4f		 je	 SHORT $LN19@GCWindows

; 318  : 		{
; 319  : 			for(int n = 0; n < INVENTORY_SIZE; n++)

  0022c	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv734[ebp], 0
  00236	eb 0e		 jmp	 SHORT $LN4@GCWindows
  00238	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL34@GCWindows:
  00240	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR _lpUser$[ebp]
$LN4@GCWindows:

; 320  : 			{
; 321  : 				if(lpUser->pInventory[n].IsItem() == TRUE)

  00246	8b 89 24 0e 00
	00		 mov	 ecx, DWORD PTR [ecx+3620]
  0024c	03 8d 38 fe ff
	ff		 add	 ecx, DWORD PTR tv734[ebp]
  00252	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00257	3b c3		 cmp	 eax, ebx
  00259	75 08		 jne	 SHORT $LN3@GCWindows

; 322  : 				{
; 323  : 					pMsg.tdata[i].result = 0;

  0025b	c6 46 fe 00	 mov	 BYTE PTR [esi-2], 0

; 324  : 					pMsg.tdata[i].ok_EmptyInv = 0;				

  0025f	c6 46 26 00	 mov	 BYTE PTR [esi+38], 0
$LN3@GCWindows:

; 318  : 		{
; 319  : 			for(int n = 0; n < INVENTORY_SIZE; n++)

  00263	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR tv734[ebp]
  00269	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  0026e	89 85 38 fe ff
	ff		 mov	 DWORD PTR tv734[ebp], eax
  00274	3d 70 c3 00 00	 cmp	 eax, 50032		; 0000c370H
  00279	7c c5		 jl	 SHORT $LL34@GCWindows
$LN19@GCWindows:

; 236  : 	
; 237  : 
; 238  : 	for(int i = 0; i < this->iLoadedCount; i++)

  0027b	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _i$210502[ebp]
  00281	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00287	03 c3		 add	 eax, ebx
  00289	83 c7 20	 add	 edi, 32			; 00000020H
  0028c	83 c6 2c	 add	 esi, 44			; 0000002cH
  0028f	89 85 30 fe ff
	ff		 mov	 DWORD PTR _i$210502[ebp], eax
  00295	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00298	0f 8c 12 fe ff
	ff		 jl	 $LL20@GCWindows
  0029e	8b b5 34 fe ff
	ff		 mov	 esi, DWORD PTR _lpUser$[ebp]
$LN18@GCWindows:

; 325  : 				}
; 326  : 			}
; 327  : 		}
; 328  : 
; 329  : 	}
; 330  : 
; 331  : 	DataSend(lpUser->m_Index, (LPBYTE)&pMsg, sizeof(pMsg));

  002a4	8b 06		 mov	 eax, DWORD PTR [esi]
  002a6	68 c0 01 00 00	 push	 448			; 000001c0H
  002ab	8d 95 3c fe ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp]
  002b1	52		 push	 edx
  002b2	50		 push	 eax
  002b3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002bb	5b		 pop	 ebx
$LN36@GCWindows:
  002bc	5e		 pop	 esi
$LN23@GCWindows:

; 332  : }

  002bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c0	33 cd		 xor	 ecx, ebp
  002c2	5f		 pop	 edi
  002c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c8	8b e5		 mov	 esp, ebp
  002ca	5d		 pop	 ebp
  002cb	c2 04 00	 ret	 4
?GCWindows@ZtTeleportEvo@@QAEXH@Z ENDP			; ZtTeleportEvo::GCWindows
_TEXT	ENDS
PUBLIC	?CGResult@ZtTeleportEvo@@QAEXPAUPMSG_CG_TELEPORTWINRESEVO@@H@Z ; ZtTeleportEvo::CGResult
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?ZtUserDataSend@@YAXH@Z:PROC			; ZtUserDataSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
; Function compile flags: /Ogtp
;	COMDAT ?CGResult@ZtTeleportEvo@@QAEXPAUPMSG_CG_TELEPORTWINRESEVO@@H@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
tv432 = 12						; size = 4
tv428 = 12						; size = 4
tv423 = 12						; size = 4
tv421 = 12						; size = 4
_aUserIndex$ = 12					; size = 4
?CGResult@ZtTeleportEvo@@QAEXPAUPMSG_CG_TELEPORTWINRESEVO@@H@Z PROC ; ZtTeleportEvo::CGResult, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 337  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _aUserIndex$[ebp]
  00007	85 db		 test	 ebx, ebx
  00009	0f 88 7a 01 00
	00		 js	 $LN9@CGResult
  0000f	33 c0		 xor	 eax, eax
  00011	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 67 01 00
	00		 je	 $LN9@CGResult

; 338  : 	{
; 339  : 		return;
; 340  : 	}
; 341  : 
; 342  : 	LPOBJ lpUser = &gObj[aUserIndex];

  00022	56		 push	 esi
  00023	8b f3		 mov	 esi, ebx
  00025	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0002b	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 343  : 
; 344  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00031	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00035	0f 8c 4d 01 00
	00		 jl	 $LN23@CGResult

; 345  : 	{
; 346  : 		return;
; 347  : 	}
; 348  : 
; 349  : 	int i = aRecv->result;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0003e	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]

; 350  : 
; 351  : 	if(i < 0 || i > this->iLoadedCount)

  00042	85 c0		 test	 eax, eax
  00044	0f 88 3e 01 00
	00		 js	 $LN23@CGResult
  0004a	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  0004d	0f 8f 35 01 00
	00		 jg	 $LN23@CGResult

; 352  : 	{
; 353  : 		return;
; 354  : 	}
; 355  : 
; 356  : 	if(this->data[i].min_level > lpUser->Level || lpUser->Level > this->data[i].max_level)

  00053	c1 e0 05	 shl	 eax, 5
  00056	57		 push	 edi
  00057	8d 3c 08	 lea	 edi, DWORD PTR [eax+ecx]
  0005a	0f bf 86 be 00
	00 00		 movsx	 eax, WORD PTR [esi+190]
  00061	0f b7 4f 1c	 movzx	 ecx, WORD PTR [edi+28]
  00065	3b c8		 cmp	 ecx, eax
  00067	0f 8f 1a 01 00
	00		 jg	 $LN24@CGResult
  0006d	0f b7 57 1e	 movzx	 edx, WORD PTR [edi+30]
  00071	3b c2		 cmp	 eax, edx
  00073	0f 8f 0e 01 00
	00		 jg	 $LN24@CGResult

; 357  : 	{
; 358  : 		return;
; 359  : 	}
; 360  : 	if(this->data[i].min_reset > lpUser->Reset || lpUser->Reset > this->data[i].max_reset)

  00079	0f b7 4f 20	 movzx	 ecx, WORD PTR [edi+32]
  0007d	8b 86 90 22 00
	00		 mov	 eax, DWORD PTR [esi+8848]
  00083	3b c8		 cmp	 ecx, eax
  00085	0f 8f fc 00 00
	00		 jg	 $LN24@CGResult
  0008b	0f b7 57 22	 movzx	 edx, WORD PTR [edi+34]
  0008f	3b c2		 cmp	 eax, edx
  00091	0f 8f f0 00 00
	00		 jg	 $LN24@CGResult

; 361  : 	{
; 362  : 		return;
; 363  : 	}
; 364  : 	if(this->data[i].min_grand > lpUser->GReset || lpUser->GReset > this->data[i].max_grand)

  00097	0f b7 4f 24	 movzx	 ecx, WORD PTR [edi+36]
  0009b	8b 86 94 22 00
	00		 mov	 eax, DWORD PTR [esi+8852]
  000a1	3b c8		 cmp	 ecx, eax
  000a3	0f 8f de 00 00
	00		 jg	 $LN24@CGResult
  000a9	0f b7 57 26	 movzx	 edx, WORD PTR [edi+38]
  000ad	3b c2		 cmp	 eax, edx
  000af	0f 8f d2 00 00
	00		 jg	 $LN24@CGResult

; 365  : 	{
; 366  : 		return;
; 367  : 	}
; 368  : 	if(this->data[i].premium > 0)

  000b5	80 7f 28 00	 cmp	 BYTE PTR [edi+40], 0
  000b9	76 0d		 jbe	 SHORT $LN7@CGResult

; 369  : 	{
; 370  : 		#if(LICENSE_MUEVIL)
; 371  : 		if(this->data[i].premium > lpUser->PremiumTimeType)
; 372  : 		{
; 373  : 			return;
; 374  : 		}
; 375  : 		#endif
; 376  : 		if(lpUser->PremiumTime <= 0)

  000bb	83 be b8 22 00
	00 00		 cmp	 DWORD PTR [esi+8888], 0
  000c2	0f 8e bf 00 00
	00		 jle	 $LN24@CGResult
$LN7@CGResult:

; 377  : 		{
; 378  : 			return;
; 379  : 		}		
; 380  : 	}
; 381  : 	if(this->data[i].zen > lpUser->Money)

  000c8	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  000cb	8b 96 f0 00 00
	00		 mov	 edx, DWORD PTR [esi+240]
  000d1	3b ca		 cmp	 ecx, edx
  000d3	0f 87 ae 00 00
	00		 ja	 $LN24@CGResult

; 382  : 	{
; 383  : 		return;
; 384  : 	}
; 385  : 	if(this->data[i].bonus > lpUser->GameShop.WCoinC)

  000d9	0f b7 47 30	 movzx	 eax, WORD PTR [edi+48]
  000dd	89 45 0c	 mov	 DWORD PTR tv432[ebp], eax
  000e0	db 45 0c	 fild	 DWORD PTR tv432[ebp]
  000e3	dc 9e 00 23 00
	00		 fcomp	 QWORD PTR [esi+8960]
  000e9	df e0		 fnstsw	 ax
  000eb	f6 c4 41	 test	 ah, 65			; 00000041H
  000ee	0f 84 93 00 00
	00		 je	 $LN24@CGResult

; 386  : 	{
; 387  : 		return;
; 388  : 	}
; 389  : 	if(this->data[i].credit > lpUser->ZtCred)

  000f4	0f b7 47 32	 movzx	 eax, WORD PTR [edi+50]
  000f8	89 45 0c	 mov	 DWORD PTR tv428[ebp], eax
  000fb	db 45 0c	 fild	 DWORD PTR tv428[ebp]
  000fe	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  00104	de d9		 fcompp
  00106	df e0		 fnstsw	 ax
  00108	f6 c4 05	 test	 ah, 5
  0010b	7b 7a		 jnp	 SHORT $LN24@CGResult

; 390  : 	{
; 391  : 		return;
; 392  : 	}
; 393  : 	// ----
; 394  : 	if(this->data[i].zen > 0)

  0010d	85 c9		 test	 ecx, ecx
  0010f	74 14		 je	 SHORT $LN3@CGResult

; 395  : 	{
; 396  : 		lpUser->Money -= this->data[i].zen;

  00111	8b c2		 mov	 eax, edx
  00113	2b c1		 sub	 eax, ecx

; 397  : 		GCMoneySend(aUserIndex, lpUser->Money);

  00115	50		 push	 eax
  00116	53		 push	 ebx
  00117	89 86 f0 00 00
	00		 mov	 DWORD PTR [esi+240], eax
  0011d	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00122	83 c4 08	 add	 esp, 8
$LN3@CGResult:

; 398  : 	}
; 399  : 	if(this->data[i].bonus > 0)

  00125	0f b7 47 30	 movzx	 eax, WORD PTR [edi+48]
  00129	66 85 c0	 test	 ax, ax
  0012c	74 1b		 je	 SHORT $LN2@CGResult

; 400  : 	{
; 401  : 		lpUser->GameShop.WCoinC -= this->data[i].bonus;

  0012e	89 45 0c	 mov	 DWORD PTR tv423[ebp], eax
  00131	db 45 0c	 fild	 DWORD PTR tv423[ebp]

; 402  : 		ZtUserDataSend(aUserIndex);

  00134	53		 push	 ebx
  00135	dc ae 00 23 00
	00		 fsubr	 QWORD PTR [esi+8960]
  0013b	dd 9e 00 23 00
	00		 fstp	 QWORD PTR [esi+8960]
  00141	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  00146	83 c4 04	 add	 esp, 4
$LN2@CGResult:

; 403  : 	}
; 404  : 	if(this->data[i].credit > 0)

  00149	0f b7 47 32	 movzx	 eax, WORD PTR [edi+50]
  0014d	66 85 c0	 test	 ax, ax
  00150	74 1d		 je	 SHORT $LN1@CGResult

; 405  : 	{
; 406  : 		lpUser->ZtCred -= this->data[i].credit;

  00152	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  00158	89 45 0c	 mov	 DWORD PTR tv421[ebp], eax
  0015b	db 45 0c	 fild	 DWORD PTR tv421[ebp]

; 407  : 		ZtUserDataSend(aUserIndex);

  0015e	53		 push	 ebx
  0015f	de e9		 fsubp	 ST(1), ST(0)
  00161	d9 9e a8 22 00
	00		 fstp	 DWORD PTR [esi+8872]
  00167	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend
  0016c	83 c4 04	 add	 esp, 4
$LN1@CGResult:

; 408  : 	}
; 409  : 
; 410  : 	gObjTeleport(aUserIndex, this->data[i].map, this->data[i].x, this->data[i].y);

  0016f	0f b6 47 1a	 movzx	 eax, BYTE PTR [edi+26]
  00173	0f b6 4f 19	 movzx	 ecx, BYTE PTR [edi+25]
  00177	0f b6 57 18	 movzx	 edx, BYTE PTR [edi+24]
  0017b	50		 push	 eax
  0017c	51		 push	 ecx
  0017d	52		 push	 edx
  0017e	53		 push	 ebx
  0017f	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  00184	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@CGResult:
  00187	5f		 pop	 edi
$LN23@CGResult:
  00188	5e		 pop	 esi
$LN9@CGResult:
  00189	5b		 pop	 ebx

; 411  : }

  0018a	5d		 pop	 ebp
  0018b	c2 08 00	 ret	 8
?CGResult@ZtTeleportEvo@@QAEXPAUPMSG_CG_TELEPORTWINRESEVO@@H@Z ENDP ; ZtTeleportEvo::CGResult
_TEXT	ENDS
PUBLIC	?CGDialog@ZtTeleportEvo@@QAEXPAUPMSG_CG_DIALOGEVO@@H@Z ; ZtTeleportEvo::CGDialog
EXTRN	?GCWindows@ZtTeleport@@QAEXH@Z:PROC		; ZtTeleport::GCWindows
EXTRN	?g_ZtTeleport@@3VZtTeleport@@A:BYTE		; g_ZtTeleport
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
; Function compile flags: /Ogtp
;	COMDAT ?CGDialog@ZtTeleportEvo@@QAEXPAUPMSG_CG_DIALOGEVO@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aUserIndex$ = 12					; size = 4
?CGDialog@ZtTeleportEvo@@QAEXPAUPMSG_CG_DIALOGEVO@@H@Z PROC ; ZtTeleportEvo::CGDialog, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 416  : 	if(OBJMAX_RANGE(aUserIndex) == 0)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _aUserIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 68		 js	 SHORT $LN1@CGDialog
  0000e	33 c0		 xor	 eax, eax
  00010	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	74 59		 je	 SHORT $LN1@CGDialog

; 417  : 	{
; 418  : 		return;
; 419  : 	}
; 420  : 
; 421  : 	if(g_ZtLicense.CheckUser(Local) || g_ZtLicense.CheckUser(Gredy) || g_ZtLicense.CheckUser(Gredy2) || g_ZtLicense.CheckUser(GredyLocal))

  0001d	6a 00		 push	 0
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00024	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00029	84 c0		 test	 al, al
  0002b	75 41		 jne	 SHORT $LN2@CGDialog
  0002d	6a 20		 push	 32			; 00000020H
  0002f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00034	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00039	84 c0		 test	 al, al
  0003b	75 31		 jne	 SHORT $LN2@CGDialog
  0003d	6a 22		 push	 34			; 00000022H
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00044	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00049	84 c0		 test	 al, al
  0004b	75 21		 jne	 SHORT $LN2@CGDialog
  0004d	6a 21		 push	 33			; 00000021H
  0004f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00054	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00059	84 c0		 test	 al, al
  0005b	75 11		 jne	 SHORT $LN2@CGDialog

; 424  : 	}
; 425  : 	else
; 426  : 	{
; 427  : 		g_ZtTeleport.GCWindows(aUserIndex);

  0005d	56		 push	 esi
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtTeleport@@3VZtTeleport@@A ; g_ZtTeleport
  00063	e8 00 00 00 00	 call	 ?GCWindows@ZtTeleport@@QAEXH@Z ; ZtTeleport::GCWindows
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi

; 428  : 	}
; 429  : }

  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
$LN2@CGDialog:

; 422  : 	{
; 423  : 		this->GCWindows(aUserIndex);

  0006e	56		 push	 esi
  0006f	8b cf		 mov	 ecx, edi
  00071	e8 00 00 00 00	 call	 ?GCWindows@ZtTeleportEvo@@QAEXH@Z ; ZtTeleportEvo::GCWindows
$LN1@CGDialog:
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi

; 428  : 	}
; 429  : }

  00078	5d		 pop	 ebp
  00079	c2 08 00	 ret	 8
?CGDialog@ZtTeleportEvo@@QAEXPAUPMSG_CG_DIALOGEVO@@H@Z ENDP ; ZtTeleportEvo::CGDialog
_TEXT	ENDS
PUBLIC	??0ZtTeleportEvo@@QAE@XZ			; ZtTeleportEvo::ZtTeleportEvo
; Function compile flags: /Ogtp
;	COMDAT ??0ZtTeleportEvo@@QAE@XZ
_TEXT	SEGMENT
??0ZtTeleportEvo@@QAE@XZ PROC				; ZtTeleportEvo::ZtTeleportEvo, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 19   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@ZtTeleportEvo@@QAEXXZ ; ZtTeleportEvo::Init

; 20   : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0ZtTeleportEvo@@QAE@XZ ENDP				; ZtTeleportEvo::ZtTeleportEvo
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DBNCKFGH@ZtData?2ZtTeleportEvo?4ini?$AA@ ; `string'
PUBLIC	?Load@ZtTeleportEvo@@QAEXXZ			; ZtTeleportEvo::Load
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BJ@DBNCKFGH@ZtData?2ZtTeleportEvo?4ini?$AA@
CONST	SEGMENT
??_C@_0BJ@DBNCKFGH@ZtData?2ZtTeleportEvo?4ini?$AA@ DB 'ZtData\ZtTeleportE'
	DB	'vo.ini', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@ZtTeleportEvo@@QAEXXZ
_TEXT	SEGMENT
?Load@ZtTeleportEvo@@QAEXXZ PROC			; ZtTeleportEvo::Load, COMDAT
; _this$ = ecx

; 41   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 42   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@ZtTeleportEvo@@QAEXXZ ; ZtTeleportEvo::Init

; 43   : 
; 44   : 	if(g_ZtLicense.CheckUser(Local) || g_ZtLicense.CheckUser(Gredy) || g_ZtLicense.CheckUser(Gredy2) || g_ZtLicense.CheckUser(GredyLocal))

  00008	6a 00		 push	 0
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00014	84 c0		 test	 al, al
  00016	75 30		 jne	 SHORT $LN1@Load
  00018	6a 20		 push	 32			; 00000020H
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00024	84 c0		 test	 al, al
  00026	75 20		 jne	 SHORT $LN1@Load
  00028	6a 22		 push	 34			; 00000022H
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00034	84 c0		 test	 al, al
  00036	75 10		 jne	 SHORT $LN1@Load
  00038	6a 21		 push	 33			; 00000021H
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0003f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00044	84 c0		 test	 al, al
  00046	74 17		 je	 SHORT $LN2@Load
$LN1@Load:

; 45   : 	{
; 46   : 		this->Read(gDirPath.GetNewPath("ZtData\\ZtTeleportEvo.ini"));

  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DBNCKFGH@ZtData?2ZtTeleportEvo?4ini?$AA@
  0004d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00052	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00057	50		 push	 eax
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?Read@ZtTeleportEvo@@QAEXPAD@Z ; ZtTeleportEvo::Read
$LN2@Load:
  0005f	5e		 pop	 esi

; 47   : 	}
; 48   : }

  00060	c3		 ret	 0
?Load@ZtTeleportEvo@@QAEXXZ ENDP			; ZtTeleportEvo::Load
_TEXT	ENDS
PUBLIC	?Dialog@ZtTeleportEvo@@QAE_NHH@Z		; ZtTeleportEvo::Dialog
EXTRN	?gObjIsConnectedZt@@YA_NH@Z:PROC		; gObjIsConnectedZt
; Function compile flags: /Ogtp
;	COMDAT ?Dialog@ZtTeleportEvo@@QAE_NHH@Z
_TEXT	SEGMENT
_aUserIndex$ = 8					; size = 4
_aNpcIndex$ = 12					; size = 4
?Dialog@ZtTeleportEvo@@QAE_NHH@Z PROC			; ZtTeleportEvo::Dialog, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 154  : 	if(!this->Enable)

  00006	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00009	75 07		 jne	 SHORT $LN3@Dialog

; 155  : 	{
; 156  :  		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 177  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
$LN3@Dialog:
  00012	57		 push	 edi

; 157  : 	}
; 158  : 
; 159  : 	if(!gObjIsConnectedZt(aUserIndex))

  00013	8b 7d 08	 mov	 edi, DWORD PTR _aUserIndex$[ebp]
  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 ?gObjIsConnectedZt@@YA_NH@Z ; gObjIsConnectedZt
  0001c	83 c4 04	 add	 esp, 4
  0001f	84 c0		 test	 al, al

; 160  : 	{
; 161  : 		return false;

  00021	74 4f		 je	 SHORT $LN1@Dialog

; 162  : 	}
; 163  : 
; 164  : 	LPOBJ lpUser = &gObj[aUserIndex];
; 165  : 	LPOBJ lpNpc = &gObj[aNpcIndex];

  00023	8b 45 0c	 mov	 eax, DWORD PTR _aNpcIndex$[ebp]
  00026	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0002c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 166  : 
; 167  : 	if(		lpNpc->Class		== this->NPC_Class 
; 168  : 		&&	lpNpc->MapNumber	== this->NPC_Map
; 169  : 		&&	lpNpc->X			== this->NPC_X
; 170  : 		&&	lpNpc->Y			== this->NPC_Y )

  00032	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00039	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0003c	75 34		 jne	 SHORT $LN1@Dialog
  0003e	0f b6 90 49 01
	00 00		 movzx	 edx, BYTE PTR [eax+329]
  00045	3b 56 08	 cmp	 edx, DWORD PTR [esi+8]
  00048	75 28		 jne	 SHORT $LN1@Dialog
  0004a	0f bf 88 44 01
	00 00		 movsx	 ecx, WORD PTR [eax+324]
  00051	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  00054	75 1c		 jne	 SHORT $LN1@Dialog
  00056	0f bf 90 46 01
	00 00		 movsx	 edx, WORD PTR [eax+326]
  0005d	3b 56 10	 cmp	 edx, DWORD PTR [esi+16]
  00060	75 10		 jne	 SHORT $LN1@Dialog

; 171  : 	{
; 172  : 		this->GCWindows(aUserIndex);

  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?GCWindows@ZtTeleportEvo@@QAEXH@Z ; ZtTeleportEvo::GCWindows
  0006a	5f		 pop	 edi

; 173  : 		return true;

  0006b	b0 01		 mov	 al, 1
  0006d	5e		 pop	 esi

; 177  : }

  0006e	5d		 pop	 ebp
  0006f	c2 08 00	 ret	 8
$LN1@Dialog:
  00072	5f		 pop	 edi

; 174  : 	}
; 175  : 	// ----
; 176  : 	return false;

  00073	32 c0		 xor	 al, al
  00075	5e		 pop	 esi

; 177  : }

  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
?Dialog@ZtTeleportEvo@@QAE_NHH@Z ENDP			; ZtTeleportEvo::Dialog
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ZtTeleportEvo@@YAXXZ
text$yc	SEGMENT
??__Eg_ZtTeleportEvo@@YAXXZ PROC			; `dynamic initializer for 'g_ZtTeleportEvo'', COMDAT

; 14   : ZtTeleportEvo g_ZtTeleportEvo;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtTeleportEvo@@3VZtTeleportEvo@@A ; g_ZtTeleportEvo
  00005	e8 00 00 00 00	 call	 ??0ZtTeleportEvo@@QAE@XZ ; ZtTeleportEvo::ZtTeleportEvo
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ZtTeleportEvo@@YAXXZ ; `dynamic atexit destructor for 'g_ZtTeleportEvo''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ZtTeleportEvo@@YAXXZ ENDP			; `dynamic initializer for 'g_ZtTeleportEvo''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ZtTeleportEvo@@YAXXZ
text$yd	SEGMENT
??__Fg_ZtTeleportEvo@@YAXXZ PROC			; `dynamic atexit destructor for 'g_ZtTeleportEvo'', COMDAT
  00000	c3		 ret	 0
??__Fg_ZtTeleportEvo@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_ZtTeleportEvo''
text$yd	ENDS
PUBLIC	?g_ZtTeleportEvo@@3VZtTeleportEvo@@A		; g_ZtTeleportEvo
_BSS	SEGMENT
?g_ZtTeleportEvo@@3VZtTeleportEvo@@A DB 0158H DUP (?)	; g_ZtTeleportEvo
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ZtTeleportEvo$initializer$ DD FLAT:??__Eg_ZtTeleportEvo@@YAXXZ
CRT$XCU	ENDS
END
