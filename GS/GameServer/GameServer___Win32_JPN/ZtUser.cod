; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\ZtUser.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 106  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 107  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 108  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 109  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ZtUserDataSend@@YAXH@Z				; ZtUserDataSend
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\ztuser.cpp
;	COMDAT ?ZtUserDataSend@@YAXH@Z
_TEXT	SEGMENT
_rSend$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?ZtUserDataSend@@YAXH@Z PROC				; ZtUserDataSend, COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]

; 30   : 	ZTINFO_UPDATE rSend;
; 31   : 	LPOBJ lpObj =&gObj[aIndex];

  00015	8b f7		 mov	 esi, edi
  00017	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  0001d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 32   : 	rSend.h.set((LPBYTE)&rSend, 0xFB, 14, sizeof(rSend));

  00023	c7 45 ac c1 50
	fb 0e		 mov	 DWORD PTR _rSend$[ebp], 251351233 ; 0efb50c1H

; 33   : 	rSend.PremiumTime = lpObj->PremiumTime;

  0002a	8b 86 b8 22 00
	00		 mov	 eax, DWORD PTR [esi+8888]
  00030	89 45 b0	 mov	 DWORD PTR _rSend$[ebp+4], eax

; 34   : 	rSend.Chaos = lpObj->ChaosBank;

  00033	8b 8e e4 27 00
	00		 mov	 ecx, DWORD PTR [esi+10212]
  00039	89 4d b4	 mov	 DWORD PTR _rSend$[ebp+8], ecx

; 35   : 	rSend.Bless = lpObj->BlessBank;

  0003c	8b 96 e8 27 00
	00		 mov	 edx, DWORD PTR [esi+10216]
  00042	89 55 b8	 mov	 DWORD PTR _rSend$[ebp+12], edx

; 36   : 	rSend.Soul = lpObj->SoulBank;

  00045	8b 86 ec 27 00
	00		 mov	 eax, DWORD PTR [esi+10220]
  0004b	89 45 bc	 mov	 DWORD PTR _rSend$[ebp+16], eax

; 37   : 	rSend.Life = lpObj->LifeBank;

  0004e	8b 8e f0 27 00
	00		 mov	 ecx, DWORD PTR [esi+10224]
  00054	89 4d c0	 mov	 DWORD PTR _rSend$[ebp+20], ecx

; 38   : 	rSend.ZtCred = lpObj->ZtCred;

  00057	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  0005d	d9 5d c4	 fstp	 DWORD PTR _rSend$[ebp+24]

; 39   : 	rSend.Zen = lpObj->Zen;

  00060	8b 96 14 28 00
	00		 mov	 edx, DWORD PTR [esi+10260]
  00066	89 55 c8	 mov	 DWORD PTR _rSend$[ebp+28], edx

; 40   : 
; 41   : 	rSend.WCoinC = (int)lpObj->GameShop.WCoinC;

  00069	dd 86 00 23 00
	00		 fld	 QWORD PTR [esi+8960]
  0006f	e8 00 00 00 00	 call	 __ftol2_sse
  00074	89 45 cc	 mov	 DWORD PTR _rSend$[ebp+32], eax

; 42   : 	rSend.WCoinP = (int)lpObj->GameShop.WCoinP;

  00077	dd 86 f8 22 00
	00		 fld	 QWORD PTR [esi+8952]
  0007d	e8 00 00 00 00	 call	 __ftol2_sse
  00082	89 45 d0	 mov	 DWORD PTR _rSend$[ebp+36], eax

; 43   : 	rSend.WCoinG = (int)lpObj->GameShop.GoblinPoint;

  00085	dd 86 08 23 00
	00		 fld	 QWORD PTR [esi+8968]
  0008b	e8 00 00 00 00	 call	 __ftol2_sse
  00090	89 45 d4	 mov	 DWORD PTR _rSend$[ebp+40], eax

; 44   : 
; 45   : 	rSend.CreateonBank = lpObj->CreateonBank;

  00093	8b 86 f4 27 00
	00		 mov	 eax, DWORD PTR [esi+10228]
  00099	89 45 d8	 mov	 DWORD PTR _rSend$[ebp+44], eax

; 46   : 
; 47   : 	rSend.PremiumType = lpObj->PremiumTimeType;

  0009c	8b 8e bc 22 00
	00		 mov	 ecx, DWORD PTR [esi+8892]
  000a2	89 4d dc	 mov	 DWORD PTR _rSend$[ebp+48], ecx

; 48   : 	rSend.DonateCredit = lpObj->m_iDonateCredit;

  000a5	8b 96 18 2b 00
	00		 mov	 edx, DWORD PTR [esi+11032]
  000ab	89 55 e0	 mov	 DWORD PTR _rSend$[ebp+52], edx

; 49   : 
; 50   : 	rSend.GuardianBank = lpObj->GuardianBank;

  000ae	8b 86 f8 27 00
	00		 mov	 eax, DWORD PTR [esi+10232]
  000b4	89 45 e4	 mov	 DWORD PTR _rSend$[ebp+56], eax

; 51   : 	rSend.HarmonyBank = lpObj->HarmonyBank;

  000b7	8b 8e fc 27 00
	00		 mov	 ecx, DWORD PTR [esi+10236]
  000bd	89 4d e8	 mov	 DWORD PTR _rSend$[ebp+60], ecx

; 52   : 	rSend.LowStoneBank = lpObj->LowStoneBank;

  000c0	8b 96 00 28 00
	00		 mov	 edx, DWORD PTR [esi+10240]
  000c6	89 55 ec	 mov	 DWORD PTR _rSend$[ebp+64], edx

; 53   : 	rSend.HighStoneBank = lpObj->HighStoneBank;

  000c9	8b 86 04 28 00
	00		 mov	 eax, DWORD PTR [esi+10244]
  000cf	89 45 f0	 mov	 DWORD PTR _rSend$[ebp+68], eax

; 54   : 	rSend.GemStoneBank = lpObj->GemStoneBank;

  000d2	8b 8e 08 28 00
	00		 mov	 ecx, DWORD PTR [esi+10248]

; 55   : 
; 56   : 	rSend.PCPoint = lpObj->PCPoint;
; 57   : 
; 58   : 	DataSend(aIndex,(LPBYTE)&rSend,sizeof(rSend));

  000d8	6a 50		 push	 80			; 00000050H
  000da	8d 45 ac	 lea	 eax, DWORD PTR _rSend$[ebp]
  000dd	89 4d f4	 mov	 DWORD PTR _rSend$[ebp+72], ecx
  000e0	8b 96 88 22 00
	00		 mov	 edx, DWORD PTR [esi+8840]
  000e6	50		 push	 eax
  000e7	57		 push	 edi
  000e8	89 55 f8	 mov	 DWORD PTR _rSend$[ebp+76], edx
  000eb	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 59   : }

  000f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f6	5f		 pop	 edi
  000f7	33 cd		 xor	 ecx, ebp
  000f9	5e		 pop	 esi
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
?ZtUserDataSend@@YAXH@Z ENDP				; ZtUserDataSend
_TEXT	ENDS
PUBLIC	_aIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ZtUserVieweport@@YAXH@Z			; ZtUserVieweport
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	?gObjCheckViewport@@YAHHHH@Z:PROC		; gObjCheckViewport
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ZtUserVieweport@@YAXH@Z
_TEXT	SEGMENT
_Vp$216418 = -5096					; size = 60
_lpObj$ = -5036						; size = 4
_datasize$ = -5032					; size = 4
_n$216407 = -5028					; size = 4
tv498 = -5024						; size = 4
tv539 = -5020						; size = 8
tv531 = -5020						; size = 8
tv541 = -5016						; size = 4
tv533 = -5016						; size = 4
_aIndex$GSCopy$ = -5012					; size = 4
tv544 = -5008						; size = 2
tv536 = -5008						; size = 2
_icount$ = -5005					; size = 1
_SendBuff$ = -5004					; size = 5000
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?ZtUserVieweport@@YAXH@Z PROC				; ZtUserVieweport, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 e8 13 00 00	 mov	 eax, 5096		; 000013e8H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 122  : #ifdef HPBAR_UPDATE
; 123  : 
; 124  : 	if(!ZtConfig.ZtCustom.EnableHPBar)

  00017	80 3d 0c 00 00
	00 00		 cmp	 BYTE PTR ?ZtConfig@@3VcZtConfigs@@A+12, 0
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 155  : 
; 156  : 
; 157  : 
; 158  : 	//CGZtUserHpBar ztSend;
; 159  : 	//int SizeSend = 0;
; 160  : 	//memset(&ztSend,-1,sizeof(ztSend));
; 161  : 	//PHeadSetW((LPBYTE)&ztSend, 0xFA, sizeof(ztSend));	
; 162  : 	//PHeadSubSetW((LPBYTE)&ztSend, 0xFA, 0x01, sizeof(ztSend));
; 163  : 	//SizeSend += 4 + 4;
; 164  : 	//int count = 0;
; 165  : 
; 166  : 	//ztSend.MaxCount = 0;
; 167  : 
; 168  : 	for(int n = 0; n < OBJMAX; n++)

  00021	89 8d 6c ec ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$[ebp], ecx
  00027	0f 84 8a 03 00
	00		 je	 $LN1@ZtUserView

; 125  : 	{
; 126  : 		return;
; 127  : 	}
; 128  : 
; 129  : 	BYTE SendBuff[5000];
; 130  : 	int datasize = 6;//6
; 131  : 	BYTE icount = 0;
; 132  : 
; 133  : 	if(OBJMAX_RANGE(aIndex) == 0)

  0002d	53		 push	 ebx
  0002e	33 db		 xor	 ebx, ebx
  00030	c7 85 58 ec ff
	ff 06 00 00 00	 mov	 DWORD PTR _datasize$[ebp], 6
  0003a	c6 85 73 ec ff
	ff 00		 mov	 BYTE PTR _icount$[ebp], 0
  00041	3b cb		 cmp	 ecx, ebx
  00043	0f 8c 6d 03 00
	00		 jl	 $LN36@ZtUserView
  00049	33 c0		 xor	 eax, eax
  0004b	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  00051	0f 9e c0	 setle	 al
  00054	3b c3		 cmp	 eax, ebx
  00056	0f 84 5a 03 00
	00		 je	 $LN36@ZtUserView

; 134  : 	{
; 135  : 		return;
; 136  : 	}
; 137  : 
; 138  : 	LPOBJ lpObj = &gObj[aIndex];

  0005c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00062	57		 push	 edi
  00063	8b f9		 mov	 edi, ecx
  00065	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  0006b	03 fa		 add	 edi, edx

; 139  : 
; 140  : 	if(lpObj->Connected < PLAYER_PLAYING)

  0006d	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  00071	89 bd 54 ec ff
	ff		 mov	 DWORD PTR _lpObj$[ebp], edi
  00077	0f 8c 38 03 00
	00		 jl	 $LN37@ZtUserView

; 141  : 	{
; 142  : 		return;
; 143  : 	}
; 144  : 
; 145  : 
; 146  : #if(OFFLINE_MODE == TRUE)
; 147  : 		if(lpObj->m_OfflineMode == true)

  0007d	80 bf d4 28 00
	00 01		 cmp	 BYTE PTR [edi+10452], 1
  00084	0f 84 2b 03 00
	00		 je	 $LN37@ZtUserView

; 148  : 		{
; 149  : 			return;
; 150  : 		}
; 151  : #endif
; 152  : 
; 153  : 	if(lpObj->OffExp != 0) return;

  0008a	39 9f 98 22 00
	00		 cmp	 DWORD PTR [edi+8856], ebx
  00090	0f 85 1f 03 00
	00		 jne	 $LN37@ZtUserView

; 154  : 	if(lpObj->OffTrade != 0) return;

  00096	39 9f ac 22 00
	00		 cmp	 DWORD PTR [edi+8876], ebx
  0009c	0f 85 13 03 00
	00		 jne	 $LN37@ZtUserView

; 155  : 
; 156  : 
; 157  : 
; 158  : 	//CGZtUserHpBar ztSend;
; 159  : 	//int SizeSend = 0;
; 160  : 	//memset(&ztSend,-1,sizeof(ztSend));
; 161  : 	//PHeadSetW((LPBYTE)&ztSend, 0xFA, sizeof(ztSend));	
; 162  : 	//PHeadSubSetW((LPBYTE)&ztSend, 0xFA, 0x01, sizeof(ztSend));
; 163  : 	//SizeSend += 4 + 4;
; 164  : 	//int count = 0;
; 165  : 
; 166  : 	//ztSend.MaxCount = 0;
; 167  : 
; 168  : 	for(int n = 0; n < OBJMAX; n++)

  000a2	8d 85 7a ec ff
	ff		 lea	 eax, DWORD PTR _SendBuff$[ebp+6]
  000a8	89 9d 5c ec ff
	ff		 mov	 DWORD PTR _n$216407[ebp], ebx
  000ae	89 85 60 ec ff
	ff		 mov	 DWORD PTR tv498[ebp], eax
  000b4	56		 push	 esi
  000b5	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL35@ZtUserView:

; 169  : 	{
; 170  : 		LPOBJ lpTempObj = &gObj[n];
; 171  : 
; 172  : 		if(lpTempObj->Connected == PLAYER_PLAYING)

  000c0	83 7c 13 04 03	 cmp	 DWORD PTR [ebx+edx+4], 3
  000c5	8d 34 13	 lea	 esi, DWORD PTR [ebx+edx]
  000c8	0f 85 76 02 00
	00		 jne	 $LN14@ZtUserView

; 173  : 		{
; 174  : 			if(lpTempObj->m_State == 1 || lpTempObj->m_State == 2)

  000ce	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  000d4	83 f8 01	 cmp	 eax, 1
  000d7	74 09		 je	 SHORT $LN30@ZtUserView
  000d9	83 f8 02	 cmp	 eax, 2
  000dc	0f 85 62 02 00
	00		 jne	 $LN14@ZtUserView
$LN30@ZtUserView:

; 175  : 			{
; 176  : 				if(lpObj->MapNumber == lpTempObj->MapNumber)

  000e2	8a 87 49 01 00
	00		 mov	 al, BYTE PTR [edi+329]
  000e8	3a 86 49 01 00
	00		 cmp	 al, BYTE PTR [esi+329]
  000ee	0f 85 50 02 00
	00		 jne	 $LN14@ZtUserView

; 177  : 				{
; 178  : 					if(gObjCheckViewport(aIndex,lpTempObj->X,lpTempObj->Y) == 1)

  000f4	0f bf 96 46 01
	00 00		 movsx	 edx, WORD PTR [esi+326]
  000fb	0f bf 86 44 01
	00 00		 movsx	 eax, WORD PTR [esi+324]
  00102	52		 push	 edx
  00103	50		 push	 eax
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 ?gObjCheckViewport@@YAHHHH@Z ; gObjCheckViewport
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010d	83 f8 01	 cmp	 eax, 1
  00110	0f 85 48 02 00
	00		 jne	 $LN29@ZtUserView

; 179  : 					{
; 180  : 						if(lpTempObj->Type != OBJ_MONSTER && lpTempObj->Type != OBJ_USER) continue;

  00116	0f b7 46 68	 movzx	 eax, WORD PTR [esi+104]
  0011a	83 f8 02	 cmp	 eax, 2
  0011d	74 09		 je	 SHORT $LN7@ZtUserView
  0011f	83 f8 01	 cmp	 eax, 1
  00122	0f 85 36 02 00
	00		 jne	 $LN29@ZtUserView
$LN7@ZtUserView:

; 181  : 
; 182  : 						VieweCharZt Vp;
; 183  : 
; 184  : 						Vp.aIndex = n;

  00128	0f b7 8d 5c ec
	ff ff		 movzx	 ecx, WORD PTR _n$216407[ebp]

; 185  : 						Vp.Life = (DWORD)gObj[n].Life;

  0012f	d9 bd 70 ec ff
	ff		 fnstcw	 WORD PTR tv544[ebp]
  00135	0f b7 85 70 ec
	ff ff		 movzx	 eax, WORD PTR tv544[ebp]
  0013c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00141	89 85 68 ec ff
	ff		 mov	 DWORD PTR tv541[ebp], eax
  00147	66 89 8d 18 ec
	ff ff		 mov	 WORD PTR _Vp$216418[ebp], cx
  0014e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 186  : 						Vp.MaxLife = (DWORD)gObj[n].MaxLife + gObj[n].AddLife;
; 187  : 						Vp.SD = (DWORD)gObj[n].iShield;
; 188  : 						Vp.MaxSD = (DWORD)gObj[n].iMaxShield + gObj[n].iAddShield;
; 189  : 						Vp.Level = lpTempObj->Level;
; 190  : 						Vp.Reset = lpTempObj->Reset;
; 191  : 						Vp.GrandReset = lpTempObj->GReset;
; 192  : 						Vp.Defence = lpTempObj->m_Defense;		
; 193  : 						Vp.Class = lpTempObj->Class;	
; 194  : 						Vp.AutoParty = lpTempObj->AutoPt;	
; 195  : #if(CUSTOM_FLAGS)
; 196  : 						Vp.m_ShowLag = lpTempObj->m_ShowLag; //On/Off Flag
; 197  : #endif
; 198  : #ifdef PREM_TYPE
; 199  : 						if(g_ZtLicense.CheckUser(eZtUB::ulasevich) || g_ZtLicense.CheckUser(eZtUB::ulasevich2))

  00154	6a 17		 push	 23			; 00000017H
  00156	d9 84 0b fc 00
	00 00		 fld	 DWORD PTR [ebx+ecx+252]
  0015d	d9 ad 68 ec ff
	ff		 fldcw	 WORD PTR tv541[ebp]
  00163	df bd 64 ec ff
	ff		 fistp	 QWORD PTR tv539[ebp]
  00169	8b 95 64 ec ff
	ff		 mov	 edx, DWORD PTR tv539[ebp]
  0016f	89 95 1c ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+4], edx
  00175	8b 94 0b 54 01
	00 00		 mov	 edx, DWORD PTR [ebx+ecx+340]
  0017c	d9 ad 70 ec ff
	ff		 fldcw	 WORD PTR tv544[ebp]
  00182	89 95 24 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+12], edx
  00188	0f b7 96 90 22
	00 00		 movzx	 edx, WORD PTR [esi+8848]
  0018f	66 89 95 2e ec
	ff ff		 mov	 WORD PTR _Vp$216418[ebp+22], dx
  00196	0f b7 96 b8 00
	00 00		 movzx	 edx, WORD PTR [esi+184]
  0019d	66 89 95 34 ec
	ff ff		 mov	 WORD PTR _Vp$216418[ebp+28], dx
  001a4	d9 84 0b 00 01
	00 00		 fld	 DWORD PTR [ebx+ecx+256]
  001ab	d9 bd 70 ec ff
	ff		 fnstcw	 WORD PTR tv536[ebp]
  001b1	0f b7 85 70 ec
	ff ff		 movzx	 eax, WORD PTR tv536[ebp]
  001b8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001bd	89 85 68 ec ff
	ff		 mov	 DWORD PTR tv533[ebp], eax
  001c3	d9 ad 68 ec ff
	ff		 fldcw	 WORD PTR tv533[ebp]
  001c9	df bd 64 ec ff
	ff		 fistp	 QWORD PTR tv531[ebp]
  001cf	8b 85 64 ec ff
	ff		 mov	 eax, DWORD PTR tv531[ebp]
  001d5	03 84 0b 4c 01
	00 00		 add	 eax, DWORD PTR [ebx+ecx+332]
  001dc	d9 ad 70 ec ff
	ff		 fldcw	 WORD PTR tv536[ebp]
  001e2	89 85 20 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+8], eax
  001e8	8b 84 0b 5c 01
	00 00		 mov	 eax, DWORD PTR [ebx+ecx+348]
  001ef	03 84 0b 58 01
	00 00		 add	 eax, DWORD PTR [ebx+ecx+344]
  001f6	0f b7 8e be 00
	00 00		 movzx	 ecx, WORD PTR [esi+190]
  001fd	66 89 8d 2c ec
	ff ff		 mov	 WORD PTR _Vp$216418[ebp+20], cx
  00204	0f b7 8e 94 04
	00 00		 movzx	 ecx, WORD PTR [esi+1172]
  0020b	89 85 28 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+16], eax
  00211	0f b7 86 94 22
	00 00		 movzx	 eax, WORD PTR [esi+8852]
  00218	66 89 8d 32 ec
	ff ff		 mov	 WORD PTR _Vp$216418[ebp+26], cx
  0021f	8a 8e 4c 2b 00
	00		 mov	 cl, BYTE PTR [esi+11084]
  00225	66 89 85 30 ec
	ff ff		 mov	 WORD PTR _Vp$216418[ebp+24], ax
  0022c	0f b7 86 10 28
	00 00		 movzx	 eax, WORD PTR [esi+10256]
  00233	88 8d 51 ec ff
	ff		 mov	 BYTE PTR _Vp$216418[ebp+57], cl
  00239	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0023e	66 89 85 36 ec
	ff ff		 mov	 WORD PTR _Vp$216418[ebp+30], ax
  00245	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0024a	84 c0		 test	 al, al
  0024c	75 10		 jne	 SHORT $LN5@ZtUserView
  0024e	6a 24		 push	 36			; 00000024H
  00250	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00255	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0025a	84 c0		 test	 al, al
  0025c	74 0c		 je	 SHORT $LN6@ZtUserView
$LN5@ZtUserView:

; 200  : 						{
; 201  : 							Vp.PremType = lpTempObj->PremiumTimeType;

  0025e	8b 96 bc 22 00
	00		 mov	 edx, DWORD PTR [esi+8892]
  00264	89 95 38 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+32], edx
$LN6@ZtUserView:

; 202  : 						}
; 203  : #endif
; 204  : #if(EVENT_TEAM_VS_TEAM)
; 205  : 						Vp.TvTTeam = lpTempObj->m_TvTTeam;
; 206  : #endif
; 207  : #ifdef VIEW_MONSTER
; 208  : 						if(lpTempObj->Type == OBJ_USER)

  0026a	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  0026f	8a 86 14 29 00
	00		 mov	 al, BYTE PTR [esi+10516]
  00275	88 85 3c ec ff
	ff		 mov	 BYTE PTR _Vp$216418[ebp+36], al
  0027b	75 40		 jne	 SHORT $LN4@ZtUserView

; 209  : 						{
; 210  : 							memcpy(Vp.Name, gObj[n].Name, sizeof(Vp.Name));

  0027d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00283	8b 4c 13 77	 mov	 ecx, DWORD PTR [ebx+edx+119]
  00287	8b 44 13 7b	 mov	 eax, DWORD PTR [ebx+edx+123]
  0028b	89 8d 3d ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+37], ecx
  00291	8b 4c 13 7f	 mov	 ecx, DWORD PTR [ebx+edx+127]
  00295	89 85 41 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+41], eax
  0029b	8b 84 13 83 00
	00 00		 mov	 eax, DWORD PTR [ebx+edx+131]
  002a2	89 8d 45 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+45], ecx
  002a8	8b 8c 13 87 00
	00 00		 mov	 ecx, DWORD PTR [ebx+edx+135]
  002af	89 85 49 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+49], eax
  002b5	89 8d 4d ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+53], ecx

; 211  : 						}
; 212  : 						else

  002bb	eb 45		 jmp	 SHORT $LN3@ZtUserView
$LN4@ZtUserView:

; 213  : 						{
; 214  : 							LPMONSTER_ATTRIBUTE lpMonsterAttr = gMAttr.GetAttr(lpTempObj->Class);

  002bd	0f b7 96 b8 00
	00 00		 movzx	 edx, WORD PTR [esi+184]
  002c4	52		 push	 edx
  002c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  002ca	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr

; 215  : 							memcpy(Vp.Name, lpMonsterAttr->m_Name, sizeof(Vp.Name));

  002cf	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002d2	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  002d5	89 95 41 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+41], edx
  002db	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  002de	89 8d 3d ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+37], ecx
  002e4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002e7	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  002ea	89 95 49 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+49], edx
  002f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002f6	89 8d 45 ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+45], ecx
  002fc	89 85 4d ec ff
	ff		 mov	 DWORD PTR _Vp$216418[ebp+53], eax
$LN3@ZtUserView:

; 216  : 						}				
; 217  : #endif
; 218  : 						memcpy(&SendBuff[datasize],&Vp,sizeof(Vp));

  00302	8b bd 60 ec ff
	ff		 mov	 edi, DWORD PTR tv498[ebp]

; 219  : 						datasize += sizeof(Vp);

  00308	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  0030d	01 85 58 ec ff
	ff		 add	 DWORD PTR _datasize$[ebp], eax
  00313	01 85 60 ec ff
	ff		 add	 DWORD PTR tv498[ebp], eax

; 220  : 
; 221  : 						icount++;

  00319	8a 85 73 ec ff
	ff		 mov	 al, BYTE PTR _icount$[ebp]
  0031f	fe c0		 inc	 al
  00321	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00326	8d b5 18 ec ff
	ff		 lea	 esi, DWORD PTR _Vp$216418[ebp]
  0032c	f3 a5		 rep movsd
  0032e	88 85 73 ec ff
	ff		 mov	 BYTE PTR _icount$[ebp], al

; 222  : #ifdef VIEW_MONSTER
; 223  : 						if(icount == 75-1) break;

  00334	3c 4a		 cmp	 al, 74			; 0000004aH
  00336	74 2e		 je	 SHORT $LN33@ZtUserView
  00338	8b bd 54 ec ff
	ff		 mov	 edi, DWORD PTR _lpObj$[ebp]
$LN38@ZtUserView:
  0033e	8b 8d 6c ec ff
	ff		 mov	 ecx, DWORD PTR _aIndex$GSCopy$[ebp]
$LN14@ZtUserView:

; 155  : 
; 156  : 
; 157  : 
; 158  : 	//CGZtUserHpBar ztSend;
; 159  : 	//int SizeSend = 0;
; 160  : 	//memset(&ztSend,-1,sizeof(ztSend));
; 161  : 	//PHeadSetW((LPBYTE)&ztSend, 0xFA, sizeof(ztSend));	
; 162  : 	//PHeadSubSetW((LPBYTE)&ztSend, 0xFA, 0x01, sizeof(ztSend));
; 163  : 	//SizeSend += 4 + 4;
; 164  : 	//int count = 0;
; 165  : 
; 166  : 	//ztSend.MaxCount = 0;
; 167  : 
; 168  : 	for(int n = 0; n < OBJMAX; n++)

  00344	ff 85 5c ec ff
	ff		 inc	 DWORD PTR _n$216407[ebp]
  0034a	81 c3 50 2b 00
	00		 add	 ebx, 11088		; 00002b50H
  00350	81 fb 80 d7 e9
	09		 cmp	 ebx, 166320000		; 09e9d780H
  00356	0f 8c 64 fd ff
	ff		 jl	 $LL35@ZtUserView
  0035c	eb 0e		 jmp	 SHORT $LN27@ZtUserView
$LN29@ZtUserView:

; 222  : #ifdef VIEW_MONSTER
; 223  : 						if(icount == 75-1) break;

  0035e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00364	eb d8		 jmp	 SHORT $LN38@ZtUserView
$LN33@ZtUserView:

; 155  : 
; 156  : 
; 157  : 
; 158  : 	//CGZtUserHpBar ztSend;
; 159  : 	//int SizeSend = 0;
; 160  : 	//memset(&ztSend,-1,sizeof(ztSend));
; 161  : 	//PHeadSetW((LPBYTE)&ztSend, 0xFA, sizeof(ztSend));	
; 162  : 	//PHeadSubSetW((LPBYTE)&ztSend, 0xFA, 0x01, sizeof(ztSend));
; 163  : 	//SizeSend += 4 + 4;
; 164  : 	//int count = 0;
; 165  : 
; 166  : 	//ztSend.MaxCount = 0;
; 167  : 
; 168  : 	for(int n = 0; n < OBJMAX; n++)

  00366	8b 8d 6c ec ff
	ff		 mov	 ecx, DWORD PTR _aIndex$GSCopy$[ebp]
$LN27@ZtUserView:

; 224  : #else
; 225  : 						if(icount == 75-1) break;
; 226  : #endif
; 227  : 					}
; 228  : 				}
; 229  : 			}
; 230  : 		}
; 231  : 	}
; 232  : 
; 233  : 	//SendBuff[0]=0xC2;	// packet header
; 234  : 	//SendBuff[1]=SET_NUMBERH(datasize);
; 235  : 	//SendBuff[2]=SET_NUMBERL(datasize);
; 236  : 	//SendBuff[3]=0xFA;
; 237  : 	//SendBuff[4]=0x01;
; 238  : 	//SendBuff[5]=count;
; 239  : 
; 240  : 	if(icount > 0)

  0036c	8a 95 73 ec ff
	ff		 mov	 dl, BYTE PTR _icount$[ebp]
  00372	5e		 pop	 esi
  00373	84 d2		 test	 dl, dl
  00375	74 3e		 je	 SHORT $LN37@ZtUserView

; 241  : 	{
; 242  : 		//ZT_USER_COUNT pCount;
; 243  : 		//PHeadSubSetW((LPBYTE)&pCount, 0xFA, 0x01, sizeof(datasize));
; 244  : 		//pCount.count = icount;
; 245  : 		//memcpy(SendBuff,&pCount,sizeof(pCount));
; 246  : 
; 247  : 		SendBuff[0]=0xC2;	// packet header
; 248  : 		SendBuff[1]=SET_NUMBERH(datasize);

  00377	8b 85 58 ec ff
	ff		 mov	 eax, DWORD PTR _datasize$[ebp]

; 249  : 		SendBuff[2]=SET_NUMBERL(datasize);
; 250  : 		SendBuff[3]=0xFA;
; 251  : 		SendBuff[4]=0x01;
; 252  : 		SendBuff[5]=icount;

  0037d	88 95 79 ec ff
	ff		 mov	 BYTE PTR _SendBuff$[ebp+5], dl

; 253  : 
; 254  : 		//LogAddC(2,"datasize: %d",datasize);
; 255  : 
; 256  : 		DataSend(aIndex,SendBuff,datasize);

  00383	50		 push	 eax
  00384	8d 95 74 ec ff
	ff		 lea	 edx, DWORD PTR _SendBuff$[ebp]
  0038a	8b d8		 mov	 ebx, eax
  0038c	52		 push	 edx
  0038d	c1 eb 08	 shr	 ebx, 8
  00390	51		 push	 ecx
  00391	c6 85 74 ec ff
	ff c2		 mov	 BYTE PTR _SendBuff$[ebp], 194 ; 000000c2H
  00398	88 9d 75 ec ff
	ff		 mov	 BYTE PTR _SendBuff$[ebp+1], bl
  0039e	88 85 76 ec ff
	ff		 mov	 BYTE PTR _SendBuff$[ebp+2], al
  003a4	66 c7 85 77 ec
	ff ff fa 01	 mov	 WORD PTR _SendBuff$[ebp+3], 506 ; 000001faH
  003ad	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  003b2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN37@ZtUserView:
  003b5	5f		 pop	 edi
$LN36@ZtUserView:
  003b6	5b		 pop	 ebx
$LN1@ZtUserView:

; 257  : 	}
; 258  : 
; 259  : #else
; 260  : 
; 261  : 	if(OBJMAX_RANGE(aIndex) == 0)
; 262  : 	{
; 263  : 		return;
; 264  : 	}
; 265  : 
; 266  : 	LPOBJ lpObj = &gObj[aIndex];
; 267  : 
; 268  : 	if(lpObj->Connected < PLAYER_PLAYING)
; 269  : 	{
; 270  : 		return;
; 271  : 	}
; 272  : 
; 273  : 	if(lpObj->OffExp != 0) return;
; 274  : 	if(lpObj->OffTrade != 0) return;
; 275  : 
; 276  : 	CGZtUserHpBar ztSend;
; 277  : 	//int SizeSend = 0;
; 278  : 	memset(&ztSend,-1,sizeof(ztSend));
; 279  : 	//PHeadSetW((LPBYTE)&ztSend, 0xFA, sizeof(ztSend));	
; 280  : 	PHeadSubSetW((LPBYTE)&ztSend, 0xFA, 0x01, sizeof(ztSend));
; 281  : 	//SizeSend += 4 + 4;
; 282  : 	int count = 0;
; 283  : 
; 284  : 	//ztSend.MaxCount = 0;
; 285  : 
; 286  : 	for(int n = 0; n < OBJMAX; n++)
; 287  : 	{
; 288  : 		LPOBJ lpTempObj = &gObj[n];
; 289  : 
; 290  : 		if(lpTempObj->Connected == PLAYER_PLAYING)
; 291  : 		{
; 292  : 			if(lpTempObj->m_State == 1 || lpTempObj->m_State == 2)
; 293  : 			{
; 294  : 				if(lpObj->MapNumber == lpTempObj->MapNumber)
; 295  : 				{
; 296  : 					if(gObjCheckViewport(aIndex,lpTempObj->X,lpTempObj->Y) == 1)
; 297  : 					{
; 298  : 						if(lpTempObj->Type != OBJ_MONSTER && lpTempObj->Type != OBJ_USER) continue;
; 299  : 
; 300  : 						ztSend.Vp[count].aIndex = n;
; 301  : 						ztSend.Vp[count].Life = (DWORD)gObj[n].Life;
; 302  : 						ztSend.Vp[count].MaxLife = (DWORD)gObj[n].MaxLife + gObj[n].AddLife;
; 303  : 						ztSend.Vp[count].SD = (DWORD)gObj[n].iShield;
; 304  : 						ztSend.Vp[count].MaxSD = (DWORD)gObj[n].iMaxShield + gObj[n].iAddShield;
; 305  : 						ztSend.Vp[count].Level = lpTempObj->Level;
; 306  : 						ztSend.Vp[count].Reset = lpTempObj->Reset;
; 307  : 						ztSend.Vp[count].GrandReset = lpTempObj->GReset;
; 308  : 						ztSend.Vp[count].Defence = lpTempObj->m_Defense;		
; 309  : 						ztSend.Vp[count].Class = lpTempObj->Class;	
; 310  : 						ztSend.Vp[count].AutoParty = lpTempObj->AutoPt;	
; 311  : 
; 312  : 
; 313  : #ifdef VIEW_MONSTER
; 314  : 							strcpy(ztSend.Vp[count].Name,gObj[n].Name);
; 315  : 							//lpMonsterAttr = gMAttr.GetAttr(MonsterClass);
; 316  : #endif
; 317  : 						count++;
; 318  : 
; 319  : 						//ztSend.MaxCount++;
; 320  : 
; 321  : 						//SizeSend += 30;
; 322  : #ifdef VIEW_MONSTER
; 323  : 						if(count == 75-1) break;
; 324  : #else
; 325  : 						if(count == 75-1) break;
; 326  : #endif
; 327  : 					}
; 328  : 				}
; 329  : 			}
; 330  : 		}
; 331  : 	}
; 332  : 
; 333  : 	//LogAddC(2,"OldSizeSend: %d | NewSizeSend: %d",sizeof(ztSend),SizeSend);
; 334  : 
; 335  : 	DataSend(aIndex,(LPBYTE)&ztSend,sizeof(ztSend));
; 336  : #endif
; 337  : }

  003b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ba	33 cd		 xor	 ecx, ebp
  003bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c1	8b e5		 mov	 esp, ebp
  003c3	5d		 pop	 ebp
  003c4	c3		 ret	 0
?ZtUserVieweport@@YAXH@Z ENDP				; ZtUserVieweport
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ResetSystemGC_CharUpdate@@YAXPAUOBJECTSTRUCT@@@Z ; ResetSystemGC_CharUpdate
; Function compile flags: /Ogtp
;	COMDAT ?ResetSystemGC_CharUpdate@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pSend$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
?ResetSystemGC_CharUpdate@@YAXPAUOBJECTSTRUCT@@@Z PROC	; ResetSystemGC_CharUpdate, COMDAT

; 359  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]

; 360  : 	GC_RESET_CHAR_UPDATE pSend;
; 361  : 
; 362  : 	pSend.h.set((LPBYTE)&pSend, 0xFB, 0x05, sizeof(pSend));
; 363  : 
; 364  : 	pSend.Level = lpUser->Level;
; 365  : 	pSend.Exp = lpUser->Experience;

  00013	8b 90 c8 00 00
	00		 mov	 edx, DWORD PTR [eax+200]
  00019	0f b7 88 be 00
	00 00		 movzx	 ecx, WORD PTR [eax+190]
  00020	89 55 e0	 mov	 DWORD PTR _pSend$[ebp+8], edx

; 366  : 	pSend.MaxExp = lpUser->NextExp;
; 367  : 	pSend.Str = lpUser->Strength;

  00023	0f b7 90 f4 00
	00 00		 movzx	 edx, WORD PTR [eax+244]
  0002a	66 89 4d dc	 mov	 WORD PTR _pSend$[ebp+4], cx
  0002e	8b 88 cc 00 00
	00		 mov	 ecx, DWORD PTR [eax+204]
  00034	66 89 55 e8	 mov	 WORD PTR _pSend$[ebp+16], dx

; 368  : 	pSend.Agi = lpUser->Dexterity;
; 369  : 	pSend.Vit = lpUser->Vitality;

  00038	0f b7 90 f8 00
	00 00		 movzx	 edx, WORD PTR [eax+248]
  0003f	89 4d e4	 mov	 DWORD PTR _pSend$[ebp+12], ecx
  00042	0f b7 88 f6 00
	00 00		 movzx	 ecx, WORD PTR [eax+246]
  00049	66 89 55 ec	 mov	 WORD PTR _pSend$[ebp+20], dx

; 370  : 	pSend.Ene = lpUser->Energy;
; 371  : 	pSend.Cmd = lpUser->Leadership;

  0004d	0f b7 90 18 01
	00 00		 movzx	 edx, WORD PTR [eax+280]
  00054	66 89 4d ea	 mov	 WORD PTR _pSend$[ebp+18], cx
  00058	0f b7 88 fa 00
	00 00		 movzx	 ecx, WORD PTR [eax+250]
  0005f	66 89 55 f0	 mov	 WORD PTR _pSend$[ebp+24], dx

; 372  : 	pSend.UpPoint = lpUser->LevelUpPoint;
; 373  : 	pSend.Reset = lpUser->Reset;

  00063	0f b7 90 90 22
	00 00		 movzx	 edx, WORD PTR [eax+8848]
  0006a	66 89 4d ee	 mov	 WORD PTR _pSend$[ebp+22], cx
  0006e	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00074	66 89 55 f8	 mov	 WORD PTR _pSend$[ebp+32], dx
  00078	89 4d f4	 mov	 DWORD PTR _pSend$[ebp+28], ecx

; 374  : 	pSend.Grand = lpUser->GReset;

  0007b	0f b7 88 94 22
	00 00		 movzx	 ecx, WORD PTR [eax+8852]

; 375  : 
; 376  : 	DataSend(lpUser->m_Index, (LPBYTE)&pSend, pSend.h.size);

  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	6a 24		 push	 36			; 00000024H
  00086	8d 55 d8	 lea	 edx, DWORD PTR _pSend$[ebp]
  00089	52		 push	 edx
  0008a	50		 push	 eax
  0008b	c7 45 d8 c1 24
	fb 05		 mov	 DWORD PTR _pSend$[ebp], 100345025 ; 05fb24c1H
  00092	66 89 4d fa	 mov	 WORD PTR _pSend$[ebp+34], cx
  00096	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 377  : }

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	33 cd		 xor	 ecx, ebp
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
?ResetSystemGC_CharUpdate@@YAXPAUOBJECTSTRUCT@@@Z ENDP	; ResetSystemGC_CharUpdate
_TEXT	ENDS
PUBLIC	??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0L@FIBJGLLN@ZtUser?4cpp?$AA@		; `string'
PUBLIC	?ZtUserInSafeZone@@YA_NH@Z			; ZtUserInSafeZone
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
;	COMDAT ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@ DB 'error : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FIBJGLLN@ZtUser?4cpp?$AA@
CONST	SEGMENT
??_C@_0L@FIBJGLLN@ZtUser?4cpp?$AA@ DB 'ZtUser.cpp', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ZtUserInSafeZone@@YA_NH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?ZtUserInSafeZone@@YA_NH@Z PROC				; ZtUserInSafeZone, COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 0e		 js	 SHORT $LN11@ZtUserInSa
  0000a	33 c9		 xor	 ecx, ecx
  0000c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00011	0f 9e c1	 setle	 cl
  00014	85 c9		 test	 ecx, ecx
  00016	75 1c		 jne	 SHORT $LN4@ZtUserInSa
$LN11@ZtUserInSa:

; 382  : 	{
; 383  : 		LogAdd("error : %s %d", __FILE__, __LINE__ );

  00018	68 7f 01 00 00	 push	 383			; 0000017fH
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FIBJGLLN@ZtUser?4cpp?$AA@
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@ZtUserInSa:

; 384  : 		return false;

  00030	32 c0		 xor	 al, al

; 404  : 	{
; 405  : 		return true;
; 406  : 	}
; 407  : 
; 408  : 	return false;
; 409  : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN4@ZtUserInSa:

; 385  : 	}
; 386  : 
; 387  : 	LPOBJ lpUser = &gObj[aIndex];

  00034	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 388  : 
; 389  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00040	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3

; 390  : 	{
; 391  : 		return false;

  00044	7c ea		 jl	 SHORT $LN13@ZtUserInSa

; 392  : 	}
; 393  : 
; 394  : 	int map = lpUser->MapNumber;

  00046	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]

; 395  : 
; 396  : 	if(MAX_MAP_RANGE(map) == FALSE)

  0004d	85 c9		 test	 ecx, ecx
  0004f	78 df		 js	 SHORT $LN13@ZtUserInSa
  00051	33 d2		 xor	 edx, edx
  00053	83 f9 52	 cmp	 ecx, 82			; 00000052H
  00056	0f 9e c2	 setle	 dl
  00059	85 d2		 test	 edx, edx

; 397  : 	{
; 398  : 		return false;

  0005b	74 d3		 je	 SHORT $LN13@ZtUserInSa

; 399  : 	}
; 400  : 
; 401  : 	BYTE attr = MapC[map].GetAttr(lpUser->X, lpUser->Y);
; 402  : 
; 403  : 	if ( (attr&1) == 1 )

  0005d	0f bf 90 46 01
	00 00		 movsx	 edx, WORD PTR [eax+326]
  00064	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  0006a	0f bf 80 44 01
	00 00		 movsx	 eax, WORD PTR [eax+324]
  00071	52		 push	 edx
  00072	50		 push	 eax
  00073	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00079	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  0007e	24 01		 and	 al, 1
  00080	3c 01		 cmp	 al, 1
  00082	0f 94 c0	 sete	 al

; 404  : 	{
; 405  : 		return true;
; 406  : 	}
; 407  : 
; 408  : 	return false;
; 409  : }

  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
?ZtUserInSafeZone@@YA_NH@Z ENDP				; ZtUserInSafeZone
_TEXT	ENDS
PUBLIC	??0ZtUser@@QAE@XZ				; ZtUser::ZtUser
; Function compile flags: /Ogtp
;	COMDAT ??0ZtUser@@QAE@XZ
_TEXT	SEGMENT
??0ZtUser@@QAE@XZ PROC					; ZtUser::ZtUser, COMDAT
; _this$ = ecx

; 416  : {

  00000	8b c1		 mov	 eax, ecx

; 417  : 	
; 418  : }

  00002	c3		 ret	 0
??0ZtUser@@QAE@XZ ENDP					; ZtUser::ZtUser
_TEXT	ENDS
PUBLIC	??1ZtUser@@QAE@XZ				; ZtUser::~ZtUser
; Function compile flags: /Ogtp
;	COMDAT ??1ZtUser@@QAE@XZ
_TEXT	SEGMENT
??1ZtUser@@QAE@XZ PROC					; ZtUser::~ZtUser, COMDAT
; _this$ = ecx

; 423  : }

  00000	c3		 ret	 0
??1ZtUser@@QAE@XZ ENDP					; ZtUser::~ZtUser
_TEXT	ENDS
PUBLIC	?Load@ZtUser@@QAEXXZ				; ZtUser::Load
EXTRN	?g_UserConfig@@3VCUserConfig@@A:BYTE		; g_UserConfig
; Function compile flags: /Ogtp
;	COMDAT ?Load@ZtUser@@QAEXXZ
_TEXT	SEGMENT
?Load@ZtUser@@QAEXXZ PROC				; ZtUser::Load, COMDAT
; _this$ = ecx

; 427  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 428  : 	this->m_bActiveAutoHP = false;
; 429  : 
; 430  : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::GredyLocal) || g_ZtLicense.CheckUser(eZtUB::Gredy2))

  00003	6a 20		 push	 32			; 00000020H
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000a	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  0000e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00013	84 c0		 test	 al, al
  00015	75 20		 jne	 SHORT $LN4@Load
  00017	6a 21		 push	 33			; 00000021H
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00023	84 c0		 test	 al, al
  00025	75 10		 jne	 SHORT $LN4@Load
  00027	6a 22		 push	 34			; 00000022H
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00033	84 c0		 test	 al, al
  00035	74 0d		 je	 SHORT $LN3@Load
$LN4@Load:

; 431  : 	{
; 432  : 		if(g_UserConfig.m_EvoMU.HPAutoClicker)

  00037	83 3d 24 00 00
	00 00		 cmp	 DWORD PTR ?g_UserConfig@@3VCUserConfig@@A+36, 0
  0003e	74 04		 je	 SHORT $LN3@Load

; 433  : 		{
; 434  : 			this->m_bActiveAutoHP = true;

  00040	c6 46 08 01	 mov	 BYTE PTR [esi+8], 1
$LN3@Load:

; 435  : 		}
; 436  : 	}
; 437  : 	
; 438  : 	#if(DEV_PLAYERINFO)
; 439  : 	this->EnableInfoPlayer = true;
; 440  : 	#endif
; 441  : 
; 442  : 	#if(DEV_DAMAGE_TABLE)
; 443  : 	this->EnableTable = false;
; 444  : 
; 445  : 	if(g_ZtLicense.CheckUser(eZtUB::Local) || g_ZtLicense.CheckUser(eZtUB::NSGames) || g_ZtLicense.CheckUser(eZtUB::eternalmu))

  00044	6a 00		 push	 0
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0004b	c6 46 09 00	 mov	 BYTE PTR [esi+9], 0
  0004f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00054	84 c0		 test	 al, al
  00056	75 20		 jne	 SHORT $LN1@Load
  00058	6a 51		 push	 81			; 00000051H
  0005a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0005f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00064	84 c0		 test	 al, al
  00066	75 10		 jne	 SHORT $LN1@Load
  00068	6a 4f		 push	 79			; 0000004fH
  0006a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0006f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00074	84 c0		 test	 al, al
  00076	74 04		 je	 SHORT $LN2@Load
$LN1@Load:

; 446  : 	{
; 447  : 		this->EnableTable = true;

  00078	c6 46 09 01	 mov	 BYTE PTR [esi+9], 1
$LN2@Load:
  0007c	5e		 pop	 esi

; 448  : 	}
; 449  : 	#endif
; 450  : 
; 451  : }

  0007d	c3		 ret	 0
?Load@ZtUser@@QAEXXZ ENDP				; ZtUser::Load
_TEXT	ENDS
PUBLIC	?InSafeZone@ZtUser@@QAE_NH@Z			; ZtUser::InSafeZone
; Function compile flags: /Ogtp
;	COMDAT ?InSafeZone@ZtUser@@QAE_NH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?InSafeZone@ZtUser@@QAE_NH@Z PROC			; ZtUser::InSafeZone, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 456  : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 0e		 js	 SHORT $LN11@InSafeZone
  0000a	33 c9		 xor	 ecx, ecx
  0000c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00011	0f 9e c1	 setle	 cl
  00014	85 c9		 test	 ecx, ecx
  00016	75 1e		 jne	 SHORT $LN4@InSafeZone
$LN11@InSafeZone:

; 457  : 	{
; 458  : 		LogAdd("error : %s %d", __FILE__, __LINE__ );

  00018	68 ca 01 00 00	 push	 458			; 000001caH
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FIBJGLLN@ZtUser?4cpp?$AA@
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@InSafeZone:

; 459  : 		return false;

  00030	32 c0		 xor	 al, al

; 479  : 	{
; 480  : 		return true;
; 481  : 	}
; 482  : 
; 483  : 	return false;
; 484  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@InSafeZone:

; 460  : 	}
; 461  : 
; 462  : 	LPOBJ lpUser = &gObj[aIndex];

  00036	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 463  : 
; 464  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00042	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3

; 465  : 	{
; 466  : 		return false;

  00046	7c e8		 jl	 SHORT $LN13@InSafeZone

; 467  : 	}
; 468  : 
; 469  : 	int map = lpUser->MapNumber;

  00048	0f b6 88 49 01
	00 00		 movzx	 ecx, BYTE PTR [eax+329]

; 470  : 
; 471  : 	if(MAX_MAP_RANGE(map) == FALSE)

  0004f	85 c9		 test	 ecx, ecx
  00051	78 dd		 js	 SHORT $LN13@InSafeZone
  00053	33 d2		 xor	 edx, edx
  00055	83 f9 52	 cmp	 ecx, 82			; 00000052H
  00058	0f 9e c2	 setle	 dl
  0005b	85 d2		 test	 edx, edx

; 472  : 	{
; 473  : 		return false;

  0005d	74 d1		 je	 SHORT $LN13@InSafeZone

; 474  : 	}
; 475  : 
; 476  : 	BYTE attr = MapC[map].GetAttr(lpUser->X, lpUser->Y);
; 477  : 
; 478  : 	if ( (attr&1) == 1 )

  0005f	0f bf 90 46 01
	00 00		 movsx	 edx, WORD PTR [eax+326]
  00066	69 c9 48 3d 05
	00		 imul	 ecx, 343368		; 00053d48H
  0006c	0f bf 80 44 01
	00 00		 movsx	 eax, WORD PTR [eax+324]
  00073	52		 push	 edx
  00074	50		 push	 eax
  00075	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0007b	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00080	24 01		 and	 al, 1
  00082	3c 01		 cmp	 al, 1
  00084	0f 94 c0	 sete	 al

; 479  : 	{
; 480  : 		return true;
; 481  : 	}
; 482  : 
; 483  : 	return false;
; 484  : }

  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
?InSafeZone@ZtUser@@QAE_NH@Z ENDP			; ZtUser::InSafeZone
_TEXT	ENDS
PUBLIC	?CheckAlliancePlayer@ZtUser@@QAE_NHH@Z		; ZtUser::CheckAlliancePlayer
EXTRN	?SearchUnion@TUnion@@QAEPAVTUnionInfo@@H@Z:PROC	; TUnion::SearchUnion
EXTRN	?UnionManager@@3VTUnion@@A:BYTE			; UnionManager
; Function compile flags: /Ogtp
;	COMDAT ?CheckAlliancePlayer@ZtUser@@QAE_NHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aTarget$ = 12						; size = 4
?CheckAlliancePlayer@ZtUser@@QAE_NHH@Z PROC		; ZtUser::CheckAlliancePlayer, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 489  : 	if (!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aTarget))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	0f 88 26 01 00
	00		 js	 $LN7@CheckAllia
  0000e	33 c0		 xor	 eax, eax
  00010	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 13 01 00
	00		 je	 $LN7@CheckAllia
  00021	8b 45 0c	 mov	 eax, DWORD PTR _aTarget$[ebp]
  00024	85 c0		 test	 eax, eax
  00026	0f 88 08 01 00
	00		 js	 $LN7@CheckAllia
  0002c	33 d2		 xor	 edx, edx
  0002e	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00033	0f 9e c2	 setle	 dl
  00036	85 d2		 test	 edx, edx
  00038	0f 84 f6 00 00
	00		 je	 $LN7@CheckAllia

; 490  : 	{
; 491  : 		return false;
; 492  : 	}
; 493  : 
; 494  : 	LPOBJ lpUser = &gObj[aIndex];

  0003e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00044	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H

; 495  : 	LPOBJ lpTarget = &gObj[aTarget];

  0004a	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00050	03 ca		 add	 ecx, edx
  00052	03 c2		 add	 eax, edx

; 496  : 
; 497  : 	if(lpUser->Connected < PLAYER_PLAYING || lpTarget->Connected < PLAYER_PLAYING)

  00054	ba 03 00 00 00	 mov	 edx, 3
  00059	39 51 04	 cmp	 DWORD PTR [ecx+4], edx
  0005c	0f 8c d2 00 00
	00		 jl	 $LN7@CheckAllia
  00062	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  00065	0f 8c c9 00 00
	00		 jl	 $LN7@CheckAllia

; 500  : 	}
; 501  : 
; 502  : 	_GUILD_INFO_STRUCT * lpGuildUser = lpUser->lpGuild;

  0006b	56		 push	 esi
  0006c	8b b1 38 04 00
	00		 mov	 esi, DWORD PTR [ecx+1080]
  00072	57		 push	 edi

; 503  : 	_GUILD_INFO_STRUCT * lpGuildTarget = lpTarget->lpGuild;

  00073	8b b8 38 04 00
	00		 mov	 edi, DWORD PTR [eax+1080]

; 504  : 
; 505  : 	if(!lpGuildUser || !lpGuildTarget)

  00079	85 f6		 test	 esi, esi
  0007b	0f 84 ab 00 00
	00		 je	 $LN5@CheckAllia
  00081	85 ff		 test	 edi, edi
  00083	0f 84 a3 00 00
	00		 je	 $LN5@CheckAllia

; 508  : 	}
; 509  : 
; 510  : 	if(!strcmp(lpGuildUser->Name, lpGuildTarget->Name))

  00089	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0008c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0008f	90		 npad	 1
$LL17@CheckAllia:
  00090	8a 10		 mov	 dl, BYTE PTR [eax]
  00092	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00094	75 1a		 jne	 SHORT $LN18@CheckAllia
  00096	84 d2		 test	 dl, dl
  00098	74 12		 je	 SHORT $LN19@CheckAllia
  0009a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0009d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000a0	75 0e		 jne	 SHORT $LN18@CheckAllia
  000a2	83 c0 02	 add	 eax, 2
  000a5	83 c1 02	 add	 ecx, 2
  000a8	84 d2		 test	 dl, dl
  000aa	75 e4		 jne	 SHORT $LL17@CheckAllia
$LN19@CheckAllia:
  000ac	33 c0		 xor	 eax, eax
  000ae	eb 05		 jmp	 SHORT $LN20@CheckAllia
$LN18@CheckAllia:
  000b0	1b c0		 sbb	 eax, eax
  000b2	83 d8 ff	 sbb	 eax, -1
$LN20@CheckAllia:
  000b5	85 c0		 test	 eax, eax
  000b7	75 08		 jne	 SHORT $LN4@CheckAllia

; 511  : 	{
; 512  : 		return true;

  000b9	5f		 pop	 edi
  000ba	b0 01		 mov	 al, 1
  000bc	5e		 pop	 esi

; 524  : 	{
; 525  : 		return true;
; 526  : 	}
; 527  : 
; 528  : 	return false;
; 529  : }

  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN4@CheckAllia:

; 513  : 	}
; 514  : 
; 515  : 	TUnionInfo * pUnionUser = UnionManager.SearchUnion(lpGuildUser->iGuildUnion);

  000c1	8b 86 1c 07 00
	00		 mov	 eax, DWORD PTR [esi+1820]
  000c7	50		 push	 eax
  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?UnionManager@@3VTUnion@@A ; UnionManager
  000cd	e8 00 00 00 00	 call	 ?SearchUnion@TUnion@@QAEPAVTUnionInfo@@H@Z ; TUnion::SearchUnion

; 516  : 	TUnionInfo * pUnionTarget = UnionManager.SearchUnion(lpGuildTarget->iGuildUnion);

  000d2	8b 8f 1c 07 00
	00		 mov	 ecx, DWORD PTR [edi+1820]
  000d8	51		 push	 ecx
  000d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?UnionManager@@3VTUnion@@A ; UnionManager
  000de	8b f0		 mov	 esi, eax
  000e0	e8 00 00 00 00	 call	 ?SearchUnion@TUnion@@QAEPAVTUnionInfo@@H@Z ; TUnion::SearchUnion

; 517  : 
; 518  : 	if(!pUnionUser || !pUnionTarget)

  000e5	85 f6		 test	 esi, esi
  000e7	74 43		 je	 SHORT $LN5@CheckAllia
  000e9	85 c0		 test	 eax, eax
  000eb	74 3f		 je	 SHORT $LN5@CheckAllia

; 519  : 	{
; 520  : 		return false;
; 521  : 	}
; 522  : 
; 523  : 	if(!strcmp(pUnionUser->m_szMasterGuild, pUnionTarget->m_szMasterGuild))

  000ed	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
  000f0	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
$LL21@CheckAllia:
  000f3	8a 10		 mov	 dl, BYTE PTR [eax]
  000f5	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000f7	75 23		 jne	 SHORT $LN22@CheckAllia
  000f9	84 d2		 test	 dl, dl
  000fb	74 12		 je	 SHORT $LN23@CheckAllia
  000fd	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00100	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00103	75 17		 jne	 SHORT $LN22@CheckAllia
  00105	83 c0 02	 add	 eax, 2
  00108	83 c1 02	 add	 ecx, 2
  0010b	84 d2		 test	 dl, dl
  0010d	75 e4		 jne	 SHORT $LL21@CheckAllia
$LN23@CheckAllia:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	5f		 pop	 edi
  00114	0f 94 c0	 sete	 al
  00117	5e		 pop	 esi

; 524  : 	{
; 525  : 		return true;
; 526  : 	}
; 527  : 
; 528  : 	return false;
; 529  : }

  00118	5d		 pop	 ebp
  00119	c2 08 00	 ret	 8
$LN22@CheckAllia:

; 519  : 	{
; 520  : 		return false;
; 521  : 	}
; 522  : 
; 523  : 	if(!strcmp(pUnionUser->m_szMasterGuild, pUnionTarget->m_szMasterGuild))

  0011c	1b c0		 sbb	 eax, eax
  0011e	83 d8 ff	 sbb	 eax, -1
  00121	85 c0		 test	 eax, eax
  00123	5f		 pop	 edi
  00124	0f 94 c0	 sete	 al
  00127	5e		 pop	 esi

; 524  : 	{
; 525  : 		return true;
; 526  : 	}
; 527  : 
; 528  : 	return false;
; 529  : }

  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN5@CheckAllia:
  0012c	5f		 pop	 edi

; 506  : 	{
; 507  : 		return false;

  0012d	32 c0		 xor	 al, al
  0012f	5e		 pop	 esi

; 524  : 	{
; 525  : 		return true;
; 526  : 	}
; 527  : 
; 528  : 	return false;
; 529  : }

  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
$LN7@CheckAllia:

; 498  : 	{
; 499  : 		return false;

  00134	32 c0		 xor	 al, al

; 524  : 	{
; 525  : 		return true;
; 526  : 	}
; 527  : 
; 528  : 	return false;
; 529  : }

  00136	5d		 pop	 ebp
  00137	c2 08 00	 ret	 8
?CheckAlliancePlayer@ZtUser@@QAE_NHH@Z ENDP		; ZtUser::CheckAlliancePlayer
_TEXT	ENDS
PUBLIC	??_C@_0BO@LGAPNCOI@?$FLAddPoints?$FN?5Total?5Point?5Error?$AA@ ; `string'
PUBLIC	?CGAddPoints@ZtUser@@QAEXHPAUPMSG_ADD_POINTS@@@Z ; ZtUser::CGAddPoints
EXTRN	?UpdateCharInfo@@YAXH@Z:PROC			; UpdateCharInfo
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?DCInfo@@3Vclassdef@@A:BYTE			; DCInfo
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
;	COMDAT ??_C@_0BO@LGAPNCOI@?$FLAddPoints?$FN?5Total?5Point?5Error?$AA@
CONST	SEGMENT
??_C@_0BO@LGAPNCOI@?$FLAddPoints?$FN?5Total?5Point?5Error?$AA@ DB '[AddPo'
	DB	'ints] Total Point Error', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CGAddPoints@ZtUser@@QAEXHPAUPMSG_ADD_POINTS@@@Z
_TEXT	SEGMENT
tv627 = -4						; size = 4
tv599 = -4						; size = 4
_aIndex$ = 8						; size = 4
tv636 = 12						; size = 4
tv604 = 12						; size = 4
tv598 = 12						; size = 4
tv593 = 12						; size = 4
tv588 = 12						; size = 4
tv583 = 12						; size = 4
_aRecv$ = 12						; size = 4
?CGAddPoints@ZtUser@@QAEXHPAUPMSG_ADD_POINTS@@@Z PROC	; ZtUser::CGAddPoints, COMDAT
; _this$ = ecx

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 557  : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  00004	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00007	85 c9		 test	 ecx, ecx
  00009	78 0f		 js	 SHORT $LN14@CGAddPoint
  0000b	33 c0		 xor	 eax, eax
  0000d	81 f9 97 3a 00
	00		 cmp	 ecx, 14999		; 00003a97H
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	75 1e		 jne	 SHORT $LN9@CGAddPoint
$LN14@CGAddPoint:

; 558  : 	{
; 559  : 		LogAdd("error : %s %d", __FILE__, __LINE__ );

  0001a	68 2f 02 00 00	 push	 559			; 0000022fH
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FIBJGLLN@ZtUser?4cpp?$AA@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 621  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN9@CGAddPoint:

; 560  : 		return;
; 561  : 	}
; 562  : 
; 563  : 	LPOBJ lpUser = &gObj[aIndex];

  00038	69 c9 50 2b 00
	00		 imul	 ecx, 11088		; 00002b50H
  0003e	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 564  : 
; 565  : 	if(lpUser->Connected < PLAYER_PLAYING)

  00044	83 79 04 03	 cmp	 DWORD PTR [ecx+4], 3
  00048	0f 8c 2b 02 00
	00		 jl	 $LN10@CGAddPoint

; 566  : 	{
; 567  : 		return;
; 568  : 	}
; 569  : 
; 570  : 	if(lpUser->Type != OBJ_USER)

  0004e	66 83 79 68 01	 cmp	 WORD PTR [ecx+104], 1
  00053	0f 85 20 02 00
	00		 jne	 $LN10@CGAddPoint

; 571  : 	{
; 572  : 		return;
; 573  : 	}
; 574  : 
; 575  : 	if(lpUser->Strength + aRecv->Strength > ZtConfig.Character.MaxStats)

  00059	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0005c	0f b7 91 f4 00
	00 00		 movzx	 edx, WORD PTR [ecx+244]
  00063	56		 push	 esi
  00064	0f b7 70 04	 movzx	 esi, WORD PTR [eax+4]
  00068	57		 push	 edi
  00069	89 75 0c	 mov	 DWORD PTR tv636[ebp], esi
  0006c	0f b7 fa	 movzx	 edi, dx
  0006f	0f b7 f6	 movzx	 esi, si
  00072	89 55 fc	 mov	 DWORD PTR tv627[ebp], edx
  00075	8b 15 80 01 00
	00		 mov	 edx, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+384
  0007b	03 fe		 add	 edi, esi
  0007d	3b fa		 cmp	 edi, edx
  0007f	0f 8f f2 01 00
	00		 jg	 $LN15@CGAddPoint

; 576  : 	{
; 577  : 		return;
; 578  : 	}
; 579  : 	if(lpUser->Dexterity + aRecv->Dexterity > ZtConfig.Character.MaxStats)

  00085	0f b7 b1 f6 00
	00 00		 movzx	 esi, WORD PTR [ecx+246]
  0008c	0f b7 78 06	 movzx	 edi, WORD PTR [eax+6]
  00090	03 f7		 add	 esi, edi
  00092	3b f2		 cmp	 esi, edx
  00094	0f 8f dd 01 00
	00		 jg	 $LN15@CGAddPoint

; 580  : 	{
; 581  : 		return;
; 582  : 	}
; 583  : 	if(lpUser->Vitality + aRecv->Vitality > ZtConfig.Character.MaxStats)

  0009a	0f b7 b1 f8 00
	00 00		 movzx	 esi, WORD PTR [ecx+248]
  000a1	0f b7 78 08	 movzx	 edi, WORD PTR [eax+8]
  000a5	03 f7		 add	 esi, edi
  000a7	3b f2		 cmp	 esi, edx
  000a9	0f 8f c8 01 00
	00		 jg	 $LN15@CGAddPoint

; 584  : 	{
; 585  : 		return;
; 586  : 	}
; 587  : 	if(lpUser->Energy + aRecv->Energy > ZtConfig.Character.MaxStats)

  000af	0f b7 b1 fa 00
	00 00		 movzx	 esi, WORD PTR [ecx+250]
  000b6	0f b7 78 0a	 movzx	 edi, WORD PTR [eax+10]
  000ba	03 f7		 add	 esi, edi
  000bc	3b f2		 cmp	 esi, edx
  000be	0f 8f b3 01 00
	00		 jg	 $LN15@CGAddPoint

; 588  : 	{
; 589  : 		return;
; 590  : 	}
; 591  : 	if(lpUser->Leadership + aRecv->Leadership > ZtConfig.Character.MaxStats)

  000c4	0f b7 70 0c	 movzx	 esi, WORD PTR [eax+12]
  000c8	53		 push	 ebx
  000c9	0f b7 99 18 01
	00 00		 movzx	 ebx, WORD PTR [ecx+280]
  000d0	03 de		 add	 ebx, esi
  000d2	3b da		 cmp	 ebx, edx
  000d4	0f 8f 9c 01 00
	00		 jg	 $LN17@CGAddPoint

; 592  : 	{
; 593  : 		return;
; 594  : 	}
; 595  : 
; 596  : 	int TotalCheck = aRecv->Strength + aRecv->Dexterity + aRecv->Vitality + aRecv->Energy + aRecv->Leadership;

  000da	8d 14 3e	 lea	 edx, DWORD PTR [esi+edi]
  000dd	0f b7 70 08	 movzx	 esi, WORD PTR [eax+8]
  000e1	8b 7d 0c	 mov	 edi, DWORD PTR tv636[ebp]
  000e4	03 d6		 add	 edx, esi
  000e6	0f b7 70 06	 movzx	 esi, WORD PTR [eax+6]
  000ea	03 d6		 add	 edx, esi
  000ec	0f b7 f7	 movzx	 esi, di
  000ef	03 d6		 add	 edx, esi

; 597  : 
; 598  : 	if(TotalCheck > lpUser->LevelUpPoint)

  000f1	8b b1 c0 00 00
	00		 mov	 esi, DWORD PTR [ecx+192]
  000f7	3b d6		 cmp	 edx, esi
  000f9	7e 1a		 jle	 SHORT $LN1@CGAddPoint

; 599  : 	{
; 600  : 		MsgOutput(aIndex, "[AddPoints] Total Point Error");

  000fb	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LGAPNCOI@?$FLAddPoints?$FN?5Total?5Point?5Error?$AA@
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 619  : 
; 620  : 	UpdateCharInfo(aIndex);

  00109	83 c4 08	 add	 esp, 8
  0010c	5b		 pop	 ebx
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi

; 621  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN1@CGAddPoint:

; 601  : 		return;
; 602  : 	}
; 603  : 
; 604  : 	lpUser->Strength		+= aRecv->Strength;

  00115	03 7d fc	 add	 edi, DWORD PTR tv627[ebp]

; 605  : 	lpUser->Dexterity		+= aRecv->Dexterity;
; 606  : 	lpUser->Vitality		+= aRecv->Vitality;
; 607  : 	lpUser->Energy			+= aRecv->Energy;
; 608  : 	lpUser->Leadership		+= aRecv->Leadership;
; 609  : 	lpUser->LevelUpPoint	-= TotalCheck;

  00118	2b f2		 sub	 esi, edx
  0011a	66 89 b9 f4 00
	00 00		 mov	 WORD PTR [ecx+244], di
  00121	0f b7 58 06	 movzx	 ebx, WORD PTR [eax+6]
  00125	0f b7 b9 f6 00
	00 00		 movzx	 edi, WORD PTR [ecx+246]
  0012c	66 03 df	 add	 bx, di
  0012f	0f b7 b9 f8 00
	00 00		 movzx	 edi, WORD PTR [ecx+248]
  00136	66 89 99 f6 00
	00 00		 mov	 WORD PTR [ecx+246], bx
  0013d	0f b7 58 08	 movzx	 ebx, WORD PTR [eax+8]

; 610  : 
; 611  : 	lpUser->Life = DCInfo.DefClass[lpUser->Class].Life + (lpUser->Level + lpUser->MLevel - 1) * DCInfo.DefClass[lpUser->Class].LevelLife  + ((lpUser->Vitality - DCInfo.DefClass[lpUser->Class].Vitality ) * DCInfo.DefClass[lpUser->Class].VitalityToLife);

  00141	0f bf 91 d0 00
	00 00		 movsx	 edx, WORD PTR [ecx+208]
  00148	66 03 df	 add	 bx, di
  0014b	0f b7 b9 fa 00
	00 00		 movzx	 edi, WORD PTR [ecx+250]
  00152	66 89 99 f8 00
	00 00		 mov	 WORD PTR [ecx+248], bx
  00159	0f b7 58 0a	 movzx	 ebx, WORD PTR [eax+10]
  0015d	66 03 df	 add	 bx, di
  00160	66 89 99 fa 00
	00 00		 mov	 WORD PTR [ecx+250], bx
  00167	66 8b 78 0c	 mov	 di, WORD PTR [eax+12]
  0016b	0f b7 81 18 01
	00 00		 movzx	 eax, WORD PTR [ecx+280]
  00172	66 03 f8	 add	 di, ax
  00175	0f bf 81 be 00
	00 00		 movsx	 eax, WORD PTR [ecx+190]
  0017c	8d 54 02 ff	 lea	 edx, DWORD PTR [edx+eax-1]
  00180	0f b7 81 b8 00
	00 00		 movzx	 eax, WORD PTR [ecx+184]
  00187	69 c0 c8 0b 00
	00		 imul	 eax, 3016		; 00000bc8H
  0018d	89 b1 c0 00 00
	00		 mov	 DWORD PTR [ecx+192], esi
  00193	66 89 b9 18 01
	00 00		 mov	 WORD PTR [ecx+280], di
  0019a	0f b7 b0 0c 00
	00 00		 movzx	 esi, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+12]
  001a1	89 55 0c	 mov	 DWORD PTR tv604[ebp], edx
  001a4	0f b7 91 f8 00
	00 00		 movzx	 edx, WORD PTR [ecx+248]
  001ab	db 45 0c	 fild	 DWORD PTR tv604[ebp]
  001ae	8b fa		 mov	 edi, edx
  001b0	2b fe		 sub	 edi, esi
  001b2	d9 5d fc	 fstp	 DWORD PTR tv599[ebp]
  001b5	89 7d 0c	 mov	 DWORD PTR tv598[ebp], edi

; 612  : 	lpUser->Mana = DCInfo.DefClass[lpUser->Class].Mana + (lpUser->Level + lpUser->MLevel - 1) * DCInfo.DefClass[lpUser->Class].LevelMana  + ((lpUser->Energy - DCInfo.DefClass[lpUser->Class].Energy ) * DCInfo.DefClass[lpUser->Class].EnergyToMana);

  001b8	0f b7 f3	 movzx	 esi, bx
  001bb	db 45 0c	 fild	 DWORD PTR tv598[ebp]
  001be	8b de		 mov	 ebx, esi
  001c0	d8 88 28 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+40]
  001c6	d9 45 fc	 fld	 DWORD PTR tv599[ebp]
  001c9	d9 c0		 fld	 ST(0)
  001cb	d8 88 10 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+16]
  001d1	d8 80 14 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+20]
  001d7	de c2		 faddp	 ST(2), ST(0)
  001d9	d9 c9		 fxch	 ST(1)
  001db	d9 99 fc 00 00
	00		 fstp	 DWORD PTR [ecx+252]
  001e1	0f b7 b8 0e 00
	00 00		 movzx	 edi, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+14]
  001e8	2b df		 sub	 ebx, edi
  001ea	89 5d 0c	 mov	 DWORD PTR tv593[ebp], ebx
  001ed	db 45 0c	 fild	 DWORD PTR tv593[ebp]
  001f0	d8 88 2c 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+44]
  001f6	d9 c1		 fld	 ST(1)
  001f8	d8 88 1c 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+28]
  001fe	d8 80 20 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+32]
  00204	de c1		 faddp	 ST(1), ST(0)
  00206	d9 99 10 01 00
	00		 fstp	 DWORD PTR [ecx+272]

; 613  : 
; 614  : 	lpUser->MaxLife = DCInfo.DefClass[lpUser->Class].Life + (lpUser->Level + lpUser->MLevel - 1) * DCInfo.DefClass[lpUser->Class].LevelLife  + ((lpUser->Vitality - DCInfo.DefClass[lpUser->Class].Vitality ) * DCInfo.DefClass[lpUser->Class].VitalityToLife);

  0020c	0f b7 b8 0c 00
	00 00		 movzx	 edi, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+12]
  00213	2b d7		 sub	 edx, edi
  00215	89 55 0c	 mov	 DWORD PTR tv588[ebp], edx
  00218	db 45 0c	 fild	 DWORD PTR tv588[ebp]
  0021b	d8 88 28 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+40]
  00221	d9 c1		 fld	 ST(1)
  00223	d8 88 10 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+16]
  00229	d8 80 14 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+20]
  0022f	de c1		 faddp	 ST(1), ST(0)
  00231	d9 99 00 01 00
	00		 fstp	 DWORD PTR [ecx+256]

; 615  : 	lpUser->MaxMana = DCInfo.DefClass[lpUser->Class].Mana + (lpUser->Level + lpUser->MLevel - 1) * DCInfo.DefClass[lpUser->Class].LevelMana  + ((lpUser->Energy - DCInfo.DefClass[lpUser->Class].Energy ) * DCInfo.DefClass[lpUser->Class].EnergyToMana);

  00237	0f b7 90 0e 00
	00 00		 movzx	 edx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+14]
  0023e	2b f2		 sub	 esi, edx
  00240	89 75 0c	 mov	 DWORD PTR tv583[ebp], esi

; 616  : 
; 617  : 
; 618  : 	gObjCalCharacter(aIndex);

  00243	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00246	56		 push	 esi
  00247	db 45 0c	 fild	 DWORD PTR tv583[ebp]
  0024a	d8 88 2c 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+44]
  00250	d9 80 1c 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+28]
  00256	de ca		 fmulp	 ST(2), ST(0)
  00258	d9 80 20 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+32]
  0025e	de c2		 faddp	 ST(2), ST(0)
  00260	de c1		 faddp	 ST(1), ST(0)
  00262	d9 99 14 01 00
	00		 fstp	 DWORD PTR [ecx+276]
  00268	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter

; 619  : 
; 620  : 	UpdateCharInfo(aIndex);

  0026d	56		 push	 esi
  0026e	e8 00 00 00 00	 call	 ?UpdateCharInfo@@YAXH@Z	; UpdateCharInfo
  00273	83 c4 08	 add	 esp, 8
$LN17@CGAddPoint:
  00276	5b		 pop	 ebx
$LN15@CGAddPoint:
  00277	5f		 pop	 edi
  00278	5e		 pop	 esi
$LN10@CGAddPoint:

; 621  : }

  00279	8b e5		 mov	 esp, ebp
  0027b	5d		 pop	 ebp
  0027c	c2 08 00	 ret	 8
?CGAddPoints@ZtUser@@QAEXHPAUPMSG_ADD_POINTS@@@Z ENDP	; ZtUser::CGAddPoints
_TEXT	ENDS
PUBLIC	?CGResetPoints@ZtUser@@QAEXHPAUPMSG_ADD_POINTSRESET@@@Z ; ZtUser::CGResetPoints
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?GCReFillSend@@YAXHHEEH@Z:PROC			; GCReFillSend
EXTRN	?gObjCalcMaxLifePower@@YAXH@Z:PROC		; gObjCalcMaxLifePower
EXTRN	?gObjSetBP@@YAXH@Z:PROC				; gObjSetBP
EXTRN	?GDSaveUserInfo@GameShop@@QAEXH@Z:PROC		; GameShop::GDSaveUserInfo
EXTRN	?gGameShop@@3VGameShop@@A:BYTE			; gGameShop
EXTRN	?GetCustom@CZtLicense@@QAEHXZ:PROC		; CZtLicense::GetCustom
; Function compile flags: /Ogtp
;	COMDAT ?CGResetPoints@ZtUser@@QAEXHPAUPMSG_ADD_POINTSRESET@@@Z
_TEXT	SEGMENT
tv807 = 8						; size = 4
tv801 = 8						; size = 4
tv794 = 8						; size = 4
tv788 = 8						; size = 4
tv782 = 8						; size = 4
tv757 = 8						; size = 4
_aIndex$ = 8						; size = 4
tv834 = 12						; size = 4
tv803 = 12						; size = 4
_aRecv$ = 12						; size = 4
?CGResetPoints@ZtUser@@QAEXHPAUPMSG_ADD_POINTSRESET@@@Z PROC ; ZtUser::CGResetPoints, COMDAT
; _this$ = ecx

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 627  : #if(ADD_ADD_RESETPOINT==0)
; 628  : 	return;
; 629  : #endif
; 630  : 
; 631  : 	if( !g_ZtLicense.CheckUser(eZtUB::Local) && 
; 632  : 		!g_ZtLicense.CheckUser(eZtUB::Gredy) &&
; 633  : 		!g_ZtLicense.CheckUser(eZtUB::Gredy2) && 
; 634  : 		!g_ZtLicense.CheckUser(eZtUB::MU2Play) &&
; 635  : 		!g_ZtLicense.CheckUser(eZtUB::GredyLocal) &&
; 636  : 		!g_ZtLicense.CheckUser(eZtUB::SILVER1) &&
; 637  : 		!g_ZtLicense.CheckUser(eZtUB::SILVER2) &&
; 638  : 		!g_ZtLicense.CheckUser(eZtUB::EpicMU) &&
; 639  : 		!THINNAKORN_MAC &&
; 640  : 		!g_ZtLicense.CheckUser(eZtUB::Escalate)&&
; 641  : 		!g_ZtLicense.CheckUser(eZtUB::eternalmu)&&
; 642  : 		!g_ZtLicense.CheckUser(eZtUB::Artem) &&
; 643  : 		!g_ZtLicense.CheckUser(eZtUB::Artem2) &&
; 644  : 		!g_ZtLicense.CheckUser(eZtUB::RevoMU)&&
; 645  : 		!g_ZtLicense.CheckUser(eZtUB::masonX)&&
; 646  : 		!g_ZtLicense.CheckUser(eZtUB::ArcMu) &&
; 647  : 		!g_ZtLicense.CheckUser(eZtUB::GloryMU) &&
; 648  : 		!g_ZtLicense.CheckUser(eZtUB::MedoniAndrei) &&
; 649  : 		!g_ZtLicense.CheckUser(eZtUB::mu4you) &&
; 650  : 		!g_ZtLicense.CheckUser(eZtUB::NSGames) &&
; 651  : 		!g_ZtLicense.CheckUser(eZtUB::ulasevich) &&
; 652  : 		!g_ZtLicense.CheckUser(eZtUB::ulasevich2) &&
; 653  : 		!g_ZtLicense.CheckUser(eZtUB::AlterMU))

  00006	6a 00		 push	 0
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00012	84 c0		 test	 al, al
  00014	0f 85 9a 01 00
	00		 jne	 $LN11@CGResetPoi
  0001a	6a 20		 push	 32			; 00000020H
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00021	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00026	84 c0		 test	 al, al
  00028	0f 85 86 01 00
	00		 jne	 $LN11@CGResetPoi
  0002e	6a 22		 push	 34			; 00000022H
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00035	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0003a	84 c0		 test	 al, al
  0003c	0f 85 72 01 00
	00		 jne	 $LN11@CGResetPoi
  00042	6a 36		 push	 54			; 00000036H
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00049	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0004e	84 c0		 test	 al, al
  00050	0f 85 5e 01 00
	00		 jne	 $LN11@CGResetPoi
  00056	6a 21		 push	 33			; 00000021H
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0005d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00062	84 c0		 test	 al, al
  00064	0f 85 4a 01 00
	00		 jne	 $LN11@CGResetPoi
  0006a	6a 07		 push	 7
  0006c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00071	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00076	84 c0		 test	 al, al
  00078	0f 85 36 01 00
	00		 jne	 $LN11@CGResetPoi
  0007e	6a 08		 push	 8
  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00085	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0008a	84 c0		 test	 al, al
  0008c	0f 85 22 01 00
	00		 jne	 $LN11@CGResetPoi
  00092	6a 3b		 push	 59			; 0000003bH
  00094	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00099	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0009e	84 c0		 test	 al, al
  000a0	0f 85 0e 01 00
	00		 jne	 $LN11@CGResetPoi
  000a6	6a 40		 push	 64			; 00000040H
  000a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000ad	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000b2	84 c0		 test	 al, al
  000b4	0f 85 fa 00 00
	00		 jne	 $LN11@CGResetPoi
  000ba	6a 4f		 push	 79			; 0000004fH
  000bc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000c1	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000c6	84 c0		 test	 al, al
  000c8	0f 85 e6 00 00
	00		 jne	 $LN11@CGResetPoi
  000ce	6a 30		 push	 48			; 00000030H
  000d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000d5	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000da	84 c0		 test	 al, al
  000dc	0f 85 d2 00 00
	00		 jne	 $LN11@CGResetPoi
  000e2	6a 31		 push	 49			; 00000031H
  000e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000e9	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000ee	84 c0		 test	 al, al
  000f0	0f 85 be 00 00
	00		 jne	 $LN11@CGResetPoi
  000f6	6a 43		 push	 67			; 00000043H
  000f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000fd	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00102	84 c0		 test	 al, al
  00104	0f 85 aa 00 00
	00		 jne	 $LN11@CGResetPoi
  0010a	6a 3c		 push	 60			; 0000003cH
  0010c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00111	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00116	84 c0		 test	 al, al
  00118	0f 85 96 00 00
	00		 jne	 $LN11@CGResetPoi
  0011e	6a 48		 push	 72			; 00000048H
  00120	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00125	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0012a	84 c0		 test	 al, al
  0012c	0f 85 82 00 00
	00		 jne	 $LN11@CGResetPoi
  00132	6a 46		 push	 70			; 00000046H
  00134	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00139	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0013e	84 c0		 test	 al, al
  00140	75 72		 jne	 SHORT $LN11@CGResetPoi
  00142	6a 32		 push	 50			; 00000032H
  00144	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00149	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0014e	84 c0		 test	 al, al
  00150	75 62		 jne	 SHORT $LN11@CGResetPoi
  00152	6a 4e		 push	 78			; 0000004eH
  00154	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00159	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0015e	84 c0		 test	 al, al
  00160	75 52		 jne	 SHORT $LN11@CGResetPoi
  00162	6a 51		 push	 81			; 00000051H
  00164	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00169	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0016e	84 c0		 test	 al, al
  00170	75 42		 jne	 SHORT $LN11@CGResetPoi
  00172	6a 17		 push	 23			; 00000017H
  00174	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00179	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0017e	84 c0		 test	 al, al
  00180	75 32		 jne	 SHORT $LN11@CGResetPoi
  00182	6a 24		 push	 36			; 00000024H
  00184	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00189	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0018e	84 c0		 test	 al, al
  00190	75 22		 jne	 SHORT $LN11@CGResetPoi
  00192	6a 3e		 push	 62			; 0000003eH
  00194	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00199	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0019e	84 c0		 test	 al, al
  001a0	75 12		 jne	 SHORT $LN11@CGResetPoi

; 654  : 	{
; 655  : 		if(!g_ZtLicense.GetCustom())

  001a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001a7	e8 00 00 00 00	 call	 ?GetCustom@CZtLicense@@QAEHXZ ; CZtLicense::GetCustom
  001ac	85 c0		 test	 eax, eax
  001ae	0f 84 54 03 00
	00		 je	 $LN13@CGResetPoi
$LN11@CGResetPoi:
  001b4	57		 push	 edi

; 656  : 		{
; 657  : 			return;
; 658  : 		}
; 659  : 	}
; 660  : 
; 661  : 	if ( OBJMAX_RANGE(aIndex) == FALSE )

  001b5	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  001b8	85 ff		 test	 edi, edi
  001ba	78 0f		 js	 SHORT $LN17@CGResetPoi
  001bc	33 c0		 xor	 eax, eax
  001be	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  001c4	0f 9e c0	 setle	 al
  001c7	85 c0		 test	 eax, eax
  001c9	75 1e		 jne	 SHORT $LN10@CGResetPoi
$LN17@CGResetPoi:

; 662  : 	{
; 663  : 		LogAdd("error : %s %d", __FILE__, __LINE__ );

  001cb	68 97 02 00 00	 push	 663			; 00000297H
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FIBJGLLN@ZtUser?4cpp?$AA@
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e3	5f		 pop	 edi
  001e4	5b		 pop	 ebx

; 746  : }

  001e5	5d		 pop	 ebp
  001e6	c2 08 00	 ret	 8
$LN10@CGResetPoi:
  001e9	56		 push	 esi

; 664  : 		return;
; 665  : 	}
; 666  : 
; 667  : 	LPOBJ lpUser = &gObj[aIndex];

  001ea	8b f7		 mov	 esi, edi
  001ec	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  001f2	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 668  : 
; 669  : 	if(lpUser->Connected < PLAYER_PLAYING)

  001f8	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  001fc	0f 8c 04 03 00
	00		 jl	 $LN19@CGResetPoi

; 670  : 	{
; 671  : 		return;
; 672  : 	}
; 673  : 
; 674  : 	if(lpUser->Type != OBJ_USER)

  00202	66 83 7e 68 01	 cmp	 WORD PTR [esi+104], 1
  00207	0f 85 f9 02 00
	00		 jne	 $LN19@CGResetPoi

; 675  : 	{
; 676  : 		return;
; 677  : 	}
; 678  : 
; 679  : 	if(!aRecv->Result)

  0020d	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00210	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  00214	75 4c		 jne	 SHORT $LN7@CGResetPoi

; 680  : 	{
; 681  : 		if(g_ZtLicense.CheckUser(eZtUB::SILVER1) || g_ZtLicense.CheckUser(eZtUB::SILVER2))

  00216	6a 07		 push	 7
  00218	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0021d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00222	84 c0		 test	 al, al
  00224	75 64		 jne	 SHORT $LN2@CGResetPoi
  00226	6a 08		 push	 8
  00228	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0022d	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00232	84 c0		 test	 al, al
  00234	75 54		 jne	 SHORT $LN2@CGResetPoi

; 682  : 		{
; 683  : 			/*if(lpUser->PremiumTime > 0)
; 684  : 			{
; 685  : 			}
; 686  : 			else
; 687  : 			{
; 688  : 				return;
; 689  : 			}*/
; 690  : 		}
; 691  : 		else
; 692  : 		{
; 693  : 			if(this->ResetStatsPriceWCoin > lpUser->GameShop.WCoinC)

  00236	db 03		 fild	 DWORD PTR [ebx]
  00238	dc 96 00 23 00
	00		 fcom	 QWORD PTR [esi+8960]
  0023e	df e0		 fnstsw	 ax
  00240	f6 c4 41	 test	 ah, 65			; 00000041H
  00243	0f 84 bb 02 00
	00		 je	 $LN24@CGResetPoi

; 694  : 			{
; 695  : 				return;
; 696  : 			}
; 697  : 			lpUser->GameShop.WCoinC -= this->ResetStatsPriceWCoin;	

  00249	dc ae 00 23 00
	00		 fsubr	 QWORD PTR [esi+8960]

; 698  : 			gGameShop.GDSaveUserInfo(aIndex);

  0024f	57		 push	 edi
  00250	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGameShop@@3VGameShop@@A ; gGameShop
  00255	dd 9e 00 23 00
	00		 fstp	 QWORD PTR [esi+8960]
  0025b	e8 00 00 00 00	 call	 ?GDSaveUserInfo@GameShop@@QAEXH@Z ; GameShop::GDSaveUserInfo

; 699  : 		}
; 700  : 	}
; 701  : 	else

  00260	eb 28		 jmp	 SHORT $LN2@CGResetPoi
$LN7@CGResetPoi:

; 702  : 	{
; 703  : 		if(this->ResetStatsPriceCredit > lpUser->ZtCred)

  00262	db 43 04	 fild	 DWORD PTR [ebx+4]
  00265	d9 5d 08	 fstp	 DWORD PTR tv757[ebp]
  00268	d9 45 08	 fld	 DWORD PTR tv757[ebp]
  0026b	d9 86 a8 22 00
	00		 fld	 DWORD PTR [esi+8872]
  00271	d8 d9		 fcomp	 ST(1)
  00273	df e0		 fnstsw	 ax
  00275	f6 c4 05	 test	 ah, 5
  00278	0f 8b 86 02 00
	00		 jnp	 $LN24@CGResetPoi

; 704  : 		{
; 705  : 			return;
; 706  : 		}
; 707  : 		lpUser->ZtCred -= this->ResetStatsPriceCredit;

  0027e	d8 ae a8 22 00
	00		 fsubr	 DWORD PTR [esi+8872]
  00284	d9 9e a8 22 00
	00		 fstp	 DWORD PTR [esi+8872]
$LN2@CGResetPoi:

; 708  : 	}
; 709  : 
; 710  : 	ZtUserDataSend(aIndex);

  0028a	57		 push	 edi
  0028b	e8 00 00 00 00	 call	 ?ZtUserDataSend@@YAXH@Z	; ZtUserDataSend

; 711  : 
; 712  : 	int TotalPoint = lpUser->Strength + lpUser->Dexterity + lpUser->Vitality + lpUser->Energy + lpUser->Leadership + lpUser->LevelUpPoint;
; 713  : 
; 714  : 	TotalPoint -= DCInfo.DefClass[lpUser->Class].Strength;
; 715  : 	TotalPoint -= DCInfo.DefClass[lpUser->Class].Dexterity;
; 716  : 	TotalPoint -= DCInfo.DefClass[lpUser->Class].Energy;
; 717  : 	TotalPoint -= DCInfo.DefClass[lpUser->Class].Vitality;
; 718  : 	TotalPoint -= DCInfo.DefClass[lpUser->Class].Leadership;

  00290	0f b7 86 b8 00
	00 00		 movzx	 eax, WORD PTR [esi+184]
  00297	69 c0 c8 0b 00
	00		 imul	 eax, 3016		; 00000bc8H
  0029d	0f b7 90 08 00
	00 00		 movzx	 edx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+8]
  002a4	0f b7 8e 18 01
	00 00		 movzx	 ecx, WORD PTR [esi+280]
  002ab	8b da		 mov	 ebx, edx
  002ad	2b cb		 sub	 ecx, ebx
  002af	0f b7 98 c8 0b
	00 00		 movzx	 ebx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+3016]
  002b6	2b cb		 sub	 ecx, ebx
  002b8	0f b7 98 0a 00
	00 00		 movzx	 ebx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+10]
  002bf	2b cb		 sub	 ecx, ebx
  002c1	0f b7 98 0e 00
	00 00		 movzx	 ebx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+14]
  002c8	2b cb		 sub	 ecx, ebx
  002ca	0f b7 98 0c 00
	00 00		 movzx	 ebx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+12]
  002d1	2b cb		 sub	 ecx, ebx
  002d3	0f b7 9e f4 00
	00 00		 movzx	 ebx, WORD PTR [esi+244]

; 719  : 
; 720  : 	lpUser->Strength = DCInfo.DefClass[lpUser->Class].Strength;

  002da	66 89 96 f4 00
	00 00		 mov	 WORD PTR [esi+244], dx

; 721  : 	lpUser->Dexterity = DCInfo.DefClass[lpUser->Class].Dexterity;

  002e1	0f b7 90 0a 00
	00 00		 movzx	 edx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+10]
  002e8	03 cb		 add	 ecx, ebx
  002ea	0f b7 9e f6 00
	00 00		 movzx	 ebx, WORD PTR [esi+246]
  002f1	66 89 96 f6 00
	00 00		 mov	 WORD PTR [esi+246], dx

; 722  : 	lpUser->Energy = DCInfo.DefClass[lpUser->Class].Energy;

  002f8	0f b7 90 0e 00
	00 00		 movzx	 edx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+14]
  002ff	03 cb		 add	 ecx, ebx
  00301	0f b7 9e f8 00
	00 00		 movzx	 ebx, WORD PTR [esi+248]
  00308	03 cb		 add	 ecx, ebx
  0030a	0f b7 9e fa 00
	00 00		 movzx	 ebx, WORD PTR [esi+250]
  00311	66 89 96 fa 00
	00 00		 mov	 WORD PTR [esi+250], dx

; 723  : 	lpUser->Vitality = DCInfo.DefClass[lpUser->Class].Vitality;

  00318	0f b7 90 0c 00
	00 00		 movzx	 edx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+12]
  0031f	66 89 96 f8 00
	00 00		 mov	 WORD PTR [esi+248], dx

; 724  : 	lpUser->Leadership = DCInfo.DefClass[lpUser->Class].Leadership;

  00326	0f b7 90 c8 0b
	00 00		 movzx	 edx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+3016]
  0032d	66 89 96 18 01
	00 00		 mov	 WORD PTR [esi+280], dx

; 725  : 
; 726  : 	lpUser->LevelUpPoint = TotalPoint;
; 727  : 
; 728  : 	lpUser->Life = DCInfo.DefClass[lpUser->Class].Life + (lpUser->Level + lpUser->MLevel - 1) * DCInfo.DefClass[lpUser->Class].LevelLife  + ((lpUser->Vitality - DCInfo.DefClass[lpUser->Class].Vitality ) * DCInfo.DefClass[lpUser->Class].VitalityToLife);

  00334	0f bf 96 be 00
	00 00		 movsx	 edx, WORD PTR [esi+190]
  0033b	03 cb		 add	 ecx, ebx
  0033d	03 8e c0 00 00
	00		 add	 ecx, DWORD PTR [esi+192]
  00343	89 8e c0 00 00
	00		 mov	 DWORD PTR [esi+192], ecx
  00349	0f bf 8e d0 00
	00 00		 movsx	 ecx, WORD PTR [esi+208]
  00350	8d 4c 11 ff	 lea	 ecx, DWORD PTR [ecx+edx-1]
  00354	0f b7 90 0c 00
	00 00		 movzx	 edx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+12]
  0035b	89 4d 08	 mov	 DWORD PTR tv807[ebp], ecx
  0035e	0f b7 8e f8 00
	00 00		 movzx	 ecx, WORD PTR [esi+248]
  00365	db 45 08	 fild	 DWORD PTR tv807[ebp]
  00368	8b d9		 mov	 ebx, ecx
  0036a	2b da		 sub	 ebx, edx
  0036c	d9 5d 0c	 fstp	 DWORD PTR tv834[ebp]

; 729  : 	lpUser->Mana = DCInfo.DefClass[lpUser->Class].Mana + (lpUser->Level + lpUser->MLevel - 1) * DCInfo.DefClass[lpUser->Class].LevelMana  + ((lpUser->Energy - DCInfo.DefClass[lpUser->Class].Energy ) * DCInfo.DefClass[lpUser->Class].EnergyToMana);

  0036f	0f b7 96 fa 00
	00 00		 movzx	 edx, WORD PTR [esi+250]
  00376	89 5d 08	 mov	 DWORD PTR tv801[ebp], ebx
  00379	db 45 08	 fild	 DWORD PTR tv801[ebp]
  0037c	d8 88 28 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+40]
  00382	d9 45 0c	 fld	 DWORD PTR tv834[ebp]
  00385	89 55 0c	 mov	 DWORD PTR tv803[ebp], edx
  00388	d9 c0		 fld	 ST(0)
  0038a	d8 88 10 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+16]
  00390	d8 80 14 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+20]
  00396	de c2		 faddp	 ST(2), ST(0)
  00398	d9 c9		 fxch	 ST(1)
  0039a	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  003a0	0f b7 98 0e 00
	00 00		 movzx	 ebx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+14]
  003a7	2b d3		 sub	 edx, ebx
  003a9	89 55 08	 mov	 DWORD PTR tv794[ebp], edx
  003ac	db 45 08	 fild	 DWORD PTR tv794[ebp]
  003af	d8 88 2c 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+44]
  003b5	d9 c1		 fld	 ST(1)
  003b7	d8 88 1c 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+28]
  003bd	d8 80 20 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+32]
  003c3	de c1		 faddp	 ST(1), ST(0)
  003c5	d9 9e 10 01 00
	00		 fstp	 DWORD PTR [esi+272]

; 730  : 
; 731  : 	lpUser->MaxLife = DCInfo.DefClass[lpUser->Class].Life + (lpUser->Level + lpUser->MLevel - 1) * DCInfo.DefClass[lpUser->Class].LevelLife  + ((lpUser->Vitality - DCInfo.DefClass[lpUser->Class].Vitality ) * DCInfo.DefClass[lpUser->Class].VitalityToLife);

  003cb	0f b7 90 0c 00
	00 00		 movzx	 edx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+12]
  003d2	2b ca		 sub	 ecx, edx
  003d4	89 4d 08	 mov	 DWORD PTR tv788[ebp], ecx

; 732  : 	lpUser->MaxMana = DCInfo.DefClass[lpUser->Class].Mana + (lpUser->Level + lpUser->MLevel - 1) * DCInfo.DefClass[lpUser->Class].LevelMana  + ((lpUser->Energy - DCInfo.DefClass[lpUser->Class].Energy ) * DCInfo.DefClass[lpUser->Class].EnergyToMana);

  003d7	8b 4d 0c	 mov	 ecx, DWORD PTR tv803[ebp]
  003da	db 45 08	 fild	 DWORD PTR tv788[ebp]
  003dd	d8 88 28 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+40]
  003e3	d9 c1		 fld	 ST(1)
  003e5	d8 88 10 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+16]
  003eb	d8 80 14 00 00
	00		 fadd	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+20]
  003f1	de c1		 faddp	 ST(1), ST(0)
  003f3	d9 9e 00 01 00
	00		 fstp	 DWORD PTR [esi+256]
  003f9	0f b7 90 0e 00
	00 00		 movzx	 edx, WORD PTR ?DCInfo@@3Vclassdef@@A[eax+14]
  00400	2b ca		 sub	 ecx, edx
  00402	89 4d 08	 mov	 DWORD PTR tv782[ebp], ecx
  00405	db 45 08	 fild	 DWORD PTR tv782[ebp]

; 733  : 
; 734  : 	lpUser->VitalityToLife = DCInfo.DefClass[lpUser->Class].VitalityToLife;
; 735  : 	lpUser->EnergyToMana = DCInfo.DefClass[lpUser->Class].EnergyToMana;
; 736  : 
; 737  : 
; 738  : 	::gObjSetBP(aIndex);

  00408	57		 push	 edi
  00409	d8 88 2c 00 00
	00		 fmul	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+44]
  0040f	d9 80 1c 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+28]
  00415	de ca		 fmulp	 ST(2), ST(0)
  00417	d9 80 20 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+32]
  0041d	de c2		 faddp	 ST(2), ST(0)
  0041f	de c1		 faddp	 ST(1), ST(0)
  00421	d9 9e 14 01 00
	00		 fstp	 DWORD PTR [esi+276]
  00427	d9 80 28 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+40]
  0042d	d9 9e 34 01 00
	00		 fstp	 DWORD PTR [esi+308]
  00433	d9 80 2c 00 00
	00		 fld	 DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+44]
  00439	d9 9e 38 01 00
	00		 fstp	 DWORD PTR [esi+312]
  0043f	e8 00 00 00 00	 call	 ?gObjSetBP@@YAXH@Z	; gObjSetBP

; 739  : 	::gObjCalcMaxLifePower(aIndex);

  00444	57		 push	 edi
  00445	e8 00 00 00 00	 call	 ?gObjCalcMaxLifePower@@YAXH@Z ; gObjCalcMaxLifePower

; 740  : 	GCReFillSend(aIndex, (int)lpUser->MaxLife + lpUser->AddLife, 0xFE, 0, lpUser->iMaxShield + lpUser->iAddShield);

  0044a	d9 86 00 01 00
	00		 fld	 DWORD PTR [esi+256]
  00450	8b 86 5c 01 00
	00		 mov	 eax, DWORD PTR [esi+348]
  00456	03 86 58 01 00
	00		 add	 eax, DWORD PTR [esi+344]
  0045c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0045f	50		 push	 eax
  00460	6a 00		 push	 0
  00462	68 fe 00 00 00	 push	 254			; 000000feH
  00467	e8 00 00 00 00	 call	 __ftol2_sse
  0046c	03 86 4c 01 00
	00		 add	 eax, DWORD PTR [esi+332]
  00472	50		 push	 eax
  00473	57		 push	 edi
  00474	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 741  : 	GCReFillSend(aIndex, (int)lpUser->Life, 0xFF, 0, lpUser->iShield);

  00479	d9 86 fc 00 00
	00		 fld	 DWORD PTR [esi+252]
  0047f	8b 8e 54 01 00
	00		 mov	 ecx, DWORD PTR [esi+340]
  00485	83 c4 14	 add	 esp, 20			; 00000014H
  00488	51		 push	 ecx
  00489	6a 00		 push	 0
  0048b	68 ff 00 00 00	 push	 255			; 000000ffH
  00490	e8 00 00 00 00	 call	 __ftol2_sse
  00495	50		 push	 eax
  00496	57		 push	 edi
  00497	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 742  : 	GCManaSend(aIndex,(int)lpUser->MaxMana + lpUser->AddMana, 0xFE, 0, lpUser->MaxBP + lpUser->AddBP);

  0049c	d9 86 14 01 00
	00		 fld	 DWORD PTR [esi+276]
  004a2	8b 96 30 01 00
	00		 mov	 edx, DWORD PTR [esi+304]
  004a8	03 96 2c 01 00
	00		 add	 edx, DWORD PTR [esi+300]
  004ae	83 c4 14	 add	 esp, 20			; 00000014H
  004b1	52		 push	 edx
  004b2	6a 00		 push	 0
  004b4	68 fe 00 00 00	 push	 254			; 000000feH
  004b9	e8 00 00 00 00	 call	 __ftol2_sse
  004be	03 86 50 01 00
	00		 add	 eax, DWORD PTR [esi+336]
  004c4	50		 push	 eax
  004c5	57		 push	 edi
  004c6	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 743  : 	GCManaSend(aIndex, (int)lpUser->Mana, 0xFF, 0, lpUser->BP);

  004cb	d9 86 10 01 00
	00		 fld	 DWORD PTR [esi+272]
  004d1	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  004d7	83 c4 14	 add	 esp, 20			; 00000014H
  004da	50		 push	 eax
  004db	6a 00		 push	 0
  004dd	68 ff 00 00 00	 push	 255			; 000000ffH
  004e2	e8 00 00 00 00	 call	 __ftol2_sse
  004e7	50		 push	 eax
  004e8	57		 push	 edi
  004e9	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend

; 744  : 	UpdateCharInfo(aIndex);

  004ee	57		 push	 edi
  004ef	e8 00 00 00 00	 call	 ?UpdateCharInfo@@YAXH@Z	; UpdateCharInfo

; 745  : 	gObjCalCharacter(aIndex);

  004f4	57		 push	 edi
  004f5	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  004fa	83 c4 1c	 add	 esp, 28			; 0000001cH
  004fd	5e		 pop	 esi
  004fe	5f		 pop	 edi
  004ff	5b		 pop	 ebx

; 746  : }

  00500	5d		 pop	 ebp
  00501	c2 08 00	 ret	 8
$LN24@CGResetPoi:

; 702  : 	{
; 703  : 		if(this->ResetStatsPriceCredit > lpUser->ZtCred)

  00504	dd d8		 fstp	 ST(0)
$LN19@CGResetPoi:
  00506	5e		 pop	 esi
  00507	5f		 pop	 edi
$LN13@CGResetPoi:
  00508	5b		 pop	 ebx

; 746  : }

  00509	5d		 pop	 ebp
  0050a	c2 08 00	 ret	 8
?CGResetPoints@ZtUser@@QAEXHPAUPMSG_ADD_POINTSRESET@@@Z ENDP ; ZtUser::CGResetPoints
_TEXT	ENDS
PUBLIC	??_C@_0BG@IOJCDDID@ResetStatsPriceCredit?$AA@	; `string'
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_0BF@FHJGPLPD@ResetStatsPriceWCoin?$AA@	; `string'
PUBLIC	??_C@_0BG@GIILCGOP@ZtData?2ResetStats?4ini?$AA@	; `string'
PUBLIC	?ResetPointsLoad@ZtUser@@QAEXXZ			; ZtUser::ResetPointsLoad
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
;	COMDAT ??_C@_0BG@IOJCDDID@ResetStatsPriceCredit?$AA@
CONST	SEGMENT
??_C@_0BG@IOJCDDID@ResetStatsPriceCredit?$AA@ DB 'ResetStatsPriceCredit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FHJGPLPD@ResetStatsPriceWCoin?$AA@
CONST	SEGMENT
??_C@_0BF@FHJGPLPD@ResetStatsPriceWCoin?$AA@ DB 'ResetStatsPriceWCoin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GIILCGOP@ZtData?2ResetStats?4ini?$AA@
CONST	SEGMENT
??_C@_0BG@GIILCGOP@ZtData?2ResetStats?4ini?$AA@ DB 'ZtData\ResetStats.ini'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ResetPointsLoad@ZtUser@@QAEXXZ
_TEXT	SEGMENT
?ResetPointsLoad@ZtUser@@QAEXXZ PROC			; ZtUser::ResetPointsLoad, COMDAT
; _this$ = ecx

; 749  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 750  : 	this->ResetStatsPriceWCoin = GetPrivateProfileInt("ZtTeam", "ResetStatsPriceWCoin", 0, gDirPath.GetNewPath("ZtData\\ResetStats.ini"));;

  00004	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GIILCGOP@ZtData?2ResetStats?4ini?$AA@
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0000e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00013	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  00019	50		 push	 eax
  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FHJGPLPD@ResetStatsPriceWCoin?$AA@
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00026	ff d7		 call	 edi

; 751  : 	this->ResetStatsPriceCredit = GetPrivateProfileInt("ZtTeam", "ResetStatsPriceCredit", 0, gDirPath.GetNewPath("ZtData\\ResetStats.ini"));;

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GIILCGOP@ZtData?2ResetStats?4ini?$AA@
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00032	89 06		 mov	 DWORD PTR [esi], eax
  00034	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00039	50		 push	 eax
  0003a	6a 00		 push	 0
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IOJCDDID@ResetStatsPriceCredit?$AA@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00046	ff d7		 call	 edi
  00048	5f		 pop	 edi
  00049	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0004c	5e		 pop	 esi

; 752  : }

  0004d	c3		 ret	 0
?ResetPointsLoad@ZtUser@@QAEXXZ ENDP			; ZtUser::ResetPointsLoad
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ResetPointSend@ZtUser@@QAEXH@Z			; ZtUser::ResetPointSend
; Function compile flags: /Ogtp
;	COMDAT ?ResetPointSend@ZtUser@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?ResetPointSend@ZtUser@@QAEXH@Z PROC			; ZtUser::ResetPointSend, COMDAT
; _this$ = ecx

; 755  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 756  : #if(ADD_ADD_RESETPOINT==0)
; 757  : 	return;
; 758  : #endif
; 759  : 
; 760  : 	if( !g_ZtLicense.CheckUser(eZtUB::Local) && 
; 761  : 		!g_ZtLicense.CheckUser(eZtUB::Gredy) &&
; 762  : 		!g_ZtLicense.CheckUser(eZtUB::Gredy2) && 
; 763  : 		!g_ZtLicense.CheckUser(eZtUB::MU2Play) &&
; 764  : 		!g_ZtLicense.CheckUser(eZtUB::GredyLocal) &&
; 765  : 		!g_ZtLicense.CheckUser(eZtUB::SILVER1) &&
; 766  : 		!g_ZtLicense.CheckUser(eZtUB::SILVER2) &&
; 767  : 		!g_ZtLicense.CheckUser(eZtUB::EpicMU) &&
; 768  : 		!THINNAKORN_MAC &&
; 769  : 		!g_ZtLicense.CheckUser(eZtUB::Escalate)&&
; 770  : 		!g_ZtLicense.CheckUser(eZtUB::eternalmu)&&
; 771  : 		!g_ZtLicense.CheckUser(eZtUB::Artem)&&
; 772  : 		!g_ZtLicense.CheckUser(eZtUB::Artem2)&&
; 773  : 		!g_ZtLicense.CheckUser(eZtUB::RevoMU)&&
; 774  : 		!g_ZtLicense.CheckUser(eZtUB::masonX)&&
; 775  : 		!g_ZtLicense.CheckUser(eZtUB::ArcMu) &&
; 776  : 		!g_ZtLicense.CheckUser(eZtUB::GloryMU) &&
; 777  : 		!g_ZtLicense.CheckUser(eZtUB::MedoniAndrei) &&
; 778  : 		!g_ZtLicense.CheckUser(eZtUB::mu4you) &&
; 779  : 		!g_ZtLicense.CheckUser(eZtUB::NSGames) &&
; 780  : 		!g_ZtLicense.CheckUser(eZtUB::ulasevich) &&
; 781  : 		!g_ZtLicense.CheckUser(eZtUB::ulasevich2) &&
; 782  : 		!g_ZtLicense.CheckUser(eZtUB::AlterMU))

  00013	6a 00		 push	 0
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0001f	84 c0		 test	 al, al
  00021	0f 85 92 01 00
	00		 jne	 $LN2@ResetPoint
  00027	6a 20		 push	 32			; 00000020H
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0002e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00033	84 c0		 test	 al, al
  00035	0f 85 7e 01 00
	00		 jne	 $LN2@ResetPoint
  0003b	6a 22		 push	 34			; 00000022H
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00042	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00047	84 c0		 test	 al, al
  00049	0f 85 6a 01 00
	00		 jne	 $LN2@ResetPoint
  0004f	6a 36		 push	 54			; 00000036H
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00056	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0005b	84 c0		 test	 al, al
  0005d	0f 85 56 01 00
	00		 jne	 $LN2@ResetPoint
  00063	6a 21		 push	 33			; 00000021H
  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0006a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0006f	84 c0		 test	 al, al
  00071	0f 85 42 01 00
	00		 jne	 $LN2@ResetPoint
  00077	6a 07		 push	 7
  00079	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0007e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00083	84 c0		 test	 al, al
  00085	0f 85 2e 01 00
	00		 jne	 $LN2@ResetPoint
  0008b	6a 08		 push	 8
  0008d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00092	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00097	84 c0		 test	 al, al
  00099	0f 85 1a 01 00
	00		 jne	 $LN2@ResetPoint
  0009f	6a 3b		 push	 59			; 0000003bH
  000a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000a6	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000ab	84 c0		 test	 al, al
  000ad	0f 85 06 01 00
	00		 jne	 $LN2@ResetPoint
  000b3	6a 40		 push	 64			; 00000040H
  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000ba	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000bf	84 c0		 test	 al, al
  000c1	0f 85 f2 00 00
	00		 jne	 $LN2@ResetPoint
  000c7	6a 4f		 push	 79			; 0000004fH
  000c9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000ce	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000d3	84 c0		 test	 al, al
  000d5	0f 85 de 00 00
	00		 jne	 $LN2@ResetPoint
  000db	6a 30		 push	 48			; 00000030H
  000dd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000e2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000e7	84 c0		 test	 al, al
  000e9	0f 85 ca 00 00
	00		 jne	 $LN2@ResetPoint
  000ef	6a 31		 push	 49			; 00000031H
  000f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000f6	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000fb	84 c0		 test	 al, al
  000fd	0f 85 b6 00 00
	00		 jne	 $LN2@ResetPoint
  00103	6a 43		 push	 67			; 00000043H
  00105	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0010a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0010f	84 c0		 test	 al, al
  00111	0f 85 a2 00 00
	00		 jne	 $LN2@ResetPoint
  00117	6a 3c		 push	 60			; 0000003cH
  00119	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0011e	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00123	84 c0		 test	 al, al
  00125	0f 85 8e 00 00
	00		 jne	 $LN2@ResetPoint
  0012b	6a 48		 push	 72			; 00000048H
  0012d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00132	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00137	84 c0		 test	 al, al
  00139	75 7e		 jne	 SHORT $LN2@ResetPoint
  0013b	6a 46		 push	 70			; 00000046H
  0013d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00142	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00147	84 c0		 test	 al, al
  00149	75 6e		 jne	 SHORT $LN2@ResetPoint
  0014b	6a 32		 push	 50			; 00000032H
  0014d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00152	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00157	84 c0		 test	 al, al
  00159	75 5e		 jne	 SHORT $LN2@ResetPoint
  0015b	6a 4e		 push	 78			; 0000004eH
  0015d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00162	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00167	84 c0		 test	 al, al
  00169	75 4e		 jne	 SHORT $LN2@ResetPoint
  0016b	6a 51		 push	 81			; 00000051H
  0016d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00172	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00177	84 c0		 test	 al, al
  00179	75 3e		 jne	 SHORT $LN2@ResetPoint
  0017b	6a 17		 push	 23			; 00000017H
  0017d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00182	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00187	84 c0		 test	 al, al
  00189	75 2e		 jne	 SHORT $LN2@ResetPoint
  0018b	6a 24		 push	 36			; 00000024H
  0018d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00192	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00197	84 c0		 test	 al, al
  00199	75 1e		 jne	 SHORT $LN2@ResetPoint
  0019b	6a 3e		 push	 62			; 0000003eH
  0019d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001a2	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001a7	84 c0		 test	 al, al
  001a9	75 0e		 jne	 SHORT $LN2@ResetPoint

; 783  : 	{
; 784  : 		if(!g_ZtLicense.GetCustom())

  001ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001b0	e8 00 00 00 00	 call	 ?GetCustom@CZtLicense@@QAEHXZ ; CZtLicense::GetCustom
  001b5	85 c0		 test	 eax, eax
  001b7	74 36		 je	 SHORT $LN4@ResetPoint
$LN2@ResetPoint:

; 785  : 		{
; 786  : 			return;
; 787  : 		}
; 788  : 	}
; 789  : 
; 790  : 	if(!OBJMAX_RANGE(aIndex))

  001b9	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  001bc	85 c0		 test	 eax, eax
  001be	78 2f		 js	 SHORT $LN4@ResetPoint
  001c0	33 c9		 xor	 ecx, ecx
  001c2	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  001c7	0f 9e c1	 setle	 cl
  001ca	85 c9		 test	 ecx, ecx
  001cc	74 21		 je	 SHORT $LN4@ResetPoint

; 791  : 	{
; 792  : 		return;
; 793  : 	}
; 794  : 
; 795  : 	GC_RESET_POINT_CFG pMsg;
; 796  : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0x27, sizeof(pMsg));
; 797  : 	pMsg.iResetStatsPriceBonus = this->ResetStatsPriceWCoin;

  001ce	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 798  : 	pMsg.iResetStatsPriceCredit = this->ResetStatsPriceCredit;

  001d0	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  001d3	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 799  : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);	

  001d6	6a 0c		 push	 12			; 0000000cH
  001d8	8d 4d f0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  001db	51		 push	 ecx
  001dc	50		 push	 eax
  001dd	c7 45 f0 c1 0c
	fb 27		 mov	 DWORD PTR _pMsg$[ebp], 670764225 ; 27fb0cc1H
  001e4	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  001e7	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001ec	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@ResetPoint:

; 800  : }

  001ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f2	33 cd		 xor	 ecx, ebp
  001f4	5e		 pop	 esi
  001f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c2 04 00	 ret	 4
?ResetPointSend@ZtUser@@QAEXH@Z ENDP			; ZtUser::ResetPointSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GCServerTime@ZtUser@@QAEXXZ			; ZtUser::GCServerTime
EXTRN	__imp__GetLocalTime@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GCServerTime@ZtUser@@QAEXXZ
_TEXT	SEGMENT
_sysTime$ = -32						; size = 16
_pMsg$216578 = -16					; size = 10
__$ArrayPad$ = -4					; size = 4
?GCServerTime@ZtUser@@QAEXXZ PROC			; ZtUser::GCServerTime, COMDAT
; _this$ = ecx

; 805  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 806  : 	if(!g_ZtLicense.CheckUser(eZtUB::Local) && 
; 807  : 	   !g_ZtLicense.CheckUser(eZtUB::Gredy) &&
; 808  : 	   !g_ZtLicense.CheckUser(eZtUB::Gredy2) && 
; 809  : 	   !g_ZtLicense.CheckUser(eZtUB::GredyLocal) &&
; 810  : 	   !g_ZtLicense.CheckUser(eZtUB::Artem) &&
; 811  : 	   !g_ZtLicense.CheckUser(eZtUB::Stone) &&
; 812  : 	   !g_ZtLicense.CheckUser(eZtUB::Artem2)&&
; 813  : 	   !g_ZtLicense.CheckUser(eZtUB::RevoMU))

  00010	6a 00		 push	 0
  00012	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00017	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0001c	84 c0		 test	 al, al
  0001e	75 70		 jne	 SHORT $LN5@GCServerTi
  00020	6a 20		 push	 32			; 00000020H
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00027	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0002c	84 c0		 test	 al, al
  0002e	75 60		 jne	 SHORT $LN5@GCServerTi
  00030	6a 22		 push	 34			; 00000022H
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00037	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0003c	84 c0		 test	 al, al
  0003e	75 50		 jne	 SHORT $LN5@GCServerTi
  00040	6a 21		 push	 33			; 00000021H
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00047	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0004c	84 c0		 test	 al, al
  0004e	75 40		 jne	 SHORT $LN5@GCServerTi
  00050	6a 30		 push	 48			; 00000030H
  00052	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00057	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0005c	84 c0		 test	 al, al
  0005e	75 30		 jne	 SHORT $LN5@GCServerTi
  00060	6a 37		 push	 55			; 00000037H
  00062	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00067	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0006c	84 c0		 test	 al, al
  0006e	75 20		 jne	 SHORT $LN5@GCServerTi
  00070	6a 31		 push	 49			; 00000031H
  00072	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00077	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0007c	84 c0		 test	 al, al
  0007e	75 10		 jne	 SHORT $LN5@GCServerTi
  00080	6a 43		 push	 67			; 00000043H
  00082	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00087	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0008c	84 c0		 test	 al, al
  0008e	74 6c		 je	 SHORT $LN2@GCServerTi
$LN5@GCServerTi:
  00090	56		 push	 esi
  00091	57		 push	 edi

; 814  : 	{
; 815  : 		return;
; 816  : 	}
; 817  : 
; 818  : 	SYSTEMTIME sysTime;
; 819  : 	GetLocalTime(&sysTime);

  00092	8d 45 e0	 lea	 eax, DWORD PTR _sysTime$[ebp]
  00095	50		 push	 eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 820  : 
; 821  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  0009c	bf b0 36 00 00	 mov	 edi, 14000		; 000036b0H
  000a1	be 00 a7 40 09	 mov	 esi, 155232000		; 0940a700H
  000a6	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL4@GCServerTi:

; 822  : 	{
; 823  : 		LPOBJ lpUser = &gObj[aIndex];
; 824  : 
; 825  : 		if(lpUser->Connected < PLAYER_PLAYING)

  000b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b6	83 7c 0e 04 03	 cmp	 DWORD PTR [esi+ecx+4], 3
  000bb	7c 2e		 jl	 SHORT $LN3@GCServerTi

; 826  : 		{
; 827  : 			continue;
; 828  : 		}
; 829  : 
; 830  : 		PMSG_SERVER_TIME pMsg;
; 831  : 		pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0x70, sizeof(pMsg));
; 832  : 		pMsg.Hour = sysTime.wHour;

  000bd	66 8b 55 e8	 mov	 dx, WORD PTR _sysTime$[ebp+8]

; 833  : 		pMsg.Minute = sysTime.wMinute;

  000c1	66 8b 45 ea	 mov	 ax, WORD PTR _sysTime$[ebp+10]

; 834  : 		pMsg.Second = sysTime.wSecond;

  000c5	66 8b 4d ec	 mov	 cx, WORD PTR _sysTime$[ebp+12]
  000c9	66 89 55 f4	 mov	 WORD PTR _pMsg$216578[ebp+4], dx

; 835  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);	

  000cd	6a 0a		 push	 10			; 0000000aH
  000cf	8d 55 f0	 lea	 edx, DWORD PTR _pMsg$216578[ebp]
  000d2	52		 push	 edx
  000d3	57		 push	 edi
  000d4	c7 45 f0 c1 0a
	fb 70		 mov	 DWORD PTR _pMsg$216578[ebp], 1895500481 ; 70fb0ac1H
  000db	66 89 45 f6	 mov	 WORD PTR _pMsg$216578[ebp+6], ax
  000df	66 89 4d f8	 mov	 WORD PTR _pMsg$216578[ebp+8], cx
  000e3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@GCServerTi:

; 820  : 
; 821  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  000eb	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  000f1	47		 inc	 edi
  000f2	81 fe 80 d7 e9
	09		 cmp	 esi, 166320000		; 09e9d780H
  000f8	7c b6		 jl	 SHORT $LL4@GCServerTi
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
$LN2@GCServerTi:

; 836  : 	}
; 837  : }

  000fc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ff	33 cd		 xor	 ecx, ebp
  00101	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
?GCServerTime@ZtUser@@QAEXXZ ENDP			; ZtUser::GCServerTime
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?AutoHPClick@ZtUser@@QAEXXZ			; ZtUser::AutoHPClick
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
EXTRN	?gObjInventoryItemSet@@YAXHHE@Z:PROC		; gObjInventoryItemSet
EXTRN	?GCItemDurSend@@YAXHEEE@Z:PROC			; GCItemDurSend
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?AutoHPClick@ZtUser@@QAEXXZ
_TEXT	SEGMENT
tv416 = -20						; size = 4
tv413 = -20						; size = 4
_aIndex$216614 = -16					; size = 4
tv533 = -12						; size = 4
_n$216623 = -8						; size = 4
tv421 = -4						; size = 4
_iHP$216630 = -4					; size = 4
tv419 = -2						; size = 2
?AutoHPClick@ZtUser@@QAEXXZ PROC			; ZtUser::AutoHPClick, COMDAT
; _this$ = ecx

; 926  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 927  : 	if(!this->m_bActiveAutoHP)

  00006	80 79 08 00	 cmp	 BYTE PTR [ecx+8], 0
  0000a	0f 84 a9 02 00
	00		 je	 $LN19@AutoHPClic

; 928  : 	{
; 929  : 		return;
; 930  : 	}
; 931  : 
; 932  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	bf 00 a7 40 09	 mov	 edi, 155232000		; 0940a700H
  00018	c7 45 f0 b0 36
	00 00		 mov	 DWORD PTR _aIndex$216614[ebp], 14000 ; 000036b0H
  0001f	89 7d f4	 mov	 DWORD PTR tv533[ebp], edi
$LL21@AutoHPClic:

; 933  : 	{
; 934  : 		LPOBJ lpUser = &gObj[aIndex];

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 935  : 
; 936  : 		if(lpUser->Connected < PLAYER_PLAYING)

  00027	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  0002c	8d 34 07	 lea	 esi, DWORD PTR [edi+eax]
  0002f	0f 8c 69 02 00
	00		 jl	 $LN20@AutoHPClic

; 937  : 		{
; 938  : 			continue;
; 939  : 		}
; 940  : 
; 941  : 		if(lpUser->m_bAutoHP)

  00035	80 be e4 2a 00
	00 00		 cmp	 BYTE PTR [esi+10980], 0
  0003c	0f 84 5c 02 00
	00		 je	 $LN20@AutoHPClic

; 942  : 		{
; 943  : 			if((GetTickCount() - gObj[aIndex].m_PotionTick) < ZtConfig.CommonServer.PotionDelay)

  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004e	2b 84 0f 0c 29
	00 00		 sub	 eax, DWORD PTR [edi+ecx+10508]
  00055	3b 05 30 01 00
	00		 cmp	 eax, DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+304
  0005b	0f 82 3d 02 00
	00		 jb	 $LN20@AutoHPClic

; 944  : 			{
; 945  : 				continue;
; 946  : 			}
; 947  : 
; 948  : 			int count = 0;
; 949  : 	
; 950  : 			for(int n = 0; n < MAIN_INVENTORY_SIZE; n++)

  00061	33 db		 xor	 ebx, ebx
  00063	89 5d f8	 mov	 DWORD PTR _n$216623[ebp], ebx
  00066	33 ff		 xor	 edi, edi
  00068	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL15@AutoHPClic:

; 951  : 			{
; 952  : 				if(lpUser->pInventory[n].IsItem() == TRUE)

  00070	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  00076	03 cf		 add	 ecx, edi
  00078	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 33		 jne	 SHORT $LN14@AutoHPClic

; 953  : 				{
; 954  : 					if( lpUser->pInventory[n].m_Type == ITEMGET(14,0) || 
; 955  : 						lpUser->pInventory[n].m_Type == ITEMGET(14,1) || 
; 956  : 						lpUser->pInventory[n].m_Type == ITEMGET(14,2) || 
; 957  : 						lpUser->pInventory[n].m_Type == ITEMGET(14,3) )

  00082	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00088	0f b7 44 17 06	 movzx	 eax, WORD PTR [edi+edx+6]
  0008d	b9 00 1c 00 00	 mov	 ecx, 7168		; 00001c00H
  00092	66 3b c1	 cmp	 ax, cx
  00095	74 35		 je	 SHORT $LN33@AutoHPClic
  00097	ba 01 1c 00 00	 mov	 edx, 7169		; 00001c01H
  0009c	66 3b c2	 cmp	 ax, dx
  0009f	74 2b		 je	 SHORT $LN33@AutoHPClic
  000a1	b9 02 1c 00 00	 mov	 ecx, 7170		; 00001c02H
  000a6	66 3b c1	 cmp	 ax, cx
  000a9	74 21		 je	 SHORT $LN33@AutoHPClic
  000ab	ba 03 1c 00 00	 mov	 edx, 7171		; 00001c03H
  000b0	66 3b c2	 cmp	 ax, dx
  000b3	74 17		 je	 SHORT $LN33@AutoHPClic
$LN14@AutoHPClic:

; 944  : 			{
; 945  : 				continue;
; 946  : 			}
; 947  : 
; 948  : 			int count = 0;
; 949  : 	
; 950  : 			for(int n = 0; n < MAIN_INVENTORY_SIZE; n++)

  000b5	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000bb	43		 inc	 ebx
  000bc	81 ff f0 a8 00
	00		 cmp	 edi, 43248		; 0000a8f0H
  000c2	7c ac		 jl	 SHORT $LL15@AutoHPClic
  000c4	89 5d f8	 mov	 DWORD PTR _n$216623[ebp], ebx

; 953  : 				{
; 954  : 					if( lpUser->pInventory[n].m_Type == ITEMGET(14,0) || 
; 955  : 						lpUser->pInventory[n].m_Type == ITEMGET(14,1) || 
; 956  : 						lpUser->pInventory[n].m_Type == ITEMGET(14,2) || 
; 957  : 						lpUser->pInventory[n].m_Type == ITEMGET(14,3) )

  000c7	e9 cf 01 00 00	 jmp	 $LN37@AutoHPClic
$LN33@AutoHPClic:

; 958  : 					{
; 959  : 						int iHP = 0;
; 960  : 
; 961  : 						switch(lpUser->pInventory[n].m_Type)

  000cc	8b 86 24 0e 00
	00		 mov	 eax, DWORD PTR [esi+3620]
  000d2	8b fb		 mov	 edi, ebx
  000d4	69 ff d4 00 00
	00		 imul	 edi, 212		; 000000d4H
  000da	0f bf 44 07 06	 movsx	 eax, WORD PTR [edi+eax+6]
  000df	05 00 e4 ff ff	 add	 eax, -7168		; ffffe400H
  000e4	89 5d f8	 mov	 DWORD PTR _n$216623[ebp], ebx
  000e7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _iHP$216630[ebp], 0
  000ee	83 f8 03	 cmp	 eax, 3
  000f1	0f 87 91 00 00
	00		 ja	 $LN8@AutoHPClic
  000f7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN40@AutoHPClic[eax*4]
$LN7@AutoHPClic:

; 962  : 						{
; 963  : 						case ITEMGET(14,0):
; 964  : 							iHP += ((int)(lpUser->MaxLife + lpUser->AddLife)) * 10 / 100; 

  000fe	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00104	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  0010a	e8 00 00 00 00	 call	 __ftol2_sse
  0010f	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
$LN39@AutoHPClic:
  00112	03 c9		 add	 ecx, ecx
  00114	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00119	f7 e9		 imul	 ecx
  0011b	c1 fa 05	 sar	 edx, 5
  0011e	8b ca		 mov	 ecx, edx
  00120	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00123	03 ca		 add	 ecx, edx
  00125	89 4d fc	 mov	 DWORD PTR _iHP$216630[ebp], ecx

; 965  : 							break;

  00128	eb 5e		 jmp	 SHORT $LN8@AutoHPClic
$LN6@AutoHPClic:

; 966  : 						case ITEMGET(14,1):
; 967  : 							iHP += ((int)(lpUser->MaxLife + lpUser->AddLife)) * 20 / 100; 

  0012a	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00130	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00136	e8 00 00 00 00	 call	 __ftol2_sse
  0013b	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]

; 968  : 							break;

  0013e	eb 30		 jmp	 SHORT $LN38@AutoHPClic
$LN5@AutoHPClic:

; 969  : 						case ITEMGET(14,2):
; 970  : 							iHP += ((int)(lpUser->MaxLife + lpUser->AddLife)) * 30 / 100; 

  00140	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00146	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  0014c	e8 00 00 00 00	 call	 __ftol2_sse
  00151	8b c8		 mov	 ecx, eax
  00153	c1 e1 04	 shl	 ecx, 4
  00156	2b c8		 sub	 ecx, eax

; 971  : 							break;

  00158	eb b8		 jmp	 SHORT $LN39@AutoHPClic
$LN4@AutoHPClic:

; 972  : 						case ITEMGET(14,3):
; 973  : 							iHP += ((int)(lpUser->MaxLife + lpUser->AddLife)) * 40 / 100; 

  0015a	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  00160	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  00166	e8 00 00 00 00	 call	 __ftol2_sse
  0016b	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0016e	03 c9		 add	 ecx, ecx
$LN38@AutoHPClic:
  00170	03 c9		 add	 ecx, ecx
  00172	03 c9		 add	 ecx, ecx
  00174	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00179	f7 e9		 imul	 ecx
  0017b	c1 fa 05	 sar	 edx, 5
  0017e	8b c2		 mov	 eax, edx
  00180	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00183	03 c2		 add	 eax, edx
  00185	89 45 fc	 mov	 DWORD PTR _iHP$216630[ebp], eax
$LN8@AutoHPClic:

; 974  : 							break;
; 975  : 						}			
; 976  : 
; 977  : 						lpUser->Life += iHP;

  00188	db 45 fc	 fild	 DWORD PTR _iHP$216630[ebp]
  0018b	d8 86 fc 00 00
	00		 fadd	 DWORD PTR [esi+252]
  00191	d9 5d fc	 fstp	 DWORD PTR tv421[ebp]
  00194	d9 45 fc	 fld	 DWORD PTR tv421[ebp]
  00197	d9 96 fc 00 00
	00		 fst	 DWORD PTR [esi+252]

; 978  : 
; 979  : 						if(lpUser->Life > (lpUser->MaxLife + lpUser->AddLife - 1.0f))

  0019d	db 86 4c 01 00
	00		 fild	 DWORD PTR [esi+332]
  001a3	d8 86 00 01 00
	00		 fadd	 DWORD PTR [esi+256]
  001a9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3ff0000000000000
  001af	d8 e9		 fsubr	 ST(0), ST(1)
  001b1	d8 da		 fcomp	 ST(2)
  001b3	df e0		 fnstsw	 ax
  001b5	dd d9		 fstp	 ST(1)
  001b7	f6 c4 05	 test	 ah, 5
  001ba	7a 08		 jp	 SHORT $LN35@AutoHPClic

; 980  : 						{
; 981  : 							lpUser->Life = lpUser->MaxLife + lpUser->AddLife;

  001bc	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  001c2	eb 02		 jmp	 SHORT $LN3@AutoHPClic
$LN35@AutoHPClic:
  001c4	dd d8		 fstp	 ST(0)
$LN3@AutoHPClic:

; 982  : 						}
; 983  : 
; 984  : 						GCReFillSend(aIndex, (int)gObj[aIndex].Life, 0xFF, 0, (int)gObj[aIndex].iShield);

  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001cb	8b 4d f4	 mov	 ecx, DWORD PTR tv533[ebp]
  001ce	8b 94 01 54 01
	00 00		 mov	 edx, DWORD PTR [ecx+eax+340]
  001d5	d9 84 01 fc 00
	00 00		 fld	 DWORD PTR [ecx+eax+252]
  001dc	52		 push	 edx
  001dd	6a 00		 push	 0
  001df	68 ff 00 00 00	 push	 255			; 000000ffH
  001e4	e8 00 00 00 00	 call	 __ftol2_sse
  001e9	50		 push	 eax
  001ea	8b 45 f0	 mov	 eax, DWORD PTR _aIndex$216614[ebp]
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEEH@Z ; GCReFillSend

; 985  : 
; 986  : 						if((int)lpUser->pInventory[n].m_Durability > 1)

  001f3	8b 8e 24 0e 00
	00		 mov	 ecx, DWORD PTR [esi+3620]
  001f9	d9 44 0f 24	 fld	 DWORD PTR [edi+ecx+36]
  001fd	8d 5c 0f 24	 lea	 ebx, DWORD PTR [edi+ecx+36]
  00201	83 c4 14	 add	 esp, 20			; 00000014H
  00204	e8 00 00 00 00	 call	 __ftol2_sse
  00209	83 f8 01	 cmp	 eax, 1
  0020c	7e 46		 jle	 SHORT $LN2@AutoHPClic

; 987  : 						{
; 988  : 							lpUser->pInventory[n].m_Durability--;

  0020e	d9 03		 fld	 DWORD PTR [ebx]

; 989  : 							GCItemDurSend(lpUser->m_Index, (BYTE)n, (BYTE)lpUser->pInventory[n].m_Durability, 1);

  00210	6a 01		 push	 1
  00212	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00218	d9 7d fe	 fnstcw	 WORD PTR tv419[ebp]
  0021b	0f b7 45 fe	 movzx	 eax, WORD PTR tv419[ebp]
  0021f	d9 1b		 fstp	 DWORD PTR [ebx]
  00221	8b 96 24 0e 00
	00		 mov	 edx, DWORD PTR [esi+3620]
  00227	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0022c	89 45 ec	 mov	 DWORD PTR tv416[ebp], eax
  0022f	d9 44 17 24	 fld	 DWORD PTR [edi+edx+36]
  00233	8b 55 f8	 mov	 edx, DWORD PTR _n$216623[ebp]
  00236	d9 6d ec	 fldcw	 WORD PTR tv416[ebp]
  00239	db 5d ec	 fistp	 DWORD PTR tv413[ebp]
  0023c	8a 45 ec	 mov	 al, BYTE PTR tv413[ebp]
  0023f	0f b6 c8	 movzx	 ecx, al
  00242	8b 06		 mov	 eax, DWORD PTR [esi]
  00244	d9 6d fe	 fldcw	 WORD PTR tv419[ebp]
  00247	51		 push	 ecx
  00248	52		 push	 edx
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  0024f	83 c4 10	 add	 esp, 16			; 00000010H

; 990  : 						}
; 991  : 						else

  00252	eb 3b		 jmp	 SHORT $LN1@AutoHPClic
$LN2@AutoHPClic:

; 992  : 						{
; 993  : 							gObjInventoryItemSet(aIndex, n, -1);

  00254	8b 4d f8	 mov	 ecx, DWORD PTR _n$216623[ebp]
  00257	8b 5d f0	 mov	 ebx, DWORD PTR _aIndex$216614[ebp]
  0025a	68 ff 00 00 00	 push	 255			; 000000ffH
  0025f	51		 push	 ecx
  00260	53		 push	 ebx
  00261	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 994  : 							gObj[aIndex].pInventory[n].Clear();

  00266	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0026c	8b 45 f4	 mov	 eax, DWORD PTR tv533[ebp]
  0026f	8b 8c 10 24 0e
	00 00		 mov	 ecx, DWORD PTR [eax+edx+3620]
  00276	83 c4 0c	 add	 esp, 12			; 0000000cH
  00279	03 cf		 add	 ecx, edi
  0027b	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 995  : 							GCInventoryItemDeleteSend(aIndex, n, 1);

  00280	8b 4d f8	 mov	 ecx, DWORD PTR _n$216623[ebp]
  00283	6a 01		 push	 1
  00285	51		 push	 ecx
  00286	53		 push	 ebx
  00287	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  0028c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@AutoHPClic:

; 996  : 						}
; 997  : 
; 998  : 						lpUser->m_PotionTick = GetTickCount();

  0028f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00295	89 86 0c 29 00
	00		 mov	 DWORD PTR [esi+10508], eax
$LN37@AutoHPClic:
  0029b	8b 7d f4	 mov	 edi, DWORD PTR tv533[ebp]
$LN20@AutoHPClic:

; 928  : 	{
; 929  : 		return;
; 930  : 	}
; 931  : 
; 932  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  0029e	ff 45 f0	 inc	 DWORD PTR _aIndex$216614[ebp]
  002a1	81 c7 50 2b 00
	00		 add	 edi, 11088		; 00002b50H
  002a7	89 7d f4	 mov	 DWORD PTR tv533[ebp], edi
  002aa	81 ff 80 d7 e9
	09		 cmp	 edi, 166320000		; 09e9d780H
  002b0	0f 8c 6c fd ff
	ff		 jl	 $LL21@AutoHPClic
  002b6	5f		 pop	 edi
  002b7	5e		 pop	 esi
  002b8	5b		 pop	 ebx
$LN19@AutoHPClic:

; 999  : 
; 1000 : 						break;
; 1001 : 					}
; 1002 : 				}
; 1003 : 			}
; 1004 : 		}
; 1005 : 	}
; 1006 : }

  002b9	8b e5		 mov	 esp, ebp
  002bb	5d		 pop	 ebp
  002bc	c3		 ret	 0
  002bd	8d 49 00	 npad	 3
$LN40@AutoHPClic:
  002c0	00 00 00 00	 DD	 $LN7@AutoHPClic
  002c4	00 00 00 00	 DD	 $LN6@AutoHPClic
  002c8	00 00 00 00	 DD	 $LN5@AutoHPClic
  002cc	00 00 00 00	 DD	 $LN4@AutoHPClic
?AutoHPClick@ZtUser@@QAEXXZ ENDP			; ZtUser::AutoHPClick
_TEXT	ENDS
PUBLIC	?CG_RecvAutoHPClicker@ZtUser@@QAEXPAUPMSG_PROTOCOL_RESULT@@H@Z ; ZtUser::CG_RecvAutoHPClicker
; Function compile flags: /Ogtp
;	COMDAT ?CG_RecvAutoHPClicker@ZtUser@@QAEXPAUPMSG_PROTOCOL_RESULT@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CG_RecvAutoHPClicker@ZtUser@@QAEXPAUPMSG_PROTOCOL_RESULT@@H@Z PROC ; ZtUser::CG_RecvAutoHPClicker, COMDAT
; _this$ = ecx

; 1009 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1010 : 	if(!this->m_bActiveAutoHP)

  00003	80 79 08 00	 cmp	 BYTE PTR [ecx+8], 0
  00007	74 36		 je	 SHORT $LN4@CG_RecvAut

; 1011 : 	{
; 1012 : 		return;
; 1013 : 	}
; 1014 : 
; 1015 : 	if(!OBJMAX_RANGE(aIndex))

  00009	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0000c	85 c0		 test	 eax, eax
  0000e	78 2f		 js	 SHORT $LN4@CG_RecvAut
  00010	33 c9		 xor	 ecx, ecx
  00012	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00017	0f 9e c1	 setle	 cl
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 21		 je	 SHORT $LN4@CG_RecvAut

; 1016 : 	{
; 1017 : 		return;
; 1018 : 	}
; 1019 : 
; 1020 : 	if(!lpMsg)

  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  00021	85 c9		 test	 ecx, ecx
  00023	74 1a		 je	 SHORT $LN4@CG_RecvAut

; 1021 : 	{
; 1022 : 		return;
; 1023 : 	}
; 1024 : 
; 1025 : 	LPOBJ lpUser = &gObj[aIndex];
; 1026 : 
; 1027 : 	lpUser->m_bAutoHP = (bool)lpMsg->Result;

  00025	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00029	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002f	0f 95 c1	 setne	 cl
  00032	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  00038	88 8c 10 e4 2a
	00 00		 mov	 BYTE PTR [eax+edx+10980], cl
$LN4@CG_RecvAut:

; 1028 : }

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?CG_RecvAutoHPClicker@ZtUser@@QAEXPAUPMSG_PROTOCOL_RESULT@@H@Z ENDP ; ZtUser::CG_RecvAutoHPClicker
_TEXT	ENDS
PUBLIC	??_C@_0BA@PBFANPGB@Killer?5Name?3?5?$CFs?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?PlayerKillInfoMail@ZtUser@@QAEXHH@Z		; ZtUser::PlayerKillInfoMail
EXTRN	?FriendMemoSendEx@@YAXPAUPMSG_FRIEND_MEMO@@H@Z:PROC ; FriendMemoSendEx
EXTRN	_sprintf:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BA@PBFANPGB@Killer?5Name?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BA@PBFANPGB@Killer?5Name?3?5?$CFs?$AA@ DB 'Killer Name: %s', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?PlayerKillInfoMail@ZtUser@@QAEXHH@Z
_TEXT	SEGMENT
_pMsg$ = -1120						; size = 1084
_szKillerName$ = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
?PlayerKillInfoMail@ZtUser@@QAEXHH@Z PROC		; ZtUser::PlayerKillInfoMail, COMDAT
; _this$ = ecx

; 1031 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 04 00
	00		 sub	 esp, 1120		; 00000460H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]

; 1032 : 	if( !g_ZtLicense.CheckUser(eZtUB::MedoniAndrei) && 
; 1033 : 		!g_ZtLicense.CheckUser(eZtUB::Local) &&
; 1034 : 	    !g_ZtLicense.CheckUser(eZtUB::Gredy) &&
; 1035 : 	    !g_ZtLicense.CheckUser(eZtUB::Gredy2) && 
; 1036 : 	    !g_ZtLicense.CheckUser(eZtUB::GredyLocal)&&
; 1037 : 	    !g_ZtLicense.CheckUser(eZtUB::Artem) &&
; 1038 : 	    !g_ZtLicense.CheckUser(eZtUB::Artem2) )

  0001b	6a 32		 push	 50			; 00000032H
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00022	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00027	84 c0		 test	 al, al
  00029	75 64		 jne	 SHORT $LN14@PlayerKill
  0002b	6a 00		 push	 0
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00032	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00037	84 c0		 test	 al, al
  00039	75 54		 jne	 SHORT $LN14@PlayerKill
  0003b	6a 20		 push	 32			; 00000020H
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00042	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00047	84 c0		 test	 al, al
  00049	75 44		 jne	 SHORT $LN14@PlayerKill
  0004b	6a 22		 push	 34			; 00000022H
  0004d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00052	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00057	84 c0		 test	 al, al
  00059	75 34		 jne	 SHORT $LN14@PlayerKill
  0005b	6a 21		 push	 33			; 00000021H
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00062	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00067	84 c0		 test	 al, al
  00069	75 24		 jne	 SHORT $LN14@PlayerKill
  0006b	6a 30		 push	 48			; 00000030H
  0006d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00072	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00077	84 c0		 test	 al, al
  00079	75 14		 jne	 SHORT $LN14@PlayerKill
  0007b	6a 31		 push	 49			; 00000031H
  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00082	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00087	84 c0		 test	 al, al
  00089	0f 84 34 01 00
	00		 je	 $LN4@PlayerKill
$LN14@PlayerKill:

; 1039 : 	{
; 1040 : 		return;
; 1041 : 	}
; 1042 : 
; 1043 : 	if(!OBJMAX_RANGE(aIndex) || !OBJMAX_RANGE(aTargetIndex))

  0008f	85 db		 test	 ebx, ebx
  00091	0f 88 2c 01 00
	00		 js	 $LN4@PlayerKill
  00097	33 c0		 xor	 eax, eax
  00099	81 fb 97 3a 00
	00		 cmp	 ebx, 14999		; 00003a97H
  0009f	0f 9e c0	 setle	 al
  000a2	85 c0		 test	 eax, eax
  000a4	0f 84 19 01 00
	00		 je	 $LN4@PlayerKill
  000aa	85 ff		 test	 edi, edi
  000ac	0f 88 11 01 00
	00		 js	 $LN4@PlayerKill
  000b2	33 c0		 xor	 eax, eax
  000b4	81 ff 97 3a 00
	00		 cmp	 edi, 14999		; 00003a97H
  000ba	0f 9e c0	 setle	 al
  000bd	85 c0		 test	 eax, eax
  000bf	0f 84 fe 00 00
	00		 je	 $LN4@PlayerKill

; 1044 : 	{
; 1045 : 		return;
; 1046 : 	}
; 1047 : 
; 1048 : 	LPOBJ lpUser = &gObj[aIndex];

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1049 : 	LPOBJ lpTarget = &gObj[aTargetIndex];

  000ca	69 ff 50 2b 00
	00		 imul	 edi, 11088		; 00002b50H
  000d0	56		 push	 esi
  000d1	8b f3		 mov	 esi, ebx
  000d3	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 1050 : 
; 1051 : 	if(g_ZtLicense.CheckUser(eZtUB::Gredy) || g_ZtLicense.CheckUser(eZtUB::Gredy2) || g_ZtLicense.CheckUser(eZtUB::GredyLocal))

  000d9	6a 20		 push	 32			; 00000020H
  000db	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000e0	03 f0		 add	 esi, eax
  000e2	03 f8		 add	 edi, eax
  000e4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000e9	84 c0		 test	 al, al
  000eb	75 20		 jne	 SHORT $LN2@PlayerKill
  000ed	6a 22		 push	 34			; 00000022H
  000ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  000f4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  000f9	84 c0		 test	 al, al
  000fb	75 10		 jne	 SHORT $LN2@PlayerKill
  000fd	6a 21		 push	 33			; 00000021H
  000ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00104	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00109	84 c0		 test	 al, al
  0010b	74 0d		 je	 SHORT $LN1@PlayerKill
$LN2@PlayerKill:

; 1052 : 	{
; 1053 : 		if(!lpUser->m_OfflineMode)

  0010d	80 be d4 28 00
	00 00		 cmp	 BYTE PTR [esi+10452], 0
  00114	0f 84 a8 00 00
	00		 je	 $LN15@PlayerKill
$LN1@PlayerKill:

; 1054 : 		{
; 1055 : 			return;
; 1056 : 		}
; 1057 : 	}
; 1058 : 
; 1059 : 	char szKillerName[32];
; 1060 : 	sprintf(szKillerName, "Killer Name: %s", lpTarget->Name);

  0011a	8d 47 77	 lea	 eax, DWORD PTR [edi+119]
  0011d	50		 push	 eax
  0011e	8d 4d dc	 lea	 ecx, DWORD PTR _szKillerName$[ebp]
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PBFANPGB@Killer?5Name?3?5?$CFs?$AA@
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 _sprintf

; 1061 : 
; 1062 : 	PMSG_FRIEND_MEMO pMsg;
; 1063 : 	memset(&pMsg, 0, sizeof(pMsg));

  0012c	68 3c 04 00 00	 push	 1084			; 0000043cH
  00131	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR _pMsg$[ebp]
  00137	6a 00		 push	 0
  00139	52		 push	 edx
  0013a	e8 00 00 00 00	 call	 _memset

; 1064 : 	pMsg.WindowGuid = 0;

  0013f	c7 85 a4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMsg$[ebp+4], 0

; 1065 : 	pMsg.Action = 0;

  00149	c6 85 ef fb ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp+79], 0

; 1066 : 	pMsg.Dir = lpTarget->Dir;

  00150	8a 87 48 01 00
	00		 mov	 al, BYTE PTR [edi+328]
  00156	88 85 ee fb ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+78], al

; 1067 : 	memcpy(pMsg.Name, lpUser->Name, sizeof(pMsg.Name));

  0015c	8b 4e 77	 mov	 ecx, DWORD PTR [esi+119]
  0015f	89 8d a8 fb ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00165	8b 56 7b	 mov	 edx, DWORD PTR [esi+123]
  00168	89 95 ac fb ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+12], edx
  0016e	66 8b 46 7f	 mov	 ax, WORD PTR [esi+127]
  00172	66 89 85 b0 fb
	ff ff		 mov	 WORD PTR _pMsg$[ebp+16], ax

; 1068 : 	memcpy(pMsg.Subject, szKillerName, sizeof(pMsg.Subject));

  00179	b9 08 00 00 00	 mov	 ecx, 8
  0017e	8d 75 dc	 lea	 esi, DWORD PTR _szKillerName$[ebp]
  00181	8d bd b2 fb ff
	ff		 lea	 edi, DWORD PTR _pMsg$[ebp+18]
  00187	f3 a5		 rep movsd

; 1069 : 	//memset(pMsg.Memo, 0, sizeof(pMsg.Memo));
; 1070 : 	//pMsg.MemoSize = 0;
; 1071 : 	memcpy(pMsg.Memo, szKillerName, sizeof(pMsg.Memo));

  00189	b9 fa 00 00 00	 mov	 ecx, 250		; 000000faH
  0018e	8d 75 dc	 lea	 esi, DWORD PTR _szKillerName$[ebp]
  00191	8d bd f2 fb ff
	ff		 lea	 edi, DWORD PTR _pMsg$[ebp+82]

; 1072 : 	pMsg.MemoSize = strlen(szKillerName);

  00197	8d 45 dc	 lea	 eax, DWORD PTR _szKillerName$[ebp]
  0019a	83 c4 18	 add	 esp, 24			; 00000018H
  0019d	f3 a5		 rep movsd
  0019f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL13@PlayerKill:
  001a2	8a 08		 mov	 cl, BYTE PTR [eax]
  001a4	40		 inc	 eax
  001a5	84 c9		 test	 cl, cl
  001a7	75 f9		 jne	 SHORT $LL13@PlayerKill

; 1073 : 	FriendMemoSendEx(&pMsg, aIndex);

  001a9	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  001af	2b c2		 sub	 eax, edx
  001b1	53		 push	 ebx
  001b2	51		 push	 ecx
  001b3	66 89 85 f0 fb
	ff ff		 mov	 WORD PTR _pMsg$[ebp+80], ax
  001ba	e8 00 00 00 00	 call	 ?FriendMemoSendEx@@YAXPAUPMSG_FRIEND_MEMO@@H@Z ; FriendMemoSendEx
  001bf	83 c4 08	 add	 esp, 8
$LN15@PlayerKill:
  001c2	5e		 pop	 esi
$LN4@PlayerKill:

; 1074 : }

  001c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c6	5f		 pop	 edi
  001c7	33 cd		 xor	 ecx, ebp
  001c9	5b		 pop	 ebx
  001ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c2 08 00	 ret	 8
?PlayerKillInfoMail@ZtUser@@QAEXHH@Z ENDP		; ZtUser::PlayerKillInfoMail
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?PartyMiniMapInfo@ZtUser@@QAEXXZ		; ZtUser::PartyMiniMapInfo
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?GetCount@PartyClass@@QAEHH@Z:PROC		; PartyClass::GetCount
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
; Function compile flags: /Ogtp
;	COMDAT ?PartyMiniMapInfo@ZtUser@@QAEXXZ
_TEXT	SEGMENT
_lpUser$216684 = -160					; size = 4
tv175 = -156						; size = 4
tv358 = -152						; size = 4
_aIndex$216680 = -148					; size = 4
_pMsg$216689 = -144					; size = 140
__$ArrayPad$ = -4					; size = 4
?PartyMiniMapInfo@ZtUser@@QAEXXZ PROC			; ZtUser::PartyMiniMapInfo, COMDAT
; _this$ = ecx

; 1077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx

; 1078 : #if(CUSTOM_MINIMAP_PARTY)
; 1079 : 
; 1080 : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00014	b9 00 a7 40 09	 mov	 ecx, 155232000		; 0940a700H
  00019	56		 push	 esi
  0001a	c7 85 6c ff ff
	ff b0 36 00 00	 mov	 DWORD PTR _aIndex$216680[ebp], 14000 ; 000036b0H
  00024	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv358[ebp], ecx
  0002a	57		 push	 edi
  0002b	eb 03 8d 49 00	 npad	 5
$LL11@PartyMiniM:

; 1081 : 	{
; 1082 : 		LPOBJ lpUser = &gObj[aIndex];

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00035	03 c1		 add	 eax, ecx

; 1083 : 
; 1084 : 		if(lpUser->Connected < PLAYER_PLAYING)

  00037	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0003b	89 85 60 ff ff
	ff		 mov	 DWORD PTR _lpUser$216684[ebp], eax
  00041	0f 8c e1 00 00
	00		 jl	 $LN10@PartyMiniM

; 1085 : 		{
; 1086 : 			continue;
; 1087 : 		}
; 1088 : 
; 1089 : 		if(!lpUser->m_MiniMap)

  00047	80 b8 24 2b 00
	00 00		 cmp	 BYTE PTR [eax+11044], 0
  0004e	0f 84 d4 00 00
	00		 je	 $LN10@PartyMiniM

; 1090 : 		{
; 1091 : 			continue;
; 1092 : 		}
; 1093 : 
; 1094 : 		int iPartyNumber = lpUser->PartyNumber;

  00054	8b b0 2c 04 00
	00		 mov	 esi, DWORD PTR [eax+1068]

; 1095 : 
; 1096 : 		if(iPartyNumber >= 0)

  0005a	85 f6		 test	 esi, esi
  0005c	0f 88 c6 00 00
	00		 js	 $LN10@PartyMiniM

; 1097 : 		{
; 1098 : 			PMSG_PARTY_MINIMAP pMsg;
; 1099 : 			pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xD5, sizeof(pMsg));
; 1100 : 			pMsg.Count = gParty.GetCount(iPartyNumber);

  00062	56		 push	 esi
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00068	c7 85 70 ff ff
	ff c1 8c fb d5	 mov	 DWORD PTR _pMsg$216689[ebp], -704934719 ; d5fb8cc1H
  00072	e8 00 00 00 00	 call	 ?GetCount@PartyClass@@QAEHH@Z ; PartyClass::GetCount

; 1105 : 			{
; 1106 : 				int iPartyUser = gParty.m_PartyS[iPartyNumber].Number[i];

  00077	6b f6 68	 imul	 esi, 104		; 00000068H
  0007a	81 c6 0c 00 00
	00		 add	 esi, OFFSET ?gParty@@3VPartyClass@@A+12
  00080	89 85 74 ff ff
	ff		 mov	 DWORD PTR _pMsg$216689[ebp+4], eax

; 1118 : 
; 1119 : 						n++;

  00086	8d 7d 82	 lea	 edi, DWORD PTR _pMsg$216689[ebp+18]
  00089	8b de		 mov	 ebx, esi
  0008b	c7 85 64 ff ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv175[ebp], 10 ; 0000000aH
$LL5@PartyMiniM:

; 1107 : 
; 1108 : 				if(gObjIsConnected(iPartyUser))

  00095	8b 33		 mov	 esi, DWORD PTR [ebx]
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0009d	83 c4 04	 add	 esp, 4
  000a0	85 c0		 test	 eax, eax
  000a2	74 55		 je	 SHORT $LN4@PartyMiniM

; 1109 : 				{
; 1110 : 					LPOBJ lpPartyUser = &gObj[iPartyUser];
; 1111 : 
; 1112 : 					if(lpUser->MapNumber == lpPartyUser->MapNumber)

  000a4	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _lpUser$216684[ebp]
  000aa	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H
  000b0	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b6	8a 91 49 01 00
	00		 mov	 dl, BYTE PTR [ecx+329]
  000bc	8b c6		 mov	 eax, esi
  000be	3a 90 49 01 00
	00		 cmp	 dl, BYTE PTR [eax+329]
  000c4	75 33		 jne	 SHORT $LN4@PartyMiniM

; 1113 : 					{
; 1114 : 						memcpy(pMsg.Data[n].Name, lpPartyUser->Name, sizeof(pMsg.Data[i].Name));

  000c6	8b 48 77	 mov	 ecx, DWORD PTR [eax+119]
  000c9	89 4f f6	 mov	 DWORD PTR [edi-10], ecx
  000cc	8b 50 7b	 mov	 edx, DWORD PTR [eax+123]
  000cf	89 57 fa	 mov	 DWORD PTR [edi-6], edx
  000d2	66 8b 48 7f	 mov	 cx, WORD PTR [eax+127]
  000d6	66 89 4f fe	 mov	 WORD PTR [edi-2], cx

; 1115 : 						pMsg.Data[n].Map = lpPartyUser->MapNumber;

  000da	0f b6 90 49 01
	00 00		 movzx	 edx, BYTE PTR [eax+329]
  000e1	88 17		 mov	 BYTE PTR [edi], dl

; 1116 : 						pMsg.Data[n].X = lpPartyUser->X;

  000e3	8a 88 44 01 00
	00		 mov	 cl, BYTE PTR [eax+324]
  000e9	88 4f 01	 mov	 BYTE PTR [edi+1], cl

; 1117 : 						pMsg.Data[n].Y = lpPartyUser->Y;

  000ec	0f b6 90 46 01
	00 00		 movzx	 edx, BYTE PTR [eax+326]
  000f3	88 57 02	 mov	 BYTE PTR [edi+2], dl

; 1118 : 
; 1119 : 						n++;

  000f6	83 c7 0d	 add	 edi, 13			; 0000000dH
$LN4@PartyMiniM:

; 1101 : 
; 1102 : 			int n = 0;
; 1103 : 
; 1104 : 			for(int i = 0; i < MAX_USER_IN_PARTY; i++ )

  000f9	83 c3 04	 add	 ebx, 4
  000fc	ff 8d 64 ff ff
	ff		 dec	 DWORD PTR tv175[ebp]
  00102	75 91		 jne	 SHORT $LL5@PartyMiniM

; 1120 : 					}
; 1121 : 				}
; 1122 : 			}
; 1123 : 
; 1124 : 			DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);	

  00104	0f b6 85 71 ff
	ff ff		 movzx	 eax, BYTE PTR _pMsg$216689[ebp+1]
  0010b	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _aIndex$216680[ebp]
  00111	50		 push	 eax
  00112	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$216689[ebp]
  00118	51		 push	 ecx
  00119	52		 push	 edx
  0011a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0011f	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv358[ebp]
  00125	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@PartyMiniM:

; 1078 : #if(CUSTOM_MINIMAP_PARTY)
; 1079 : 
; 1080 : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00128	ff 85 6c ff ff
	ff		 inc	 DWORD PTR _aIndex$216680[ebp]
  0012e	81 c1 50 2b 00
	00		 add	 ecx, 11088		; 00002b50H
  00134	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv358[ebp], ecx
  0013a	81 f9 80 d7 e9
	09		 cmp	 ecx, 166320000		; 09e9d780H
  00140	0f 8c ea fe ff
	ff		 jl	 $LL11@PartyMiniM

; 1125 : 		}
; 1126 : 		
; 1127 : 	}
; 1128 : #endif
; 1129 : }

  00146	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	33 cd		 xor	 ecx, ebp
  0014d	5b		 pop	 ebx
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
?PartyMiniMapInfo@ZtUser@@QAEXXZ ENDP			; ZtUser::PartyMiniMapInfo
_TEXT	ENDS
PUBLIC	?CGCtrlKey@ZtUser@@QAEXHPAUPMSG_CONTROLLER_CTRL@@@Z ; ZtUser::CGCtrlKey
; Function compile flags: /Ogtp
;	COMDAT ?CGCtrlKey@ZtUser@@QAEXHPAUPMSG_CONTROLLER_CTRL@@@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aRecv$ = 12						; size = 4
?CGCtrlKey@ZtUser@@QAEXHPAUPMSG_CONTROLLER_CTRL@@@Z PROC ; ZtUser::CGCtrlKey, COMDAT
; _this$ = ecx

; 1133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1134 : 	if(!g_ZtLicense.CheckUser(eZtUB::Local) &&
; 1135 : 	   !g_ZtLicense.CheckUser(eZtUB::ArcMu))

  00003	6a 00		 push	 0
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0000f	84 c0		 test	 al, al
  00011	75 10		 jne	 SHORT $LN3@CGCtrlKey
  00013	6a 48		 push	 72			; 00000048H
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0001a	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  0001f	84 c0		 test	 al, al
  00021	74 37		 je	 SHORT $LN4@CGCtrlKey
$LN3@CGCtrlKey:

; 1136 : 	{
; 1137 : 		return;
; 1138 : 	}
; 1139 : 
; 1140 : 	if (!OBJMAX_RANGE(aIndex))

  00023	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00026	85 c0		 test	 eax, eax
  00028	78 30		 js	 SHORT $LN4@CGCtrlKey
  0002a	33 c9		 xor	 ecx, ecx
  0002c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00031	0f 9e c1	 setle	 cl
  00034	85 c9		 test	 ecx, ecx
  00036	74 22		 je	 SHORT $LN4@CGCtrlKey

; 1141 : 	{
; 1142 : 		return;
; 1143 : 	}
; 1144 : 
; 1145 : 	LPOBJ lpUser = &gObj[aIndex];

  00038	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0003e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1146 : 
; 1147 : 	if(lpUser->Connected < PLAYER_PLAYING)

  00044	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00048	7c 10		 jl	 SHORT $LN4@CGCtrlKey

; 1148 : 	{
; 1149 : 		return;
; 1150 : 	}
; 1151 : 
; 1152 : 	lpUser->CtrlKey = aRecv->CtrlKey;

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0004d	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00051	0f 95 c2	 setne	 dl
  00054	88 90 1c 2b 00
	00		 mov	 BYTE PTR [eax+11036], dl
$LN4@CGCtrlKey:

; 1153 : 	//LogAddC(2, "Ctrl: %d", lpUser->CtrlKey);
; 1154 : 
; 1155 : 	
; 1156 : }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?CGCtrlKey@ZtUser@@QAEXHPAUPMSG_CONTROLLER_CTRL@@@Z ENDP ; ZtUser::CGCtrlKey
_TEXT	ENDS
PUBLIC	?RecvConfig@ZtUser@@QAEXPAUCG_MINIMAP_PARTY@@H@Z ; ZtUser::RecvConfig
; Function compile flags: /Ogtp
;	COMDAT ?RecvConfig@ZtUser@@QAEXPAUCG_MINIMAP_PARTY@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?RecvConfig@ZtUser@@QAEXPAUCG_MINIMAP_PARTY@@H@Z PROC	; ZtUser::RecvConfig, COMDAT
; _this$ = ecx

; 1160 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1161 : 	if (!OBJMAX_RANGE(aIndex))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 2c		 js	 SHORT $LN3@RecvConfig
  0000a	33 c9		 xor	 ecx, ecx
  0000c	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00011	0f 9e c1	 setle	 cl
  00014	85 c9		 test	 ecx, ecx
  00016	74 1e		 je	 SHORT $LN3@RecvConfig

; 1162 : 	{
; 1163 : 		return;
; 1164 : 	}
; 1165 : 
; 1166 : 	LPOBJ lpUser = &gObj[aIndex];

  00018	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1167 : 
; 1168 : 	if(lpUser->Connected < PLAYER_PLAYING)

  00024	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00028	7c 0c		 jl	 SHORT $LN3@RecvConfig

; 1169 : 	{
; 1170 : 		return;
; 1171 : 	}
; 1172 : 
; 1173 : 	lpUser->m_MiniMap = lpMsg->MiniMap;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  0002d	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00030	88 90 24 2b 00
	00		 mov	 BYTE PTR [eax+11044], dl
$LN3@RecvConfig:

; 1174 : }

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
?RecvConfig@ZtUser@@QAEXPAUCG_MINIMAP_PARTY@@H@Z ENDP	; ZtUser::RecvConfig
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GCDamageTable@ZtUser@@QAEXH@Z			; ZtUser::GCDamageTable
; Function compile flags: /Ogtp
;	COMDAT ?GCDamageTable@ZtUser@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GCDamageTable@ZtUser@@QAEXH@Z PROC			; ZtUser::GCDamageTable, COMDAT
; _this$ = ecx

; 1242 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]

; 1243 : 	LPOBJ lpUser = &gObj[aIndex];

  00013	8b c1		 mov	 eax, ecx
  00015	69 c0 50 2b 00
	00		 imul	 eax, 11088		; 00002b50H
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1244 : 
; 1245 : 	PMSG_DAMAGE_TABLE pMsg;
; 1246 : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xDC, sizeof(pMsg));//////////////////////

  00021	c7 45 ec c1 10
	fb dc		 mov	 DWORD PTR _pMsg$[ebp], -587525951 ; dcfb10c1H

; 1247 : 	pMsg.SecondDamage = lpUser->m_SecondDamage;

  00028	8b 90 28 2b 00
	00		 mov	 edx, DWORD PTR [eax+11048]
  0002e	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+4], edx

; 1248 : 	pMsg.SecondDefence = lpUser->m_SecondDefence;

  00031	8b 90 2c 2b 00
	00		 mov	 edx, DWORD PTR [eax+11052]
  00037	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+8], edx

; 1249 : 	pMsg.SecondReflect = lpUser->m_SecondReflect;

  0003a	8b 80 30 2b 00
	00		 mov	 eax, DWORD PTR [eax+11056]

; 1250 : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00040	6a 10		 push	 16			; 00000010H
  00042	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00045	52		 push	 edx
  00046	51		 push	 ecx
  00047	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  0004a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1251 : }

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00052	33 cd		 xor	 ecx, ebp
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?GCDamageTable@ZtUser@@QAEXH@Z ENDP			; ZtUser::GCDamageTable
_TEXT	ENDS
PUBLIC	?GCSendValueMenu@ZtUser@@QAE_NHH@Z		; ZtUser::GCSendValueMenu
; Function compile flags: /Ogtp
;	COMDAT ?GCSendValueMenu@ZtUser@@QAE_NHH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 8
_aIndex$ = 8						; size = 4
_Type$ = 12						; size = 4
?GCSendValueMenu@ZtUser@@QAE_NHH@Z PROC			; ZtUser::GCSendValueMenu, COMDAT
; _this$ = ecx

; 1258 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1259 : 	if(!g_ZtLicense.m_MultiWarehouseType)

  00006	83 3d d8 61 00
	00 00		 cmp	 DWORD PTR ?g_ZtLicense@@3VCZtLicense@@A+25048, 0
  0000d	75 08		 jne	 SHORT $LN2@GCSendValu
$LN9@GCSendValu:

; 1260 : 	{
; 1261 : 		return false;

  0000f	32 c0		 xor	 al, al

; 1277 : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
$LN2@GCSendValu:

; 1262 : 	}
; 1263 : 
; 1264 : 	if(!OBJMAX_RANGE(aIndex))

  00017	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	78 f1		 js	 SHORT $LN9@GCSendValu
  0001e	33 c9		 xor	 ecx, ecx
  00020	3d 97 3a 00 00	 cmp	 eax, 14999		; 00003a97H
  00025	0f 9e c1	 setle	 cl
  00028	85 c9		 test	 ecx, ecx

; 1265 : 	{
; 1266 : 		return false;

  0002a	74 e3		 je	 SHORT $LN9@GCSendValu

; 1267 : 	}
; 1268 : 
; 1269 : 	LPOBJ lpUser = &gObj[aIndex];
; 1270 : 
; 1271 : 	PMSG_REQ_VALUE_MENU pMsg;
; 1272 : 	pMsg.h.set((LPBYTE)&pMsg, 0xFB, 0xDE, sizeof(pMsg));
; 1273 : 	pMsg.ValueOpen = Type;

  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]

; 1274 : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0002f	6a 08		 push	 8
  00031	8d 55 f8	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00034	52		 push	 edx
  00035	50		 push	 eax
  00036	c7 45 f8 c1 08
	fb de		 mov	 DWORD PTR _pMsg$[ebp], -553973567 ; defb08c1H
  0003d	89 4d fc	 mov	 DWORD PTR _pMsg$[ebp+4], ecx
  00040	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1275 : 
; 1276 : 	return true;

  00048	b0 01		 mov	 al, 1

; 1277 : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?GCSendValueMenu@ZtUser@@QAE_NHH@Z ENDP			; ZtUser::GCSendValueMenu
_TEXT	ENDS
PUBLIC	??_C@_0CC@LPLOIODI@Ware?5number?3?5?$CFd?5?$HM?5Min?3?50?5?$HM?5Max?3?5@ ; `string'
PUBLIC	?CGRecvValueMenu@ZtUser@@QAEXPAUPMSG_ANS_VALUE_MENU@@H@Z ; ZtUser::CGRecvValueMenu
EXTRN	?GDGetWarehouseList@@YAXHPADH@Z:PROC		; GDGetWarehouseList
EXTRN	?GDGetGuildWarehouseList@CGuildBank@@QAEXH@Z:PROC ; CGuildBank::GDGetGuildWarehouseList
EXTRN	?g_GuildBank@@3VCGuildBank@@A:BYTE		; g_GuildBank
EXTRN	?WarehouseNumberSend@@YAXH@Z:PROC		; WarehouseNumberSend
;	COMDAT ??_C@_0CC@LPLOIODI@Ware?5number?3?5?$CFd?5?$HM?5Min?3?50?5?$HM?5Max?3?5@
CONST	SEGMENT
??_C@_0CC@LPLOIODI@Ware?5number?3?5?$CFd?5?$HM?5Min?3?50?5?$HM?5Max?3?5@ DB 'W'
	DB	'are number: %d | Min: 0 | Max: 4', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CGRecvValueMenu@ZtUser@@QAEXPAUPMSG_ANS_VALUE_MENU@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGRecvValueMenu@ZtUser@@QAEXPAUPMSG_ANS_VALUE_MENU@@H@Z PROC ; ZtUser::CGRecvValueMenu, COMDAT
; _this$ = ecx

; 1280 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1281 : 	if(!g_ZtLicense.m_MultiWarehouseType)

  00004	33 db		 xor	 ebx, ebx
  00006	39 1d d8 61 00
	00		 cmp	 DWORD PTR ?g_ZtLicense@@3VCZtLicense@@A+25048, ebx
  0000c	0f 84 72 01 00
	00		 je	 $LN7@CGRecvValu

; 1282 : 	{
; 1283 : 		return;
; 1284 : 	}
; 1285 : 
; 1286 : 	if(!OBJMAX_RANGE(aIndex))

  00012	56		 push	 esi
  00013	8b 75 0c	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00016	3b f3		 cmp	 esi, ebx
  00018	0f 8c 65 01 00
	00		 jl	 $LN11@CGRecvValu
  0001e	33 c0		 xor	 eax, eax
  00020	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00026	0f 9e c0	 setle	 al
  00029	3b c3		 cmp	 eax, ebx
  0002b	0f 84 52 01 00
	00		 je	 $LN11@CGRecvValu

; 1287 : 	{
; 1288 : 		return;
; 1289 : 	}
; 1290 : 
; 1291 : 	LPOBJ lpUser = &gObj[aIndex];

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	69 f6 50 2b 00
	00		 imul	 esi, 11088		; 00002b50H

; 1292 : 
; 1293 : 	if (lpMsg->ValueNumber < 0 || lpMsg->ValueNumber > 4)

  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  0003f	57		 push	 edi
  00040	8d 3c 06	 lea	 edi, DWORD PTR [esi+eax]
  00043	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00046	3b c3		 cmp	 eax, ebx
  00048	0f 8c 23 01 00
	00		 jl	 $LN3@CGRecvValu
  0004e	83 f8 04	 cmp	 eax, 4
  00051	0f 8f 1a 01 00
	00		 jg	 $LN3@CGRecvValu

; 1296 : 		return;
; 1297 : 	}
; 1298 : 
; 1299 : 	/* VALUE MENU FIX */
; 1300 : 
; 1301 : 	gObj[aIndex].TargetShopNumber = 100;

  00057	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  0005c	66 89 97 5a 04
	00 00		 mov	 WORD PTR [edi+1114], dx

; 1302 : 	gObj[aIndex].m_IfState.use = 1;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00068	8b 8c 06 1c 0e
	00 00		 mov	 ecx, DWORD PTR [esi+eax+3612]
  0006f	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00072	83 c9 01	 or	 ecx, 1
  00075	89 8c 06 1c 0e
	00 00		 mov	 DWORD PTR [esi+eax+3612], ecx

; 1303 : 	//lpObj->m_IfState.type = 3;
; 1304 : 	gObj[aIndex].m_ShopTime = 0;

  0007c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00082	88 9c 16 90 03
	00 00		 mov	 BYTE PTR [esi+edx+912], bl

; 1305 : 
; 1306 : 	if(gObj[aIndex].m_ReqWarehouseOpen != false)

  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008e	38 9c 06 1c 11
	00 00		 cmp	 BYTE PTR [esi+eax+4380], bl
  00095	0f 85 e7 00 00
	00		 jne	 $LN12@CGRecvValu

; 1307 : 	{
; 1308 : 		return;
; 1309 : 	}
; 1310 : 
; 1311 : 	gObj[aIndex].m_ReqWarehouseOpen = true;

  0009b	c6 84 06 1c 11
	00 00 01	 mov	 BYTE PTR [esi+eax+4380], 1

; 1312 : 
; 1313 : 	gObj[aIndex].m_IfState.type = 6;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a8	8b 8c 06 1c 0e
	00 00		 mov	 ecx, DWORD PTR [esi+eax+3612]
  000af	81 e1 bf 01 ff
	ff		 and	 ecx, -65089		; ffff01bfH
  000b5	81 c9 80 01 00
	00		 or	 ecx, 384		; 00000180H
  000bb	89 8c 06 1c 0e
	00 00		 mov	 DWORD PTR [esi+eax+3612], ecx

; 1314 : 	gObj[aIndex].m_IfState.state = 0;

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c7	83 a4 06 1c 0e
	00 00 c3	 and	 DWORD PTR [esi+eax+3612], -61 ; ffffffc3H

; 1315 : 
; 1316 : 	/**/
; 1317 : 
; 1318 : 	gObj[aIndex].WarehouseTickCount = GetTickCount();

  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1319 : 	gObj[aIndex].WarehouseCount = 0;
; 1320 : 
; 1321 : 	#if(CUSTOM_MULTIWAREHOUSE)
; 1322 : 
; 1323 : 	lpUser->WareChange = false;
; 1324 : 	lpUser->WarehouseNumber = lpMsg->ValueNumber;

  000db	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  000de	89 84 16 74 0e
	00 00		 mov	 DWORD PTR [esi+edx+3700], eax
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ea	88 9c 06 64 0e
	00 00		 mov	 BYTE PTR [esi+eax+3684], bl

; 1325 : 
; 1326 : 	WarehouseNumberSend(lpUser->m_Index);

  000f1	8b 07		 mov	 eax, DWORD PTR [edi]
  000f3	88 9f e5 2a 00
	00		 mov	 BYTE PTR [edi+10981], bl
  000f9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000fc	50		 push	 eax
  000fd	89 97 e8 2a 00
	00		 mov	 DWORD PTR [edi+10984], edx
  00103	e8 00 00 00 00	 call	 ?WarehouseNumberSend@@YAXH@Z ; WarehouseNumberSend

; 1327 : 
; 1328 : 	#if(DEV_GUILDBANK)
; 1329 : 	
; 1330 : 	gObj[aIndex].m_bGuildBank = false;

  00108	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010e	83 c4 04	 add	 esp, 4
  00111	88 9c 0e 25 2b
	00 00		 mov	 BYTE PTR [esi+ecx+11045], bl

; 1331 : 
; 1332 : 	if(g_GuildBank.m_iEnable == 1 && 
; 1333 : 		/*gObj[aIndex].MapNumber == g_GuildBank.m_iGuildBankMap &&
; 1334 : 		(g_GuildBank.m_iGuildBankX >= gObj[aIndex].X-1 && g_GuildBank.m_iGuildBankX <= gObj[aIndex].X+1) &&
; 1335 : 		(g_GuildBank.m_iGuildBankY >= gObj[aIndex].Y-1 && g_GuildBank.m_iGuildBankY <= gObj[aIndex].Y+1)*/
; 1336 : 		lpMsg->ValueOpen == 2)

  00118	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_GuildBank@@3VCGuildBank@@A, 1
  0011f	75 2b		 jne	 SHORT $LN1@CGRecvValu
  00121	8b 55 08	 mov	 edx, DWORD PTR _lpMsg$[ebp]
  00124	83 7a 04 02	 cmp	 DWORD PTR [edx+4], 2
  00128	75 22		 jne	 SHORT $LN1@CGRecvValu

; 1337 : 	{
; 1338 : 		gObj[aIndex].m_bGuildBank = true;
; 1339 : 		g_GuildBank.GDGetGuildWarehouseList(aIndex);

  0012a	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00132	51		 push	 ecx
  00133	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GuildBank@@3VCGuildBank@@A ; g_GuildBank
  00138	c6 84 06 25 2b
	00 00 01	 mov	 BYTE PTR [esi+eax+11045], 1
  00140	e8 00 00 00 00	 call	 ?GDGetGuildWarehouseList@CGuildBank@@QAEXH@Z ; CGuildBank::GDGetGuildWarehouseList
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx

; 1346 : 
; 1347 : 	#else
; 1348 : 
; 1349 : 	GDGetWarehouseListOLD(aIndex, gObj[aIndex].AccountID);
; 1350 : 
; 1351 : 	#endif
; 1352 : }

  00148	5d		 pop	 ebp
  00149	c2 08 00	 ret	 8
$LN1@CGRecvValu:

; 1340 : 		return;
; 1341 : 	}
; 1342 : 	
; 1343 : 	#endif
; 1344 : 
; 1345 : 	GDGetWarehouseList(aIndex, gObj[aIndex].AccountID, gObj[aIndex].WarehouseNumber);

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00151	8b 94 06 e8 2a
	00 00		 mov	 edx, DWORD PTR [esi+eax+10984]
  00158	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0015b	52		 push	 edx
  0015c	8d 44 06 6c	 lea	 eax, DWORD PTR [esi+eax+108]
  00160	50		 push	 eax
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 ?GDGetWarehouseList@@YAXHPADH@Z ; GDGetWarehouseList
  00167	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx

; 1346 : 
; 1347 : 	#else
; 1348 : 
; 1349 : 	GDGetWarehouseListOLD(aIndex, gObj[aIndex].AccountID);
; 1350 : 
; 1351 : 	#endif
; 1352 : }

  0016d	5d		 pop	 ebp
  0016e	c2 08 00	 ret	 8
$LN3@CGRecvValu:

; 1294 : 	{
; 1295 : 		MsgOutput(lpUser->m_Index, "Ware number: %d | Min: 0 | Max: 4", lpMsg->ValueNumber);

  00171	8b 17		 mov	 edx, DWORD PTR [edi]
  00173	50		 push	 eax
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LPLOIODI@Ware?5number?3?5?$CFd?5?$HM?5Min?3?50?5?$HM?5Max?3?5@
  00179	52		 push	 edx
  0017a	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0017f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@CGRecvValu:
  00182	5f		 pop	 edi
$LN11@CGRecvValu:
  00183	5e		 pop	 esi
$LN7@CGRecvValu:
  00184	5b		 pop	 ebx

; 1346 : 
; 1347 : 	#else
; 1348 : 
; 1349 : 	GDGetWarehouseListOLD(aIndex, gObj[aIndex].AccountID);
; 1350 : 
; 1351 : 	#endif
; 1352 : }

  00185	5d		 pop	 ebp
  00186	c2 08 00	 ret	 8
?CGRecvValueMenu@ZtUser@@QAEXPAUPMSG_ANS_VALUE_MENU@@H@Z ENDP ; ZtUser::CGRecvValueMenu
_TEXT	ENDS
PUBLIC	?GetGuildMemberOnline@ZtUser@@QAEHH@Z		; ZtUser::GetGuildMemberOnline
; Function compile flags: /Ogtp
;	COMDAT ?GetGuildMemberOnline@ZtUser@@QAEHH@Z
_TEXT	SEGMENT
_GuildNumber$ = 8					; size = 4
?GetGuildMemberOnline@ZtUser@@QAEHH@Z PROC		; ZtUser::GetGuildMemberOnline, COMDAT
; _this$ = ecx

; 1357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1358 : 	int iCount = 0;

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00009	8b 55 08	 mov	 edx, DWORD PTR _GuildNumber$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	33 c0		 xor	 eax, eax
  00010	81 c1 84 d6 40
	09		 add	 ecx, 155244164		; 0940d684H
  00016	bf c8 00 00 00	 mov	 edi, 200		; 000000c8H
  0001b	be 03 00 00 00	 mov	 esi, 3
$LL5@GetGuildMe:

; 1361 : 	{
; 1362 : 		LPOBJ lpUser = &gObj[aIndex];
; 1363 : 
; 1364 : 		if(lpUser->Connected < PLAYER_PLAYING)

  00020	39 b1 80 d0 ff
	ff		 cmp	 DWORD PTR [ecx-12160], esi
  00026	7c 09		 jl	 SHORT $LN4@GetGuildMe

; 1365 : 		{
; 1366 : 			continue;
; 1367 : 		}
; 1368 : 
; 1369 : 		if(lpUser->GuildNumber != GuildNumber)

  00028	39 91 b0 d4 ff
	ff		 cmp	 DWORD PTR [ecx-11088], edx
  0002e	75 01		 jne	 SHORT $LN4@GetGuildMe

; 1370 : 		{
; 1371 : 			continue;
; 1372 : 		}
; 1373 : 
; 1374 : 		iCount++;

  00030	40		 inc	 eax
$LN4@GetGuildMe:

; 1361 : 	{
; 1362 : 		LPOBJ lpUser = &gObj[aIndex];
; 1363 : 
; 1364 : 		if(lpUser->Connected < PLAYER_PLAYING)

  00031	39 b1 d0 fb ff
	ff		 cmp	 DWORD PTR [ecx-1072], esi
  00037	7c 05		 jl	 SHORT $LN11@GetGuildMe

; 1365 : 		{
; 1366 : 			continue;
; 1367 : 		}
; 1368 : 
; 1369 : 		if(lpUser->GuildNumber != GuildNumber)

  00039	39 11		 cmp	 DWORD PTR [ecx], edx
  0003b	75 01		 jne	 SHORT $LN11@GetGuildMe

; 1370 : 		{
; 1371 : 			continue;
; 1372 : 		}
; 1373 : 
; 1374 : 		iCount++;

  0003d	40		 inc	 eax
$LN11@GetGuildMe:

; 1361 : 	{
; 1362 : 		LPOBJ lpUser = &gObj[aIndex];
; 1363 : 
; 1364 : 		if(lpUser->Connected < PLAYER_PLAYING)

  0003e	39 b1 20 27 00
	00		 cmp	 DWORD PTR [ecx+10016], esi
  00044	7c 09		 jl	 SHORT $LN12@GetGuildMe

; 1365 : 		{
; 1366 : 			continue;
; 1367 : 		}
; 1368 : 
; 1369 : 		if(lpUser->GuildNumber != GuildNumber)

  00046	39 91 50 2b 00
	00		 cmp	 DWORD PTR [ecx+11088], edx
  0004c	75 01		 jne	 SHORT $LN12@GetGuildMe

; 1370 : 		{
; 1371 : 			continue;
; 1372 : 		}
; 1373 : 
; 1374 : 		iCount++;

  0004e	40		 inc	 eax
$LN12@GetGuildMe:

; 1361 : 	{
; 1362 : 		LPOBJ lpUser = &gObj[aIndex];
; 1363 : 
; 1364 : 		if(lpUser->Connected < PLAYER_PLAYING)

  0004f	39 b1 70 52 00
	00		 cmp	 DWORD PTR [ecx+21104], esi
  00055	7c 09		 jl	 SHORT $LN13@GetGuildMe

; 1365 : 		{
; 1366 : 			continue;
; 1367 : 		}
; 1368 : 
; 1369 : 		if(lpUser->GuildNumber != GuildNumber)

  00057	39 91 a0 56 00
	00		 cmp	 DWORD PTR [ecx+22176], edx
  0005d	75 01		 jne	 SHORT $LN13@GetGuildMe

; 1370 : 		{
; 1371 : 			continue;
; 1372 : 		}
; 1373 : 
; 1374 : 		iCount++;

  0005f	40		 inc	 eax
$LN13@GetGuildMe:

; 1361 : 	{
; 1362 : 		LPOBJ lpUser = &gObj[aIndex];
; 1363 : 
; 1364 : 		if(lpUser->Connected < PLAYER_PLAYING)

  00060	39 b1 c0 7d 00
	00		 cmp	 DWORD PTR [ecx+32192], esi
  00066	7c 09		 jl	 SHORT $LN14@GetGuildMe

; 1365 : 		{
; 1366 : 			continue;
; 1367 : 		}
; 1368 : 
; 1369 : 		if(lpUser->GuildNumber != GuildNumber)

  00068	39 91 f0 81 00
	00		 cmp	 DWORD PTR [ecx+33264], edx
  0006e	75 01		 jne	 SHORT $LN14@GetGuildMe

; 1370 : 		{
; 1371 : 			continue;
; 1372 : 		}
; 1373 : 
; 1374 : 		iCount++;

  00070	40		 inc	 eax
$LN14@GetGuildMe:

; 1358 : 	int iCount = 0;

  00071	81 c1 90 d8 00
	00		 add	 ecx, 55440		; 0000d890H

; 1359 : 
; 1360 : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00077	4f		 dec	 edi
  00078	75 a6		 jne	 SHORT $LL5@GetGuildMe
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 1375 : 	}
; 1376 : 
; 1377 : 	return iCount;
; 1378 : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?GetGuildMemberOnline@ZtUser@@QAEHH@Z ENDP		; ZtUser::GetGuildMemberOnline
_TEXT	ENDS
PUBLIC	?GCDataClient@ZtUser@@QAEXH@Z			; ZtUser::GCDataClient
EXTRN	?GC_Config@PremiumSystemZt@@QAEXH@Z:PROC	; PremiumSystemZt::GC_Config
EXTRN	?g_PremiumSystemZt@@3VPremiumSystemZt@@A:BYTE	; g_PremiumSystemZt
EXTRN	?GCChangeClassConfig@cCreditDonate@@QAEXH@Z:PROC ; cCreditDonate::GCChangeClassConfig
EXTRN	?gCreditDonate@@3VcCreditDonate@@A:BYTE		; gCreditDonate
EXTRN	?GCRankList@ItemRank@@QAEXH@Z:PROC		; ItemRank::GCRankList
EXTRN	?GCRankData@ItemRank@@QAEXH@Z:PROC		; ItemRank::GCRankData
EXTRN	?GCRankInit@ItemRank@@QAEXH@Z:PROC		; ItemRank::GCRankInit
EXTRN	?g_ItemRank@@3VItemRank@@A:BYTE			; g_ItemRank
; Function compile flags: /Ogtp
;	COMDAT ?GCDataClient@ZtUser@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?GCDataClient@ZtUser@@QAEXH@Z PROC			; ZtUser::GCDataClient, COMDAT
; _this$ = ecx

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 533  : 	if (!OBJMAX_RANGE(aIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	78 0f		 js	 SHORT $LN6@GCDataClie
  0000b	33 c0		 xor	 eax, eax
  0000d	81 fe 97 3a 00
	00		 cmp	 esi, 14999		; 00003a97H
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	75 1d		 jne	 SHORT $LN1@GCDataClie
$LN6@GCDataClie:

; 534  : 	{
; 535  : 		LogAdd("error : %s %d", __FILE__, __LINE__ );

  0001a	68 17 02 00 00	 push	 535			; 00000217H
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FIBJGLLN@ZtUser?4cpp?$AA@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	5e		 pop	 esi

; 552  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN1@GCDataClie:

; 536  : 		return;
; 537  : 	}
; 538  : 
; 539  : #if(CUSTOM_ITEM_RANK==TRUE)
; 540  : 	g_ItemRank.GCRankInit(aIndex);

  00037	56		 push	 esi
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemRank@@3VItemRank@@A ; g_ItemRank
  0003d	e8 00 00 00 00	 call	 ?GCRankInit@ItemRank@@QAEXH@Z ; ItemRank::GCRankInit

; 541  : 	g_ItemRank.GCRankData(aIndex);

  00042	56		 push	 esi
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemRank@@3VItemRank@@A ; g_ItemRank
  00048	e8 00 00 00 00	 call	 ?GCRankData@ItemRank@@QAEXH@Z ; ItemRank::GCRankData

; 542  : 	g_ItemRank.GCRankList(aIndex);

  0004d	56		 push	 esi
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemRank@@3VItemRank@@A ; g_ItemRank
  00053	e8 00 00 00 00	 call	 ?GCRankList@ItemRank@@QAEXH@Z ; ItemRank::GCRankList

; 543  : #endif
; 544  : #if(OFFLINE_MODE == TRUE)
; 545  : 	//g_OfflineMode.GCConfigSend(aIndex);
; 546  : #endif
; 547  : #if(CUSTOM_ADD_POINTS==TRUE)
; 548  : 	g_ZtUser.ResetPointSend(aIndex);

  00058	56		 push	 esi
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtUser@@3VZtUser@@A ; g_ZtUser
  0005e	e8 00 00 00 00	 call	 ?ResetPointSend@ZtUser@@QAEXH@Z ; ZtUser::ResetPointSend

; 549  : #endif
; 550  : 	gCreditDonate.GCChangeClassConfig(aIndex);

  00063	56		 push	 esi
  00064	b9 00 00 00 00	 mov	 ecx, OFFSET ?gCreditDonate@@3VcCreditDonate@@A ; gCreditDonate
  00069	e8 00 00 00 00	 call	 ?GCChangeClassConfig@cCreditDonate@@QAEXH@Z ; cCreditDonate::GCChangeClassConfig

; 551  : 	g_PremiumSystemZt.GC_Config(aIndex);

  0006e	56		 push	 esi
  0006f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PremiumSystemZt@@3VPremiumSystemZt@@A ; g_PremiumSystemZt
  00074	e8 00 00 00 00	 call	 ?GC_Config@PremiumSystemZt@@QAEXH@Z ; PremiumSystemZt::GC_Config
  00079	5e		 pop	 esi

; 552  : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?GCDataClient@ZtUser@@QAEXH@Z ENDP			; ZtUser::GCDataClient
_TEXT	ENDS
PUBLIC	?TickCountClientDataSend@ZtUser@@QAEXXZ		; ZtUser::TickCountClientDataSend
EXTRN	?TeleportMap@CMapQuest@@QAEXHH@Z:PROC		; CMapQuest::TeleportMap
EXTRN	?g_MapQuest@@3VCMapQuest@@A:BYTE		; g_MapQuest
EXTRN	?GCConfig@OfflineMode@@QAEXH@Z:PROC		; OfflineMode::GCConfig
EXTRN	?g_OfflineMode@@3VOfflineMode@@A:BYTE		; g_OfflineMode
EXTRN	?RageConnect@cSystemOfRage@@QAEXH@Z:PROC	; cSystemOfRage::RageConnect
EXTRN	?gSystemOfRage@@3VcSystemOfRage@@A:BYTE		; gSystemOfRage
EXTRN	?GCIemSend@CSmithy@@QAEXH@Z:PROC		; CSmithy::GCIemSend
EXTRN	?g_Smithy@@3VCSmithy@@A:BYTE			; g_Smithy
EXTRN	?CheckMaxWindow@AntiCheatPlus@@QAEXH@Z:PROC	; AntiCheatPlus::CheckMaxWindow
EXTRN	?CheckMultiWindow@AntiCheatPlus@@QAEXH@Z:PROC	; AntiCheatPlus::CheckMultiWindow
EXTRN	?GC_Cheat@AntiCheatPlus@@QAEXH@Z:PROC		; AntiCheatPlus::GC_Cheat
EXTRN	?g_AntiCheatPlus@@3VAntiCheatPlus@@A:BYTE	; g_AntiCheatPlus
EXTRN	?SendUser@cRanking@@QAEXH@Z:PROC		; cRanking::SendUser
EXTRN	?gRanking@@3VcRanking@@A:BYTE			; gRanking
EXTRN	?PlayerCalculator@cWingsDamage@@QAEXH@Z:PROC	; cWingsDamage::PlayerCalculator
EXTRN	?gWingsDamage@@3VcWingsDamage@@A:BYTE		; gWingsDamage
EXTRN	?GCSettingsData@CAchievements@@QAEXH@Z:PROC	; CAchievements::GCSettingsData
EXTRN	?g_Achievements@@3VCAchievements@@A:BYTE	; g_Achievements
EXTRN	?DB_Load@CZtGDManager@@QAEXH@Z:PROC		; CZtGDManager::DB_Load
EXTRN	?g_ZtGDManager@@3VCZtGDManager@@A:BYTE		; g_ZtGDManager
; Function compile flags: /Ogtp
;	COMDAT ?TickCountClientDataSend@ZtUser@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TickCountClientDataSend@ZtUser@@QAEXXZ PROC		; ZtUser::TickCountClientDataSend, COMDAT
; _this$ = ecx

; 841  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 842  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  0000a	bf b0 36 00 00	 mov	 edi, 14000		; 000036b0H
  0000f	bb 00 a7 40 09	 mov	 ebx, 155232000		; 0940a700H
  00014	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL21@TickCountC:

; 843  : 	{
; 844  : 		LPOBJ lpUser = &gObj[aIndex];

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 845  : 
; 846  : 		if(lpUser->Connected < PLAYER_PLAYING)

  00025	83 7c 03 04 03	 cmp	 DWORD PTR [ebx+eax+4], 3
  0002a	8d 34 03	 lea	 esi, DWORD PTR [ebx+eax]
  0002d	0f 8c 09 01 00
	00		 jl	 $LN20@TickCountC

; 847  : 		{
; 848  : 			continue;
; 849  : 		}
; 850  : 
; 851  : 		if(lpUser->m_iLoadConfigNumber <= 0 || lpUser->m_iLoadConfigNumber  > 10)

  00033	8b 86 d4 2a 00
	00		 mov	 eax, DWORD PTR [esi+10964]
  00039	85 c0		 test	 eax, eax
  0003b	0f 8e fb 00 00
	00		 jle	 $LN20@TickCountC
  00041	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00044	0f 8f f2 00 00
	00		 jg	 $LN20@TickCountC

; 852  : 		{
; 853  : 			continue;
; 854  : 		}
; 855  : 
; 856  : 		DWORD dwDelay = (GetTickCount() - lpUser->m_iLoadConfigTickCount);

  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00050	2b 86 d8 2a 00
	00		 sub	 eax, DWORD PTR [esi+10968]

; 857  : 
; 858  : 		if(dwDelay < 1000)

  00056	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0005b	0f 82 db 00 00
	00		 jb	 $LN20@TickCountC

; 859  : 		{
; 860  : 			continue;
; 861  : 		}
; 862  : 
; 863  : 		switch(lpUser->m_iLoadConfigNumber)

  00061	8b 86 d4 2a 00
	00		 mov	 eax, DWORD PTR [esi+10964]
  00067	48		 dec	 eax
  00068	83 f8 09	 cmp	 eax, 9
  0006b	0f 87 b9 00 00
	00		 ja	 $LN13@TickCountC
  00071	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN27@TickCountC[eax*4]
$LN12@TickCountC:

; 864  : 		{
; 865  : 		case 1:
; 866  : 			g_ZtGDManager.DB_Load(aIndex);

  00078	57		 push	 edi
  00079	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtGDManager@@3VCZtGDManager@@A ; g_ZtGDManager
  0007e	e8 00 00 00 00	 call	 ?DB_Load@CZtGDManager@@QAEXH@Z ; CZtGDManager::DB_Load

; 867  : 			break;

  00083	e9 a2 00 00 00	 jmp	 $LN13@TickCountC
$LN11@TickCountC:

; 868  : 		case 2:
; 869  : 			#if(SYSTEM_ACHIEVEMENTS)
; 870  : 			g_Achievements.GCSettingsData(aIndex);

  00088	57		 push	 edi
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Achievements@@3VCAchievements@@A ; g_Achievements
  0008e	e8 00 00 00 00	 call	 ?GCSettingsData@CAchievements@@QAEXH@Z ; CAchievements::GCSettingsData

; 871  : 			#endif
; 872  : 			break;

  00093	e9 92 00 00 00	 jmp	 $LN13@TickCountC
$LN10@TickCountC:

; 873  : 		case 3:
; 874  : 			this->GCDataClient(aIndex);

  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	57		 push	 edi
  0009c	e8 00 00 00 00	 call	 ?GCDataClient@ZtUser@@QAEXH@Z ; ZtUser::GCDataClient
$LN9@TickCountC:

; 875  : 		case 4:
; 876  : 			gWingsDamage.PlayerCalculator(aIndex);

  000a1	57		 push	 edi
  000a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWingsDamage@@3VcWingsDamage@@A ; gWingsDamage
  000a7	e8 00 00 00 00	 call	 ?PlayerCalculator@cWingsDamage@@QAEXH@Z ; cWingsDamage::PlayerCalculator

; 877  : 			break;

  000ac	eb 7c		 jmp	 SHORT $LN13@TickCountC
$LN8@TickCountC:

; 878  : 		case 5:
; 879  : 			gRanking.SendUser(aIndex);

  000ae	57		 push	 edi
  000af	b9 00 00 00 00	 mov	 ecx, OFFSET ?gRanking@@3VcRanking@@A ; gRanking
  000b4	e8 00 00 00 00	 call	 ?SendUser@cRanking@@QAEXH@Z ; cRanking::SendUser

; 880  : 			break;

  000b9	eb 6f		 jmp	 SHORT $LN13@TickCountC
$LN7@TickCountC:

; 881  : 		case 6:
; 882  : 			{
; 883  : 				#if(ANTI_CHEAT_PLUS==TRUE)
; 884  : 				g_AntiCheatPlus.GC_Cheat(aIndex);

  000bb	57		 push	 edi
  000bc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AntiCheatPlus@@3VAntiCheatPlus@@A ; g_AntiCheatPlus
  000c1	e8 00 00 00 00	 call	 ?GC_Cheat@AntiCheatPlus@@QAEXH@Z ; AntiCheatPlus::GC_Cheat

; 885  : 				g_AntiCheatPlus.CheckMultiWindow(aIndex);

  000c6	57		 push	 edi
  000c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AntiCheatPlus@@3VAntiCheatPlus@@A ; g_AntiCheatPlus
  000cc	e8 00 00 00 00	 call	 ?CheckMultiWindow@AntiCheatPlus@@QAEXH@Z ; AntiCheatPlus::CheckMultiWindow

; 886  : 				g_AntiCheatPlus.CheckMaxWindow(aIndex);

  000d1	57		 push	 edi
  000d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AntiCheatPlus@@3VAntiCheatPlus@@A ; g_AntiCheatPlus
  000d7	e8 00 00 00 00	 call	 ?CheckMaxWindow@AntiCheatPlus@@QAEXH@Z ; AntiCheatPlus::CheckMaxWindow

; 887  : 				#endif
; 888  : 			}
; 889  : 			break;

  000dc	eb 4c		 jmp	 SHORT $LN13@TickCountC
$LN6@TickCountC:

; 890  : 		case 7:
; 891  : 			#if(CUSTOM_SMITHY == TRUE)
; 892  : 			g_Smithy.GCIemSend(aIndex);

  000de	57		 push	 edi
  000df	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Smithy@@3VCSmithy@@A ; g_Smithy
  000e4	e8 00 00 00 00	 call	 ?GCIemSend@CSmithy@@QAEXH@Z ; CSmithy::GCIemSend

; 893  : 			#endif
; 894  : 			break;

  000e9	eb 3f		 jmp	 SHORT $LN13@TickCountC
$LN5@TickCountC:

; 895  : 		case 8:
; 896  : 			{
; 897  : 				if(g_ZtLicense.user.Rage)

  000eb	80 3d cd 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+205, 0
  000f2	74 36		 je	 SHORT $LN13@TickCountC

; 898  : 				{
; 899  : 					gSystemOfRage.RageConnect(aIndex);

  000f4	57		 push	 edi
  000f5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSystemOfRage@@3VcSystemOfRage@@A ; gSystemOfRage
  000fa	e8 00 00 00 00	 call	 ?RageConnect@cSystemOfRage@@QAEXH@Z ; cSystemOfRage::RageConnect

; 900  : 				}
; 901  : 			}
; 902  : 			break;

  000ff	eb 29		 jmp	 SHORT $LN13@TickCountC
$LN3@TickCountC:

; 903  : 		case 9:
; 904  : 			{
; 905  : 				#if(OFFLINE_MODE==TRUE)
; 906  : 				if(g_ZtLicense.user.OfflineMode)

  00101	80 3d e6 00 00
	00 00		 cmp	 BYTE PTR ?g_ZtLicense@@3VCZtLicense@@A+230, 0
  00108	74 20		 je	 SHORT $LN13@TickCountC

; 907  : 				{
; 908  : 					g_OfflineMode.GCConfig(aIndex);

  0010a	57		 push	 edi
  0010b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_OfflineMode@@3VOfflineMode@@A ; g_OfflineMode
  00110	e8 00 00 00 00	 call	 ?GCConfig@OfflineMode@@QAEXH@Z ; OfflineMode::GCConfig

; 909  : 				}
; 910  : 				#endif
; 911  : 			}
; 912  : 			break;

  00115	eb 13		 jmp	 SHORT $LN13@TickCountC
$LN1@TickCountC:

; 913  : 		case 10:
; 914  : 			#if(CUSTOM_MAPQUEST)
; 915  : 			g_MapQuest.TeleportMap(aIndex, lpUser->MapNumber);

  00117	0f b6 8e 49 01
	00 00		 movzx	 ecx, BYTE PTR [esi+329]
  0011e	51		 push	 ecx
  0011f	57		 push	 edi
  00120	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapQuest@@3VCMapQuest@@A ; g_MapQuest
  00125	e8 00 00 00 00	 call	 ?TeleportMap@CMapQuest@@QAEXHH@Z ; CMapQuest::TeleportMap
$LN13@TickCountC:

; 916  : 			#endif
; 917  : 			break;
; 918  : 		}
; 919  : 
; 920  : 		lpUser->m_iLoadConfigNumber++;

  0012a	ff 86 d4 2a 00
	00		 inc	 DWORD PTR [esi+10964]

; 921  : 		lpUser->m_iLoadConfigTickCount = GetTickCount();

  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00136	89 86 d8 2a 00
	00		 mov	 DWORD PTR [esi+10968], eax
$LN20@TickCountC:

; 842  : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  0013c	81 c3 50 2b 00
	00		 add	 ebx, 11088		; 00002b50H
  00142	47		 inc	 edi
  00143	81 fb 80 d7 e9
	09		 cmp	 ebx, 166320000		; 09e9d780H
  00149	0f 8c d1 fe ff
	ff		 jl	 $LL21@TickCountC
  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx

; 922  : 	}
; 923  : }

  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c3		 ret	 0
  00156	8b ff		 npad	 2
$LN27@TickCountC:
  00158	00 00 00 00	 DD	 $LN12@TickCountC
  0015c	00 00 00 00	 DD	 $LN11@TickCountC
  00160	00 00 00 00	 DD	 $LN10@TickCountC
  00164	00 00 00 00	 DD	 $LN9@TickCountC
  00168	00 00 00 00	 DD	 $LN8@TickCountC
  0016c	00 00 00 00	 DD	 $LN7@TickCountC
  00170	00 00 00 00	 DD	 $LN6@TickCountC
  00174	00 00 00 00	 DD	 $LN5@TickCountC
  00178	00 00 00 00	 DD	 $LN3@TickCountC
  0017c	00 00 00 00	 DD	 $LN1@TickCountC
?TickCountClientDataSend@ZtUser@@QAEXXZ ENDP		; ZtUser::TickCountClientDataSend
_TEXT	ENDS
PUBLIC	?ResetDamageTable@ZtUser@@QAEXXZ		; ZtUser::ResetDamageTable
; Function compile flags: /Ogtp
;	COMDAT ?ResetDamageTable@ZtUser@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetDamageTable@ZtUser@@QAEXXZ PROC			; ZtUser::ResetDamageTable, COMDAT
; _this$ = ecx

; 1218 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1219 : 	if(!this->EnableTable)

  00005	33 db		 xor	 ebx, ebx
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	38 59 09	 cmp	 BYTE PTR [ecx+9], bl
  0000d	74 4a		 je	 SHORT $LN2@ResetDamag

; 1220 : 	{
; 1221 : 		return;
; 1222 : 	}
; 1223 : 
; 1224 : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	bf b0 36 00 00	 mov	 edi, 14000		; 000036b0H
  00016	be 00 a7 40 09	 mov	 esi, 155232000		; 0940a700H
  0001b	eb 03 8d 49 00	 npad	 5
$LL4@ResetDamag:

; 1225 : 	{
; 1226 : 		LPOBJ lpUser = &gObj[aIndex];

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00025	03 c6		 add	 eax, esi

; 1227 : 
; 1228 : 		if(lpUser->Connected != PLAYER_PLAYING)

  00027	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0002b	75 1b		 jne	 SHORT $LN3@ResetDamag

; 1229 : 		{
; 1230 : 			continue;
; 1231 : 		}
; 1232 : 
; 1233 : 		lpUser->m_SecondDamage = 0;
; 1234 : 		lpUser->m_SecondDefence = 0;
; 1235 : 		lpUser->m_SecondReflect = 0;
; 1236 : 
; 1237 : 		this->GCDamageTable(aIndex);

  0002d	57		 push	 edi
  0002e	89 98 28 2b 00
	00		 mov	 DWORD PTR [eax+11048], ebx
  00034	89 98 2c 2b 00
	00		 mov	 DWORD PTR [eax+11052], ebx
  0003a	89 98 30 2b 00
	00		 mov	 DWORD PTR [eax+11056], ebx
  00040	e8 00 00 00 00	 call	 ?GCDamageTable@ZtUser@@QAEXH@Z ; ZtUser::GCDamageTable
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN3@ResetDamag:

; 1220 : 	{
; 1221 : 		return;
; 1222 : 	}
; 1223 : 
; 1224 : 	for(int aIndex = OBJ_STARTUSERINDZT; aIndex < OBJMAX; aIndex++)

  00048	81 c6 50 2b 00
	00		 add	 esi, 11088		; 00002b50H
  0004e	47		 inc	 edi
  0004f	81 fe 80 d7 e9
	09		 cmp	 esi, 166320000		; 09e9d780H
  00055	7c c9		 jl	 SHORT $LL4@ResetDamag
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
$LN2@ResetDamag:
  00059	5b		 pop	 ebx

; 1238 : 	}
; 1239 : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?ResetDamageTable@ZtUser@@QAEXXZ ENDP			; ZtUser::ResetDamageTable
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ZtUser@@YAXXZ
text$yc	SEGMENT
??__Eg_ZtUser@@YAXXZ PROC				; `dynamic initializer for 'g_ZtUser'', COMDAT

; 412  : ZtUser g_ZtUser;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fg_ZtUser@@YAXXZ ; `dynamic atexit destructor for 'g_ZtUser''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Eg_ZtUser@@YAXXZ ENDP				; `dynamic initializer for 'g_ZtUser''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ZtUser@@YAXXZ
text$yd	SEGMENT
??__Fg_ZtUser@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ZtUser'', COMDAT
  00000	c3		 ret	 0
??__Fg_ZtUser@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ZtUser''
text$yd	ENDS
PUBLIC	?g_ZtUser@@3VZtUser@@A				; g_ZtUser
_BSS	SEGMENT
?g_ZtUser@@3VZtUser@@A DB 0cH DUP (?)			; g_ZtUser
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ZtUser$initializer$ DD FLAT:??__Eg_ZtUser@@YAXXZ
CRT$XCU	ENDS
END
