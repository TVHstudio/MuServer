; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\common\classdef.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0DEFAULTCLASSTYPE@@QAE@XZ			; DEFAULTCLASSTYPE::DEFAULTCLASSTYPE
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
; Function compile flags: /Ogtp
;	COMDAT ??0DEFAULTCLASSTYPE@@QAE@XZ
_TEXT	SEGMENT
??0DEFAULTCLASSTYPE@@QAE@XZ PROC			; DEFAULTCLASSTYPE::DEFAULTCLASSTYPE, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	8d 73 2c	 lea	 esi, DWORD PTR [ebx+44]
  00008	bf 0d 00 00 00	 mov	 edi, 13			; 0000000dH
  0000d	8d 49 00	 npad	 3
$LL4@DEFAULTCLA:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  00017	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0001d	4f		 dec	 edi
  0001e	79 f0		 jns	 SHORT $LL4@DEFAULTCLA
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	8b c3		 mov	 eax, ebx
  00024	5b		 pop	 ebx
  00025	c3		 ret	 0
??0DEFAULTCLASSTYPE@@QAE@XZ ENDP			; DEFAULTCLASSTYPE::DEFAULTCLASSTYPE
_TEXT	ENDS
PUBLIC	??_7classdef@@6B@				; classdef::`vftable'
PUBLIC	??1classdef@@UAE@XZ				; classdef::~classdef
PUBLIC	??_R4classdef@@6B@				; classdef::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVclassdef@@@8				; classdef `RTTI Type Descriptor'
PUBLIC	??_R3classdef@@8				; classdef::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2classdef@@8				; classdef::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@classdef@@8			; classdef::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Eclassdef@@UAEPAXI@Z:PROC			; classdef::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@classdef@@8
; File e:\work\tranet_version\gs\common\classdef.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@classdef@@8 DD FLAT:??_R0?AVclassdef@@@8	; classdef::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3classdef@@8
rdata$r	ENDS
;	COMDAT ??_R2classdef@@8
rdata$r	SEGMENT
??_R2classdef@@8 DD FLAT:??_R1A@?0A@EA@classdef@@8	; classdef::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3classdef@@8
rdata$r	SEGMENT
??_R3classdef@@8 DD 00H					; classdef::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2classdef@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVclassdef@@@8
_DATA	SEGMENT
??_R0?AVclassdef@@@8 DD FLAT:??_7type_info@@6B@		; classdef `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVclassdef@@', 00H
_DATA	ENDS
;	COMDAT ??_R4classdef@@6B@
rdata$r	SEGMENT
??_R4classdef@@6B@ DD 00H				; classdef::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVclassdef@@@8
	DD	FLAT:??_R3classdef@@8
rdata$r	ENDS
;	COMDAT ??_7classdef@@6B@
CONST	SEGMENT
??_7classdef@@6B@ DD FLAT:??_R4classdef@@6B@		; classdef::`vftable'
	DD	FLAT:??_Eclassdef@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1classdef@@UAE@XZ
_TEXT	SEGMENT
??1classdef@@UAE@XZ PROC				; classdef::~classdef, COMDAT
; _this$ = ecx

; 16   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7classdef@@6B@

; 17   : 	return;
; 18   : }

  00006	c3		 ret	 0
??1classdef@@UAE@XZ ENDP				; classdef::~classdef
_TEXT	ENDS
PUBLIC	?SetEquipment@classdef@@QAEXH@Z			; classdef::SetEquipment
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z:PROC	; CItem::Convert
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
; Function compile flags: /Ogtp
;	COMDAT ?SetEquipment@classdef@@QAEXH@Z
_TEXT	SEGMENT
tv333 = -12						; size = 4
_this$ = -8						; size = 4
_right_type$ = -4					; size = 4
_Class$ = 8						; size = 4
?SetEquipment@classdef@@QAEXH@Z PROC			; classdef::SetEquipment, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 116  : 	int def_type=0;

  00008	8b 75 08	 mov	 esi, DWORD PTR _Class$[ebp]
  0000b	69 f6 c8 0b 00
	00		 imul	 esi, 3016		; 00000bc8H
  00011	57		 push	 edi
  00012	33 ff		 xor	 edi, edi
  00014	03 f1		 add	 esi, ecx
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 	int right_type=0;

  00019	89 7d fc	 mov	 DWORD PTR _right_type$[ebp], edi
  0001c	8d 5e 30	 lea	 ebx, DWORD PTR [esi+48]
  0001f	c7 45 f4 0d 00
	00 00		 mov	 DWORD PTR tv333[ebp], 13 ; 0000000dH
$LL20@SetEquipme:

; 118  : 	int n;
; 119  : 
; 120  : 	for (n=0;n<MAX_PLAYER_EQUIPMENT+1;n++)
; 121  : 	{
; 122  : 		this->DefClass[Class].Equipment[n].Clear();

  00026	8b cb		 mov	 ecx, ebx
  00028	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
  0002d	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  00033	ff 4d f4	 dec	 DWORD PTR tv333[ebp]
  00036	75 ee		 jne	 SHORT $LL20@SetEquipme

; 123  : 	}
; 124  : 
; 125  : 	switch (Class)

  00038	8b 5d 08	 mov	 ebx, DWORD PTR _Class$[ebp]
  0003b	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0003e	83 f8 05	 cmp	 eax, 5
  00041	77 4d		 ja	 SHORT $LN25@SetEquipme
  00043	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN30@SetEquipme[eax*4]
$LN14@SetEquipme:

; 126  : 	{
; 127  : 		case CLASS_KNIGHT:
; 128  : 			def_type = ItemGetNumberMake(1, 0);
; 129  : 			break;
; 130  : 
; 131  : 		case CLASS_ELF:
; 132  : 			def_type = ItemGetNumberMake(4, 0);

  0004a	6a 00		 push	 0
  0004c	6a 04		 push	 4
  0004e	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake

; 133  : 			right_type = ItemGetNumberMake(4, 15);

  00053	6a 0f		 push	 15			; 0000000fH
  00055	6a 04		 push	 4
  00057	8b f8		 mov	 edi, eax
  00059	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	89 45 fc	 mov	 DWORD PTR _right_type$[ebp], eax

; 134  : 			break;

  00064	eb 2a		 jmp	 SHORT $LN25@SetEquipme
$LN13@SetEquipme:

; 135  : 
; 136  : 		case CLASS_DARKLORD:
; 137  : 			def_type = ItemGetNumberMake(6, 0);

  00066	6a 00		 push	 0
  00068	6a 06		 push	 6
  0006a	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake

; 138  : 			right_type = ItemGetNumberMake(0, 1);

  0006f	6a 01		 push	 1
  00071	6a 00		 push	 0
  00073	8b f8		 mov	 edi, eax
  00075	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	89 45 fc	 mov	 DWORD PTR _right_type$[ebp], eax

; 139  : 			break;

  00080	eb 0e		 jmp	 SHORT $LN25@SetEquipme
$LN10@SetEquipme:

; 140  : 
; 141  : 		case CLASS_MAGUMSA:
; 142  : 			def_type = ItemGetNumberMake(6, 0);
; 143  : 			right_type = ItemGetNumberMake(0, 1);
; 144  : 			break;
; 145  : 
; 146  : 		case CLASS_SUMMONER:
; 147  : 			def_type = ItemGetNumberMake(1, 0);
; 148  : 		break;
; 149  : 
; 150  : 		case CLASS_MONK:
; 151  : 			def_type = ItemGetNumberMake(1, 0);

  00082	6a 00		 push	 0
  00084	6a 01		 push	 1
  00086	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0008b	83 c4 08	 add	 esp, 8
  0008e	8b f8		 mov	 edi, eax
$LN25@SetEquipme:

; 152  : 			break;
; 153  : 	}
; 154  : 
; 155  : 	if ( Class != 0 )

  00090	85 db		 test	 ebx, ebx
  00092	0f 84 d3 00 00
	00		 je	 $LN26@SetEquipme

; 156  : 	{
; 157  : 		if ( Class == CLASS_DARKLORD )

  00098	83 fb 04	 cmp	 ebx, 4
  0009b	75 3b		 jne	 SHORT $LN8@SetEquipme

; 158  : 		{
; 159  : 			this->DefClass[Class].Equipment[0].m_Level = 0;

  0009d	8b 5d f8	 mov	 ebx, DWORD PTR _this$[ebp]

; 160  : 			this->DefClass[Class].Equipment[1].m_Level = 0;
; 161  : 			this->DefClass[Class].Equipment[0].Convert(right_type, 0,0,0,0,0,0,NULL, 0xFF, 0, CURRENT_DB_VERSION);

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _right_type$[ebp]
  000a3	6a 03		 push	 3
  000a5	33 d2		 xor	 edx, edx
  000a7	52		 push	 edx
  000a8	68 ff 00 00 00	 push	 255			; 000000ffH
  000ad	52		 push	 edx
  000ae	52		 push	 edx
  000af	52		 push	 edx
  000b0	52		 push	 edx
  000b1	52		 push	 edx
  000b2	52		 push	 edx
  000b3	33 c9		 xor	 ecx, ecx
  000b5	52		 push	 edx
  000b6	66 89 8b 58 2f
	00 00		 mov	 WORD PTR [ebx+12120], cx
  000bd	50		 push	 eax
  000be	8d 8b 50 2f 00
	00		 lea	 ecx, DWORD PTR [ebx+12112]
  000c4	66 89 93 2c 30
	00 00		 mov	 WORD PTR [ebx+12332], dx
  000cb	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 162  : 			this->DefClass[Class].Equipment[1].Convert(def_type, 0,0,0,0,0,0,NULL, 0xFF, 0, CURRENT_DB_VERSION);

  000d0	8d 8b 24 30 00
	00		 lea	 ecx, DWORD PTR [ebx+12324]
  000d6	eb 76		 jmp	 SHORT $LN28@SetEquipme
$LN8@SetEquipme:

; 163  : 		}
; 164  : 		else if ( Class == CLASS_ELF || Class == CLASS_MAGUMSA )

  000d8	83 fb 02	 cmp	 ebx, 2
  000db	74 41		 je	 SHORT $LN27@SetEquipme
  000dd	83 fb 03	 cmp	 ebx, 3
  000e0	74 3c		 je	 SHORT $LN27@SetEquipme

; 174  : 			DefClass[Class].Equipment[0].Convert(def_type, 0,0,0,0,0,0,NULL, 0xFF, 0, CURRENT_DB_VERSION);

  000e2	6a 03		 push	 3
  000e4	6a 00		 push	 0
  000e6	68 ff 00 00 00	 push	 255			; 000000ffH
  000eb	6a 00		 push	 0
  000ed	6a 00		 push	 0
  000ef	6a 00		 push	 0
  000f1	6a 00		 push	 0
  000f3	6a 00		 push	 0
  000f5	6a 00		 push	 0
  000f7	6a 00		 push	 0
  000f9	57		 push	 edi
  000fa	83 fb 05	 cmp	 ebx, 5
  000fd	75 14		 jne	 SHORT $LN3@SetEquipme

; 170  : 		}
; 171  : 		else if( Class == CLASS_SUMMONER )
; 172  : 		{
; 173  : 			DefClass[Class].Equipment[0].m_Level = 0;

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00102	33 c9		 xor	 ecx, ecx
  00104	66 89 88 20 3b
	00 00		 mov	 WORD PTR [eax+15136], cx

; 174  : 			DefClass[Class].Equipment[0].Convert(def_type, 0,0,0,0,0,0,NULL, 0xFF, 0, CURRENT_DB_VERSION);

  0010b	8d 88 18 3b 00
	00		 lea	 ecx, DWORD PTR [eax+15128]

; 175  : 		}
; 176  : 		else

  00111	eb 53		 jmp	 SHORT $LN29@SetEquipme
$LN3@SetEquipme:

; 177  : 		{
; 178  : 			this->DefClass[Class].Equipment[0].m_Level = 0;

  00113	33 d2		 xor	 edx, edx
  00115	66 89 56 38	 mov	 WORD PTR [esi+56], dx

; 179  : 			this->DefClass[Class].Equipment[0].Convert(def_type, 0,0,0,0,0,0,NULL, 0xFF, 0, CURRENT_DB_VERSION);

  00119	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  0011c	eb 48		 jmp	 SHORT $LN29@SetEquipme
$LN27@SetEquipme:

; 165  : 		{
; 166  : 			this->DefClass[Class].Equipment[0].m_Level = 0;
; 167  : 			this->DefClass[Class].Equipment[1].m_Level = 0;
; 168  : 			this->DefClass[Class].Equipment[0].Convert(right_type, 0,0,0,0,0,0,NULL, 0xFF, 0, CURRENT_DB_VERSION);

  0011e	8b 55 fc	 mov	 edx, DWORD PTR _right_type$[ebp]
  00121	33 c9		 xor	 ecx, ecx
  00123	6a 03		 push	 3
  00125	51		 push	 ecx
  00126	68 ff 00 00 00	 push	 255			; 000000ffH
  0012b	51		 push	 ecx
  0012c	51		 push	 ecx
  0012d	51		 push	 ecx
  0012e	51		 push	 ecx
  0012f	51		 push	 ecx
  00130	51		 push	 ecx
  00131	51		 push	 ecx
  00132	33 c0		 xor	 eax, eax
  00134	66 89 8e 0c 01
	00 00		 mov	 WORD PTR [esi+268], cx
  0013b	52		 push	 edx
  0013c	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  0013f	66 89 46 38	 mov	 WORD PTR [esi+56], ax
  00143	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 169  : 			this->DefClass[Class].Equipment[1].Convert(def_type, 0,0,0,0,0,0,NULL, 0xFF, 0, CURRENT_DB_VERSION);

  00148	8d 8e 04 01 00
	00		 lea	 ecx, DWORD PTR [esi+260]
$LN28@SetEquipme:
  0014e	6a 03		 push	 3
  00150	6a 00		 push	 0
  00152	68 ff 00 00 00	 push	 255			; 000000ffH
  00157	6a 00		 push	 0
  00159	6a 00		 push	 0
  0015b	6a 00		 push	 0
  0015d	6a 00		 push	 0
  0015f	6a 00		 push	 0
  00161	6a 00		 push	 0
  00163	6a 00		 push	 0
  00165	57		 push	 edi
$LN29@SetEquipme:
  00166	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert
$LN26@SetEquipme:

; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	if ( this->m_BabubBanJiCreate == TRUE )

  0016b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0016e	83 b8 7c 52 00
	00 01		 cmp	 DWORD PTR [eax+21116], 1
  00175	75 76		 jne	 SHORT $LN1@SetEquipme

; 184  : 	{
; 185  : 		def_type = ItemGetNumberMake(13, 20);

  00177	6a 14		 push	 20			; 00000014H
  00179	6a 0d		 push	 13			; 0000000dH
  0017b	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00180	83 c4 08	 add	 esp, 8

; 186  : 		this->DefClass[Class].Equipment[12].m_Level = 1;
; 187  : 		this->DefClass[Class].Equipment[12].Convert(def_type, 0,0,0,0,0,0,NULL, 0xFF, 0, CURRENT_DB_VERSION);

  00183	6a 03		 push	 3
  00185	6a 00		 push	 0
  00187	68 ff 00 00 00	 push	 255			; 000000ffH
  0018c	6a 00		 push	 0
  0018e	6a 00		 push	 0
  00190	6a 00		 push	 0
  00192	6a 00		 push	 0
  00194	6a 00		 push	 0
  00196	6a 00		 push	 0
  00198	b9 01 00 00 00	 mov	 ecx, 1
  0019d	6a 00		 push	 0
  0019f	66 89 8e 28 0a
	00 00		 mov	 WORD PTR [esi+2600], cx
  001a6	50		 push	 eax
  001a7	8d 8e 20 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2592]
  001ad	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert

; 188  : 		
; 189  : 		def_type = ItemGetNumberMake(13, 20);

  001b2	6a 14		 push	 20			; 00000014H
  001b4	6a 0d		 push	 13			; 0000000dH
  001b6	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  001bb	83 c4 08	 add	 esp, 8

; 190  : 		this->DefClass[Class].Equipment[13].m_Level = 2;
; 191  : 		this->DefClass[Class].Equipment[13].Convert(def_type, 0,0,0,0,0,0,NULL, 0xFF, 0, CURRENT_DB_VERSION);

  001be	6a 03		 push	 3
  001c0	6a 00		 push	 0
  001c2	68 ff 00 00 00	 push	 255			; 000000ffH
  001c7	6a 00		 push	 0
  001c9	6a 00		 push	 0
  001cb	6a 00		 push	 0
  001cd	6a 00		 push	 0
  001cf	6a 00		 push	 0
  001d1	6a 00		 push	 0
  001d3	6a 00		 push	 0
  001d5	ba 02 00 00 00	 mov	 edx, 2
  001da	50		 push	 eax
  001db	8d 8e f4 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2804]
  001e1	66 89 96 fc 0a
	00 00		 mov	 WORD PTR [esi+2812], dx
  001e8	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEEE@Z ; CItem::Convert
$LN1@SetEquipme:
  001ed	5f		 pop	 edi
  001ee	5e		 pop	 esi
  001ef	5b		 pop	 ebx

; 192  : 	}
; 193  : 
; 194  : }

  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c2 04 00	 ret	 4
  001f6	8b ff		 npad	 2
$LN30@SetEquipme:
  001f8	00 00 00 00	 DD	 $LN10@SetEquipme
  001fc	00 00 00 00	 DD	 $LN14@SetEquipme
  00200	00 00 00 00	 DD	 $LN13@SetEquipme
  00204	00 00 00 00	 DD	 $LN13@SetEquipme
  00208	00 00 00 00	 DD	 $LN10@SetEquipme
  0020c	00 00 00 00	 DD	 $LN10@SetEquipme
?SetEquipment@classdef@@QAEXH@Z ENDP			; classdef::SetEquipment
_TEXT	ENDS
PUBLIC	?GetDefPoint@classdef@@QAEHH@Z			; classdef::GetDefPoint
; Function compile flags: /Ogtp
;	COMDAT ?GetDefPoint@classdef@@QAEHH@Z
_TEXT	SEGMENT
_char_class$ = 8					; size = 4
?GetDefPoint@classdef@@QAEHH@Z PROC			; classdef::GetDefPoint, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 	if ( char_class < 0 || char_class > MAX_TYPE_PLAYER-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _char_class$[ebp]
  00006	83 f8 06	 cmp	 eax, 6
  00009	77 2c		 ja	 SHORT $LN1@GetDefPoin

; 201  : 	}
; 202  : 
; 203  : 	return this->DefClass[char_class].Strength + this->DefClass[char_class].Dexterity + this->DefClass[char_class].Vitality + this->DefClass[char_class].Energy + this->DefClass[char_class].Leadership;

  0000b	69 c0 c8 0b 00
	00		 imul	 eax, 3016		; 00000bc8H
  00011	0f b7 54 01 0e	 movzx	 edx, WORD PTR [ecx+eax+14]
  00016	03 c8		 add	 ecx, eax
  00018	0f b7 81 c8 0b
	00 00		 movzx	 eax, WORD PTR [ecx+3016]
  0001f	03 c2		 add	 eax, edx
  00021	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00025	03 c2		 add	 eax, edx
  00027	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  0002b	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  0002f	03 c2		 add	 eax, edx
  00031	03 c1		 add	 eax, ecx

; 204  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN1@GetDefPoin:

; 199  : 	{
; 200  : 		return 0;

  00037	33 c0		 xor	 eax, eax

; 204  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?GetDefPoint@classdef@@QAEHH@Z ENDP			; classdef::GetDefPoint
_TEXT	ENDS
PUBLIC	?SetMabubBanjiOption@classdef@@QAEXH@Z		; classdef::SetMabubBanjiOption
; Function compile flags: /Ogtp
;	COMDAT ?SetMabubBanjiOption@classdef@@QAEXH@Z
_TEXT	SEGMENT
_Flag$ = 8						; size = 4
?SetMabubBanjiOption@classdef@@QAEXH@Z PROC		; classdef::SetMabubBanjiOption, COMDAT
; _this$ = ecx

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 	this->m_BabubBanJiCreate=Flag;

  00003	8b 45 08	 mov	 eax, DWORD PTR _Flag$[ebp]
  00006	89 81 7c 52 00
	00		 mov	 DWORD PTR [ecx+21116], eax

; 209  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetMabubBanjiOption@classdef@@QAEXH@Z ENDP		; classdef::SetMabubBanjiOption
_TEXT	ENDS
PUBLIC	??0classdef@@QAE@XZ				; classdef::classdef
; Function compile flags: /Ogtp
;	COMDAT ??0classdef@@QAE@XZ
_TEXT	SEGMENT
??0classdef@@QAE@XZ PROC				; classdef::classdef, COMDAT
; _this$ = ecx

; 11   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7classdef@@6B@
  0000b	bf 06 00 00 00	 mov	 edi, 6
  00010	8d 73 30	 lea	 esi, DWORD PTR [ebx+48]
$LL4@classdef:
  00013	68 00 00 00 00	 push	 OFFSET ??0CItem@@QAE@XZ	; CItem::CItem
  00018	6a 0e		 push	 14			; 0000000eH
  0001a	68 d4 00 00 00	 push	 212			; 000000d4H
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  00025	81 c6 c8 0b 00
	00		 add	 esi, 3016		; 00000bc8H
  0002b	4f		 dec	 edi
  0002c	79 e5		 jns	 SHORT $LL4@classdef

; 12   : 	this->m_BabubBanJiCreate = FALSE;

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c7 83 7c 52 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+21116], 0

; 13   : }

  0003a	8b c3		 mov	 eax, ebx
  0003c	5b		 pop	 ebx
  0003d	c3		 ret	 0
??0classdef@@QAE@XZ ENDP				; classdef::classdef
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_Gclassdef@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gclassdef@@UAEPAXI@Z PROC				; classdef::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1classdef@@UAE@XZ	; classdef::~classdef
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_Gclassdef@@UAEPAXI@Z ENDP				; classdef::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z	; classdef::SetCharacter
EXTRN	?ZtConfig@@3VcZtConfigs@@A:BYTE			; ZtConfig
EXTRN	?CheckUser@CZtLicense@@QAE_NH@Z:PROC		; CZtLicense::CheckUser
EXTRN	?g_ZtLicense@@3VCZtLicense@@A:BYTE		; g_ZtLicense
EXTRN	__fltused:DWORD
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z
_TEXT	SEGMENT
_Class$ = 8						; size = 4
_Str$ = 12						; size = 4
_Dex$ = 16						; size = 4
_Vit$ = 20						; size = 4
_Energy$ = 24						; size = 4
_Life$ = 28						; size = 4
_Mana$ = 32						; size = 4
_LevelLife$ = 36					; size = 4
_LevelMana$ = 40					; size = 4
_VitalityToLife$ = 44					; size = 4
_EnergyToMana$ = 48					; size = 4
_Leadership$ = 52					; size = 4
?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z PROC		; classdef::SetCharacter, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 33   : #ifdef HP_CONFIG	
; 34   : 	if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal) || g_ZtLicense.CheckUser(eZtUB::PrideMu))

  00008	6a 1a		 push	 26			; 0000001aH
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0000f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _Class$[ebp]
  00017	84 c0		 test	 al, al
  00019	75 14		 jne	 SHORT $LN16@SetCharact
  0001b	6a 11		 push	 17			; 00000011H
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00022	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00027	84 c0		 test	 al, al
  00029	0f 84 0d 01 00
	00		 je	 $LN14@SetCharact
$LN16@SetCharact:

; 35   : 	{
; 36   : 		switch (Class)

  0002f	83 fb 06	 cmp	 ebx, 6
  00032	0f 87 04 01 00
	00		 ja	 $LN14@SetCharact
  00038	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN20@SetCharact[ebx*4]
$LN13@SetCharact:

; 37   : 		{
; 38   : 			case CLASS_WIZARD:
; 39   : 				this->DefClass[Class].LevelLife = (float)ZtConfig.PrideMu.LevelLifeSM / 10.0;

  0003f	db 05 d4 0b 00
	00		 fild	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3028
  00045	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  0004b	dc f9		 fdiv	 ST(1), ST(0)
  0004d	d9 c9		 fxch	 ST(1)
  0004f	d9 5f 10	 fstp	 DWORD PTR [edi+16]

; 40   : 				this->DefClass[Class].VitalityToLife = (float)ZtConfig.PrideMu.VitalityToLifeSM / 10.0;

  00052	da 3d d8 0b 00
	00		 fidivr	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3032
  00058	d9 5f 28	 fstp	 DWORD PTR [edi+40]

; 41   : 				break;

  0005b	e9 dc 00 00 00	 jmp	 $LN14@SetCharact
$LN12@SetCharact:

; 42   : 			case CLASS_KNIGHT:
; 43   : 				this->DefClass[Class].LevelLife = (float)ZtConfig.PrideMu.LevelLifeDK / 10.0;

  00060	db 05 dc 0b 00
	00		 fild	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3036
  00066	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  0006c	dc f9		 fdiv	 ST(1), ST(0)
  0006e	d9 c9		 fxch	 ST(1)
  00070	d9 9f d8 0b 00
	00		 fstp	 DWORD PTR [edi+3032]

; 44   : 				this->DefClass[Class].VitalityToLife = (float)ZtConfig.PrideMu.VitalityToLifeDK / 10.0;

  00076	da 3d e0 0b 00
	00		 fidivr	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3040
  0007c	d9 9f f0 0b 00
	00		 fstp	 DWORD PTR [edi+3056]

; 45   : 				break;

  00082	e9 b5 00 00 00	 jmp	 $LN14@SetCharact
$LN11@SetCharact:

; 46   : 			case CLASS_ELF:
; 47   : 				this->DefClass[Class].LevelLife = (float)ZtConfig.PrideMu.LevelLifeELF / 10.0;

  00087	db 05 e4 0b 00
	00		 fild	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3044
  0008d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  00093	dc f9		 fdiv	 ST(1), ST(0)
  00095	d9 c9		 fxch	 ST(1)
  00097	d9 9f a0 17 00
	00		 fstp	 DWORD PTR [edi+6048]

; 48   : 				this->DefClass[Class].VitalityToLife = (float)ZtConfig.PrideMu.VitalityToLifeELF / 10.0;

  0009d	da 3d e8 0b 00
	00		 fidivr	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3048
  000a3	d9 9f b8 17 00
	00		 fstp	 DWORD PTR [edi+6072]

; 49   : 				break;

  000a9	e9 8e 00 00 00	 jmp	 $LN14@SetCharact
$LN10@SetCharact:

; 50   : 			case CLASS_MAGUMSA:
; 51   : 				this->DefClass[Class].LevelLife = (float)ZtConfig.PrideMu.LevelLifeMG / 10.0;

  000ae	db 05 ec 0b 00
	00		 fild	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3052
  000b4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  000ba	dc f9		 fdiv	 ST(1), ST(0)
  000bc	d9 c9		 fxch	 ST(1)
  000be	d9 9f 68 23 00
	00		 fstp	 DWORD PTR [edi+9064]

; 52   : 				this->DefClass[Class].VitalityToLife = (float)ZtConfig.PrideMu.VitalityToLifeMG / 10.0;

  000c4	da 3d f0 0b 00
	00		 fidivr	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3056
  000ca	d9 9f 80 23 00
	00		 fstp	 DWORD PTR [edi+9088]

; 53   : 				break;

  000d0	eb 6a		 jmp	 SHORT $LN14@SetCharact
$LN9@SetCharact:

; 54   : 			case CLASS_DARKLORD:
; 55   : 				this->DefClass[Class].LevelLife = (float)ZtConfig.PrideMu.LevelLifeDL / 10.0;

  000d2	db 05 f4 0b 00
	00		 fild	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3060
  000d8	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  000de	dc f9		 fdiv	 ST(1), ST(0)
  000e0	d9 c9		 fxch	 ST(1)
  000e2	d9 9f 30 2f 00
	00		 fstp	 DWORD PTR [edi+12080]

; 56   : 				this->DefClass[Class].VitalityToLife = (float)ZtConfig.PrideMu.VitalityToLifeDL / 10.0;

  000e8	da 3d f8 0b 00
	00		 fidivr	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3064
  000ee	d9 9f 48 2f 00
	00		 fstp	 DWORD PTR [edi+12104]

; 57   : 				break;

  000f4	eb 46		 jmp	 SHORT $LN14@SetCharact
$LN8@SetCharact:

; 58   : 			case CLASS_SUMMONER:
; 59   : 				this->DefClass[Class].LevelLife = (float)ZtConfig.PrideMu.LevelLifeSUM / 10.0;

  000f6	db 05 fc 0b 00
	00		 fild	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3068
  000fc	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  00102	dc f9		 fdiv	 ST(1), ST(0)
  00104	d9 c9		 fxch	 ST(1)
  00106	d9 9f f8 3a 00
	00		 fstp	 DWORD PTR [edi+15096]

; 60   : 				this->DefClass[Class].VitalityToLife = (float)ZtConfig.PrideMu.VitalityToLifeSUM / 10.0;

  0010c	da 3d 00 0c 00
	00		 fidivr	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3072
  00112	d9 9f 10 3b 00
	00		 fstp	 DWORD PTR [edi+15120]

; 61   : 				break;

  00118	eb 22		 jmp	 SHORT $LN14@SetCharact
$LN7@SetCharact:

; 62   : 			case CLASS_MONK:
; 63   : 				this->DefClass[Class].LevelLife = (float)ZtConfig.PrideMu.LevelLifeRF / 10.0;

  0011a	db 05 04 0c 00
	00		 fild	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3076
  00120	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  00126	dc f9		 fdiv	 ST(1), ST(0)
  00128	d9 c9		 fxch	 ST(1)
  0012a	d9 9f c0 46 00
	00		 fstp	 DWORD PTR [edi+18112]

; 64   : 				this->DefClass[Class].VitalityToLife = (float)ZtConfig.PrideMu.VitalityToLifeRF / 10.0;

  00130	da 3d 08 0c 00
	00		 fidivr	 DWORD PTR ?ZtConfig@@3VcZtConfigs@@A+3080
  00136	d9 9f d8 46 00
	00		 fstp	 DWORD PTR [edi+18136]
$LN14@SetCharact:

; 65   : 				break;
; 66   : 		}
; 67   : 	}
; 68   : #endif
; 69   : 
; 70   : 	this->DefClass[Class].Experience = 0;
; 71   : 
; 72   : 	this->DefClass[Class].Strength = Str;

  0013c	66 8b 4d 0c	 mov	 cx, WORD PTR _Str$[ebp]

; 73   : 	this->DefClass[Class].Dexterity = Dex;
; 74   : 	this->DefClass[Class].Vitality = Vit;
; 75   : 	this->DefClass[Class].Energy = Energy;
; 76   : 
; 77   : 	this->DefClass[Class].Life = Life;

  00140	d9 45 1c	 fld	 DWORD PTR _Life$[ebp]
  00143	66 8b 55 10	 mov	 dx, WORD PTR _Dex$[ebp]
  00147	66 8b 45 14	 mov	 ax, WORD PTR _Vit$[ebp]
  0014b	8b f3		 mov	 esi, ebx
  0014d	69 f6 c8 0b 00
	00		 imul	 esi, 3016		; 00000bc8H
  00153	d9 54 3e 14	 fst	 DWORD PTR [esi+edi+20]

; 78   : 	this->DefClass[Class].MaxLife = Life;

  00157	d9 5c 3e 18	 fstp	 DWORD PTR [esi+edi+24]
  0015b	03 f7		 add	 esi, edi
  0015d	66 89 4e 08	 mov	 WORD PTR [esi+8], cx
  00161	66 8b 4d 18	 mov	 cx, WORD PTR _Energy$[ebp]
  00165	66 89 4e 0e	 mov	 WORD PTR [esi+14], cx

; 79   : #ifdef HP_CONFIG	
; 80   : 	if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal) || g_ZtLicense.CheckUser(eZtUB::PrideMu))

  00169	6a 1a		 push	 26			; 0000001aH
  0016b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  00170	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00177	66 89 56 0a	 mov	 WORD PTR [esi+10], dx
  0017b	66 89 46 0c	 mov	 WORD PTR [esi+12], ax
  0017f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00184	84 c0		 test	 al, al
  00186	75 16		 jne	 SHORT $LN5@SetCharact
  00188	6a 11		 push	 17			; 00000011H
  0018a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  0018f	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  00194	84 c0		 test	 al, al
  00196	75 06		 jne	 SHORT $LN5@SetCharact

; 81   : 	{
; 82   : 	}
; 83   : 	else
; 84   : 	{
; 85   : 		this->DefClass[Class].LevelLife = LevelLife;

  00198	d9 45 24	 fld	 DWORD PTR _LevelLife$[ebp]
  0019b	d9 5e 10	 fstp	 DWORD PTR [esi+16]
$LN5@SetCharact:

; 86   : 	}
; 87   : #else
; 88   : 	this->DefClass[Class].LevelLife = LevelLife;
; 89   : #endif
; 90   : 	this->DefClass[Class].Mana = Mana;

  0019e	d9 45 20	 fld	 DWORD PTR _Mana$[ebp]

; 91   : 	this->DefClass[Class].MaxMana = Mana;
; 92   : 	this->DefClass[Class].LevelMana = LevelMana;
; 93   : 
; 94   : #ifdef HP_CONFIG	
; 95   : 	if(g_ZtLicense.CheckUser(eZtUB::PrideMuLocal) || g_ZtLicense.CheckUser(eZtUB::PrideMu) )

  001a1	6a 1a		 push	 26			; 0000001aH
  001a3	d9 56 20	 fst	 DWORD PTR [esi+32]
  001a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001ab	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  001ae	d9 45 28	 fld	 DWORD PTR _LevelMana$[ebp]
  001b1	d9 5e 1c	 fstp	 DWORD PTR [esi+28]
  001b4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001b9	84 c0		 test	 al, al
  001bb	75 16		 jne	 SHORT $LN2@SetCharact
  001bd	6a 11		 push	 17			; 00000011H
  001bf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ZtLicense@@3VCZtLicense@@A ; g_ZtLicense
  001c4	e8 00 00 00 00	 call	 ?CheckUser@CZtLicense@@QAE_NH@Z ; CZtLicense::CheckUser
  001c9	84 c0		 test	 al, al
  001cb	75 06		 jne	 SHORT $LN2@SetCharact

; 96   : 	{
; 97   : 	}
; 98   : 	else
; 99   : 	{
; 100  : 		this->DefClass[Class].VitalityToLife = VitalityToLife;

  001cd	d9 45 2c	 fld	 DWORD PTR _VitalityToLife$[ebp]
  001d0	d9 5e 28	 fstp	 DWORD PTR [esi+40]
$LN2@SetCharact:

; 101  : 	}
; 102  : #else
; 103  : 	this->DefClass[Class].VitalityToLife = VitalityToLife;
; 104  : #endif
; 105  : 
; 106  : 	this->DefClass[Class].EnergyToMana = EnergyToMana;
; 107  : 
; 108  : 	this->DefClass[Class].Leadership = Leadership;

  001d3	66 8b 55 34	 mov	 dx, WORD PTR _Leadership$[ebp]
  001d7	d9 45 30	 fld	 DWORD PTR _EnergyToMana$[ebp]

; 109  : 
; 110  : 	this->SetEquipment(Class);

  001da	53		 push	 ebx
  001db	d9 5e 2c	 fstp	 DWORD PTR [esi+44]
  001de	8b cf		 mov	 ecx, edi
  001e0	66 89 96 c8 0b
	00 00		 mov	 WORD PTR [esi+3016], dx
  001e7	e8 00 00 00 00	 call	 ?SetEquipment@classdef@@QAEXH@Z ; classdef::SetEquipment
  001ec	5f		 pop	 edi
  001ed	5e		 pop	 esi
  001ee	5b		 pop	 ebx

; 111  : 
; 112  : }

  001ef	5d		 pop	 ebp
  001f0	c2 30 00	 ret	 48			; 00000030H
  001f3	90		 npad	 1
$LN20@SetCharact:
  001f4	00 00 00 00	 DD	 $LN13@SetCharact
  001f8	00 00 00 00	 DD	 $LN12@SetCharact
  001fc	00 00 00 00	 DD	 $LN11@SetCharact
  00200	00 00 00 00	 DD	 $LN10@SetCharact
  00204	00 00 00 00	 DD	 $LN9@SetCharact
  00208	00 00 00 00	 DD	 $LN8@SetCharact
  0020c	00 00 00 00	 DD	 $LN7@SetCharact
?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ENDP		; classdef::SetCharacter
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	__real@3fa66666
PUBLIC	__real@428c0000
PUBLIC	__real@42b40000
PUBLIC	__real@42200000
PUBLIC	__real@42a00000
PUBLIC	__real@41f00000
PUBLIC	__real@3fc00000
PUBLIC	__real@42dc0000
PUBLIC	__real@41a00000
PUBLIC	__real@3f000000
PUBLIC	__real@40400000
PUBLIC	__real@42700000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	?Init@classdef@@QAEXXZ				; classdef::Init
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@428c0000
CONST	SEGMENT
__real@428c0000 DD 0428c0000r			; 70
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@42dc0000
CONST	SEGMENT
__real@42dc0000 DD 042dc0000r			; 110
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Init@classdef@@QAEXXZ
_TEXT	SEGMENT
?Init@classdef@@QAEXXZ PROC				; classdef::Init, COMDAT
; _this$ = ecx

; 22   : 	this->SetCharacter( CLASS_WIZARD, 18, 18, 15, 30, 60.0, 60.0, 1.0, 2.0, 2.0, 2.0, 0);

  00000	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  00006	56		 push	 esi
  00007	6a 00		 push	 0
  00009	83 ec 18	 sub	 esp, 24			; 00000018H
  0000c	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  00010	8b f1		 mov	 esi, ecx
  00012	d9 54 24 10	 fst	 DWORD PTR [esp+16]
  00016	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  0001a	d9 e8		 fld1
  0001c	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00020	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42700000
  00026	d9 54 24 04	 fst	 DWORD PTR [esp+4]
  0002a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0002d	6a 1e		 push	 30			; 0000001eH
  0002f	6a 0f		 push	 15			; 0000000fH
  00031	6a 12		 push	 18			; 00000012H
  00033	6a 12		 push	 18			; 00000012H
  00035	6a 00		 push	 0
  00037	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 23   : 	this->SetCharacter( CLASS_KNIGHT, 28, 20, 25, 10, 110.0, 20.0, 2.0, 0.5, 3.0, 1.0, 0);

  0003c	d9 e8		 fld1
  0003e	6a 00		 push	 0
  00040	83 ec 18	 sub	 esp, 24			; 00000018H
  00043	d9 5c 24 14	 fstp	 DWORD PTR [esp+20]
  00047	8b ce		 mov	 ecx, esi
  00049	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40400000
  0004f	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  00053	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f000000
  00059	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  0005d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  00063	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00067	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41a00000
  0006d	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00071	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42dc0000
  00077	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007a	6a 0a		 push	 10			; 0000000aH
  0007c	6a 19		 push	 25			; 00000019H
  0007e	6a 14		 push	 20			; 00000014H
  00080	6a 1c		 push	 28			; 0000001cH
  00082	6a 01		 push	 1
  00084	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 24   : 	this->SetCharacter( CLASS_ELF, 22, 25, 20, 15, 80.0, 30.0, 1.0, 1.5, 2.0, 1.5, 0);

  00089	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  0008f	6a 00		 push	 0
  00091	83 ec 18	 sub	 esp, 24			; 00000018H
  00094	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  00098	8b ce		 mov	 ecx, esi
  0009a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  000a0	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  000a4	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  000a8	d9 e8		 fld1
  000aa	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  000ae	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41f00000
  000b4	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  000b8	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42a00000
  000be	d9 1c 24	 fstp	 DWORD PTR [esp]
  000c1	6a 0f		 push	 15			; 0000000fH
  000c3	6a 14		 push	 20			; 00000014H
  000c5	6a 19		 push	 25			; 00000019H
  000c7	6a 16		 push	 22			; 00000016H
  000c9	6a 02		 push	 2
  000cb	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 25   : 	this->SetCharacter( CLASS_MAGUMSA, 26, 26, 26, 26, 110.0, 60.0, 1.0, 1.0, 2.0, 2.0, 0);

  000d0	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  000d6	6a 00		 push	 0
  000d8	83 ec 18	 sub	 esp, 24			; 00000018H
  000db	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  000df	8b ce		 mov	 ecx, esi
  000e1	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  000e5	d9 e8		 fld1
  000e7	d9 54 24 0c	 fst	 DWORD PTR [esp+12]
  000eb	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  000ef	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42700000
  000f5	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  000f9	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42dc0000
  000ff	d9 1c 24	 fstp	 DWORD PTR [esp]
  00102	6a 1a		 push	 26			; 0000001aH
  00104	6a 1a		 push	 26			; 0000001aH
  00106	6a 1a		 push	 26			; 0000001aH
  00108	6a 1a		 push	 26			; 0000001aH
  0010a	6a 03		 push	 3
  0010c	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 26   : 	this->SetCharacter( CLASS_DARKLORD, 26, 20, 20, 15, 90.0, 40.0, 1.5, 1.0, 2.0, 1.5, 25);

  00111	6a 19		 push	 25			; 00000019H
  00113	83 ec 18	 sub	 esp, 24			; 00000018H
  00116	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  0011c	8b ce		 mov	 ecx, esi
  0011e	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  00122	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  00128	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  0012c	d9 e8		 fld1
  0012e	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00132	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00136	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42200000
  0013c	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00140	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42b40000
  00146	d9 1c 24	 fstp	 DWORD PTR [esp]
  00149	6a 0f		 push	 15			; 0000000fH
  0014b	6a 14		 push	 20			; 00000014H
  0014d	6a 14		 push	 20			; 00000014H
  0014f	6a 1a		 push	 26			; 0000001aH
  00151	6a 04		 push	 4
  00153	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 27   : 	this->SetCharacter( CLASS_SUMMONER, 21, 21, 18, 23, 70.0, 40.0, 1.0, 1.5, 2.0, 1.5, 0);

  00158	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  0015e	6a 00		 push	 0
  00160	83 ec 18	 sub	 esp, 24			; 00000018H
  00163	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  00167	8b ce		 mov	 ecx, esi
  00169	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  0016f	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  00173	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00177	d9 e8		 fld1
  00179	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  0017d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42200000
  00183	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00187	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@428c0000
  0018d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00190	6a 17		 push	 23			; 00000017H
  00192	6a 12		 push	 18			; 00000012H
  00194	6a 15		 push	 21			; 00000015H
  00196	6a 15		 push	 21			; 00000015H
  00198	6a 05		 push	 5
  0019a	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 28   : 	this->SetCharacter(CLASS_MONK, 32, 27, 25, 20, 100.0f, 40.0f, 1.3f, 1.0f, 2.0f, 1.3f, 0);

  0019f	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fa66666
  001a5	6a 00		 push	 0
  001a7	83 ec 18	 sub	 esp, 24			; 00000018H
  001aa	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  001ae	8b ce		 mov	 ecx, esi
  001b0	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  001b6	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  001ba	d9 e8		 fld1
  001bc	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  001c0	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  001c4	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42200000
  001ca	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  001ce	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42c80000
  001d4	d9 1c 24	 fstp	 DWORD PTR [esp]
  001d7	6a 14		 push	 20			; 00000014H
  001d9	6a 19		 push	 25			; 00000019H
  001db	6a 1b		 push	 27			; 0000001bH
  001dd	6a 20		 push	 32			; 00000020H
  001df	6a 06		 push	 6
  001e1	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter
  001e6	5e		 pop	 esi

; 29   : }

  001e7	c3		 ret	 0
?Init@classdef@@QAEXXZ ENDP				; classdef::Init
_TEXT	ENDS
END
