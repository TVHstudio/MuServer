; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\work\tranet_version\GS\GameServer\logproc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_cline@@3HA					; m_cline
PUBLIC	?LogText@@3PAY0IM@DA				; LogText
PUBLIC	?LogTextLength@@3PAFA				; LogTextLength
PUBLIC	?LogTextViewType@@3PAEA				; LogTextViewType
PUBLIC	?LogAdd@@3P6AXPADZZA				; LogAdd
PUBLIC	?LogAddC@@3P6AXEPADZZA				; LogAddC
PUBLIC	?LogAddTD@@3P6AXPADZZA				; LogAddTD
PUBLIC	?LogAddHeadHex@@3P6AXPAD0H@ZA			; LogAddHeadHex
PUBLIC	?LogAddL@@3P6AXPADZZA				; LogAddL
PUBLIC	?LogTextPaint@@3P6AXPAUHWND__@@@ZA		; LogTextPaint
PUBLIC	?LogCritical@@3U_RTL_CRITICAL_SECTION@@A	; LogCritical
PUBLIC	?LogMDay@@3HA					; LogMDay
PUBLIC	?LogMonth@@3HA					; LogMonth
PUBLIC	?LogMYear@@3HA					; LogMYear
PUBLIC	?LogMHour@@3HA					; LogMHour
_BSS	SEGMENT
?m_cline@@3HA DD 01H DUP (?)				; m_cline
?LogText@@3PAY0IM@DA DB 01068H DUP (?)			; LogText
?LogTextLength@@3PAFA DW 01eH DUP (?)			; LogTextLength
?LogTextViewType@@3PAEA DB 01eH DUP (?)			; LogTextViewType
	ALIGN	4

?LogAdd@@3P6AXPADZZA DD 01H DUP (?)			; LogAdd
?LogAddC@@3P6AXEPADZZA DD 01H DUP (?)			; LogAddC
?LogAddTD@@3P6AXPADZZA DD 01H DUP (?)			; LogAddTD
?LogAddHeadHex@@3P6AXPAD0H@ZA DD 01H DUP (?)		; LogAddHeadHex
?LogAddL@@3P6AXPADZZA DD 01H DUP (?)			; LogAddL
?LogTextPaint@@3P6AXPAUHWND__@@@ZA DD 01H DUP (?)	; LogTextPaint
?LogCritical@@3U_RTL_CRITICAL_SECTION@@A DB 018H DUP (?) ; LogCritical
?LogMDay@@3HA DD 01H DUP (?)				; LogMDay
?LogMonth@@3HA DD 01H DUP (?)				; LogMonth
?LogMYear@@3HA DD 01H DUP (?)				; LogMYear
?LogMHour@@3HA DD 01H DUP (?)				; LogMHour
_BSS	ENDS
_DATA	SEGMENT
_g_iNpcUpDfLevel_CGATE DD 01H
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
_g_iNpcUpDfLevel_CSTATUE DD 01H
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
_g_iNpcUpMaxHP_CGATE DD 02625a0H
	DD	02H
	DD	0f4240H
	DD	03567e0H
	DD	03H
	DD	0f4240H
	DD	04f5880H
	DD	04H
	DD	0f4240H
_g_iNpcUpMaxHP_CSTATUE DD 02191c0H
	DD	03H
	DD	0f4240H
	DD	033e140H
	DD	05H
	DD	0f4240H
	DD	04c4b40H
	DD	07H
	DD	0f4240H
_g_iNpcUpRgLevel_CSTATUE DD 01H
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
_g_iCsUserReSpawnArea DD 023H
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	011H
	DD	090H
	DD	030H
_g_iNpcDefense_CGATE DD 064H
	DD	0b4H
	DD	012cH
	DD	0208H
_g_iNpcDefense_CSTATUE DD 050H
	DD	0b4H
	DD	0154H
	DD	0226H
_g_iCastleWallStepAxisY DD 071H
	DD	0a0H
	DD	0cbH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
EXTRN	__localtime64:PROC
; Function compile flags: /Ogtp
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
;	COMDAT _localtime
_TEXT	SEGMENT
_localtime PROC						; COMDAT
; __Time$ = eax

; 114  : #pragma warning( push )
; 115  : #pragma warning( disable : 4996 )
; 116  :     return _localtime64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __localtime64
  00006	83 c4 04	 add	 esp, 4

; 117  : #pragma warning( pop )
; 118  : }

  00009	c3		 ret	 0
_localtime ENDP
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$ = eax

; 133  :     return _time64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __time64
  00006	83 c4 04	 add	 esp, 4

; 134  : }

  00009	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@ ; `string'
PUBLIC	??_C@_02BOGAIONP@ab?$AA@			; `string'
PUBLIC	??_C@_0BK@FELIJBPP@?4?2log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogDataSet@@YAXXZ				; LogDataSet
EXTRN	_fopen:PROC
EXTRN	_fclose:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__except_handler4:PROC
_BSS	SEGMENT
_m_szLogFileName DB 064H DUP (?)
_logfp	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@
CONST	SEGMENT
??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@ DB 'Log file create erro'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02BOGAIONP@ab?$AA@
CONST	SEGMENT
??_C@_02BOGAIONP@ab?$AA@ DB 'ab', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FELIJBPP@?4?2log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
CONST	SEGMENT
??_C@_0BK@FELIJBPP@?4?2log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ DB '.\l'
	DB	'og\%02d%02d%02d_%s.log', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogDataSet@@YAXXZ DD 0ffffffe4H
	DD	00H
	DD	0fffffed0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@LogDataSet
	DD	FLAT:$LN9@LogDataSet
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\logproc.cpp
xdata$x	ENDS
;	COMDAT ?LogDataSet@@YAXXZ
_TEXT	SEGMENT
_ltime$212756 = -288					; size = 8
_szTemp$212754 = -280					; size = 250
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
?LogDataSet@@YAXXZ PROC					; LogDataSet, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogDataSet@@YAXXZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	53		 push	 ebx
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	50		 push	 eax
  0002d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 83   : 	__try

  00039	33 db		 xor	 ebx, ebx
  0003b	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 84   : 	{
; 85   : 		char szTemp[250];
; 86   : 	
; 87   : 		struct tm *today;
; 88   : 		time_t ltime;	
; 89   : 	
; 90   : 		time(&ltime);

  0003e	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _ltime$212756[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 __time64

; 91   : 		today=localtime(&ltime);

  0004a	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _ltime$212756[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 __localtime64

; 92   : 	
; 93   : 		today->tm_year=today->tm_year + 1900;

  00056	81 40 14 6c 07
	00 00		 add	 DWORD PTR [eax+20], 1900 ; 0000076cH

; 94   : 		LogMYear=today->tm_year ;

  0005d	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00060	89 15 00 00 00
	00		 mov	 DWORD PTR ?LogMYear@@3HA, edx ; LogMYear

; 95   : 		LogMonth=today->tm_mon+1;

  00066	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00069	41		 inc	 ecx
  0006a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMonth@@3HA, ecx ; LogMonth

; 96   : 		LogMDay=today->tm_mday;

  00070	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00073	a3 00 00 00 00	 mov	 DWORD PTR ?LogMDay@@3HA, eax ; LogMDay

; 97   : 
; 98   : 		//wsprintf(szTemp,"log\\%02d%02d%02d_%s.log",LogMYear, LogMonth, LogMDay,&szServerName);
; 99   : 		wsprintf(szTemp,".\\log\\%02d%02d%02d_%s.log",LogMYear, LogMonth, LogMDay,&szServerName);

  00078	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  0007d	50		 push	 eax
  0007e	51		 push	 ecx
  0007f	52		 push	 edx
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FELIJBPP@?4?2log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
  00085	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$212754[ebp]
  0008b	52		 push	 edx
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00092	83 c4 20	 add	 esp, 32			; 00000020H

; 100  : 
; 101  : 		if (logfp != 0)

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  0009a	3b c3		 cmp	 eax, ebx
  0009c	74 0f		 je	 SHORT $LN2@LogDataSet

; 102  : 		{
; 103  : 			fclose(logfp);

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _fclose
  000a4	83 c4 04	 add	 esp, 4

; 104  : 			logfp=0;

  000a7	89 1d 00 00 00
	00		 mov	 DWORD PTR _logfp, ebx
$LN2@LogDataSet:

; 105  : 		}
; 106  : 
; 107  : 		//logfp=fopen(szTemp,"a+t");.
; 108  : 		logfp=fopen(szTemp,"ab");

  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_02BOGAIONP@ab?$AA@
  000b2	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$212754[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _fopen
  000be	83 c4 08	 add	 esp, 8
  000c1	a3 00 00 00 00	 mov	 DWORD PTR _logfp, eax

; 109  : 		if (logfp==0)

  000c6	3b c3		 cmp	 eax, ebx
  000c8	75 0e		 jne	 SHORT $LN1@LogDataSet

; 110  : 		{
; 111  : 			LogAdd("Log file create error");

  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000d5	83 c4 04	 add	 esp, 4
$LN1@LogDataSet:

; 112  : 		}
; 113  : 		strcpy(m_szLogFileName,szTemp);

  000d8	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$212754[ebp]
  000de	ba 00 00 00 00	 mov	 edx, OFFSET _m_szLogFileName
$LL6@LogDataSet:
  000e3	8a 01		 mov	 al, BYTE PTR [ecx]
  000e5	88 02		 mov	 BYTE PTR [edx], al
  000e7	41		 inc	 ecx
  000e8	42		 inc	 edx
  000e9	3a c3		 cmp	 al, bl
  000eb	75 f6		 jne	 SHORT $LL6@LogDataSet
  000ed	eb 16		 jmp	 SHORT $LN18@LogDataSet
$LN8@LogDataSet:
$LN19@LogDataSet:

; 114  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  000ef	8b 4d ec	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+4]
  000f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f4	33 c9		 xor	 ecx, ecx
  000f6	81 3a 05 00 00
	c0		 cmp	 DWORD PTR [edx], -1073741819 ; c0000005H
  000fc	0f 94 c1	 sete	 cl
  000ff	8b c1		 mov	 eax, ecx
$LN17@LogDataSet:
$LN10@LogDataSet:
  00101	c3		 ret	 0
$LN9@LogDataSet:
  00102	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]
$LN18@LogDataSet:

; 115  : 	{
; 116  : 	}

  00105	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 117  : }

  0010c	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0010f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00116	59		 pop	 ecx
  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	5b		 pop	 ebx
  0011a	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011d	33 cd		 xor	 ecx, ebp
  0011f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
?LogDataSet@@YAXXZ ENDP					; LogDataSet
_TEXT	ENDS
PUBLIC	??_C@_03CCGKKFHG@a?$CLt?$AA@			; `string'
PUBLIC	??_C@_0BI@IJDLMAIK@log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogDateChange@@YAHXZ				; LogDateChange
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
;	COMDAT ??_C@_03CCGKKFHG@a?$CLt?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
CONST	SEGMENT
??_C@_03CCGKKFHG@a?$CLt?$AA@ DB 'a+t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IJDLMAIK@log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
CONST	SEGMENT
??_C@_0BI@IJDLMAIK@log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ DB 'log\%02'
	DB	'd%02d%02d_%s.log', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogDateChange@@YAHXZ DD 0ffffffe4H
	DD	00H
	DD	0fffffeccH
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN11@LogDateCha
	DD	FLAT:$LN12@LogDateCha
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\logproc.cpp
xdata$x	ENDS
;	COMDAT ?LogDateChange@@YAHXZ
_TEXT	SEGMENT
_ltime$212769 = -292					; size = 8
_EntCrit$ = -281					; size = 1
_szTemp$212767 = -280					; size = 250
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
?LogDateChange@@YAHXZ PROC				; LogDateChange, COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogDateChange@@YAHXZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	53		 push	 ebx
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	50		 push	 eax
  0002d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 124  : 	bool EntCrit = false;

  00039	c6 85 e7 fe ff
	ff 00		 mov	 BYTE PTR _EntCrit$[ebp], 0

; 125  : 	__try

  00040	33 f6		 xor	 esi, esi
  00042	89 75 fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], esi

; 126  : 	{
; 127  : 		char szTemp[250];
; 128  : 
; 129  : 		tm* today;
; 130  : 		time_t ltime;
; 131  : 		time(&ltime);

  00045	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _ltime$212769[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 __time64

; 132  : 
; 133  : 		today=localtime(&ltime);

  00051	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _ltime$212769[ebp]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 __localtime64
  0005d	83 c4 08	 add	 esp, 8

; 134  : 		today->tm_year =today->tm_year+1900;

  00060	81 40 14 6c 07
	00 00		 add	 DWORD PTR [eax+20], 1900 ; 0000076cH
  00067	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]

; 135  : 		today->tm_mon = today->tm_mon +1;

  0006a	bb 01 00 00 00	 mov	 ebx, 1
  0006f	01 58 10	 add	 DWORD PTR [eax+16], ebx
  00072	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 136  : 
; 137  : 		if (today->tm_year <= LogMYear)

  00075	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?LogMYear@@3HA ; LogMYear
  0007b	7f 17		 jg	 SHORT $LN3@LogDateCha

; 138  : 		{
; 139  : 			if (today->tm_mon <= LogMonth)

  0007d	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?LogMonth@@3HA ; LogMonth
  00083	7f 0f		 jg	 SHORT $LN3@LogDateCha

; 140  : 			{
; 141  : 				if (today->tm_mday <= LogMDay)

  00085	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00088	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?LogMDay@@3HA ; LogMDay

; 142  : 				{
; 143  : 					return 0;

  0008e	0f 8e d5 00 00
	00		 jle	 $LN1@LogDateCha
$LN3@LogDateCha:

; 144  : 				}
; 145  : 			}
; 146  : 		}
; 147  : 
; 148  : 		LogMYear = today->tm_year ;

  00094	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMYear@@3HA, ecx ; LogMYear

; 149  : 		LogMonth = today->tm_mon ;

  0009a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0009d	89 15 00 00 00
	00		 mov	 DWORD PTR ?LogMonth@@3HA, edx ; LogMonth

; 150  : 		LogMDay = today->tm_mday ;

  000a3	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000a6	a3 00 00 00 00	 mov	 DWORD PTR ?LogMDay@@3HA, eax ; LogMDay

; 151  : 
; 152  : 		wsprintf(szTemp, "log\\%02d%02d%02d_%s.log", LogMYear, LogMonth, LogMDay, &szServerName);

  000ab	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  000b0	50		 push	 eax
  000b1	52		 push	 edx
  000b2	51		 push	 ecx
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IJDLMAIK@log?2?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
  000b8	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$212767[ebp]
  000be	50		 push	 eax
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000c5	83 c4 18	 add	 esp, 24			; 00000018H

; 153  : 
; 154  : 		EnterCriticalSection(&LogCritical);

  000c8	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 155  : 		EntCrit = true;

  000d3	88 9d e7 fe ff
	ff		 mov	 BYTE PTR _EntCrit$[ebp], bl

; 156  : 
; 157  : 		if (logfp!=0)

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  000de	3b c6		 cmp	 eax, esi
  000e0	74 0f		 je	 SHORT $LN2@LogDateCha

; 158  : 		{
; 159  : 			fclose(logfp);

  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _fclose
  000e8	83 c4 04	 add	 esp, 4

; 160  : 			logfp=0;

  000eb	89 35 00 00 00
	00		 mov	 DWORD PTR _logfp, esi
$LN2@LogDateCha:

; 161  : 		}
; 162  : 		logfp=fopen(szTemp, "a+t");

  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_03CCGKKFHG@a?$CLt?$AA@
  000f6	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$212767[ebp]
  000fc	51		 push	 ecx
  000fd	e8 00 00 00 00	 call	 _fopen
  00102	83 c4 08	 add	 esp, 8
  00105	a3 00 00 00 00	 mov	 DWORD PTR _logfp, eax

; 163  : 		strcpy(m_szLogFileName, szTemp);

  0010a	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$212767[ebp]
  00110	ba 00 00 00 00	 mov	 edx, OFFSET _m_szLogFileName
$LL9@LogDateCha:
  00115	8a 01		 mov	 al, BYTE PTR [ecx]
  00117	88 02		 mov	 BYTE PTR [edx], al
  00119	03 cb		 add	 ecx, ebx
  0011b	03 d3		 add	 edx, ebx
  0011d	84 c0		 test	 al, al
  0011f	75 f4		 jne	 SHORT $LL9@LogDateCha

; 164  : 		LeaveCriticalSection(&LogCritical);

  00121	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 165  : 		EntCrit = false;

  0012c	c6 85 e7 fe ff
	ff 00		 mov	 BYTE PTR _EntCrit$[ebp], 0

; 166  : 		return 1;

  00133	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0013a	8b c3		 mov	 eax, ebx
  0013c	eb 34		 jmp	 SHORT $LN14@LogDateCha
$LN11@LogDateCha:
$LN21@LogDateCha:

; 167  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  0013e	8b 55 ec	 mov	 edx, DWORD PTR __$SEHRec$[ebp+4]
  00141	8b 02		 mov	 eax, DWORD PTR [edx]
  00143	8b 00		 mov	 eax, DWORD PTR [eax]
  00145	33 c9		 xor	 ecx, ecx
  00147	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  0014c	0f 94 c1	 sete	 cl
  0014f	8b c1		 mov	 eax, ecx
$LN20@LogDateCha:
$LN13@LogDateCha:
  00151	c3		 ret	 0
$LN12@LogDateCha:
  00152	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 168  : 	{
; 169  : 		if(EntCrit == true)

  00155	80 bd e7 fe ff
	ff 01		 cmp	 BYTE PTR _EntCrit$[ebp], 1
  0015c	75 0b		 jne	 SHORT $LN1@LogDateCha

; 170  : 		{
; 171  : 			LeaveCriticalSection(&LogCritical);

  0015e	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogDateCha:

; 172  : 		}
; 173  : 		return 0;

  00169	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00170	33 c0		 xor	 eax, eax
$LN14@LogDateCha:

; 174  : 	}
; 175  : }

  00172	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00175	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017c	59		 pop	 ecx
  0017d	5f		 pop	 edi
  0017e	5e		 pop	 esi
  0017f	5b		 pop	 ebx
  00180	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00183	33 cd		 xor	 ecx, ebp
  00185	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c3		 ret	 0
?LogDateChange@@YAHXZ ENDP				; LogDateChange
_TEXT	ENDS
PUBLIC	?LogTextAdd@@YAXEPADH@Z				; LogTextAdd
EXTRN	_memcpy:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogTextAdd@@YAXEPADH@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN7@LogTextAdd
	DD	FLAT:$LN8@LogTextAdd
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogTextAdd@@YAXEPADH@Z
_TEXT	SEGMENT
__$SEHRec$ = -24					; size = 24
_type$ = 8						; size = 1
_msg$ = 12						; size = 4
_len$ = 16						; size = 4
?LogTextAdd@@YAXEPADH@Z PROC				; LogTextAdd, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogTextAdd@@YAXEPADH@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 08	 sub	 esp, 8
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 187  : 	__try

  00033	33 c0		 xor	 eax, eax
  00035	89 45 fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], eax

; 188  : 	{
; 189  : 		if (len>LOG_TEXT_LENGTH-1)

  00038	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
  0003b	81 ff 8b 00 00
	00		 cmp	 edi, 139		; 0000008bH
  00041	7e 08		 jle	 SHORT $LN2@LogTextAdd

; 190  : 		{
; 191  : 			len=LOG_TEXT_LENGTH-1;//bilo 80 sdelal 130

  00043	bf 8b 00 00 00	 mov	 edi, 139		; 0000008bH
  00048	89 7d 10	 mov	 DWORD PTR _len$[ebp], edi
$LN2@LogTextAdd:

; 192  : 		}
; 193  : 		m_cline++;

  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_cline@@3HA ; m_cline
  00051	41		 inc	 ecx
  00052	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_cline@@3HA, ecx ; m_cline

; 194  : 		if (m_cline>LOG_TEXT_LINE-1)

  00058	83 f9 1d	 cmp	 ecx, 29			; 0000001dH
  0005b	7e 05		 jle	 SHORT $LN1@LogTextAdd

; 195  : 		{
; 196  : 			m_cline=0;

  0005d	a3 00 00 00 00	 mov	 DWORD PTR ?m_cline@@3HA, eax ; m_cline
$LN1@LogTextAdd:

; 197  : 		}
; 198  : 		LogText[m_cline][0]=0;

  00062	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_cline@@3HA ; m_cline
  00068	69 f6 8c 00 00
	00		 imul	 esi, 140		; 0000008cH
  0006e	8d 9e 00 00 00
	00		 lea	 ebx, DWORD PTR ?LogText@@3PAY0IM@DA[esi]
  00074	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 199  : 		memcpy(&LogText[m_cline], msg, len);

  00077	57		 push	 edi
  00078	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  0007b	50		 push	 eax
  0007c	53		 push	 ebx
  0007d	e8 00 00 00 00	 call	 _memcpy
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 		LogText[m_cline][1+len]=0;

  00085	c6 84 3e 01 00
	00 00 00	 mov	 BYTE PTR ?LogText@@3PAY0IM@DA[esi+edi+1], 0

; 201  : 		LogText[m_cline][len]=0;

  0008d	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 202  : 		LogTextLength[m_cline]=len;

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_cline@@3HA ; m_cline
  00096	66 89 3c 45 00
	00 00 00	 mov	 WORD PTR ?LogTextLength@@3PAFA[eax*2], di

; 203  : 		LogTextViewType[m_cline]=type;	// Phew, 

  0009e	8a 4d 08	 mov	 cl, BYTE PTR _type$[ebp]
  000a1	88 88 00 00 00
	00		 mov	 BYTE PTR ?LogTextViewType@@3PAEA[eax], cl

; 204  : 
; 205  : #if (LOG_INMEDIATLY==1)
; 206  : 						RECT rect;
; 207  : 						HDC hdc = GetDC(ghWnd);
; 208  : 						GetClientRect(ghWnd, &rect);
; 209  : 						FillRect(hdc, &rect, (HBRUSH)GetStockObject(0));
; 210  : 						ReleaseDC(ghWnd, hdc);
; 211  : 
; 212  : 						if ( gCurPaintType == 0)
; 213  : 						{
; 214  : 							if ( LogTextPaint != NULL )
; 215  : 							{
; 216  : 								LogTextPaint(ghWnd);
; 217  : 							}
; 218  : 						}
; 219  : 						
; 220  : 						gObjViewportPaint(ghWnd, gCurPaintPlayer);
; 221  : 						//g_ServerInfoDisplayer.Run(ghWnd);
; 222  : 						//GJNotifyMaxUserCount();
; 223  : #endif
; 224  : 	}

  000a7	eb 17		 jmp	 SHORT $LN12@LogTextAdd
$LN7@LogTextAdd:
$LN13@LogTextAdd:

; 225  : 	__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  000a9	8b 55 ec	 mov	 edx, DWORD PTR __$SEHRec$[ebp+4]
  000ac	8b 02		 mov	 eax, DWORD PTR [edx]
  000ae	8b 00		 mov	 eax, DWORD PTR [eax]
  000b0	33 c9		 xor	 ecx, ecx
  000b2	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  000b7	0f 94 c1	 sete	 cl
  000ba	8b c1		 mov	 eax, ecx
$LN11@LogTextAdd:
$LN9@LogTextAdd:
  000bc	c3		 ret	 0
$LN8@LogTextAdd:
  000bd	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]
$LN12@LogTextAdd:

; 226  : 	{
; 227  : 	}

  000c0	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 228  : }

  000c7	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d1	59		 pop	 ecx
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
?LogTextAdd@@YAXEPADH@Z ENDP				; LogTextAdd
_TEXT	ENDS
PUBLIC	?LogAddFuncVoid@@YAXPADZZ			; LogAddFuncVoid
; Function compile flags: /Ogtp
;	COMDAT ?LogAddFuncVoid@@YAXPADZZ
_TEXT	SEGMENT
_szLog$ = 8						; size = 4
?LogAddFuncVoid@@YAXPADZZ PROC				; LogAddFuncVoid, COMDAT

; 234  : 	// Nothing to Add
; 235  : }

  00000	c3		 ret	 0
?LogAddFuncVoid@@YAXPADZZ ENDP				; LogAddFuncVoid
_TEXT	ENDS
PUBLIC	?LogAddTimeDateVoid@@YAXPADZZ			; LogAddTimeDateVoid
; Function compile flags: /Ogtp
;	COMDAT ?LogAddTimeDateVoid@@YAXPADZZ
_TEXT	SEGMENT
_szLog$ = 8						; size = 4
?LogAddTimeDateVoid@@YAXPADZZ PROC			; LogAddTimeDateVoid, COMDAT

; 240  : 	// Log Disabled
; 241  : }

  00000	c3		 ret	 0
?LogAddTimeDateVoid@@YAXPADZZ ENDP			; LogAddTimeDateVoid
_TEXT	ENDS
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogAddFunc@@YAXPADZZ				; LogAddFunc
EXTRN	_fprintf:PROC
EXTRN	_vsprintf:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogAddFunc@@YAXPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffffdd0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@LogAddFunc
	DD	FLAT:$LN9@LogAddFunc
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogAddFunc@@YAXPADZZ
_TEXT	SEGMENT
_EntCrit$ = -541					; size = 1
_szBuffer$212801 = -540					; size = 512
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_szLog$ = 8						; size = 4
?LogAddFunc@@YAXPADZZ PROC				; LogAddFunc, COMDAT

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddFunc@@YAXPADZZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	53		 push	 ebx
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	50		 push	 eax
  0002d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 247  : 	bool EntCrit = false;

  00039	33 db		 xor	 ebx, ebx
  0003b	88 9d e3 fd ff
	ff		 mov	 BYTE PTR _EntCrit$[ebp], bl

; 248  : 	__try

  00041	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 249  : 	{
; 250  : 		char szBuffer[512]="";

  00044	88 9d e4 fd ff
	ff		 mov	 BYTE PTR _szBuffer$212801[ebp], bl
  0004a	68 ff 01 00 00	 push	 511			; 000001ffH
  0004f	53		 push	 ebx
  00050	8d 85 e5 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212801[ebp+1]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _memset

; 251  : 
; 252  : 		va_list pArguments;
; 253  : 	
; 254  : 		va_start( pArguments,  szLog);	// review
; 255  : 		vsprintf(szBuffer, szLog, pArguments);

  0005c	8d 4d 0c	 lea	 ecx, DWORD PTR _szLog$[ebp+4]
  0005f	51		 push	 ecx
  00060	8b 55 08	 mov	 edx, DWORD PTR _szLog$[ebp]
  00063	52		 push	 edx
  00064	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212801[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _vsprintf
  00070	83 c4 18	 add	 esp, 24			; 00000018H

; 256  : 		va_end(pArguments);
; 257  : 		LogTextAdd(0,szBuffer, strlen(szBuffer));

  00073	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212801[ebp]
  00079	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0007c	8d 64 24 00	 npad	 4
$LL12@LogAddFunc:
  00080	8a 08		 mov	 cl, BYTE PTR [eax]
  00082	40		 inc	 eax
  00083	3a cb		 cmp	 cl, bl
  00085	75 f9		 jne	 SHORT $LL12@LogAddFunc
  00087	2b c2		 sub	 eax, edx
  00089	50		 push	 eax
  0008a	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$212801[ebp]
  00090	51		 push	 ecx
  00091	53		 push	 ebx
  00092	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH

; 258  : 		if (gLogOutType==0)

  0009a	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?gLogOutType@@3HA, ebx ; gLogOutType

; 259  : 		{
; 260  : 			return;

  000a0	74 69		 je	 SHORT $LN1@LogAddFunc

; 261  : 		}
; 262  : 		else
; 263  : 		{
; 264  : 			EnterCriticalSection(&LogCritical);

  000a2	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 265  : 			EntCrit = true;

  000ad	c6 85 e3 fd ff
	ff 01		 mov	 BYTE PTR _EntCrit$[ebp], 1

; 266  : 			fprintf(logfp, "%s\n", szBuffer);

  000b4	8d 95 e4 fd ff
	ff		 lea	 edx, DWORD PTR _szBuffer$212801[ebp]
  000ba	52		 push	 edx
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _fprintf
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 267  : 			LeaveCriticalSection(&LogCritical);

  000ce	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 268  : 			EntCrit = false;

  000d9	88 9d e3 fd ff
	ff		 mov	 BYTE PTR _EntCrit$[ebp], bl

; 269  : 
; 270  : 		}

  000df	eb 2a		 jmp	 SHORT $LN1@LogAddFunc
$LN8@LogAddFunc:
$LN14@LogAddFunc:

; 271  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  000e1	8b 4d ec	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+4]
  000e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e6	33 c9		 xor	 ecx, ecx
  000e8	81 3a 05 00 00
	c0		 cmp	 DWORD PTR [edx], -1073741819 ; c0000005H
  000ee	0f 94 c1	 sete	 cl
  000f1	8b c1		 mov	 eax, ecx
$LN13@LogAddFunc:
$LN10@LogAddFunc:
  000f3	c3		 ret	 0
$LN9@LogAddFunc:
  000f4	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 272  : 	{
; 273  : 		if(EntCrit == true)

  000f7	80 bd e3 fd ff
	ff 01		 cmp	 BYTE PTR _EntCrit$[ebp], 1
  000fe	75 0b		 jne	 SHORT $LN1@LogAddFunc

; 274  : 		{
; 275  : 			LeaveCriticalSection(&LogCritical);

  00100	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddFunc:

; 276  : 		}
; 277  : 	}

  0010b	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 278  : }

  00112	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00123	33 cd		 xor	 ecx, ebp
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?LogAddFunc@@YAXPADZZ ENDP				; LogAddFunc
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LogAddFuncColor@@YAXEPADZZ			; LogAddFuncColor
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogAddFuncColor@@YAXEPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffffbd0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@LogAddFunc@2
	DD	FLAT:$LN9@LogAddFunc@2
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogAddFuncColor@@YAXEPADZZ
_TEXT	SEGMENT
_EntCrit$ = -1053					; size = 1
_szBuffer$212820 = -1052				; size = 1024
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_Color$ = 8						; size = 1
_szLog$ = 12						; size = 4
?LogAddFuncColor@@YAXEPADZZ PROC			; LogAddFuncColor, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddFuncColor@@YAXEPADZZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec 10 04 00
	00		 sub	 esp, 1040		; 00000410H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	53		 push	 ebx
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	50		 push	 eax
  0002d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 283  : 	bool EntCrit = false;

  00039	33 db		 xor	 ebx, ebx
  0003b	88 9d e3 fb ff
	ff		 mov	 BYTE PTR _EntCrit$[ebp], bl

; 284  : 	__try

  00041	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 285  : 	{
; 286  : 		char szBuffer[1024]="";

  00044	88 9d e4 fb ff
	ff		 mov	 BYTE PTR _szBuffer$212820[ebp], bl
  0004a	68 ff 03 00 00	 push	 1023			; 000003ffH
  0004f	53		 push	 ebx
  00050	8d 85 e5 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212820[ebp+1]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _memset

; 287  : 		va_list pArguments;
; 288  : 		
; 289  : 		va_start(pArguments, szLog);
; 290  : 		vsprintf(szBuffer, szLog, pArguments);

  0005c	8d 4d 10	 lea	 ecx, DWORD PTR _szLog$[ebp+4]
  0005f	51		 push	 ecx
  00060	8b 55 0c	 mov	 edx, DWORD PTR _szLog$[ebp]
  00063	52		 push	 edx
  00064	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212820[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _vsprintf
  00070	83 c4 18	 add	 esp, 24			; 00000018H

; 291  : 		va_end(pArguments);
; 292  : 		LogTextAdd(Color, szBuffer, strlen(szBuffer));

  00073	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212820[ebp]
  00079	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0007c	8d 64 24 00	 npad	 4
$LL12@LogAddFunc@2:
  00080	8a 08		 mov	 cl, BYTE PTR [eax]
  00082	40		 inc	 eax
  00083	3a cb		 cmp	 cl, bl
  00085	75 f9		 jne	 SHORT $LL12@LogAddFunc@2
  00087	2b c2		 sub	 eax, edx
  00089	50		 push	 eax
  0008a	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$212820[ebp]
  00090	51		 push	 ecx
  00091	8b 55 08	 mov	 edx, DWORD PTR _Color$[ebp]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 293  : 
; 294  : 		if (!gLogOutType)

  0009d	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?gLogOutType@@3HA, ebx ; gLogOutType

; 295  : 		{
; 296  : 			return;

  000a3	74 6b		 je	 SHORT $LN1@LogAddFunc@2

; 297  : 		}
; 298  : 		else
; 299  : 		{
; 300  : 			EnterCriticalSection(&LogCritical);

  000a5	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 301  : 			EntCrit = true;

  000b0	c6 85 e3 fb ff
	ff 01		 mov	 BYTE PTR _EntCrit$[ebp], 1

; 302  : 			fprintf(logfp, "%s\n", szBuffer);

  000b7	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212820[ebp]
  000bd	50		 push	 eax
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  000c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _logfp
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _fprintf
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 303  : 			LeaveCriticalSection(&LogCritical);

  000d2	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 304  : 			EntCrit = false;

  000dd	88 9d e3 fb ff
	ff		 mov	 BYTE PTR _EntCrit$[ebp], bl

; 305  : 		}

  000e3	eb 2b		 jmp	 SHORT $LN1@LogAddFunc@2
$LN8@LogAddFunc@2:
$LN14@LogAddFunc@2:

; 306  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  000e5	8b 55 ec	 mov	 edx, DWORD PTR __$SEHRec$[ebp+4]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 00		 mov	 eax, DWORD PTR [eax]
  000ec	33 c9		 xor	 ecx, ecx
  000ee	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  000f3	0f 94 c1	 sete	 cl
  000f6	8b c1		 mov	 eax, ecx
$LN13@LogAddFunc@2:
$LN10@LogAddFunc@2:
  000f8	c3		 ret	 0
$LN9@LogAddFunc@2:
  000f9	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 307  : 	{
; 308  : 		if(EntCrit == true)

  000fc	80 bd e3 fb ff
	ff 01		 cmp	 BYTE PTR _EntCrit$[ebp], 1
  00103	75 0b		 jne	 SHORT $LN1@LogAddFunc@2

; 309  : 		{
; 310  : 			LeaveCriticalSection(&LogCritical);

  00105	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddFunc@2:

; 311  : 		}
; 312  : 	}

  00110	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 313  : }

  00117	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0011a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00121	59		 pop	 ecx
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00128	33 cd		 xor	 ecx, ebp
  0012a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
?LogAddFuncColor@@YAXEPADZZ ENDP			; LogAddFuncColor
_TEXT	ENDS
PUBLIC	?LogAddLocalFunc@@YAXPADZZ			; LogAddLocalFunc
; Function compile flags: /Ogtp
;	COMDAT ?LogAddLocalFunc@@YAXPADZZ
_TEXT	SEGMENT
_szLog$ = 8						; size = 4
?LogAddLocalFunc@@YAXPADZZ PROC				; LogAddLocalFunc, COMDAT

; 318  : 	char szBuffer[512];
; 319  : 	va_list pArguments;
; 320  : 
; 321  : #if (LOCAL_LOG==1)	
; 322  : 	va_start(pArguments, szLog);
; 323  : 	vsprintf(szBuffer, szLog, pArguments);
; 324  : 	va_end(pArguments);
; 325  : 
; 326  : 	LogTextAdd(5, szBuffer, strlen(szBuffer));
; 327  : 
; 328  : 
; 329  : 	if (!gLogOutType)
; 330  : 	{
; 331  : 		return;
; 332  : 	}
; 333  : 	else
; 334  : 	{
; 335  : 		EnterCriticalSection(&LogCritical);
; 336  : 		fprintf(logfp, "[LOCAL] %s\n", szBuffer);
; 337  : 		LeaveCriticalSection(&LogCritical);
; 338  : 	}
; 339  : 
; 340  : #endif
; 341  : }

  00000	c3		 ret	 0
?LogAddLocalFunc@@YAXPADZZ ENDP				; LogAddLocalFunc
_TEXT	ENDS
PUBLIC	?LogAddLocalFuncVoid@@YAXPADZZ			; LogAddLocalFuncVoid
; Function compile flags: /Ogtp
;	COMDAT ?LogAddLocalFuncVoid@@YAXPADZZ
_TEXT	SEGMENT
_szLog$ = 8						; size = 4
?LogAddLocalFuncVoid@@YAXPADZZ PROC			; LogAddLocalFuncVoid, COMDAT

; 346  : 
; 347  : }

  00000	c3		 ret	 0
?LogAddLocalFuncVoid@@YAXPADZZ ENDP			; LogAddLocalFuncVoid
_TEXT	ENDS
PUBLIC	??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0M@JIIBKJAA@logproc?4cpp?$AA@		; `string'
PUBLIC	??_C@_05JBABHJFJ@?$CF?48s?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogAddTimeDateFunc@@YAXPADZZ			; LogAddTimeDateFunc
EXTRN	_asctime:PROC
;	COMDAT ??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
CONST	SEGMENT
??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@ DB 'error'
	DB	'-L2 : file create error %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JIIBKJAA@logproc?4cpp?$AA@
CONST	SEGMENT
??_C@_0M@JIIBKJAA@logproc?4cpp?$AA@ DB 'logproc.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBABHJFJ@?$CF?48s?5?$AA@
CONST	SEGMENT
??_C@_05JBABHJFJ@?$CF?48s?5?$AA@ DB '%.8s ', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogAddTimeDateFunc@@YAXPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffff9c8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN10@LogAddTime
	DD	FLAT:$LN11@LogAddTime
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\logproc.cpp
xdata$x	ENDS
;	COMDAT ?LogAddTimeDateFunc@@YAXPADZZ
_TEXT	SEGMENT
_ltime$212850 = -1576					; size = 8
_EntCrit$ = -1565					; size = 1
_szBuffer$212847 = -1564				; size = 1024
_tmpbuf$212851 = -540					; size = 512
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_szLog$ = 8						; size = 4
?LogAddTimeDateFunc@@YAXPADZZ PROC			; LogAddTimeDateFunc, COMDAT

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddTimeDateFunc@@YAXPADZZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec 18 06 00
	00		 sub	 esp, 1560		; 00000618H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	53		 push	 ebx
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	50		 push	 eax
  0002d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 352  : 	bool EntCrit = false;

  00039	33 db		 xor	 ebx, ebx
  0003b	88 9d e3 f9 ff
	ff		 mov	 BYTE PTR _EntCrit$[ebp], bl

; 353  : 	__try

  00041	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 354  : 	{
; 355  : 		char szBuffer[1024]="";

  00044	88 9d e4 f9 ff
	ff		 mov	 BYTE PTR _szBuffer$212847[ebp], bl
  0004a	68 ff 03 00 00	 push	 1023			; 000003ffH
  0004f	53		 push	 ebx
  00050	8d 85 e5 f9 ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212847[ebp+1]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _memset

; 356  : 		va_list pArguments;
; 357  : 		tm * today;
; 358  : 		time_t ltime;
; 359  : 		char tmpbuf[512];
; 360  : 		
; 361  : 		time(&ltime);

  0005c	8d 8d d8 f9 ff
	ff		 lea	 ecx, DWORD PTR _ltime$212850[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 __time64

; 362  : 		today=localtime(&ltime);

  00068	8d 95 d8 f9 ff
	ff		 lea	 edx, DWORD PTR _ltime$212850[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 __localtime64

; 363  : 		wsprintf(tmpbuf, "%.8s ", asctime(today)+11 );

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _asctime
  0007a	83 c0 0b	 add	 eax, 11			; 0000000bH
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_05JBABHJFJ@?$CF?48s?5?$AA@
  00083	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _tmpbuf$212851[ebp]
  00089	50		 push	 eax
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 364  : 
; 365  : 		va_start( pArguments,szLog );
; 366  : 		vsprintf(szBuffer, szLog, pArguments);

  00090	8d 4d 0c	 lea	 ecx, DWORD PTR _szLog$[ebp+4]
  00093	51		 push	 ecx
  00094	8b 55 08	 mov	 edx, DWORD PTR _szLog$[ebp]
  00097	52		 push	 edx
  00098	8d 85 e4 f9 ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212847[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _vsprintf
  000a4	83 c4 30	 add	 esp, 48			; 00000030H

; 367  : 		va_end(pArguments);
; 368  : 
; 369  : 		strcat(tmpbuf, szBuffer);

  000a7	8d 85 e4 f9 ff
	ff		 lea	 eax, DWORD PTR _szBuffer$212847[ebp]
  000ad	8b d0		 mov	 edx, eax
  000af	90		 npad	 1
$LL18@LogAddTime:
  000b0	8a 08		 mov	 cl, BYTE PTR [eax]
  000b2	40		 inc	 eax
  000b3	3a cb		 cmp	 cl, bl
  000b5	75 f9		 jne	 SHORT $LL18@LogAddTime
  000b7	2b c2		 sub	 eax, edx
  000b9	8d bd e4 fd ff
	ff		 lea	 edi, DWORD PTR _tmpbuf$212851[ebp]
  000bf	4f		 dec	 edi
$LL19@LogAddTime:
  000c0	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000c3	47		 inc	 edi
  000c4	3a cb		 cmp	 cl, bl
  000c6	75 f8		 jne	 SHORT $LL19@LogAddTime
  000c8	8b c8		 mov	 ecx, eax
  000ca	8b f2		 mov	 esi, edx
  000cc	c1 e9 02	 shr	 ecx, 2
  000cf	f3 a5		 rep movsd
  000d1	8b c8		 mov	 ecx, eax
  000d3	83 e1 03	 and	 ecx, 3
  000d6	f3 a4		 rep movsb

; 370  : 
; 371  : 		LogTextAdd(0, tmpbuf, strlen(tmpbuf));

  000d8	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _tmpbuf$212851[ebp]
  000de	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL20@LogAddTime:
  000e1	8a 08		 mov	 cl, BYTE PTR [eax]
  000e3	40		 inc	 eax
  000e4	3a cb		 cmp	 cl, bl
  000e6	75 f9		 jne	 SHORT $LL20@LogAddTime
  000e8	2b c2		 sub	 eax, edx
  000ea	50		 push	 eax
  000eb	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _tmpbuf$212851[ebp]
  000f1	51		 push	 ecx
  000f2	53		 push	 ebx
  000f3	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 372  : 
; 373  : 		if (gLogOutType==0)

  000fb	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?gLogOutType@@3HA, ebx ; gLogOutType

; 374  : 		{
; 375  : 			return;

  00101	0f 84 8b 00 00
	00		 je	 $LN1@LogAddTime

; 376  : 		}
; 377  : 		else
; 378  : 		{
; 379  : 			if (logfp==0)

  00107	39 1d 00 00 00
	00		 cmp	 DWORD PTR _logfp, ebx
  0010d	75 1a		 jne	 SHORT $LN3@LogAddTime

; 380  : 			{
; 381  : 				LogAdd("error-L2 : file create error %s %d", __FILE__, __LINE__);

  0010f	68 7d 01 00 00	 push	 381			; 0000017dH
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JIIBKJAA@logproc?4cpp?$AA@
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH

; 382  : 			}
; 383  : 			else

  00127	eb 69		 jmp	 SHORT $LN1@LogAddTime
$LN3@LogAddTime:

; 384  : 			{
; 385  : 				EnterCriticalSection(&LogCritical);

  00129	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 386  : 				EntCrit = true;

  00134	c6 85 e3 f9 ff
	ff 01		 mov	 BYTE PTR _EntCrit$[ebp], 1

; 387  : 				fprintf(logfp, "%s\n", &tmpbuf);

  0013b	8d 95 e4 fd ff
	ff		 lea	 edx, DWORD PTR _tmpbuf$212851[ebp]
  00141	52		 push	 edx
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _fprintf
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH

; 388  : 				LeaveCriticalSection(&LogCritical);

  00155	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 389  : 				EntCrit = false;

  00160	88 9d e3 f9 ff
	ff		 mov	 BYTE PTR _EntCrit$[ebp], bl

; 390  : 			}
; 391  : 		}

  00166	eb 2a		 jmp	 SHORT $LN1@LogAddTime
$LN10@LogAddTime:
$LN22@LogAddTime:

; 392  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00168	8b 4d ec	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+4]
  0016b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016d	33 c9		 xor	 ecx, ecx
  0016f	81 3a 05 00 00
	c0		 cmp	 DWORD PTR [edx], -1073741819 ; c0000005H
  00175	0f 94 c1	 sete	 cl
  00178	8b c1		 mov	 eax, ecx
$LN21@LogAddTime:
$LN12@LogAddTime:
  0017a	c3		 ret	 0
$LN11@LogAddTime:
  0017b	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 393  : 	{
; 394  : 		if(EntCrit == true)

  0017e	80 bd e3 f9 ff
	ff 01		 cmp	 BYTE PTR _EntCrit$[ebp], 1
  00185	75 0b		 jne	 SHORT $LN1@LogAddTime

; 395  : 		{
; 396  : 			LeaveCriticalSection(&LogCritical);

  00187	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddTime:

; 397  : 		}
; 398  : 	}

  00192	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 399  : }

  00199	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0019c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a3	59		 pop	 ecx
  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx
  001a7	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001aa	33 cd		 xor	 ecx, ebp
  001ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c3		 ret	 0
?LogAddTimeDateFunc@@YAXPADZZ ENDP			; LogAddTimeDateFunc
_TEXT	ENDS
PUBLIC	?LogAddHeadHexFuncVoid@@YAXPAD0H@Z		; LogAddHeadHexFuncVoid
; Function compile flags: /Ogtp
;	COMDAT ?LogAddHeadHexFuncVoid@@YAXPAD0H@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
?LogAddHeadHexFuncVoid@@YAXPAD0H@Z PROC			; LogAddHeadHexFuncVoid, COMDAT

; 404  : 	// Log Disabled
; 405  : }

  00000	c3		 ret	 0
?LogAddHeadHexFuncVoid@@YAXPAD0H@Z ENDP			; LogAddHeadHexFuncVoid
_TEXT	ENDS
PUBLIC	??_C@_02MNMNLDAI@?$CJ?6?$AA@			; `string'
PUBLIC	??_C@_07KDJDOMME@0x?$CF02x?5?$AA@		; `string'
PUBLIC	??_C@_0BA@LDLPOFHH@RECV?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_0BA@HOHGBHCM@SEND?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_0P@MHJNGJHC@UNK?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ ; `string'
PUBLIC	?LogAddHeadHexFunc@@YAXPADH0H@Z			; LogAddHeadHexFunc
;	COMDAT ??_C@_02MNMNLDAI@?$CJ?6?$AA@
CONST	SEGMENT
??_C@_02MNMNLDAI@?$CJ?6?$AA@ DB ')', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KDJDOMME@0x?$CF02x?5?$AA@
CONST	SEGMENT
??_C@_07KDJDOMME@0x?$CF02x?5?$AA@ DB '0x%02x ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LDLPOFHH@RECV?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
CONST	SEGMENT
??_C@_0BA@LDLPOFHH@RECV?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ DB 'RECV %d[%d'
	DB	'] : (', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HOHGBHCM@SEND?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
CONST	SEGMENT
??_C@_0BA@HOHGBHCM@SEND?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ DB 'SEND %d[%d'
	DB	'] : (', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MHJNGJHC@UNK?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
CONST	SEGMENT
??_C@_0P@MHJNGJHC@UNK?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@ DB 'UNK %d[%d] :'
	DB	' (', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogAddHeadHexFunc@@YAXPADH0H@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN18@LogAddHead
	DD	FLAT:$LN19@LogAddHead
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogAddHeadHexFunc@@YAXPADH0H@Z
_TEXT	SEGMENT
_n$212894 = -32						; size = 4
_EntCrit$ = -25						; size = 1
__$SEHRec$ = -24					; size = 24
_sT$ = 8						; size = 4
_Type$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
?LogAddHeadHexFunc@@YAXPADH0H@Z PROC			; LogAddHeadHexFunc, COMDAT

; 409  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddHeadHexFunc@@YAXPADH0H@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 410  : 	bool EntCrit = false;

  00033	c6 45 e7 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 411  : 	__try

  00037	33 f6		 xor	 esi, esi
  00039	89 75 fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], esi

; 412  : 	{
; 413  : 		if ( gLogOutType==0)

  0003c	39 35 00 00 00
	00		 cmp	 DWORD PTR ?gLogOutType@@3HA, esi ; gLogOutType

; 414  : 		{
; 415  : 			return;

  00042	0f 84 d9 00 00
	00		 je	 $LN1@LogAddHead

; 416  : 		}
; 417  : 		else
; 418  : 		{
; 419  : 			if (logfp==0)

  00048	39 35 00 00 00
	00		 cmp	 DWORD PTR _logfp, esi

; 420  : 			{
; 421  : 				return;

  0004e	0f 84 cd 00 00
	00		 je	 $LN1@LogAddHead

; 422  : 			}
; 423  : 			else
; 424  : 			{
; 425  : 				EnterCriticalSection(&LogCritical);

  00054	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 426  : 				EntCrit = true;

  0005f	c6 45 e7 01	 mov	 BYTE PTR _EntCrit$[ebp], 1

; 427  : 
; 428  : 				switch(sT[0])

  00063	8b 45 08	 mov	 eax, DWORD PTR _sT$[ebp]
  00066	0f be 00	 movsx	 eax, BYTE PTR [eax]

; 435  : 					break;
; 436  : 					default:
; 437  : 						fprintf(logfp, "UNK %d[%d] : (", Type ,len);

  00069	8b 5d 14	 mov	 ebx, DWORD PTR _len$[ebp]
  0006c	53		 push	 ebx

; 427  : 
; 428  : 				switch(sT[0])

  0006d	83 e8 52	 sub	 eax, 82			; 00000052H
  00070	74 27		 je	 SHORT $LN6@LogAddHead
  00072	48		 dec	 eax
  00073	74 12		 je	 SHORT $LN7@LogAddHead

; 435  : 					break;
; 436  : 					default:
; 437  : 						fprintf(logfp, "UNK %d[%d] : (", Type ,len);

  00075	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  00078	51		 push	 ecx
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MHJNGJHC@UNK?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
  0007e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _logfp
  00084	52		 push	 edx

; 438  : 					break;

  00085	eb 21		 jmp	 SHORT $LN24@LogAddHead
$LN7@LogAddHead:

; 429  : 				{
; 430  : 					case 'S':
; 431  : 						fprintf(logfp, "SEND %d[%d] : (", Type ,len);

  00087	8b 45 0c	 mov	 eax, DWORD PTR _Type$[ebp]
  0008a	50		 push	 eax
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HOHGBHCM@SEND?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _logfp
  00096	51		 push	 ecx

; 432  : 					break;

  00097	eb 0f		 jmp	 SHORT $LN24@LogAddHead
$LN6@LogAddHead:

; 433  : 					case 'R':
; 434  : 						fprintf(logfp, "RECV %d[%d] : (", Type ,len);

  00099	8b 55 0c	 mov	 edx, DWORD PTR _Type$[ebp]
  0009c	52		 push	 edx
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LDLPOFHH@RECV?5?$CFd?$FL?$CFd?$FN?5?3?5?$CI?$AA@
  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  000a7	50		 push	 eax
$LN24@LogAddHead:
  000a8	e8 00 00 00 00	 call	 _fprintf
  000ad	83 c4 10	 add	 esp, 16			; 00000010H

; 439  : 				}
; 440  : 				
; 441  : 				for (int n=0; n<len; n++) 

  000b0	8b 7d 10	 mov	 edi, DWORD PTR _data$[ebp]
$LN25@LogAddHead:
  000b3	89 75 e0	 mov	 DWORD PTR _n$212894[ebp], esi
  000b6	3b f3		 cmp	 esi, ebx
  000b8	7d 1c		 jge	 SHORT $LN2@LogAddHead

; 442  : 				{
; 443  : 					fprintf(logfp, "0x%02x ", *(BYTE *)(data+n));

  000ba	0f b6 0c 3e	 movzx	 ecx, BYTE PTR [esi+edi]
  000be	51		 push	 ecx
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_07KDJDOMME@0x?$CF02x?5?$AA@
  000c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _logfp
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 _fprintf
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 439  : 				}
; 440  : 				
; 441  : 				for (int n=0; n<len; n++) 

  000d3	46		 inc	 esi
  000d4	eb dd		 jmp	 SHORT $LN25@LogAddHead
$LN2@LogAddHead:

; 444  : 				}
; 445  : 
; 446  : 				fprintf(logfp, ")\n");

  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_02MNMNLDAI@?$CJ?6?$AA@
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _fprintf
  000e6	83 c4 08	 add	 esp, 8

; 447  : 
; 448  : 				LeaveCriticalSection(&LogCritical);

  000e9	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 449  : 				EntCrit = false;

  000f4	c6 45 e7 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 450  : 			}
; 451  : 		}

  000f8	eb 27		 jmp	 SHORT $LN1@LogAddHead
$LN18@LogAddHead:
$LN26@LogAddHead:

; 452  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  000fa	8b 4d ec	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+4]
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	33 c9		 xor	 ecx, ecx
  00101	81 3a 05 00 00
	c0		 cmp	 DWORD PTR [edx], -1073741819 ; c0000005H
  00107	0f 94 c1	 sete	 cl
  0010a	8b c1		 mov	 eax, ecx
$LN23@LogAddHead:
$LN20@LogAddHead:
  0010c	c3		 ret	 0
$LN19@LogAddHead:
  0010d	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 453  : 	{
; 454  : 		if(EntCrit == true)

  00110	80 7d e7 01	 cmp	 BYTE PTR _EntCrit$[ebp], 1
  00114	75 0b		 jne	 SHORT $LN1@LogAddHead

; 455  : 		{
; 456  : 			LeaveCriticalSection(&LogCritical);

  00116	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddHead:

; 457  : 		}
; 458  : 	}

  00121	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 459  : }

  00128	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?LogAddHeadHexFunc@@YAXPADH0H@Z ENDP			; LogAddHeadHexFunc
_TEXT	ENDS
PUBLIC	??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_05LJOMDNAA@?$CF?408s?$AA@			; `string'
PUBLIC	?LogAddStrHexFunc@@YAXPAD0H@Z			; LogAddStrHexFunc
;	COMDAT ??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@
; File d:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
CONST	SEGMENT
??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@ DB '[%s][%d] : '
	DB	'(', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05LJOMDNAA@?$CF?408s?$AA@
CONST	SEGMENT
??_C@_05LJOMDNAA@?$CF?408s?$AA@ DB '%.08s', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogAddStrHexFunc@@YAXPAD0H@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffc8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN13@LogAddStrH
	DD	FLAT:$LN14@LogAddStrH
; Function compile flags: /Ogtp
; File e:\work\tranet_version\gs\gameserver\logproc.cpp
xdata$x	ENDS
;	COMDAT ?LogAddStrHexFunc@@YAXPAD0H@Z
_TEXT	SEGMENT
_ltime$212911 = -40					; size = 8
_n$212912 = -32						; size = 4
_EntCrit$ = -25						; size = 1
__$SEHRec$ = -24					; size = 24
_str$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
?LogAddStrHexFunc@@YAXPAD0H@Z PROC			; LogAddStrHexFunc, COMDAT

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogAddStrHexFunc@@YAXPAD0H@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 18	 sub	 esp, 24			; 00000018H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 464  : 	bool EntCrit = false;

  00033	c6 45 e7 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 465  : 	__try

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 466  : 	{
; 467  : 		tm* today;
; 468  : 		time_t ltime;
; 469  : 		signed int n;
; 470  : 
; 471  : 		time(&ltime);

  0003e	8d 45 d8	 lea	 eax, DWORD PTR _ltime$212911[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 __time64

; 472  : 		today=localtime(&ltime);

  00047	8d 4d d8	 lea	 ecx, DWORD PTR _ltime$212911[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 __localtime64
  00050	83 c4 08	 add	 esp, 8
  00053	8b f0		 mov	 esi, eax

; 473  : 
; 474  : 		if (gLogOutType==0)

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType

; 475  : 		{
; 476  : 			return;

  0005c	0f 84 c7 00 00
	00		 je	 $LN1@LogAddStrH

; 477  : 		}
; 478  : 		else
; 479  : 		{
; 480  : 			if (logfp==0)

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _logfp, 0

; 481  : 			{
; 482  : 				return;

  00069	0f 84 ba 00 00
	00		 je	 $LN1@LogAddStrH

; 483  : 			}
; 484  : 			else
; 485  : 			{
; 486  : 				EnterCriticalSection(&LogCritical);

  0006f	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 487  : 				EntCrit = true;

  0007a	c6 45 e7 01	 mov	 BYTE PTR _EntCrit$[ebp], 1

; 488  : 				fprintf(logfp, "%.08s", asctime(today)+11);

  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 _asctime
  00084	83 c0 0b	 add	 eax, 11			; 0000000bH
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_05LJOMDNAA@?$CF?408s?$AA@
  0008d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _logfp
  00093	52		 push	 edx
  00094	e8 00 00 00 00	 call	 _fprintf

; 489  : 				fprintf(logfp, "[%s][%d] : (", str,len);

  00099	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
  0009c	57		 push	 edi
  0009d	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000a0	50		 push	 eax
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@
  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _logfp
  000ac	51		 push	 ecx
  000ad	e8 00 00 00 00	 call	 _fprintf
  000b2	83 c4 20	 add	 esp, 32			; 00000020H

; 490  : 
; 491  : 				for (n=0; n<len; n++ )

  000b5	33 f6		 xor	 esi, esi
  000b7	8b 5d 0c	 mov	 ebx, DWORD PTR _data$[ebp]
$LN23@LogAddStrH:
  000ba	89 75 e0	 mov	 DWORD PTR _n$212912[ebp], esi
  000bd	3b f7		 cmp	 esi, edi
  000bf	7d 1b		 jge	 SHORT $LN2@LogAddStrH

; 492  : 				{
; 493  : 					fprintf(logfp, "0x%02x ", *(BYTE *)(data+n));

  000c1	0f b6 14 1e	 movzx	 edx, BYTE PTR [esi+ebx]
  000c5	52		 push	 edx
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_07KDJDOMME@0x?$CF02x?5?$AA@
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _fprintf
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 490  : 
; 491  : 				for (n=0; n<len; n++ )

  000d9	46		 inc	 esi
  000da	eb de		 jmp	 SHORT $LN23@LogAddStrH
$LN2@LogAddStrH:

; 494  : 				}
; 495  : 				fprintf(logfp, ")\n");

  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_02MNMNLDAI@?$CJ?6?$AA@
  000e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _logfp
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _fprintf
  000ed	83 c4 08	 add	 esp, 8

; 496  : 
; 497  : 				LeaveCriticalSection(&LogCritical);

  000f0	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 498  : 				EntCrit = false;

  000fb	c6 45 e7 00	 mov	 BYTE PTR _EntCrit$[ebp], 0

; 499  : 			}
; 500  : 		}

  000ff	eb 28		 jmp	 SHORT $LN1@LogAddStrH
$LN13@LogAddStrH:
$LN24@LogAddStrH:

; 501  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00101	8b 55 ec	 mov	 edx, DWORD PTR __$SEHRec$[ebp+4]
  00104	8b 02		 mov	 eax, DWORD PTR [edx]
  00106	8b 00		 mov	 eax, DWORD PTR [eax]
  00108	33 c9		 xor	 ecx, ecx
  0010a	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  0010f	0f 94 c1	 sete	 cl
  00112	8b c1		 mov	 eax, ecx
$LN22@LogAddStrH:
$LN15@LogAddStrH:
  00114	c3		 ret	 0
$LN14@LogAddStrH:
  00115	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 502  : 	{
; 503  : 		if(EntCrit == true)

  00118	80 7d e7 01	 cmp	 BYTE PTR _EntCrit$[ebp], 1
  0011c	75 0b		 jne	 SHORT $LN1@LogAddStrH

; 504  : 		{
; 505  : 			LeaveCriticalSection(&LogCritical);

  0011e	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN1@LogAddStrH:

; 506  : 		}
; 507  : 	}

  00129	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 508  : }

  00130	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00133	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013a	59		 pop	 ecx
  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi
  0013d	5b		 pop	 ebx
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c3		 ret	 0
?LogAddStrHexFunc@@YAXPAD0H@Z ENDP			; LogAddStrHexFunc
_TEXT	ENDS
PUBLIC	?LogTextClear@@YAXXZ				; LogTextClear
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogTextClear@@YAXXZ DD 0fffffffeH
	DD	00H
	DD	0ffffffd4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@LogTextCle
	DD	FLAT:$LN9@LogTextCle
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogTextClear@@YAXXZ
_TEXT	SEGMENT
_n$212928 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?LogTextClear@@YAXXZ PROC				; LogTextClear, COMDAT

; 511  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogTextClear@@YAXXZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 512  : 	__try

  00033	33 db		 xor	 ebx, ebx
  00035	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 513  : 	{
; 514  : 		for (int n=0; n<LOG_TEXT_LINE; n++)

  00038	33 f6		 xor	 esi, esi
$LN14@LogTextCle:
  0003a	89 75 e4	 mov	 DWORD PTR _n$212928[ebp], esi
  0003d	83 fe 1e	 cmp	 esi, 30			; 0000001eH
  00040	7d 46		 jge	 SHORT $LN1@LogTextCle

; 515  : 		{
; 516  : 			memset(&LogText[n], 0, LOG_TEXT_LENGTH);

  00042	68 8c 00 00 00	 push	 140			; 0000008cH
  00047	53		 push	 ebx
  00048	8b c6		 mov	 eax, esi
  0004a	69 c0 8c 00 00
	00		 imul	 eax, 140		; 0000008cH
  00050	05 00 00 00 00	 add	 eax, OFFSET ?LogText@@3PAY0IM@DA ; LogText
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _memset
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 517  : 			LogTextLength[n]=0;	// WORD

  0005e	33 c9		 xor	 ecx, ecx
  00060	66 89 0c 75 00
	00 00 00	 mov	 WORD PTR ?LogTextLength@@3PAFA[esi*2], cx

; 518  : 			LogTextViewType[n]=0;	// BYTE

  00068	88 9e 00 00 00
	00		 mov	 BYTE PTR ?LogTextViewType@@3PAEA[esi], bl

; 513  : 	{
; 514  : 		for (int n=0; n<LOG_TEXT_LINE; n++)

  0006e	46		 inc	 esi
  0006f	eb c9		 jmp	 SHORT $LN14@LogTextCle
$LN8@LogTextCle:
$LN15@LogTextCle:

; 519  : 		}
; 520  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00071	8b 55 ec	 mov	 edx, DWORD PTR __$SEHRec$[ebp+4]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	8b 00		 mov	 eax, DWORD PTR [eax]
  00078	33 c9		 xor	 ecx, ecx
  0007a	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  0007f	0f 94 c1	 sete	 cl
  00082	8b c1		 mov	 eax, ecx
$LN13@LogTextCle:
$LN10@LogTextCle:
  00084	c3		 ret	 0
$LN9@LogTextCle:
  00085	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]
$LN1@LogTextCle:

; 521  : 	{
; 522  : 	}

  00088	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 523  : }

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?LogTextClear@@YAXXZ ENDP				; LogTextClear
_TEXT	ENDS
PUBLIC	?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z		; LogTextPaintProcVoid
; Function compile flags: /Ogtp
;	COMDAT ?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z PROC		; LogTextPaintProcVoid, COMDAT

; 528  : 	// Log Disabled
; 529  : }

  00000	c3		 ret	 0
?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z ENDP		; LogTextPaintProcVoid
_TEXT	ENDS
PUBLIC	_hWnd$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LogTextPaintProc@@YAXPAUHWND__@@@Z		; LogTextPaintProc
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	__imp__FillRect@12:PROC
EXTRN	__imp__CreateSolidBrush@4:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetDC@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogTextPaintProc@@YAXPAUHWND__@@@Z DD 0ffffffe4H
	DD	00H
	DD	0ffffffb4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN18@LogTextPai
	DD	FLAT:$LN19@LogTextPai
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogTextPaintProc@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
_total$212941 = -60					; size = 4
_iOldBkMode$212950 = -56				; size = 4
_hWnd$GSCopy$ = -52					; size = 4
_n$212942 = -48						; size = 4
_rect$212943 = -44					; size = 16
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_hWnd$ = 8						; size = 4
?LogTextPaintProc@@YAXPAUHWND__@@@Z PROC		; LogTextPaintProc, COMDAT

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogTextPaintProc@@YAXPAUHWND__@@@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00036	8b 5d 08	 mov	 ebx, DWORD PTR _hWnd$[ebp]

; 577  : 				break;
; 578  : 			}
; 579  : 			if (strlen(LogText[n])>1)

  00039	89 5d cc	 mov	 DWORD PTR _hWnd$GSCopy$[ebp], ebx

; 534  : 	__try

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 535  : 	{
; 536  : 		HDC hdc;
; 537  : 		int total;
; 538  : 		int n;
; 539  : 		RECT rect;
; 540  : 
; 541  : 		hdc=GetDC(hWnd);

  00043	53		 push	 ebx
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  0004a	8b f0		 mov	 esi, eax

; 542  : 		total= LOG_TEXT_LINE;

  0004c	bf 1e 00 00 00	 mov	 edi, 30			; 0000001eH
  00051	89 7d c4	 mov	 DWORD PTR _total$212941[ebp], edi

; 543  : 		GetClientRect(hWnd, &rect);

  00054	8d 45 d4	 lea	 eax, DWORD PTR _rect$212943[ebp]
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 544  : 		rect.top = 100;

  0005f	c7 45 d8 64 00
	00 00		 mov	 DWORD PTR _rect$212943[ebp+4], 100 ; 00000064H

; 545  : 		FillRect(hdc, &rect, CreateSolidBrush(RGB(255, 255, 255)));

  00066	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  00071	50		 push	 eax
  00072	8d 4d d4	 lea	 ecx, DWORD PTR _rect$212943[ebp]
  00075	51		 push	 ecx
  00076	56		 push	 esi
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 546  : 		
; 547  : 		n=m_cline;

  0007d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_cline@@3HA ; m_cline
  00083	89 55 d0	 mov	 DWORD PTR _n$212942[ebp], edx

; 548  : 
; 549  : #if(NEW_WINDOW==1)	
; 550  : 
; 551  : 		int iOldBkMode = SetBkMode(hdc, TRANSPARENT);

  00086	6a 01		 push	 1
  00088	56		 push	 esi
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  0008f	89 45 c8	 mov	 DWORD PTR _iOldBkMode$212950[ebp], eax
$LL13@LogTextPai:

; 552  : 
; 553  : 		while(total-- != 0)

  00092	8b c7		 mov	 eax, edi
  00094	4f		 dec	 edi
  00095	89 7d c4	 mov	 DWORD PTR _total$212941[ebp], edi
  00098	85 c0		 test	 eax, eax
  0009a	0f 84 98 00 00
	00		 je	 $LN12@LogTextPai

; 554  : 		{
; 555  : 			switch (LogTextViewType[n] )

  000a0	8b 5d d0	 mov	 ebx, DWORD PTR _n$212942[ebp]
  000a3	0f b6 83 00 00
	00 00		 movzx	 eax, BYTE PTR ?LogTextViewType@@3PAEA[ebx]
  000aa	83 c0 fe	 add	 eax, -2			; fffffffeH
  000ad	83 f8 05	 cmp	 eax, 5
  000b0	77 31		 ja	 SHORT $LN3@LogTextPai
  000b2	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN27@LogTextPai[eax*4]
$LN9@LogTextPai:

; 556  : 			{
; 557  : 			case 2:
; 558  : 				SetTextColor(hdc, RGB(180, 30, 30));//RGB(180, 140, 180) );	

  000b9	68 b4 1e 1e 00	 push	 1973940			; 001e1eb4H

; 559  : 				break;

  000be	eb 28		 jmp	 SHORT $LN25@LogTextPai
$LN8@LogTextPai:

; 560  : 			case 3:
; 561  : 				SetTextColor(hdc, RGB(0, 100, 0));

  000c0	68 00 64 00 00	 push	 25600			; 00006400H

; 562  : 				break;

  000c5	eb 21		 jmp	 SHORT $LN25@LogTextPai
$LN7@LogTextPai:

; 563  : 			case 4:
; 564  : 				SetTextColor(hdc, RGB(130, 170, 190));

  000c7	68 82 aa be 00	 push	 12495490		; 00beaa82H

; 565  : 				break;

  000cc	eb 1a		 jmp	 SHORT $LN25@LogTextPai
$LN6@LogTextPai:

; 566  : 			case 5:
; 567  : 				SetTextColor(hdc, RGB(155, 0, 0));

  000ce	68 9b 00 00 00	 push	 155			; 0000009bH

; 568  : 				break;

  000d3	eb 13		 jmp	 SHORT $LN25@LogTextPai
$LN5@LogTextPai:

; 569  : 			case 6:
; 570  : 				SetTextColor(hdc, RGB(0, 0, 100));

  000d5	68 00 00 64 00	 push	 6553600			; 00640000H

; 571  : 				break;

  000da	eb 0c		 jmp	 SHORT $LN25@LogTextPai
$LN4@LogTextPai:

; 572  : 			case 7:
; 573  : 				SetTextColor(hdc, RGB(210, 30, 150));

  000dc	68 d2 1e 96 00	 push	 9838290			; 00961ed2H

; 574  : 				break;

  000e1	eb 05		 jmp	 SHORT $LN25@LogTextPai
$LN3@LogTextPai:

; 575  : 			default:
; 576  : 				SetTextColor(hdc, RGB(30, 30, 30));

  000e3	68 1e 1e 1e 00	 push	 1973790			; 001e1e1eH
$LN25@LogTextPai:
  000e8	56		 push	 esi
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 577  : 				break;
; 578  : 			}
; 579  : 			if (strlen(LogText[n])>1)

  000ef	69 db 8c 00 00
	00		 imul	 ebx, 140		; 0000008cH
  000f5	8d 93 00 00 00
	00		 lea	 edx, DWORD PTR ?LogText@@3PAY0IM@DA[ebx]
  000fb	8b c2		 mov	 eax, edx
  000fd	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LL23@LogTextPai:
  00100	8a 08		 mov	 cl, BYTE PTR [eax]
  00102	40		 inc	 eax
  00103	84 c9		 test	 cl, cl
  00105	75 f9		 jne	 SHORT $LL23@LogTextPai
  00107	2b c3		 sub	 eax, ebx
  00109	83 f8 01	 cmp	 eax, 1
  0010c	76 16		 jbe	 SHORT $LN2@LogTextPai

; 580  : 			{
; 581  : 				TextOut( hdc, 10, total*15 + 110, LogText[n], strlen(LogText[n])); 

  0010e	50		 push	 eax
  0010f	52		 push	 edx
  00110	8b cf		 mov	 ecx, edi
  00112	c1 e1 04	 shl	 ecx, 4
  00115	2b cf		 sub	 ecx, edi
  00117	83 c1 6e	 add	 ecx, 110		; 0000006eH
  0011a	51		 push	 ecx
  0011b	6a 0a		 push	 10			; 0000000aH
  0011d	56		 push	 esi
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
$LN2@LogTextPai:

; 582  : 			}
; 583  : 			n--;

  00124	ff 4d d0	 dec	 DWORD PTR _n$212942[ebp]

; 584  : 			if (n<0)

  00127	79 07		 jns	 SHORT $LN1@LogTextPai

; 585  : 			{
; 586  : 				n=LOG_TEXT_LINE-1;

  00129	c7 45 d0 1d 00
	00 00		 mov	 DWORD PTR _n$212942[ebp], 29 ; 0000001dH
$LN1@LogTextPai:

; 587  : 			}
; 588  : 		}

  00130	8b 5d cc	 mov	 ebx, DWORD PTR _hWnd$GSCopy$[ebp]
  00133	e9 5a ff ff ff	 jmp	 $LL13@LogTextPai
$LN12@LogTextPai:

; 589  : 
; 590  : 		SetBkMode(hdc, iOldBkMode);

  00138	8b 55 c8	 mov	 edx, DWORD PTR _iOldBkMode$212950[ebp]
  0013b	52		 push	 edx
  0013c	56		 push	 esi
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 591  : #else
; 592  : 
; 593  : 		while(total-- != 0)
; 594  : 		{
; 595  : 			switch (LogTextViewType[n] )
; 596  : 			{
; 597  : 			case 2:
; 598  : 				SetTextColor(hdc, RGB(255, 0, 0) );	
; 599  : 				break;
; 600  : 			case 3:
; 601  : 				SetTextColor(hdc, RGB(0, 100, 0));
; 602  : 				break;
; 603  : 			case 4:
; 604  : 				SetTextColor(hdc, RGB(0, 0, 255));
; 605  : 				break;
; 606  : 			case 5:
; 607  : 				SetTextColor(hdc, RGB(155, 0, 0));
; 608  : 				break;
; 609  : 			case 6:
; 610  : 				SetTextColor(hdc, RGB(0, 0, 100));
; 611  : 				break;
; 612  : 			case 7:
; 613  : 				SetTextColor(hdc, RGB(210, 30, 150));
; 614  : 				break;
; 615  : 			default:
; 616  : 				SetTextColor(hdc, RGB(0, 0, 0));
; 617  : 				break;
; 618  : 			}
; 619  : 			if (strlen(LogText[n])>1)
; 620  : 			{
; 621  : 				TextOut( hdc, 0, total*15 + 100, LogText[n], strlen(LogText[n])); 
; 622  : 			}
; 623  : 			n--;
; 624  : 			if (n<0)
; 625  : 			{
; 626  : 				n=LOG_TEXT_LINE-1;
; 627  : 			}
; 628  : 		}
; 629  : #endif
; 630  : 
; 631  : 	ReleaseDC(hWnd, hdc);

  00143	56		 push	 esi
  00144	53		 push	 ebx
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  0014b	eb 16		 jmp	 SHORT $LN26@LogTextPai
$LN18@LogTextPai:
$LN28@LogTextPai:

; 632  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  0014d	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  00150	8b 08		 mov	 ecx, DWORD PTR [eax]
  00152	33 d2		 xor	 edx, edx
  00154	81 39 05 00 00
	c0		 cmp	 DWORD PTR [ecx], -1073741819 ; c0000005H
  0015a	0f 94 c2	 sete	 dl
  0015d	8b c2		 mov	 eax, edx
$LN24@LogTextPai:
$LN20@LogTextPai:
  0015f	c3		 ret	 0
$LN19@LogTextPai:
  00160	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]
$LN26@LogTextPai:

; 633  : 	{
; 634  : 	}

  00163	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 635  : }

  0016a	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0016d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00174	59		 pop	 ecx
  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017b	33 cd		 xor	 ecx, ebp
  0017d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c3		 ret	 0
  00186	8b ff		 npad	 2
$LN27@LogTextPai:
  00188	00 00 00 00	 DD	 $LN9@LogTextPai
  0018c	00 00 00 00	 DD	 $LN8@LogTextPai
  00190	00 00 00 00	 DD	 $LN7@LogTextPai
  00194	00 00 00 00	 DD	 $LN6@LogTextPai
  00198	00 00 00 00	 DD	 $LN5@LogTextPai
  0019c	00 00 00 00	 DD	 $LN4@LogTextPai
?LogTextPaintProc@@YAXPAUHWND__@@@Z ENDP		; LogTextPaintProc
_TEXT	ENDS
PUBLIC	?LogGetFileName@@YAHXZ				; LogGetFileName
; Function compile flags: /Ogtp
;	COMDAT ?LogGetFileName@@YAHXZ
_TEXT	SEGMENT
?LogGetFileName@@YAHXZ PROC				; LogGetFileName, COMDAT

; 639  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 640  : }

  00002	c3		 ret	 0
?LogGetFileName@@YAHXZ ENDP				; LogGetFileName
_TEXT	ENDS
PUBLIC	?LogClose@@YAXXZ				; LogClose
EXTRN	__imp__DeleteCriticalSection@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogClose@@YAXXZ DD 0fffffffeH
	DD	00H
	DD	0ffffffd8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN6@LogClose
	DD	FLAT:$LN7@LogClose
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogClose@@YAXXZ
_TEXT	SEGMENT
__$SEHRec$ = -24					; size = 24
?LogClose@@YAXXZ PROC					; LogClose, COMDAT

; 643  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogClose@@YAXXZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 08	 sub	 esp, 8
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 644  : 	__try

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 645  : 	{
; 646  : 		if (logfp!=0)

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR _logfp
  0003f	85 c0		 test	 eax, eax
  00041	74 09		 je	 SHORT $LN1@LogClose

; 647  : 		{
; 648  : 			fclose(logfp);

  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _fclose
  00049	83 c4 04	 add	 esp, 4
$LN1@LogClose:

; 649  : 		}
; 650  : 		DeleteCriticalSection(&LogCritical);

  0004c	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00057	eb 16		 jmp	 SHORT $LN11@LogClose
$LN6@LogClose:
$LN12@LogClose:

; 651  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00059	8b 45 ec	 mov	 eax, DWORD PTR __$SEHRec$[ebp+4]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	33 d2		 xor	 edx, edx
  00060	81 39 05 00 00
	c0		 cmp	 DWORD PTR [ecx], -1073741819 ; c0000005H
  00066	0f 94 c2	 sete	 dl
  00069	8b c2		 mov	 eax, edx
$LN10@LogClose:
$LN8@LogClose:
  0006b	c3		 ret	 0
$LN7@LogClose:
  0006c	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]
$LN11@LogClose:

; 652  : 	{
; 653  : 	}

  0006f	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 654  : }

  00076	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?LogClose@@YAXXZ ENDP					; LogClose
_TEXT	ENDS
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?MsgBox@@YAXPADZZ				; MsgBox
EXTRN	__imp__MessageBoxA@16:PROC
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?MsgBox@@YAXPADZZ DD 0ffffffe4H
	DD	00H
	DD	0fffffdd4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN5@MsgBox
	DD	FLAT:$LN6@MsgBox
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?MsgBox@@YAXPADZZ
_TEXT	SEGMENT
_szBuffer$213022 = -540					; size = 512
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_szlog$ = 8						; size = 4
?MsgBox@@YAXPADZZ PROC					; MsgBox, COMDAT

; 659  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?MsgBox@@YAXPADZZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	53		 push	 ebx
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	50		 push	 eax
  0002d	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 660  : 	__try

  00039	33 db		 xor	 ebx, ebx
  0003b	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 661  : 	{
; 662  : 		char szBuffer[512]="";

  0003e	88 9d e4 fd ff
	ff		 mov	 BYTE PTR _szBuffer$213022[ebp], bl
  00044	68 ff 01 00 00	 push	 511			; 000001ffH
  00049	53		 push	 ebx
  0004a	8d 85 e5 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$213022[ebp+1]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memset

; 663  : 		va_list pArguments;
; 664  : 		va_start(pArguments, szlog);
; 665  : 		vsprintf(szBuffer, szlog, pArguments);

  00056	8d 4d 0c	 lea	 ecx, DWORD PTR _szlog$[ebp+4]
  00059	51		 push	 ecx
  0005a	8b 55 08	 mov	 edx, DWORD PTR _szlog$[ebp]
  0005d	52		 push	 edx
  0005e	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$213022[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _vsprintf
  0006a	83 c4 18	 add	 esp, 24			; 00000018H

; 666  : 		va_end(pArguments);
; 667  : 		MessageBox(NULL, szBuffer, "error", MB_OK|MB_APPLMODAL);

  0006d	53		 push	 ebx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_05KKCIMGE@error?$AA@
  00073	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$213022[ebp]
  00079	51		 push	 ecx
  0007a	53		 push	 ebx
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00081	eb 17		 jmp	 SHORT $LN10@MsgBox
$LN5@MsgBox:
$LN11@MsgBox:

; 668  : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00083	8b 55 ec	 mov	 edx, DWORD PTR __$SEHRec$[ebp+4]
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	8b 00		 mov	 eax, DWORD PTR [eax]
  0008a	33 c9		 xor	 ecx, ecx
  0008c	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00091	0f 94 c1	 sete	 cl
  00094	8b c1		 mov	 eax, ecx
$LN9@MsgBox:
$LN7@MsgBox:
  00096	c3		 ret	 0
$LN6@MsgBox:
  00097	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]
$LN10@MsgBox:

; 669  : 	{
; 670  : 	}

  0009a	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 671  : }

  000a1	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000a4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ab	59		 pop	 ecx
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	33 cd		 xor	 ecx, ebp
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
?MsgBox@@YAXPADZZ ENDP					; MsgBox
_TEXT	ENDS
PUBLIC	??_C@_03MLIHNEFJ@LOG?$AA@			; `string'
PUBLIC	?LogInit@@YAXH@Z				; LogInit
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
;	COMDAT ??_C@_03MLIHNEFJ@LOG?$AA@
CONST	SEGMENT
??_C@_03MLIHNEFJ@LOG?$AA@ DB 'LOG', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?LogInit@@YAXH@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN12@LogInit
	DD	FLAT:$LN13@LogInit
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LogInit@@YAXH@Z
_TEXT	SEGMENT
_n$212742 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_logprint$ = 8						; size = 4
?LogInit@@YAXH@Z PROC					; LogInit, COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?LogInit@@YAXH@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 35   : 	CreateDirectory("LOG", NULL);

  00033	33 db		 xor	 ebx, ebx
  00035	53		 push	 ebx
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_03MLIHNEFJ@LOG?$AA@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 36   : 
; 37   : 	__try

  00041	89 5d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], ebx

; 38   : 	{
; 39   : 		int n;
; 40   : 		InitializeCriticalSection(&LogCritical);

  00044	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 41   : 
; 42   : 		// Create yes no Log
; 43   : 		if (logprint!=0)		

  0004f	39 5d 08	 cmp	 DWORD PTR _logprint$[ebp], ebx
  00052	0f 84 84 00 00
	00		 je	 $LN7@LogInit

; 44   : 		{
; 45   : 			LogAdd=LogAddFunc;

  00058	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAdd@@3P6AXPADZZA, OFFSET ?LogAddFunc@@YAXPADZZ ; LogAdd, LogAddFunc

; 46   : 			LogAddC=LogAddFuncColor;

  00062	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddC@@3P6AXEPADZZA, OFFSET ?LogAddFuncColor@@YAXEPADZZ ; LogAddC, LogAddFuncColor

; 47   : 			LogAddTD=LogAddTimeDateFunc;

  0006c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddTD@@3P6AXPADZZA, OFFSET ?LogAddTimeDateFunc@@YAXPADZZ ; LogAddTD, LogAddTimeDateFunc

; 48   : 			LogAddHeadHex=LogAddStrHexFunc;

  00076	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddHeadHex@@3P6AXPAD0H@ZA, OFFSET ?LogAddStrHexFunc@@YAXPAD0H@Z ; LogAddHeadHex, LogAddStrHexFunc

; 49   : 			LogTextPaint=LogTextPaintProc;

  00080	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogTextPaint@@3P6AXPAUHWND__@@@ZA, OFFSET ?LogTextPaintProc@@YAXPAUHWND__@@@Z ; LogTextPaint, LogTextPaintProc

; 50   : 			LogAddL=LogAddLocalFunc;

  0008a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddL@@3P6AXPADZZA, OFFSET ?LogAddLocalFunc@@YAXPADZZ ; LogAddL, LogAddLocalFunc

; 51   : 
; 52   : 			for (n=0;n<LOG_TEXT_LINE;n++)

  00094	33 f6		 xor	 esi, esi
$LN18@LogInit:
  00096	89 75 e4	 mov	 DWORD PTR _n$212742[ebp], esi
  00099	83 fe 1e	 cmp	 esi, 30			; 0000001eH
  0009c	7d 2f		 jge	 SHORT $LN4@LogInit

; 53   : 			{
; 54   : 				memset(&LogText[n],0, sizeof(LogText[0]));

  0009e	68 8c 00 00 00	 push	 140			; 0000008cH
  000a3	53		 push	 ebx
  000a4	8b c6		 mov	 eax, esi
  000a6	69 c0 8c 00 00
	00		 imul	 eax, 140		; 0000008cH
  000ac	05 00 00 00 00	 add	 eax, OFFSET ?LogText@@3PAY0IM@DA ; LogText
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _memset
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 				LogTextLength[n]=0;

  000ba	33 c9		 xor	 ecx, ecx
  000bc	66 89 0c 75 00
	00 00 00	 mov	 WORD PTR ?LogTextLength@@3PAFA[esi*2], cx

; 56   : 				LogTextViewType[n]=0;

  000c4	88 9e 00 00 00
	00		 mov	 BYTE PTR ?LogTextViewType@@3PAEA[esi], bl

; 51   : 
; 52   : 			for (n=0;n<LOG_TEXT_LINE;n++)

  000ca	46		 inc	 esi
  000cb	eb c9		 jmp	 SHORT $LN18@LogInit
$LN4@LogInit:

; 57   : 			}
; 58   : 			if (gLogOutType==0)

  000cd	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?gLogOutType@@3HA, ebx ; gLogOutType

; 59   : 			{
; 60   : 				return;

  000d3	74 52		 je	 SHORT $LN19@LogInit

; 61   : 			}
; 62   : 			else
; 63   : 			{
; 64   : 				LogDataSet();

  000d5	e8 00 00 00 00	 call	 ?LogDataSet@@YAXXZ	; LogDataSet

; 65   : 			}
; 66   : 		}
; 67   : 		else

  000da	eb 4b		 jmp	 SHORT $LN19@LogInit
$LN7@LogInit:

; 68   : 		{
; 69   : 			LogAdd=LogAddFuncVoid;

  000dc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAdd@@3P6AXPADZZA, OFFSET ?LogAddFuncVoid@@YAXPADZZ ; LogAdd, LogAddFuncVoid

; 70   : 			LogAddHeadHex=LogAddHeadHexFuncVoid;

  000e6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddHeadHex@@3P6AXPAD0H@ZA, OFFSET ?LogAddHeadHexFuncVoid@@YAXPAD0H@Z ; LogAddHeadHex, LogAddHeadHexFuncVoid

; 71   : 			LogTextPaint=LogTextPaintProcVoid;

  000f0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogTextPaint@@3P6AXPAUHWND__@@@ZA, OFFSET ?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z ; LogTextPaint, LogTextPaintProcVoid

; 72   : 			LogAddTD=LogAddTimeDateVoid;

  000fa	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddTD@@3P6AXPADZZA, OFFSET ?LogAddTimeDateVoid@@YAXPADZZ ; LogAddTD, LogAddTimeDateVoid

; 73   : 			LogAddL=LogAddLocalFuncVoid;

  00104	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddL@@3P6AXPADZZA, OFFSET ?LogAddLocalFuncVoid@@YAXPADZZ ; LogAddL, LogAddLocalFuncVoid

; 74   : 		}

  0010e	eb 17		 jmp	 SHORT $LN19@LogInit
$LN12@LogInit:
$LN20@LogInit:

; 75   : 	}__except(EXCEPTION_ACCESS_VIOLATION == GetExceptionCode())

  00110	8b 55 ec	 mov	 edx, DWORD PTR __$SEHRec$[ebp+4]
  00113	8b 02		 mov	 eax, DWORD PTR [edx]
  00115	8b 00		 mov	 eax, DWORD PTR [eax]
  00117	33 c9		 xor	 ecx, ecx
  00119	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  0011e	0f 94 c1	 sete	 cl
  00121	8b c1		 mov	 eax, ecx
$LN17@LogInit:
$LN14@LogInit:
  00123	c3		 ret	 0
$LN13@LogInit:
  00124	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]
$LN19@LogInit:

; 76   : 	{
; 77   : 	}

  00127	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 78   : }

  0012e	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00131	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00138	59		 pop	 ecx
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
?LogInit@@YAXH@Z ENDP					; LogInit
_TEXT	ENDS
PUBLIC	??_C@_06CNKIADGI@ZtTeam?$AA@			; `string'
PUBLIC	??_C@_09KBJOJFCH@WriteLogs?$AA@			; `string'
PUBLIC	??_C@_0BK@LPKPDKGD@?4?4?2Data?2ZtData?2Common?4ini?$AA@ ; `string'
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_06CNKIADGI@ZtTeam?$AA@
CONST	SEGMENT
??_C@_06CNKIADGI@ZtTeam?$AA@ DB 'ZtTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KBJOJFCH@WriteLogs?$AA@
CONST	SEGMENT
??_C@_09KBJOJFCH@WriteLogs?$AA@ DB 'WriteLogs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LPKPDKGD@?4?4?2Data?2ZtData?2Common?4ini?$AA@
CONST	SEGMENT
??_C@_0BK@LPKPDKGD@?4?4?2Data?2ZtData?2Common?4ini?$AA@ DB '..\Data\ZtDat'
	DB	'a\Common.ini', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??__EgLogOutType@@YAXXZ
text$yc	SEGMENT
??__EgLogOutType@@YAXXZ PROC				; `dynamic initializer for 'gLogOutType'', COMDAT

; 31   : int gLogOutType = GetPrivateProfileInt("ZtTeam","WriteLogs",1,CommonServer_DIR);// 1; // THIS IS NOT THE PLACE OF TTHIS VARIABLE

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@LPKPDKGD@?4?4?2Data?2ZtData?2Common?4ini?$AA@
  00005	6a 01		 push	 1
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_09KBJOJFCH@WriteLogs?$AA@
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_06CNKIADGI@ZtTeam?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?gLogOutType@@3HA, eax ; gLogOutType
  0001c	c3		 ret	 0
??__EgLogOutType@@YAXXZ ENDP				; `dynamic initializer for 'gLogOutType''
text$yc	ENDS
PUBLIC	?gLogOutType@@3HA				; gLogOutType
_BSS	SEGMENT
?gLogOutType@@3HA DD 01H DUP (?)			; gLogOutType
_BSS	ENDS
CRT$XCU	SEGMENT
_gLogOutType$initializer$ DD FLAT:??__EgLogOutType@@YAXXZ
CRT$XCU	ENDS
END
